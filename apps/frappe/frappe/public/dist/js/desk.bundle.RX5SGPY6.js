(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value2) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key2] = value2;
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key2) && key2 !== except)
          __defProp(to2, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports2, module2) {
      "use strict";
      var isArray = Array.isArray;
      var keyList = Object.keys;
      var hasProp = Object.prototype.hasOwnProperty;
      module2.exports = function equal(a2, b2) {
        if (a2 === b2)
          return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          var arrA = isArray(a2), arrB = isArray(b2), i3, length2, key2;
          if (arrA && arrB) {
            length2 = a2.length;
            if (length2 != b2.length)
              return false;
            for (i3 = length2; i3-- !== 0; )
              if (!equal(a2[i3], b2[i3]))
                return false;
            return true;
          }
          if (arrA != arrB)
            return false;
          var dateA = a2 instanceof Date, dateB = b2 instanceof Date;
          if (dateA != dateB)
            return false;
          if (dateA && dateB)
            return a2.getTime() == b2.getTime();
          var regexpA = a2 instanceof RegExp, regexpB = b2 instanceof RegExp;
          if (regexpA != regexpB)
            return false;
          if (regexpA && regexpB)
            return a2.toString() == b2.toString();
          var keys = keyList(a2);
          length2 = keys.length;
          if (length2 !== keyList(b2).length)
            return false;
          for (i3 = length2; i3-- !== 0; )
            if (!hasProp.call(b2, keys[i3]))
              return false;
          for (i3 = length2; i3-- !== 0; ) {
            key2 = keys[i3];
            if (!equal(a2[key2], b2[key2]))
              return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      };
    }
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "node_modules/lodash/_listCacheClear.js"(exports2, module2) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module2.exports = listCacheClear;
    }
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "node_modules/lodash/eq.js"(exports2, module2) {
      function eq(value2, other) {
        return value2 === other || value2 !== value2 && other !== other;
      }
      module2.exports = eq;
    }
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
      var eq = require_eq();
      function assocIndexOf(array, key2) {
        var length2 = array.length;
        while (length2--) {
          if (eq(array[length2][0], key2)) {
            return length2;
          }
        }
        return -1;
      }
      module2.exports = assocIndexOf;
    }
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key2) {
        var data = this.__data__, index = assocIndexOf(data, key2);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      module2.exports = listCacheDelete;
    }
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "node_modules/lodash/_listCacheGet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key2) {
        var data = this.__data__, index = assocIndexOf(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      module2.exports = listCacheGet;
    }
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "node_modules/lodash/_listCacheHas.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key2) {
        return assocIndexOf(this.__data__, key2) > -1;
      }
      module2.exports = listCacheHas;
    }
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "node_modules/lodash/_listCacheSet.js"(exports2, module2) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key2, value2) {
        var data = this.__data__, index = assocIndexOf(data, key2);
        if (index < 0) {
          ++this.size;
          data.push([key2, value2]);
        } else {
          data[index][1] = value2;
        }
        return this;
      }
      module2.exports = listCacheSet;
    }
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "node_modules/lodash/_ListCache.js"(exports2, module2) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module2.exports = ListCache;
    }
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "node_modules/lodash/_stackClear.js"(exports2, module2) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module2.exports = stackClear;
    }
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "node_modules/lodash/_stackDelete.js"(exports2, module2) {
      function stackDelete(key2) {
        var data = this.__data__, result = data["delete"](key2);
        this.size = data.size;
        return result;
      }
      module2.exports = stackDelete;
    }
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "node_modules/lodash/_stackGet.js"(exports2, module2) {
      function stackGet(key2) {
        return this.__data__.get(key2);
      }
      module2.exports = stackGet;
    }
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "node_modules/lodash/_stackHas.js"(exports2, module2) {
      function stackHas(key2) {
        return this.__data__.has(key2);
      }
      module2.exports = stackHas;
    }
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module2.exports = freeGlobal;
    }
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS({
    "node_modules/lodash/_root.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module2.exports = root;
    }
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "node_modules/lodash/_Symbol.js"(exports2, module2) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module2.exports = Symbol2;
    }
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "node_modules/lodash/_getRawTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value2) {
        var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
        try {
          value2[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value2);
        if (unmasked) {
          if (isOwn) {
            value2[symToStringTag] = tag;
          } else {
            delete value2[symToStringTag];
          }
        }
        return result;
      }
      module2.exports = getRawTag;
    }
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "node_modules/lodash/_objectToString.js"(exports2, module2) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value2) {
        return nativeObjectToString.call(value2);
      }
      module2.exports = objectToString;
    }
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value2) {
        if (value2 == null) {
          return value2 === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
      }
      module2.exports = baseGetTag;
    }
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "node_modules/lodash/isObject.js"(exports2, module2) {
      function isObject2(value2) {
        var type = typeof value2;
        return value2 != null && (type == "object" || type == "function");
      }
      module2.exports = isObject2;
    }
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "node_modules/lodash/isFunction.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObject2 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value2) {
        if (!isObject2(value2)) {
          return false;
        }
        var tag = baseGetTag(value2);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module2.exports = isFunction;
    }
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "node_modules/lodash/_coreJsData.js"(exports2, module2) {
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      module2.exports = coreJsData;
    }
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "node_modules/lodash/_isMasked.js"(exports2, module2) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      module2.exports = isMasked;
    }
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "node_modules/lodash/_toSource.js"(exports2, module2) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      module2.exports = toSource;
    }
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "node_modules/lodash/_baseIsNative.js"(exports2, module2) {
      var isFunction = require_isFunction();
      var isMasked = require_isMasked();
      var isObject2 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value2) {
        if (!isObject2(value2) || isMasked(value2)) {
          return false;
        }
        var pattern = isFunction(value2) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value2));
      }
      module2.exports = baseIsNative;
    }
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "node_modules/lodash/_getValue.js"(exports2, module2) {
      function getValue(object, key2) {
        return object == null ? void 0 : object[key2];
      }
      module2.exports = getValue;
    }
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "node_modules/lodash/_getNative.js"(exports2, module2) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object, key2) {
        var value2 = getValue(object, key2);
        return baseIsNative(value2) ? value2 : void 0;
      }
      module2.exports = getNative;
    }
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "node_modules/lodash/_Map.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Map2 = getNative(root, "Map");
      module2.exports = Map2;
    }
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "node_modules/lodash/_nativeCreate.js"(exports2, module2) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module2.exports = nativeCreate;
    }
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "node_modules/lodash/_hashClear.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module2.exports = hashClear;
    }
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "node_modules/lodash/_hashDelete.js"(exports2, module2) {
      function hashDelete(key2) {
        var result = this.has(key2) && delete this.__data__[key2];
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = hashDelete;
    }
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "node_modules/lodash/_hashGet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashGet(key2) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key2];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
      }
      module2.exports = hashGet;
    }
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "node_modules/lodash/_hashHas.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function hashHas(key2) {
        var data = this.__data__;
        return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
      }
      module2.exports = hashHas;
    }
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "node_modules/lodash/_hashSet.js"(exports2, module2) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key2, value2) {
        var data = this.__data__;
        this.size += this.has(key2) ? 0 : 1;
        data[key2] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED : value2;
        return this;
      }
      module2.exports = hashSet;
    }
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "node_modules/lodash/_Hash.js"(exports2, module2) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module2.exports = Hash;
    }
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module2.exports = mapCacheClear;
    }
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "node_modules/lodash/_isKeyable.js"(exports2, module2) {
      function isKeyable(value2) {
        var type = typeof value2;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
      }
      module2.exports = isKeyable;
    }
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "node_modules/lodash/_getMapData.js"(exports2, module2) {
      var isKeyable = require_isKeyable();
      function getMapData(map2, key2) {
        var data = map2.__data__;
        return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
      }
      module2.exports = getMapData;
    }
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key2) {
        var result = getMapData(this, key2)["delete"](key2);
        this.size -= result ? 1 : 0;
        return result;
      }
      module2.exports = mapCacheDelete;
    }
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheGet(key2) {
        return getMapData(this, key2).get(key2);
      }
      module2.exports = mapCacheGet;
    }
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheHas(key2) {
        return getMapData(this, key2).has(key2);
      }
      module2.exports = mapCacheHas;
    }
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
      var getMapData = require_getMapData();
      function mapCacheSet(key2, value2) {
        var data = getMapData(this, key2), size = data.size;
        data.set(key2, value2);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module2.exports = mapCacheSet;
    }
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "node_modules/lodash/_MapCache.js"(exports2, module2) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module2.exports = MapCache;
    }
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "node_modules/lodash/_stackSet.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key2, value2) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key2, value2]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key2, value2);
        this.size = data.size;
        return this;
      }
      module2.exports = stackSet;
    }
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "node_modules/lodash/_Stack.js"(exports2, module2) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      module2.exports = Stack;
    }
  });

  // node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "node_modules/lodash/_arrayEach.js"(exports2, module2) {
      function arrayEach(array, iteratee) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      module2.exports = arrayEach;
    }
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/lodash/_defineProperty.js"(exports2, module2) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e2) {
        }
      }();
      module2.exports = defineProperty;
    }
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object, key2, value2) {
        if (key2 == "__proto__" && defineProperty) {
          defineProperty(object, key2, {
            "configurable": true,
            "enumerable": true,
            "value": value2,
            "writable": true
          });
        } else {
          object[key2] = value2;
        }
      }
      module2.exports = baseAssignValue;
    }
  });

  // node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "node_modules/lodash/_assignValue.js"(exports2, module2) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function assignValue(object, key2, value2) {
        var objValue = object[key2];
        if (!(hasOwnProperty.call(object, key2) && eq(objValue, value2)) || value2 === void 0 && !(key2 in object)) {
          baseAssignValue(object, key2, value2);
        }
      }
      module2.exports = assignValue;
    }
  });

  // node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "node_modules/lodash/_copyObject.js"(exports2, module2) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length2 = props.length;
        while (++index < length2) {
          var key2 = props[index];
          var newValue = customizer ? customizer(object[key2], source[key2], key2, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key2];
          }
          if (isNew) {
            baseAssignValue(object, key2, newValue);
          } else {
            assignValue(object, key2, newValue);
          }
        }
        return object;
      }
      module2.exports = copyObject;
    }
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "node_modules/lodash/_baseTimes.js"(exports2, module2) {
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      module2.exports = baseTimes;
    }
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/lodash/isObjectLike.js"(exports2, module2) {
      function isObjectLike(value2) {
        return value2 != null && typeof value2 == "object";
      }
      module2.exports = isObjectLike;
    }
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value2) {
        return isObjectLike(value2) && baseGetTag(value2) == argsTag;
      }
      module2.exports = baseIsArguments;
    }
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/lodash/isArguments.js"(exports2, module2) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value2) {
        return isObjectLike(value2) && hasOwnProperty.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
      };
      module2.exports = isArguments;
    }
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "node_modules/lodash/isArray.js"(exports2, module2) {
      var isArray = Array.isArray;
      module2.exports = isArray;
    }
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "node_modules/lodash/stubFalse.js"(exports2, module2) {
      function stubFalse() {
        return false;
      }
      module2.exports = stubFalse;
    }
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "node_modules/lodash/isBuffer.js"(exports2, module2) {
      var root = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer = nativeIsBuffer || stubFalse;
      module2.exports = isBuffer;
    }
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/lodash/_isIndex.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value2, length2) {
        var type = typeof value2;
        length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
      }
      module2.exports = isIndex;
    }
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "node_modules/lodash/isLength.js"(exports2, module2) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value2) {
        return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
      }
      module2.exports = isLength;
    }
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value2) {
        return isObjectLike(value2) && isLength(value2.length) && !!typedArrayTags[baseGetTag(value2)];
      }
      module2.exports = baseIsTypedArray;
    }
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "node_modules/lodash/_baseUnary.js"(exports2, module2) {
      function baseUnary(func) {
        return function(value2) {
          return func(value2);
        };
      }
      module2.exports = baseUnary;
    }
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "node_modules/lodash/_nodeUtil.js"(exports2, module2) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      module2.exports = nodeUtil;
    }
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/lodash/isTypedArray.js"(exports2, module2) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module2.exports = isTypedArray;
    }
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function arrayLikeKeys(value2, inherited) {
        var isArr = isArray(value2), isArg = !isArr && isArguments(value2), isBuff = !isArr && !isArg && isBuffer(value2), isType = !isArr && !isArg && !isBuff && isTypedArray(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
        for (var key2 in value2) {
          if ((inherited || hasOwnProperty.call(value2, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length2)))) {
            result.push(key2);
          }
        }
        return result;
      }
      module2.exports = arrayLikeKeys;
    }
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "node_modules/lodash/_isPrototype.js"(exports2, module2) {
      var objectProto = Object.prototype;
      function isPrototype(value2) {
        var Ctor = value2 && value2.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value2 === proto;
      }
      module2.exports = isPrototype;
    }
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "node_modules/lodash/_overArg.js"(exports2, module2) {
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      module2.exports = overArg;
    }
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "node_modules/lodash/_nativeKeys.js"(exports2, module2) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module2.exports = nativeKeys;
    }
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "node_modules/lodash/_baseKeys.js"(exports2, module2) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key2 in Object(object)) {
          if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
            result.push(key2);
          }
        }
        return result;
      }
      module2.exports = baseKeys;
    }
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/lodash/isArrayLike.js"(exports2, module2) {
      var isFunction = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value2) {
        return value2 != null && isLength(value2.length) && !isFunction(value2);
      }
      module2.exports = isArrayLike;
    }
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "node_modules/lodash/keys.js"(exports2, module2) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module2.exports = keys;
    }
  });

  // node_modules/lodash/_baseAssign.js
  var require_baseAssign = __commonJS({
    "node_modules/lodash/_baseAssign.js"(exports2, module2) {
      var copyObject = require_copyObject();
      var keys = require_keys();
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      module2.exports = baseAssign;
    }
  });

  // node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "node_modules/lodash/_nativeKeysIn.js"(exports2, module2) {
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key2 in Object(object)) {
            result.push(key2);
          }
        }
        return result;
      }
      module2.exports = nativeKeysIn;
    }
  });

  // node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "node_modules/lodash/_baseKeysIn.js"(exports2, module2) {
      var isObject2 = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key2 in object) {
          if (!(key2 == "constructor" && (isProto || !hasOwnProperty.call(object, key2)))) {
            result.push(key2);
          }
        }
        return result;
      }
      module2.exports = baseKeysIn;
    }
  });

  // node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "node_modules/lodash/keysIn.js"(exports2, module2) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      module2.exports = keysIn;
    }
  });

  // node_modules/lodash/_baseAssignIn.js
  var require_baseAssignIn = __commonJS({
    "node_modules/lodash/_baseAssignIn.js"(exports2, module2) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      module2.exports = baseAssignIn;
    }
  });

  // node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "node_modules/lodash/_cloneBuffer.js"(exports2, module2) {
      var root = require_root();
      var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer;
    }
  });

  // node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "node_modules/lodash/_copyArray.js"(exports2, module2) {
      function copyArray(source, array) {
        var index = -1, length2 = source.length;
        array || (array = Array(length2));
        while (++index < length2) {
          array[index] = source[index];
        }
        return array;
      }
      module2.exports = copyArray;
    }
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "node_modules/lodash/_arrayFilter.js"(exports2, module2) {
      function arrayFilter(array, predicate) {
        var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length2) {
          var value2 = array[index];
          if (predicate(value2, index, array)) {
            result[resIndex++] = value2;
          }
        }
        return result;
      }
      module2.exports = arrayFilter;
    }
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "node_modules/lodash/stubArray.js"(exports2, module2) {
      function stubArray() {
        return [];
      }
      module2.exports = stubArray;
    }
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/lodash/_getSymbols.js"(exports2, module2) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      module2.exports = getSymbols;
    }
  });

  // node_modules/lodash/_copySymbols.js
  var require_copySymbols = __commonJS({
    "node_modules/lodash/_copySymbols.js"(exports2, module2) {
      var copyObject = require_copyObject();
      var getSymbols = require_getSymbols();
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      module2.exports = copySymbols;
    }
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "node_modules/lodash/_arrayPush.js"(exports2, module2) {
      function arrayPush(array, values) {
        var index = -1, length2 = values.length, offset = array.length;
        while (++index < length2) {
          array[offset + index] = values[index];
        }
        return array;
      }
      module2.exports = arrayPush;
    }
  });

  // node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "node_modules/lodash/_getPrototype.js"(exports2, module2) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module2.exports = getPrototype;
    }
  });

  // node_modules/lodash/_getSymbolsIn.js
  var require_getSymbolsIn = __commonJS({
    "node_modules/lodash/_getSymbolsIn.js"(exports2, module2) {
      var arrayPush = require_arrayPush();
      var getPrototype = require_getPrototype();
      var getSymbols = require_getSymbols();
      var stubArray = require_stubArray();
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };
      module2.exports = getSymbolsIn;
    }
  });

  // node_modules/lodash/_copySymbolsIn.js
  var require_copySymbolsIn = __commonJS({
    "node_modules/lodash/_copySymbolsIn.js"(exports2, module2) {
      var copyObject = require_copyObject();
      var getSymbolsIn = require_getSymbolsIn();
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      module2.exports = copySymbolsIn;
    }
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
      var arrayPush = require_arrayPush();
      var isArray = require_isArray();
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      module2.exports = baseGetAllKeys;
    }
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "node_modules/lodash/_getAllKeys.js"(exports2, module2) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys = require_keys();
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      module2.exports = getAllKeys;
    }
  });

  // node_modules/lodash/_getAllKeysIn.js
  var require_getAllKeysIn = __commonJS({
    "node_modules/lodash/_getAllKeysIn.js"(exports2, module2) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbolsIn = require_getSymbolsIn();
      var keysIn = require_keysIn();
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      module2.exports = getAllKeysIn;
    }
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "node_modules/lodash/_DataView.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var DataView = getNative(root, "DataView");
      module2.exports = DataView;
    }
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "node_modules/lodash/_Promise.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Promise2 = getNative(root, "Promise");
      module2.exports = Promise2;
    }
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "node_modules/lodash/_Set.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var Set2 = getNative(root, "Set");
      module2.exports = Set2;
    }
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "node_modules/lodash/_WeakMap.js"(exports2, module2) {
      var getNative = require_getNative();
      var root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      module2.exports = WeakMap2;
    }
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "node_modules/lodash/_getTag.js"(exports2, module2) {
      var DataView = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value2) {
          var result = baseGetTag(value2), Ctor = result == objectTag ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module2.exports = getTag;
    }
  });

  // node_modules/lodash/_initCloneArray.js
  var require_initCloneArray = __commonJS({
    "node_modules/lodash/_initCloneArray.js"(exports2, module2) {
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      function initCloneArray(array) {
        var length2 = array.length, result = new array.constructor(length2);
        if (length2 && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
      module2.exports = initCloneArray;
    }
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "node_modules/lodash/_Uint8Array.js"(exports2, module2) {
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      module2.exports = Uint8Array2;
    }
  });

  // node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "node_modules/lodash/_cloneArrayBuffer.js"(exports2, module2) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      module2.exports = cloneArrayBuffer;
    }
  });

  // node_modules/lodash/_cloneDataView.js
  var require_cloneDataView = __commonJS({
    "node_modules/lodash/_cloneDataView.js"(exports2, module2) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      module2.exports = cloneDataView;
    }
  });

  // node_modules/lodash/_cloneRegExp.js
  var require_cloneRegExp = __commonJS({
    "node_modules/lodash/_cloneRegExp.js"(exports2, module2) {
      var reFlags = /\w*$/;
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
      module2.exports = cloneRegExp;
    }
  });

  // node_modules/lodash/_cloneSymbol.js
  var require_cloneSymbol = __commonJS({
    "node_modules/lodash/_cloneSymbol.js"(exports2, module2) {
      var Symbol2 = require_Symbol();
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }
      module2.exports = cloneSymbol;
    }
  });

  // node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "node_modules/lodash/_cloneTypedArray.js"(exports2, module2) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      module2.exports = cloneTypedArray;
    }
  });

  // node_modules/lodash/_initCloneByTag.js
  var require_initCloneByTag = __commonJS({
    "node_modules/lodash/_initCloneByTag.js"(exports2, module2) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      var cloneDataView = require_cloneDataView();
      var cloneRegExp = require_cloneRegExp();
      var cloneSymbol = require_cloneSymbol();
      var cloneTypedArray = require_cloneTypedArray();
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      module2.exports = initCloneByTag;
    }
  });

  // node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "node_modules/lodash/_baseCreate.js"(exports2, module2) {
      var isObject2 = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject2(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      module2.exports = baseCreate;
    }
  });

  // node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "node_modules/lodash/_initCloneObject.js"(exports2, module2) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      module2.exports = initCloneObject;
    }
  });

  // node_modules/lodash/_baseIsMap.js
  var require_baseIsMap = __commonJS({
    "node_modules/lodash/_baseIsMap.js"(exports2, module2) {
      var getTag = require_getTag();
      var isObjectLike = require_isObjectLike();
      var mapTag = "[object Map]";
      function baseIsMap(value2) {
        return isObjectLike(value2) && getTag(value2) == mapTag;
      }
      module2.exports = baseIsMap;
    }
  });

  // node_modules/lodash/isMap.js
  var require_isMap = __commonJS({
    "node_modules/lodash/isMap.js"(exports2, module2) {
      var baseIsMap = require_baseIsMap();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsMap = nodeUtil && nodeUtil.isMap;
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      module2.exports = isMap;
    }
  });

  // node_modules/lodash/_baseIsSet.js
  var require_baseIsSet = __commonJS({
    "node_modules/lodash/_baseIsSet.js"(exports2, module2) {
      var getTag = require_getTag();
      var isObjectLike = require_isObjectLike();
      var setTag = "[object Set]";
      function baseIsSet(value2) {
        return isObjectLike(value2) && getTag(value2) == setTag;
      }
      module2.exports = baseIsSet;
    }
  });

  // node_modules/lodash/isSet.js
  var require_isSet = __commonJS({
    "node_modules/lodash/isSet.js"(exports2, module2) {
      var baseIsSet = require_baseIsSet();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsSet = nodeUtil && nodeUtil.isSet;
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      module2.exports = isSet;
    }
  });

  // node_modules/lodash/_baseClone.js
  var require_baseClone = __commonJS({
    "node_modules/lodash/_baseClone.js"(exports2, module2) {
      var Stack = require_Stack();
      var arrayEach = require_arrayEach();
      var assignValue = require_assignValue();
      var baseAssign = require_baseAssign();
      var baseAssignIn = require_baseAssignIn();
      var cloneBuffer = require_cloneBuffer();
      var copyArray = require_copyArray();
      var copySymbols = require_copySymbols();
      var copySymbolsIn = require_copySymbolsIn();
      var getAllKeys = require_getAllKeys();
      var getAllKeysIn = require_getAllKeysIn();
      var getTag = require_getTag();
      var initCloneArray = require_initCloneArray();
      var initCloneByTag = require_initCloneByTag();
      var initCloneObject = require_initCloneObject();
      var isArray = require_isArray();
      var isBuffer = require_isBuffer();
      var isMap = require_isMap();
      var isObject2 = require_isObject();
      var isSet = require_isSet();
      var keys = require_keys();
      var keysIn = require_keysIn();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_FLAT_FLAG = 2;
      var CLONE_SYMBOLS_FLAG = 4;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      function baseClone(value2, bitmask, customizer, key2, object, stack) {
        var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result = object ? customizer(value2, key2, object, stack) : customizer(value2);
        }
        if (result !== void 0) {
          return result;
        }
        if (!isObject2(value2)) {
          return value2;
        }
        var isArr = isArray(value2);
        if (isArr) {
          result = initCloneArray(value2);
          if (!isDeep) {
            return copyArray(value2, result);
          }
        } else {
          var tag = getTag(value2), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value2)) {
            return cloneBuffer(value2, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value2);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value2 : {};
            }
            result = initCloneByTag(value2, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value2);
        if (stacked) {
          return stacked;
        }
        stack.set(value2, result);
        if (isSet(value2)) {
          value2.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value2, stack));
          });
        } else if (isMap(value2)) {
          value2.forEach(function(subValue, key3) {
            result.set(key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? void 0 : keysFunc(value2);
        arrayEach(props || value2, function(subValue, key3) {
          if (props) {
            key3 = subValue;
            subValue = value2[key3];
          }
          assignValue(result, key3, baseClone(subValue, bitmask, customizer, key3, value2, stack));
        });
        return result;
      }
      module2.exports = baseClone;
    }
  });

  // node_modules/lodash/cloneDeepWith.js
  var require_cloneDeepWith = __commonJS({
    "node_modules/lodash/cloneDeepWith.js"(exports2, module2) {
      var baseClone = require_baseClone();
      var CLONE_DEEP_FLAG = 1;
      var CLONE_SYMBOLS_FLAG = 4;
      function cloneDeepWith2(value2, customizer) {
        customizer = typeof customizer == "function" ? customizer : void 0;
        return baseClone(value2, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      module2.exports = cloneDeepWith2;
    }
  });

  // node_modules/crypt/crypt.js
  var require_crypt = __commonJS({
    "node_modules/crypt/crypt.js"(exports2, module2) {
      (function() {
        var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt = {
          rotl: function(n2, b2) {
            return n2 << b2 | n2 >>> 32 - b2;
          },
          rotr: function(n2, b2) {
            return n2 << 32 - b2 | n2 >>> b2;
          },
          endian: function(n2) {
            if (n2.constructor == Number) {
              return crypt.rotl(n2, 8) & 16711935 | crypt.rotl(n2, 24) & 4278255360;
            }
            for (var i3 = 0; i3 < n2.length; i3++)
              n2[i3] = crypt.endian(n2[i3]);
            return n2;
          },
          randomBytes: function(n2) {
            for (var bytes = []; n2 > 0; n2--)
              bytes.push(Math.floor(Math.random() * 256));
            return bytes;
          },
          bytesToWords: function(bytes) {
            for (var words = [], i3 = 0, b2 = 0; i3 < bytes.length; i3++, b2 += 8)
              words[b2 >>> 5] |= bytes[i3] << 24 - b2 % 32;
            return words;
          },
          wordsToBytes: function(words) {
            for (var bytes = [], b2 = 0; b2 < words.length * 32; b2 += 8)
              bytes.push(words[b2 >>> 5] >>> 24 - b2 % 32 & 255);
            return bytes;
          },
          bytesToHex: function(bytes) {
            for (var hex = [], i3 = 0; i3 < bytes.length; i3++) {
              hex.push((bytes[i3] >>> 4).toString(16));
              hex.push((bytes[i3] & 15).toString(16));
            }
            return hex.join("");
          },
          hexToBytes: function(hex) {
            for (var bytes = [], c2 = 0; c2 < hex.length; c2 += 2)
              bytes.push(parseInt(hex.substr(c2, 2), 16));
            return bytes;
          },
          bytesToBase64: function(bytes) {
            for (var base64 = [], i3 = 0; i3 < bytes.length; i3 += 3) {
              var triplet = bytes[i3] << 16 | bytes[i3 + 1] << 8 | bytes[i3 + 2];
              for (var j3 = 0; j3 < 4; j3++)
                if (i3 * 8 + j3 * 6 <= bytes.length * 8)
                  base64.push(base64map.charAt(triplet >>> 6 * (3 - j3) & 63));
                else
                  base64.push("=");
            }
            return base64.join("");
          },
          base64ToBytes: function(base64) {
            base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
            for (var bytes = [], i3 = 0, imod4 = 0; i3 < base64.length; imod4 = ++i3 % 4) {
              if (imod4 == 0)
                continue;
              bytes.push((base64map.indexOf(base64.charAt(i3 - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i3)) >>> 6 - imod4 * 2);
            }
            return bytes;
          }
        };
        module2.exports = crypt;
      })();
    }
  });

  // node_modules/charenc/charenc.js
  var require_charenc = __commonJS({
    "node_modules/charenc/charenc.js"(exports2, module2) {
      var charenc = {
        utf8: {
          stringToBytes: function(str) {
            return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
          },
          bytesToString: function(bytes) {
            return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
          }
        },
        bin: {
          stringToBytes: function(str) {
            for (var bytes = [], i3 = 0; i3 < str.length; i3++)
              bytes.push(str.charCodeAt(i3) & 255);
            return bytes;
          },
          bytesToString: function(bytes) {
            for (var str = [], i3 = 0; i3 < bytes.length; i3++)
              str.push(String.fromCharCode(bytes[i3]));
            return str.join("");
          }
        }
      };
      module2.exports = charenc;
    }
  });

  // node_modules/is-buffer/index.js
  var require_is_buffer = __commonJS({
    "node_modules/is-buffer/index.js"(exports2, module2) {
      module2.exports = function(obj) {
        return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
      };
      function isBuffer(obj) {
        return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      }
      function isSlowBuffer(obj) {
        return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
      }
    }
  });

  // node_modules/md5/md5.js
  var require_md5 = __commonJS({
    "node_modules/md5/md5.js"(exports2, module2) {
      (function() {
        var crypt = require_crypt(), utf8 = require_charenc().utf8, isBuffer = require_is_buffer(), bin = require_charenc().bin, md52 = function(message, options) {
          if (message.constructor == String)
            if (options && options.encoding === "binary")
              message = bin.stringToBytes(message);
            else
              message = utf8.stringToBytes(message);
          else if (isBuffer(message))
            message = Array.prototype.slice.call(message, 0);
          else if (!Array.isArray(message) && message.constructor !== Uint8Array)
            message = message.toString();
          var m3 = crypt.bytesToWords(message), l2 = message.length * 8, a2 = 1732584193, b2 = -271733879, c2 = -1732584194, d3 = 271733878;
          for (var i3 = 0; i3 < m3.length; i3++) {
            m3[i3] = (m3[i3] << 8 | m3[i3] >>> 24) & 16711935 | (m3[i3] << 24 | m3[i3] >>> 8) & 4278255360;
          }
          m3[l2 >>> 5] |= 128 << l2 % 32;
          m3[(l2 + 64 >>> 9 << 4) + 14] = l2;
          var FF = md52._ff, GG = md52._gg, HH = md52._hh, II = md52._ii;
          for (var i3 = 0; i3 < m3.length; i3 += 16) {
            var aa = a2, bb = b2, cc = c2, dd = d3;
            a2 = FF(a2, b2, c2, d3, m3[i3 + 0], 7, -680876936);
            d3 = FF(d3, a2, b2, c2, m3[i3 + 1], 12, -389564586);
            c2 = FF(c2, d3, a2, b2, m3[i3 + 2], 17, 606105819);
            b2 = FF(b2, c2, d3, a2, m3[i3 + 3], 22, -1044525330);
            a2 = FF(a2, b2, c2, d3, m3[i3 + 4], 7, -176418897);
            d3 = FF(d3, a2, b2, c2, m3[i3 + 5], 12, 1200080426);
            c2 = FF(c2, d3, a2, b2, m3[i3 + 6], 17, -1473231341);
            b2 = FF(b2, c2, d3, a2, m3[i3 + 7], 22, -45705983);
            a2 = FF(a2, b2, c2, d3, m3[i3 + 8], 7, 1770035416);
            d3 = FF(d3, a2, b2, c2, m3[i3 + 9], 12, -1958414417);
            c2 = FF(c2, d3, a2, b2, m3[i3 + 10], 17, -42063);
            b2 = FF(b2, c2, d3, a2, m3[i3 + 11], 22, -1990404162);
            a2 = FF(a2, b2, c2, d3, m3[i3 + 12], 7, 1804603682);
            d3 = FF(d3, a2, b2, c2, m3[i3 + 13], 12, -40341101);
            c2 = FF(c2, d3, a2, b2, m3[i3 + 14], 17, -1502002290);
            b2 = FF(b2, c2, d3, a2, m3[i3 + 15], 22, 1236535329);
            a2 = GG(a2, b2, c2, d3, m3[i3 + 1], 5, -165796510);
            d3 = GG(d3, a2, b2, c2, m3[i3 + 6], 9, -1069501632);
            c2 = GG(c2, d3, a2, b2, m3[i3 + 11], 14, 643717713);
            b2 = GG(b2, c2, d3, a2, m3[i3 + 0], 20, -373897302);
            a2 = GG(a2, b2, c2, d3, m3[i3 + 5], 5, -701558691);
            d3 = GG(d3, a2, b2, c2, m3[i3 + 10], 9, 38016083);
            c2 = GG(c2, d3, a2, b2, m3[i3 + 15], 14, -660478335);
            b2 = GG(b2, c2, d3, a2, m3[i3 + 4], 20, -405537848);
            a2 = GG(a2, b2, c2, d3, m3[i3 + 9], 5, 568446438);
            d3 = GG(d3, a2, b2, c2, m3[i3 + 14], 9, -1019803690);
            c2 = GG(c2, d3, a2, b2, m3[i3 + 3], 14, -187363961);
            b2 = GG(b2, c2, d3, a2, m3[i3 + 8], 20, 1163531501);
            a2 = GG(a2, b2, c2, d3, m3[i3 + 13], 5, -1444681467);
            d3 = GG(d3, a2, b2, c2, m3[i3 + 2], 9, -51403784);
            c2 = GG(c2, d3, a2, b2, m3[i3 + 7], 14, 1735328473);
            b2 = GG(b2, c2, d3, a2, m3[i3 + 12], 20, -1926607734);
            a2 = HH(a2, b2, c2, d3, m3[i3 + 5], 4, -378558);
            d3 = HH(d3, a2, b2, c2, m3[i3 + 8], 11, -2022574463);
            c2 = HH(c2, d3, a2, b2, m3[i3 + 11], 16, 1839030562);
            b2 = HH(b2, c2, d3, a2, m3[i3 + 14], 23, -35309556);
            a2 = HH(a2, b2, c2, d3, m3[i3 + 1], 4, -1530992060);
            d3 = HH(d3, a2, b2, c2, m3[i3 + 4], 11, 1272893353);
            c2 = HH(c2, d3, a2, b2, m3[i3 + 7], 16, -155497632);
            b2 = HH(b2, c2, d3, a2, m3[i3 + 10], 23, -1094730640);
            a2 = HH(a2, b2, c2, d3, m3[i3 + 13], 4, 681279174);
            d3 = HH(d3, a2, b2, c2, m3[i3 + 0], 11, -358537222);
            c2 = HH(c2, d3, a2, b2, m3[i3 + 3], 16, -722521979);
            b2 = HH(b2, c2, d3, a2, m3[i3 + 6], 23, 76029189);
            a2 = HH(a2, b2, c2, d3, m3[i3 + 9], 4, -640364487);
            d3 = HH(d3, a2, b2, c2, m3[i3 + 12], 11, -421815835);
            c2 = HH(c2, d3, a2, b2, m3[i3 + 15], 16, 530742520);
            b2 = HH(b2, c2, d3, a2, m3[i3 + 2], 23, -995338651);
            a2 = II(a2, b2, c2, d3, m3[i3 + 0], 6, -198630844);
            d3 = II(d3, a2, b2, c2, m3[i3 + 7], 10, 1126891415);
            c2 = II(c2, d3, a2, b2, m3[i3 + 14], 15, -1416354905);
            b2 = II(b2, c2, d3, a2, m3[i3 + 5], 21, -57434055);
            a2 = II(a2, b2, c2, d3, m3[i3 + 12], 6, 1700485571);
            d3 = II(d3, a2, b2, c2, m3[i3 + 3], 10, -1894986606);
            c2 = II(c2, d3, a2, b2, m3[i3 + 10], 15, -1051523);
            b2 = II(b2, c2, d3, a2, m3[i3 + 1], 21, -2054922799);
            a2 = II(a2, b2, c2, d3, m3[i3 + 8], 6, 1873313359);
            d3 = II(d3, a2, b2, c2, m3[i3 + 15], 10, -30611744);
            c2 = II(c2, d3, a2, b2, m3[i3 + 6], 15, -1560198380);
            b2 = II(b2, c2, d3, a2, m3[i3 + 13], 21, 1309151649);
            a2 = II(a2, b2, c2, d3, m3[i3 + 4], 6, -145523070);
            d3 = II(d3, a2, b2, c2, m3[i3 + 11], 10, -1120210379);
            c2 = II(c2, d3, a2, b2, m3[i3 + 2], 15, 718787259);
            b2 = II(b2, c2, d3, a2, m3[i3 + 9], 21, -343485551);
            a2 = a2 + aa >>> 0;
            b2 = b2 + bb >>> 0;
            c2 = c2 + cc >>> 0;
            d3 = d3 + dd >>> 0;
          }
          return crypt.endian([a2, b2, c2, d3]);
        };
        md52._ff = function(a2, b2, c2, d3, x2, s2, t3) {
          var n2 = a2 + (b2 & c2 | ~b2 & d3) + (x2 >>> 0) + t3;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        };
        md52._gg = function(a2, b2, c2, d3, x2, s2, t3) {
          var n2 = a2 + (b2 & d3 | c2 & ~d3) + (x2 >>> 0) + t3;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        };
        md52._hh = function(a2, b2, c2, d3, x2, s2, t3) {
          var n2 = a2 + (b2 ^ c2 ^ d3) + (x2 >>> 0) + t3;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        };
        md52._ii = function(a2, b2, c2, d3, x2, s2, t3) {
          var n2 = a2 + (c2 ^ (b2 | ~d3)) + (x2 >>> 0) + t3;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        };
        md52._blocksize = 16;
        md52._digestsize = 16;
        module2.exports = function(message, options) {
          if (message === void 0 || message === null)
            throw new Error("Illegal argument " + message);
          var digestbytes = crypt.wordsToBytes(md52(message, options));
          return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
        };
      })();
    }
  });

  // node_modules/showdown/dist/showdown.js
  var require_showdown = __commonJS({
    "node_modules/showdown/dist/showdown.js"(exports2, module2) {
      (function() {
        function getDefaultOpts(simple) {
          "use strict";
          var defaultOptions = {
            omitExtraWLInCodeBlocks: {
              defaultValue: false,
              describe: "Omit the default extra whiteline added to code blocks",
              type: "boolean"
            },
            noHeaderId: {
              defaultValue: false,
              describe: "Turn on/off generated header id",
              type: "boolean"
            },
            prefixHeaderId: {
              defaultValue: false,
              describe: "Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",
              type: "string"
            },
            rawPrefixHeaderId: {
              defaultValue: false,
              describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
              type: "boolean"
            },
            ghCompatibleHeaderId: {
              defaultValue: false,
              describe: "Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",
              type: "boolean"
            },
            rawHeaderId: {
              defaultValue: false,
              describe: `Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,
              type: "boolean"
            },
            headerLevelStart: {
              defaultValue: false,
              describe: "The header blocks level start",
              type: "integer"
            },
            parseImgDimensions: {
              defaultValue: false,
              describe: "Turn on/off image dimension parsing",
              type: "boolean"
            },
            simplifiedAutoLink: {
              defaultValue: false,
              describe: "Turn on/off GFM autolink style",
              type: "boolean"
            },
            excludeTrailingPunctuationFromURLs: {
              defaultValue: false,
              describe: "Excludes trailing punctuation from links generated with autoLinking",
              type: "boolean"
            },
            literalMidWordUnderscores: {
              defaultValue: false,
              describe: "Parse midword underscores as literal underscores",
              type: "boolean"
            },
            literalMidWordAsterisks: {
              defaultValue: false,
              describe: "Parse midword asterisks as literal asterisks",
              type: "boolean"
            },
            strikethrough: {
              defaultValue: false,
              describe: "Turn on/off strikethrough support",
              type: "boolean"
            },
            tables: {
              defaultValue: false,
              describe: "Turn on/off tables support",
              type: "boolean"
            },
            tablesHeaderId: {
              defaultValue: false,
              describe: "Add an id to table headers",
              type: "boolean"
            },
            ghCodeBlocks: {
              defaultValue: true,
              describe: "Turn on/off GFM fenced code blocks support",
              type: "boolean"
            },
            tasklists: {
              defaultValue: false,
              describe: "Turn on/off GFM tasklist support",
              type: "boolean"
            },
            smoothLivePreview: {
              defaultValue: false,
              describe: "Prevents weird effects in live previews due to incomplete input",
              type: "boolean"
            },
            smartIndentationFix: {
              defaultValue: false,
              describe: "Tries to smartly fix indentation in es6 strings",
              type: "boolean"
            },
            disableForced4SpacesIndentedSublists: {
              defaultValue: false,
              describe: "Disables the requirement of indenting nested sublists by 4 spaces",
              type: "boolean"
            },
            simpleLineBreaks: {
              defaultValue: false,
              describe: "Parses simple line breaks as <br> (GFM Style)",
              type: "boolean"
            },
            requireSpaceBeforeHeadingText: {
              defaultValue: false,
              describe: "Makes adding a space between `#` and the header text mandatory (GFM Style)",
              type: "boolean"
            },
            ghMentions: {
              defaultValue: false,
              describe: "Enables github @mentions",
              type: "boolean"
            },
            ghMentionsLink: {
              defaultValue: "https://github.com/{u}",
              describe: "Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",
              type: "string"
            },
            encodeEmails: {
              defaultValue: true,
              describe: "Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",
              type: "boolean"
            },
            openLinksInNewWindow: {
              defaultValue: false,
              describe: "Open all links in new windows",
              type: "boolean"
            },
            backslashEscapesHTMLTags: {
              defaultValue: false,
              describe: "Support for HTML Tag escaping. ex: <div>foo</div>",
              type: "boolean"
            },
            emoji: {
              defaultValue: false,
              describe: "Enable emoji support. Ex: `this is a :smile: emoji`",
              type: "boolean"
            },
            underline: {
              defaultValue: false,
              describe: "Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",
              type: "boolean"
            },
            ellipsis: {
              defaultValue: true,
              describe: "Replaces three dots with the ellipsis unicode character",
              type: "boolean"
            },
            completeHTMLDocument: {
              defaultValue: false,
              describe: "Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",
              type: "boolean"
            },
            metadata: {
              defaultValue: false,
              describe: "Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",
              type: "boolean"
            },
            splitAdjacentBlockquotes: {
              defaultValue: false,
              describe: "Split adjacent blockquote blocks",
              type: "boolean"
            }
          };
          if (simple === false) {
            return JSON.parse(JSON.stringify(defaultOptions));
          }
          var ret = {};
          for (var opt in defaultOptions) {
            if (defaultOptions.hasOwnProperty(opt)) {
              ret[opt] = defaultOptions[opt].defaultValue;
            }
          }
          return ret;
        }
        function allOptionsOn() {
          "use strict";
          var options = getDefaultOpts(true), ret = {};
          for (var opt in options) {
            if (options.hasOwnProperty(opt)) {
              ret[opt] = true;
            }
          }
          return ret;
        }
        var showdown2 = {}, parsers = {}, extensions = {}, globalOptions = getDefaultOpts(true), setFlavor = "vanilla", flavor = {
          github: {
            omitExtraWLInCodeBlocks: true,
            simplifiedAutoLink: true,
            excludeTrailingPunctuationFromURLs: true,
            literalMidWordUnderscores: true,
            strikethrough: true,
            tables: true,
            tablesHeaderId: true,
            ghCodeBlocks: true,
            tasklists: true,
            disableForced4SpacesIndentedSublists: true,
            simpleLineBreaks: true,
            requireSpaceBeforeHeadingText: true,
            ghCompatibleHeaderId: true,
            ghMentions: true,
            backslashEscapesHTMLTags: true,
            emoji: true,
            splitAdjacentBlockquotes: true
          },
          original: {
            noHeaderId: true,
            ghCodeBlocks: false
          },
          ghost: {
            omitExtraWLInCodeBlocks: true,
            parseImgDimensions: true,
            simplifiedAutoLink: true,
            excludeTrailingPunctuationFromURLs: true,
            literalMidWordUnderscores: true,
            strikethrough: true,
            tables: true,
            tablesHeaderId: true,
            ghCodeBlocks: true,
            tasklists: true,
            smoothLivePreview: true,
            simpleLineBreaks: true,
            requireSpaceBeforeHeadingText: true,
            ghMentions: false,
            encodeEmails: true
          },
          vanilla: getDefaultOpts(true),
          allOn: allOptionsOn()
        };
        showdown2.helper = {};
        showdown2.extensions = {};
        showdown2.setOption = function(key2, value2) {
          "use strict";
          globalOptions[key2] = value2;
          return this;
        };
        showdown2.getOption = function(key2) {
          "use strict";
          return globalOptions[key2];
        };
        showdown2.getOptions = function() {
          "use strict";
          return globalOptions;
        };
        showdown2.resetOptions = function() {
          "use strict";
          globalOptions = getDefaultOpts(true);
        };
        showdown2.setFlavor = function(name2) {
          "use strict";
          if (!flavor.hasOwnProperty(name2)) {
            throw Error(name2 + " flavor was not found");
          }
          showdown2.resetOptions();
          var preset = flavor[name2];
          setFlavor = name2;
          for (var option in preset) {
            if (preset.hasOwnProperty(option)) {
              globalOptions[option] = preset[option];
            }
          }
        };
        showdown2.getFlavor = function() {
          "use strict";
          return setFlavor;
        };
        showdown2.getFlavorOptions = function(name2) {
          "use strict";
          if (flavor.hasOwnProperty(name2)) {
            return flavor[name2];
          }
        };
        showdown2.getDefaultOptions = function(simple) {
          "use strict";
          return getDefaultOpts(simple);
        };
        showdown2.subParser = function(name2, func) {
          "use strict";
          if (showdown2.helper.isString(name2)) {
            if (typeof func !== "undefined") {
              parsers[name2] = func;
            } else {
              if (parsers.hasOwnProperty(name2)) {
                return parsers[name2];
              } else {
                throw Error("SubParser named " + name2 + " not registered!");
              }
            }
          }
        };
        showdown2.extension = function(name2, ext) {
          "use strict";
          if (!showdown2.helper.isString(name2)) {
            throw Error("Extension 'name' must be a string");
          }
          name2 = showdown2.helper.stdExtName(name2);
          if (showdown2.helper.isUndefined(ext)) {
            if (!extensions.hasOwnProperty(name2)) {
              throw Error("Extension named " + name2 + " is not registered!");
            }
            return extensions[name2];
          } else {
            if (typeof ext === "function") {
              ext = ext();
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var validExtension = validate(ext, name2);
            if (validExtension.valid) {
              extensions[name2] = ext;
            } else {
              throw Error(validExtension.error);
            }
          }
        };
        showdown2.getAllExtensions = function() {
          "use strict";
          return extensions;
        };
        showdown2.removeExtension = function(name2) {
          "use strict";
          delete extensions[name2];
        };
        showdown2.resetExtensions = function() {
          "use strict";
          extensions = {};
        };
        function validate(extension, name2) {
          "use strict";
          var errMsg = name2 ? "Error in " + name2 + " extension->" : "Error in unnamed extension", ret = {
            valid: true,
            error: ""
          };
          if (!showdown2.helper.isArray(extension)) {
            extension = [extension];
          }
          for (var i3 = 0; i3 < extension.length; ++i3) {
            var baseMsg = errMsg + " sub-extension " + i3 + ": ", ext = extension[i3];
            if (typeof ext !== "object") {
              ret.valid = false;
              ret.error = baseMsg + "must be an object, but " + typeof ext + " given";
              return ret;
            }
            if (!showdown2.helper.isString(ext.type)) {
              ret.valid = false;
              ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + " given";
              return ret;
            }
            var type = ext.type = ext.type.toLowerCase();
            if (type === "language") {
              type = ext.type = "lang";
            }
            if (type === "html") {
              type = ext.type = "output";
            }
            if (type !== "lang" && type !== "output" && type !== "listener") {
              ret.valid = false;
              ret.error = baseMsg + "type " + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
              return ret;
            }
            if (type === "listener") {
              if (showdown2.helper.isUndefined(ext.listeners)) {
                ret.valid = false;
                ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
                return ret;
              }
            } else {
              if (showdown2.helper.isUndefined(ext.filter) && showdown2.helper.isUndefined(ext.regex)) {
                ret.valid = false;
                ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
                return ret;
              }
            }
            if (ext.listeners) {
              if (typeof ext.listeners !== "object") {
                ret.valid = false;
                ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + " given";
                return ret;
              }
              for (var ln in ext.listeners) {
                if (ext.listeners.hasOwnProperty(ln)) {
                  if (typeof ext.listeners[ln] !== "function") {
                    ret.valid = false;
                    ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln + " must be a function but " + typeof ext.listeners[ln] + " given";
                    return ret;
                  }
                }
              }
            }
            if (ext.filter) {
              if (typeof ext.filter !== "function") {
                ret.valid = false;
                ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + " given";
                return ret;
              }
            } else if (ext.regex) {
              if (showdown2.helper.isString(ext.regex)) {
                ext.regex = new RegExp(ext.regex, "g");
              }
              if (!(ext.regex instanceof RegExp)) {
                ret.valid = false;
                ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + " given";
                return ret;
              }
              if (showdown2.helper.isUndefined(ext.replace)) {
                ret.valid = false;
                ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
                return ret;
              }
            }
          }
          return ret;
        }
        showdown2.validateExtension = function(ext) {
          "use strict";
          var validateExtension = validate(ext, null);
          if (!validateExtension.valid) {
            console.warn(validateExtension.error);
            return false;
          }
          return true;
        };
        if (!showdown2.hasOwnProperty("helper")) {
          showdown2.helper = {};
        }
        showdown2.helper.isString = function(a2) {
          "use strict";
          return typeof a2 === "string" || a2 instanceof String;
        };
        showdown2.helper.isFunction = function(a2) {
          "use strict";
          var getType = {};
          return a2 && getType.toString.call(a2) === "[object Function]";
        };
        showdown2.helper.isArray = function(a2) {
          "use strict";
          return Array.isArray(a2);
        };
        showdown2.helper.isUndefined = function(value2) {
          "use strict";
          return typeof value2 === "undefined";
        };
        showdown2.helper.forEach = function(obj, callback) {
          "use strict";
          if (showdown2.helper.isUndefined(obj)) {
            throw new Error("obj param is required");
          }
          if (showdown2.helper.isUndefined(callback)) {
            throw new Error("callback param is required");
          }
          if (!showdown2.helper.isFunction(callback)) {
            throw new Error("callback param must be a function/closure");
          }
          if (typeof obj.forEach === "function") {
            obj.forEach(callback);
          } else if (showdown2.helper.isArray(obj)) {
            for (var i3 = 0; i3 < obj.length; i3++) {
              callback(obj[i3], i3, obj);
            }
          } else if (typeof obj === "object") {
            for (var prop in obj) {
              if (obj.hasOwnProperty(prop)) {
                callback(obj[prop], prop, obj);
              }
            }
          } else {
            throw new Error("obj does not seem to be an array or an iterable object");
          }
        };
        showdown2.helper.stdExtName = function(s2) {
          "use strict";
          return s2.replace(/[_?*+\/\\.^-]/g, "").replace(/\s/g, "").toLowerCase();
        };
        function escapeCharactersCallback(wholeMatch, m1) {
          "use strict";
          var charCodeToEscape = m1.charCodeAt(0);
          return "\xA8E" + charCodeToEscape + "E";
        }
        showdown2.helper.escapeCharactersCallback = escapeCharactersCallback;
        showdown2.helper.escapeCharacters = function(text, charsToEscape, afterBackslash) {
          "use strict";
          var regexString = "([" + charsToEscape.replace(/([\[\]\\])/g, "\\$1") + "])";
          if (afterBackslash) {
            regexString = "\\\\" + regexString;
          }
          var regex = new RegExp(regexString, "g");
          text = text.replace(regex, escapeCharactersCallback);
          return text;
        };
        showdown2.helper.unescapeHTMLEntities = function(txt2) {
          "use strict";
          return txt2.replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
        };
        var rgxFindMatchPos = function(str, left, right, flags) {
          "use strict";
          var f3 = flags || "", g2 = f3.indexOf("g") > -1, x2 = new RegExp(left + "|" + right, "g" + f3.replace(/g/g, "")), l2 = new RegExp(left, f3.replace(/g/g, "")), pos = [], t3, s2, m3, start, end;
          do {
            t3 = 0;
            while (m3 = x2.exec(str)) {
              if (l2.test(m3[0])) {
                if (!t3++) {
                  s2 = x2.lastIndex;
                  start = s2 - m3[0].length;
                }
              } else if (t3) {
                if (!--t3) {
                  end = m3.index + m3[0].length;
                  var obj = {
                    left: { start, end: s2 },
                    match: { start: s2, end: m3.index },
                    right: { start: m3.index, end },
                    wholeMatch: { start, end }
                  };
                  pos.push(obj);
                  if (!g2) {
                    return pos;
                  }
                }
              }
            }
          } while (t3 && (x2.lastIndex = s2));
          return pos;
        };
        showdown2.helper.matchRecursiveRegExp = function(str, left, right, flags) {
          "use strict";
          var matchPos = rgxFindMatchPos(str, left, right, flags), results = [];
          for (var i3 = 0; i3 < matchPos.length; ++i3) {
            results.push([
              str.slice(matchPos[i3].wholeMatch.start, matchPos[i3].wholeMatch.end),
              str.slice(matchPos[i3].match.start, matchPos[i3].match.end),
              str.slice(matchPos[i3].left.start, matchPos[i3].left.end),
              str.slice(matchPos[i3].right.start, matchPos[i3].right.end)
            ]);
          }
          return results;
        };
        showdown2.helper.replaceRecursiveRegExp = function(str, replacement, left, right, flags) {
          "use strict";
          if (!showdown2.helper.isFunction(replacement)) {
            var repStr = replacement;
            replacement = function() {
              return repStr;
            };
          }
          var matchPos = rgxFindMatchPos(str, left, right, flags), finalStr = str, lng = matchPos.length;
          if (lng > 0) {
            var bits = [];
            if (matchPos[0].wholeMatch.start !== 0) {
              bits.push(str.slice(0, matchPos[0].wholeMatch.start));
            }
            for (var i3 = 0; i3 < lng; ++i3) {
              bits.push(
                replacement(
                  str.slice(matchPos[i3].wholeMatch.start, matchPos[i3].wholeMatch.end),
                  str.slice(matchPos[i3].match.start, matchPos[i3].match.end),
                  str.slice(matchPos[i3].left.start, matchPos[i3].left.end),
                  str.slice(matchPos[i3].right.start, matchPos[i3].right.end)
                )
              );
              if (i3 < lng - 1) {
                bits.push(str.slice(matchPos[i3].wholeMatch.end, matchPos[i3 + 1].wholeMatch.start));
              }
            }
            if (matchPos[lng - 1].wholeMatch.end < str.length) {
              bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
            }
            finalStr = bits.join("");
          }
          return finalStr;
        };
        showdown2.helper.regexIndexOf = function(str, regex, fromIndex) {
          "use strict";
          if (!showdown2.helper.isString(str)) {
            throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
          }
          if (regex instanceof RegExp === false) {
            throw "InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";
          }
          var indexOf = str.substring(fromIndex || 0).search(regex);
          return indexOf >= 0 ? indexOf + (fromIndex || 0) : indexOf;
        };
        showdown2.helper.splitAtIndex = function(str, index) {
          "use strict";
          if (!showdown2.helper.isString(str)) {
            throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
          }
          return [str.substring(0, index), str.substring(index)];
        };
        showdown2.helper.encodeEmailAddress = function(mail) {
          "use strict";
          var encode3 = [
            function(ch) {
              return "&#" + ch.charCodeAt(0) + ";";
            },
            function(ch) {
              return "&#x" + ch.charCodeAt(0).toString(16) + ";";
            },
            function(ch) {
              return ch;
            }
          ];
          mail = mail.replace(/./g, function(ch) {
            if (ch === "@") {
              ch = encode3[Math.floor(Math.random() * 2)](ch);
            } else {
              var r2 = Math.random();
              ch = r2 > 0.9 ? encode3[2](ch) : r2 > 0.45 ? encode3[1](ch) : encode3[0](ch);
            }
            return ch;
          });
          return mail;
        };
        showdown2.helper.padEnd = function padEnd(str, targetLength, padString) {
          "use strict";
          targetLength = targetLength >> 0;
          padString = String(padString || " ");
          if (str.length > targetLength) {
            return String(str);
          } else {
            targetLength = targetLength - str.length;
            if (targetLength > padString.length) {
              padString += padString.repeat(targetLength / padString.length);
            }
            return String(str) + padString.slice(0, targetLength);
          }
        };
        if (typeof console === "undefined") {
          console = {
            warn: function(msg) {
              "use strict";
              alert(msg);
            },
            log: function(msg) {
              "use strict";
              alert(msg);
            },
            error: function(msg) {
              "use strict";
              throw msg;
            }
          };
        }
        showdown2.helper.regexes = {
          asteriskDashAndColon: /([*_:~])/g
        };
        showdown2.helper.emojis = {
          "+1": "\u{1F44D}",
          "-1": "\u{1F44E}",
          "100": "\u{1F4AF}",
          "1234": "\u{1F522}",
          "1st_place_medal": "\u{1F947}",
          "2nd_place_medal": "\u{1F948}",
          "3rd_place_medal": "\u{1F949}",
          "8ball": "\u{1F3B1}",
          "a": "\u{1F170}\uFE0F",
          "ab": "\u{1F18E}",
          "abc": "\u{1F524}",
          "abcd": "\u{1F521}",
          "accept": "\u{1F251}",
          "aerial_tramway": "\u{1F6A1}",
          "airplane": "\u2708\uFE0F",
          "alarm_clock": "\u23F0",
          "alembic": "\u2697\uFE0F",
          "alien": "\u{1F47D}",
          "ambulance": "\u{1F691}",
          "amphora": "\u{1F3FA}",
          "anchor": "\u2693\uFE0F",
          "angel": "\u{1F47C}",
          "anger": "\u{1F4A2}",
          "angry": "\u{1F620}",
          "anguished": "\u{1F627}",
          "ant": "\u{1F41C}",
          "apple": "\u{1F34E}",
          "aquarius": "\u2652\uFE0F",
          "aries": "\u2648\uFE0F",
          "arrow_backward": "\u25C0\uFE0F",
          "arrow_double_down": "\u23EC",
          "arrow_double_up": "\u23EB",
          "arrow_down": "\u2B07\uFE0F",
          "arrow_down_small": "\u{1F53D}",
          "arrow_forward": "\u25B6\uFE0F",
          "arrow_heading_down": "\u2935\uFE0F",
          "arrow_heading_up": "\u2934\uFE0F",
          "arrow_left": "\u2B05\uFE0F",
          "arrow_lower_left": "\u2199\uFE0F",
          "arrow_lower_right": "\u2198\uFE0F",
          "arrow_right": "\u27A1\uFE0F",
          "arrow_right_hook": "\u21AA\uFE0F",
          "arrow_up": "\u2B06\uFE0F",
          "arrow_up_down": "\u2195\uFE0F",
          "arrow_up_small": "\u{1F53C}",
          "arrow_upper_left": "\u2196\uFE0F",
          "arrow_upper_right": "\u2197\uFE0F",
          "arrows_clockwise": "\u{1F503}",
          "arrows_counterclockwise": "\u{1F504}",
          "art": "\u{1F3A8}",
          "articulated_lorry": "\u{1F69B}",
          "artificial_satellite": "\u{1F6F0}",
          "astonished": "\u{1F632}",
          "athletic_shoe": "\u{1F45F}",
          "atm": "\u{1F3E7}",
          "atom_symbol": "\u269B\uFE0F",
          "avocado": "\u{1F951}",
          "b": "\u{1F171}\uFE0F",
          "baby": "\u{1F476}",
          "baby_bottle": "\u{1F37C}",
          "baby_chick": "\u{1F424}",
          "baby_symbol": "\u{1F6BC}",
          "back": "\u{1F519}",
          "bacon": "\u{1F953}",
          "badminton": "\u{1F3F8}",
          "baggage_claim": "\u{1F6C4}",
          "baguette_bread": "\u{1F956}",
          "balance_scale": "\u2696\uFE0F",
          "balloon": "\u{1F388}",
          "ballot_box": "\u{1F5F3}",
          "ballot_box_with_check": "\u2611\uFE0F",
          "bamboo": "\u{1F38D}",
          "banana": "\u{1F34C}",
          "bangbang": "\u203C\uFE0F",
          "bank": "\u{1F3E6}",
          "bar_chart": "\u{1F4CA}",
          "barber": "\u{1F488}",
          "baseball": "\u26BE\uFE0F",
          "basketball": "\u{1F3C0}",
          "basketball_man": "\u26F9\uFE0F",
          "basketball_woman": "\u26F9\uFE0F&zwj;\u2640\uFE0F",
          "bat": "\u{1F987}",
          "bath": "\u{1F6C0}",
          "bathtub": "\u{1F6C1}",
          "battery": "\u{1F50B}",
          "beach_umbrella": "\u{1F3D6}",
          "bear": "\u{1F43B}",
          "bed": "\u{1F6CF}",
          "bee": "\u{1F41D}",
          "beer": "\u{1F37A}",
          "beers": "\u{1F37B}",
          "beetle": "\u{1F41E}",
          "beginner": "\u{1F530}",
          "bell": "\u{1F514}",
          "bellhop_bell": "\u{1F6CE}",
          "bento": "\u{1F371}",
          "biking_man": "\u{1F6B4}",
          "bike": "\u{1F6B2}",
          "biking_woman": "\u{1F6B4}&zwj;\u2640\uFE0F",
          "bikini": "\u{1F459}",
          "biohazard": "\u2623\uFE0F",
          "bird": "\u{1F426}",
          "birthday": "\u{1F382}",
          "black_circle": "\u26AB\uFE0F",
          "black_flag": "\u{1F3F4}",
          "black_heart": "\u{1F5A4}",
          "black_joker": "\u{1F0CF}",
          "black_large_square": "\u2B1B\uFE0F",
          "black_medium_small_square": "\u25FE\uFE0F",
          "black_medium_square": "\u25FC\uFE0F",
          "black_nib": "\u2712\uFE0F",
          "black_small_square": "\u25AA\uFE0F",
          "black_square_button": "\u{1F532}",
          "blonde_man": "\u{1F471}",
          "blonde_woman": "\u{1F471}&zwj;\u2640\uFE0F",
          "blossom": "\u{1F33C}",
          "blowfish": "\u{1F421}",
          "blue_book": "\u{1F4D8}",
          "blue_car": "\u{1F699}",
          "blue_heart": "\u{1F499}",
          "blush": "\u{1F60A}",
          "boar": "\u{1F417}",
          "boat": "\u26F5\uFE0F",
          "bomb": "\u{1F4A3}",
          "book": "\u{1F4D6}",
          "bookmark": "\u{1F516}",
          "bookmark_tabs": "\u{1F4D1}",
          "books": "\u{1F4DA}",
          "boom": "\u{1F4A5}",
          "boot": "\u{1F462}",
          "bouquet": "\u{1F490}",
          "bowing_man": "\u{1F647}",
          "bow_and_arrow": "\u{1F3F9}",
          "bowing_woman": "\u{1F647}&zwj;\u2640\uFE0F",
          "bowling": "\u{1F3B3}",
          "boxing_glove": "\u{1F94A}",
          "boy": "\u{1F466}",
          "bread": "\u{1F35E}",
          "bride_with_veil": "\u{1F470}",
          "bridge_at_night": "\u{1F309}",
          "briefcase": "\u{1F4BC}",
          "broken_heart": "\u{1F494}",
          "bug": "\u{1F41B}",
          "building_construction": "\u{1F3D7}",
          "bulb": "\u{1F4A1}",
          "bullettrain_front": "\u{1F685}",
          "bullettrain_side": "\u{1F684}",
          "burrito": "\u{1F32F}",
          "bus": "\u{1F68C}",
          "business_suit_levitating": "\u{1F574}",
          "busstop": "\u{1F68F}",
          "bust_in_silhouette": "\u{1F464}",
          "busts_in_silhouette": "\u{1F465}",
          "butterfly": "\u{1F98B}",
          "cactus": "\u{1F335}",
          "cake": "\u{1F370}",
          "calendar": "\u{1F4C6}",
          "call_me_hand": "\u{1F919}",
          "calling": "\u{1F4F2}",
          "camel": "\u{1F42B}",
          "camera": "\u{1F4F7}",
          "camera_flash": "\u{1F4F8}",
          "camping": "\u{1F3D5}",
          "cancer": "\u264B\uFE0F",
          "candle": "\u{1F56F}",
          "candy": "\u{1F36C}",
          "canoe": "\u{1F6F6}",
          "capital_abcd": "\u{1F520}",
          "capricorn": "\u2651\uFE0F",
          "car": "\u{1F697}",
          "card_file_box": "\u{1F5C3}",
          "card_index": "\u{1F4C7}",
          "card_index_dividers": "\u{1F5C2}",
          "carousel_horse": "\u{1F3A0}",
          "carrot": "\u{1F955}",
          "cat": "\u{1F431}",
          "cat2": "\u{1F408}",
          "cd": "\u{1F4BF}",
          "chains": "\u26D3",
          "champagne": "\u{1F37E}",
          "chart": "\u{1F4B9}",
          "chart_with_downwards_trend": "\u{1F4C9}",
          "chart_with_upwards_trend": "\u{1F4C8}",
          "checkered_flag": "\u{1F3C1}",
          "cheese": "\u{1F9C0}",
          "cherries": "\u{1F352}",
          "cherry_blossom": "\u{1F338}",
          "chestnut": "\u{1F330}",
          "chicken": "\u{1F414}",
          "children_crossing": "\u{1F6B8}",
          "chipmunk": "\u{1F43F}",
          "chocolate_bar": "\u{1F36B}",
          "christmas_tree": "\u{1F384}",
          "church": "\u26EA\uFE0F",
          "cinema": "\u{1F3A6}",
          "circus_tent": "\u{1F3AA}",
          "city_sunrise": "\u{1F307}",
          "city_sunset": "\u{1F306}",
          "cityscape": "\u{1F3D9}",
          "cl": "\u{1F191}",
          "clamp": "\u{1F5DC}",
          "clap": "\u{1F44F}",
          "clapper": "\u{1F3AC}",
          "classical_building": "\u{1F3DB}",
          "clinking_glasses": "\u{1F942}",
          "clipboard": "\u{1F4CB}",
          "clock1": "\u{1F550}",
          "clock10": "\u{1F559}",
          "clock1030": "\u{1F565}",
          "clock11": "\u{1F55A}",
          "clock1130": "\u{1F566}",
          "clock12": "\u{1F55B}",
          "clock1230": "\u{1F567}",
          "clock130": "\u{1F55C}",
          "clock2": "\u{1F551}",
          "clock230": "\u{1F55D}",
          "clock3": "\u{1F552}",
          "clock330": "\u{1F55E}",
          "clock4": "\u{1F553}",
          "clock430": "\u{1F55F}",
          "clock5": "\u{1F554}",
          "clock530": "\u{1F560}",
          "clock6": "\u{1F555}",
          "clock630": "\u{1F561}",
          "clock7": "\u{1F556}",
          "clock730": "\u{1F562}",
          "clock8": "\u{1F557}",
          "clock830": "\u{1F563}",
          "clock9": "\u{1F558}",
          "clock930": "\u{1F564}",
          "closed_book": "\u{1F4D5}",
          "closed_lock_with_key": "\u{1F510}",
          "closed_umbrella": "\u{1F302}",
          "cloud": "\u2601\uFE0F",
          "cloud_with_lightning": "\u{1F329}",
          "cloud_with_lightning_and_rain": "\u26C8",
          "cloud_with_rain": "\u{1F327}",
          "cloud_with_snow": "\u{1F328}",
          "clown_face": "\u{1F921}",
          "clubs": "\u2663\uFE0F",
          "cocktail": "\u{1F378}",
          "coffee": "\u2615\uFE0F",
          "coffin": "\u26B0\uFE0F",
          "cold_sweat": "\u{1F630}",
          "comet": "\u2604\uFE0F",
          "computer": "\u{1F4BB}",
          "computer_mouse": "\u{1F5B1}",
          "confetti_ball": "\u{1F38A}",
          "confounded": "\u{1F616}",
          "confused": "\u{1F615}",
          "congratulations": "\u3297\uFE0F",
          "construction": "\u{1F6A7}",
          "construction_worker_man": "\u{1F477}",
          "construction_worker_woman": "\u{1F477}&zwj;\u2640\uFE0F",
          "control_knobs": "\u{1F39B}",
          "convenience_store": "\u{1F3EA}",
          "cookie": "\u{1F36A}",
          "cool": "\u{1F192}",
          "policeman": "\u{1F46E}",
          "copyright": "\xA9\uFE0F",
          "corn": "\u{1F33D}",
          "couch_and_lamp": "\u{1F6CB}",
          "couple": "\u{1F46B}",
          "couple_with_heart_woman_man": "\u{1F491}",
          "couple_with_heart_man_man": "\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",
          "couple_with_heart_woman_woman": "\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",
          "couplekiss_man_man": "\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",
          "couplekiss_man_woman": "\u{1F48F}",
          "couplekiss_woman_woman": "\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",
          "cow": "\u{1F42E}",
          "cow2": "\u{1F404}",
          "cowboy_hat_face": "\u{1F920}",
          "crab": "\u{1F980}",
          "crayon": "\u{1F58D}",
          "credit_card": "\u{1F4B3}",
          "crescent_moon": "\u{1F319}",
          "cricket": "\u{1F3CF}",
          "crocodile": "\u{1F40A}",
          "croissant": "\u{1F950}",
          "crossed_fingers": "\u{1F91E}",
          "crossed_flags": "\u{1F38C}",
          "crossed_swords": "\u2694\uFE0F",
          "crown": "\u{1F451}",
          "cry": "\u{1F622}",
          "crying_cat_face": "\u{1F63F}",
          "crystal_ball": "\u{1F52E}",
          "cucumber": "\u{1F952}",
          "cupid": "\u{1F498}",
          "curly_loop": "\u27B0",
          "currency_exchange": "\u{1F4B1}",
          "curry": "\u{1F35B}",
          "custard": "\u{1F36E}",
          "customs": "\u{1F6C3}",
          "cyclone": "\u{1F300}",
          "dagger": "\u{1F5E1}",
          "dancer": "\u{1F483}",
          "dancing_women": "\u{1F46F}",
          "dancing_men": "\u{1F46F}&zwj;\u2642\uFE0F",
          "dango": "\u{1F361}",
          "dark_sunglasses": "\u{1F576}",
          "dart": "\u{1F3AF}",
          "dash": "\u{1F4A8}",
          "date": "\u{1F4C5}",
          "deciduous_tree": "\u{1F333}",
          "deer": "\u{1F98C}",
          "department_store": "\u{1F3EC}",
          "derelict_house": "\u{1F3DA}",
          "desert": "\u{1F3DC}",
          "desert_island": "\u{1F3DD}",
          "desktop_computer": "\u{1F5A5}",
          "male_detective": "\u{1F575}\uFE0F",
          "diamond_shape_with_a_dot_inside": "\u{1F4A0}",
          "diamonds": "\u2666\uFE0F",
          "disappointed": "\u{1F61E}",
          "disappointed_relieved": "\u{1F625}",
          "dizzy": "\u{1F4AB}",
          "dizzy_face": "\u{1F635}",
          "do_not_litter": "\u{1F6AF}",
          "dog": "\u{1F436}",
          "dog2": "\u{1F415}",
          "dollar": "\u{1F4B5}",
          "dolls": "\u{1F38E}",
          "dolphin": "\u{1F42C}",
          "door": "\u{1F6AA}",
          "doughnut": "\u{1F369}",
          "dove": "\u{1F54A}",
          "dragon": "\u{1F409}",
          "dragon_face": "\u{1F432}",
          "dress": "\u{1F457}",
          "dromedary_camel": "\u{1F42A}",
          "drooling_face": "\u{1F924}",
          "droplet": "\u{1F4A7}",
          "drum": "\u{1F941}",
          "duck": "\u{1F986}",
          "dvd": "\u{1F4C0}",
          "e-mail": "\u{1F4E7}",
          "eagle": "\u{1F985}",
          "ear": "\u{1F442}",
          "ear_of_rice": "\u{1F33E}",
          "earth_africa": "\u{1F30D}",
          "earth_americas": "\u{1F30E}",
          "earth_asia": "\u{1F30F}",
          "egg": "\u{1F95A}",
          "eggplant": "\u{1F346}",
          "eight_pointed_black_star": "\u2734\uFE0F",
          "eight_spoked_asterisk": "\u2733\uFE0F",
          "electric_plug": "\u{1F50C}",
          "elephant": "\u{1F418}",
          "email": "\u2709\uFE0F",
          "end": "\u{1F51A}",
          "envelope_with_arrow": "\u{1F4E9}",
          "euro": "\u{1F4B6}",
          "european_castle": "\u{1F3F0}",
          "european_post_office": "\u{1F3E4}",
          "evergreen_tree": "\u{1F332}",
          "exclamation": "\u2757\uFE0F",
          "expressionless": "\u{1F611}",
          "eye": "\u{1F441}",
          "eye_speech_bubble": "\u{1F441}&zwj;\u{1F5E8}",
          "eyeglasses": "\u{1F453}",
          "eyes": "\u{1F440}",
          "face_with_head_bandage": "\u{1F915}",
          "face_with_thermometer": "\u{1F912}",
          "fist_oncoming": "\u{1F44A}",
          "factory": "\u{1F3ED}",
          "fallen_leaf": "\u{1F342}",
          "family_man_woman_boy": "\u{1F46A}",
          "family_man_boy": "\u{1F468}&zwj;\u{1F466}",
          "family_man_boy_boy": "\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_girl": "\u{1F468}&zwj;\u{1F467}",
          "family_man_girl_boy": "\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_girl_girl": "\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_man_man_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",
          "family_man_man_boy_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_man_girl": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",
          "family_man_man_girl_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_man_girl_girl": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_man_woman_boy_boy": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_woman_girl": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",
          "family_man_woman_girl_boy": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_woman_girl_girl": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_woman_boy": "\u{1F469}&zwj;\u{1F466}",
          "family_woman_boy_boy": "\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_woman_girl": "\u{1F469}&zwj;\u{1F467}",
          "family_woman_girl_boy": "\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_woman_girl_girl": "\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_woman_woman_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",
          "family_woman_woman_boy_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_woman_woman_girl": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",
          "family_woman_woman_girl_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_woman_woman_girl_girl": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "fast_forward": "\u23E9",
          "fax": "\u{1F4E0}",
          "fearful": "\u{1F628}",
          "feet": "\u{1F43E}",
          "female_detective": "\u{1F575}\uFE0F&zwj;\u2640\uFE0F",
          "ferris_wheel": "\u{1F3A1}",
          "ferry": "\u26F4",
          "field_hockey": "\u{1F3D1}",
          "file_cabinet": "\u{1F5C4}",
          "file_folder": "\u{1F4C1}",
          "film_projector": "\u{1F4FD}",
          "film_strip": "\u{1F39E}",
          "fire": "\u{1F525}",
          "fire_engine": "\u{1F692}",
          "fireworks": "\u{1F386}",
          "first_quarter_moon": "\u{1F313}",
          "first_quarter_moon_with_face": "\u{1F31B}",
          "fish": "\u{1F41F}",
          "fish_cake": "\u{1F365}",
          "fishing_pole_and_fish": "\u{1F3A3}",
          "fist_raised": "\u270A",
          "fist_left": "\u{1F91B}",
          "fist_right": "\u{1F91C}",
          "flags": "\u{1F38F}",
          "flashlight": "\u{1F526}",
          "fleur_de_lis": "\u269C\uFE0F",
          "flight_arrival": "\u{1F6EC}",
          "flight_departure": "\u{1F6EB}",
          "floppy_disk": "\u{1F4BE}",
          "flower_playing_cards": "\u{1F3B4}",
          "flushed": "\u{1F633}",
          "fog": "\u{1F32B}",
          "foggy": "\u{1F301}",
          "football": "\u{1F3C8}",
          "footprints": "\u{1F463}",
          "fork_and_knife": "\u{1F374}",
          "fountain": "\u26F2\uFE0F",
          "fountain_pen": "\u{1F58B}",
          "four_leaf_clover": "\u{1F340}",
          "fox_face": "\u{1F98A}",
          "framed_picture": "\u{1F5BC}",
          "free": "\u{1F193}",
          "fried_egg": "\u{1F373}",
          "fried_shrimp": "\u{1F364}",
          "fries": "\u{1F35F}",
          "frog": "\u{1F438}",
          "frowning": "\u{1F626}",
          "frowning_face": "\u2639\uFE0F",
          "frowning_man": "\u{1F64D}&zwj;\u2642\uFE0F",
          "frowning_woman": "\u{1F64D}",
          "middle_finger": "\u{1F595}",
          "fuelpump": "\u26FD\uFE0F",
          "full_moon": "\u{1F315}",
          "full_moon_with_face": "\u{1F31D}",
          "funeral_urn": "\u26B1\uFE0F",
          "game_die": "\u{1F3B2}",
          "gear": "\u2699\uFE0F",
          "gem": "\u{1F48E}",
          "gemini": "\u264A\uFE0F",
          "ghost": "\u{1F47B}",
          "gift": "\u{1F381}",
          "gift_heart": "\u{1F49D}",
          "girl": "\u{1F467}",
          "globe_with_meridians": "\u{1F310}",
          "goal_net": "\u{1F945}",
          "goat": "\u{1F410}",
          "golf": "\u26F3\uFE0F",
          "golfing_man": "\u{1F3CC}\uFE0F",
          "golfing_woman": "\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",
          "gorilla": "\u{1F98D}",
          "grapes": "\u{1F347}",
          "green_apple": "\u{1F34F}",
          "green_book": "\u{1F4D7}",
          "green_heart": "\u{1F49A}",
          "green_salad": "\u{1F957}",
          "grey_exclamation": "\u2755",
          "grey_question": "\u2754",
          "grimacing": "\u{1F62C}",
          "grin": "\u{1F601}",
          "grinning": "\u{1F600}",
          "guardsman": "\u{1F482}",
          "guardswoman": "\u{1F482}&zwj;\u2640\uFE0F",
          "guitar": "\u{1F3B8}",
          "gun": "\u{1F52B}",
          "haircut_woman": "\u{1F487}",
          "haircut_man": "\u{1F487}&zwj;\u2642\uFE0F",
          "hamburger": "\u{1F354}",
          "hammer": "\u{1F528}",
          "hammer_and_pick": "\u2692",
          "hammer_and_wrench": "\u{1F6E0}",
          "hamster": "\u{1F439}",
          "hand": "\u270B",
          "handbag": "\u{1F45C}",
          "handshake": "\u{1F91D}",
          "hankey": "\u{1F4A9}",
          "hatched_chick": "\u{1F425}",
          "hatching_chick": "\u{1F423}",
          "headphones": "\u{1F3A7}",
          "hear_no_evil": "\u{1F649}",
          "heart": "\u2764\uFE0F",
          "heart_decoration": "\u{1F49F}",
          "heart_eyes": "\u{1F60D}",
          "heart_eyes_cat": "\u{1F63B}",
          "heartbeat": "\u{1F493}",
          "heartpulse": "\u{1F497}",
          "hearts": "\u2665\uFE0F",
          "heavy_check_mark": "\u2714\uFE0F",
          "heavy_division_sign": "\u2797",
          "heavy_dollar_sign": "\u{1F4B2}",
          "heavy_heart_exclamation": "\u2763\uFE0F",
          "heavy_minus_sign": "\u2796",
          "heavy_multiplication_x": "\u2716\uFE0F",
          "heavy_plus_sign": "\u2795",
          "helicopter": "\u{1F681}",
          "herb": "\u{1F33F}",
          "hibiscus": "\u{1F33A}",
          "high_brightness": "\u{1F506}",
          "high_heel": "\u{1F460}",
          "hocho": "\u{1F52A}",
          "hole": "\u{1F573}",
          "honey_pot": "\u{1F36F}",
          "horse": "\u{1F434}",
          "horse_racing": "\u{1F3C7}",
          "hospital": "\u{1F3E5}",
          "hot_pepper": "\u{1F336}",
          "hotdog": "\u{1F32D}",
          "hotel": "\u{1F3E8}",
          "hotsprings": "\u2668\uFE0F",
          "hourglass": "\u231B\uFE0F",
          "hourglass_flowing_sand": "\u23F3",
          "house": "\u{1F3E0}",
          "house_with_garden": "\u{1F3E1}",
          "houses": "\u{1F3D8}",
          "hugs": "\u{1F917}",
          "hushed": "\u{1F62F}",
          "ice_cream": "\u{1F368}",
          "ice_hockey": "\u{1F3D2}",
          "ice_skate": "\u26F8",
          "icecream": "\u{1F366}",
          "id": "\u{1F194}",
          "ideograph_advantage": "\u{1F250}",
          "imp": "\u{1F47F}",
          "inbox_tray": "\u{1F4E5}",
          "incoming_envelope": "\u{1F4E8}",
          "tipping_hand_woman": "\u{1F481}",
          "information_source": "\u2139\uFE0F",
          "innocent": "\u{1F607}",
          "interrobang": "\u2049\uFE0F",
          "iphone": "\u{1F4F1}",
          "izakaya_lantern": "\u{1F3EE}",
          "jack_o_lantern": "\u{1F383}",
          "japan": "\u{1F5FE}",
          "japanese_castle": "\u{1F3EF}",
          "japanese_goblin": "\u{1F47A}",
          "japanese_ogre": "\u{1F479}",
          "jeans": "\u{1F456}",
          "joy": "\u{1F602}",
          "joy_cat": "\u{1F639}",
          "joystick": "\u{1F579}",
          "kaaba": "\u{1F54B}",
          "key": "\u{1F511}",
          "keyboard": "\u2328\uFE0F",
          "keycap_ten": "\u{1F51F}",
          "kick_scooter": "\u{1F6F4}",
          "kimono": "\u{1F458}",
          "kiss": "\u{1F48B}",
          "kissing": "\u{1F617}",
          "kissing_cat": "\u{1F63D}",
          "kissing_closed_eyes": "\u{1F61A}",
          "kissing_heart": "\u{1F618}",
          "kissing_smiling_eyes": "\u{1F619}",
          "kiwi_fruit": "\u{1F95D}",
          "koala": "\u{1F428}",
          "koko": "\u{1F201}",
          "label": "\u{1F3F7}",
          "large_blue_circle": "\u{1F535}",
          "large_blue_diamond": "\u{1F537}",
          "large_orange_diamond": "\u{1F536}",
          "last_quarter_moon": "\u{1F317}",
          "last_quarter_moon_with_face": "\u{1F31C}",
          "latin_cross": "\u271D\uFE0F",
          "laughing": "\u{1F606}",
          "leaves": "\u{1F343}",
          "ledger": "\u{1F4D2}",
          "left_luggage": "\u{1F6C5}",
          "left_right_arrow": "\u2194\uFE0F",
          "leftwards_arrow_with_hook": "\u21A9\uFE0F",
          "lemon": "\u{1F34B}",
          "leo": "\u264C\uFE0F",
          "leopard": "\u{1F406}",
          "level_slider": "\u{1F39A}",
          "libra": "\u264E\uFE0F",
          "light_rail": "\u{1F688}",
          "link": "\u{1F517}",
          "lion": "\u{1F981}",
          "lips": "\u{1F444}",
          "lipstick": "\u{1F484}",
          "lizard": "\u{1F98E}",
          "lock": "\u{1F512}",
          "lock_with_ink_pen": "\u{1F50F}",
          "lollipop": "\u{1F36D}",
          "loop": "\u27BF",
          "loud_sound": "\u{1F50A}",
          "loudspeaker": "\u{1F4E2}",
          "love_hotel": "\u{1F3E9}",
          "love_letter": "\u{1F48C}",
          "low_brightness": "\u{1F505}",
          "lying_face": "\u{1F925}",
          "m": "\u24C2\uFE0F",
          "mag": "\u{1F50D}",
          "mag_right": "\u{1F50E}",
          "mahjong": "\u{1F004}\uFE0F",
          "mailbox": "\u{1F4EB}",
          "mailbox_closed": "\u{1F4EA}",
          "mailbox_with_mail": "\u{1F4EC}",
          "mailbox_with_no_mail": "\u{1F4ED}",
          "man": "\u{1F468}",
          "man_artist": "\u{1F468}&zwj;\u{1F3A8}",
          "man_astronaut": "\u{1F468}&zwj;\u{1F680}",
          "man_cartwheeling": "\u{1F938}&zwj;\u2642\uFE0F",
          "man_cook": "\u{1F468}&zwj;\u{1F373}",
          "man_dancing": "\u{1F57A}",
          "man_facepalming": "\u{1F926}&zwj;\u2642\uFE0F",
          "man_factory_worker": "\u{1F468}&zwj;\u{1F3ED}",
          "man_farmer": "\u{1F468}&zwj;\u{1F33E}",
          "man_firefighter": "\u{1F468}&zwj;\u{1F692}",
          "man_health_worker": "\u{1F468}&zwj;\u2695\uFE0F",
          "man_in_tuxedo": "\u{1F935}",
          "man_judge": "\u{1F468}&zwj;\u2696\uFE0F",
          "man_juggling": "\u{1F939}&zwj;\u2642\uFE0F",
          "man_mechanic": "\u{1F468}&zwj;\u{1F527}",
          "man_office_worker": "\u{1F468}&zwj;\u{1F4BC}",
          "man_pilot": "\u{1F468}&zwj;\u2708\uFE0F",
          "man_playing_handball": "\u{1F93E}&zwj;\u2642\uFE0F",
          "man_playing_water_polo": "\u{1F93D}&zwj;\u2642\uFE0F",
          "man_scientist": "\u{1F468}&zwj;\u{1F52C}",
          "man_shrugging": "\u{1F937}&zwj;\u2642\uFE0F",
          "man_singer": "\u{1F468}&zwj;\u{1F3A4}",
          "man_student": "\u{1F468}&zwj;\u{1F393}",
          "man_teacher": "\u{1F468}&zwj;\u{1F3EB}",
          "man_technologist": "\u{1F468}&zwj;\u{1F4BB}",
          "man_with_gua_pi_mao": "\u{1F472}",
          "man_with_turban": "\u{1F473}",
          "tangerine": "\u{1F34A}",
          "mans_shoe": "\u{1F45E}",
          "mantelpiece_clock": "\u{1F570}",
          "maple_leaf": "\u{1F341}",
          "martial_arts_uniform": "\u{1F94B}",
          "mask": "\u{1F637}",
          "massage_woman": "\u{1F486}",
          "massage_man": "\u{1F486}&zwj;\u2642\uFE0F",
          "meat_on_bone": "\u{1F356}",
          "medal_military": "\u{1F396}",
          "medal_sports": "\u{1F3C5}",
          "mega": "\u{1F4E3}",
          "melon": "\u{1F348}",
          "memo": "\u{1F4DD}",
          "men_wrestling": "\u{1F93C}&zwj;\u2642\uFE0F",
          "menorah": "\u{1F54E}",
          "mens": "\u{1F6B9}",
          "metal": "\u{1F918}",
          "metro": "\u{1F687}",
          "microphone": "\u{1F3A4}",
          "microscope": "\u{1F52C}",
          "milk_glass": "\u{1F95B}",
          "milky_way": "\u{1F30C}",
          "minibus": "\u{1F690}",
          "minidisc": "\u{1F4BD}",
          "mobile_phone_off": "\u{1F4F4}",
          "money_mouth_face": "\u{1F911}",
          "money_with_wings": "\u{1F4B8}",
          "moneybag": "\u{1F4B0}",
          "monkey": "\u{1F412}",
          "monkey_face": "\u{1F435}",
          "monorail": "\u{1F69D}",
          "moon": "\u{1F314}",
          "mortar_board": "\u{1F393}",
          "mosque": "\u{1F54C}",
          "motor_boat": "\u{1F6E5}",
          "motor_scooter": "\u{1F6F5}",
          "motorcycle": "\u{1F3CD}",
          "motorway": "\u{1F6E3}",
          "mount_fuji": "\u{1F5FB}",
          "mountain": "\u26F0",
          "mountain_biking_man": "\u{1F6B5}",
          "mountain_biking_woman": "\u{1F6B5}&zwj;\u2640\uFE0F",
          "mountain_cableway": "\u{1F6A0}",
          "mountain_railway": "\u{1F69E}",
          "mountain_snow": "\u{1F3D4}",
          "mouse": "\u{1F42D}",
          "mouse2": "\u{1F401}",
          "movie_camera": "\u{1F3A5}",
          "moyai": "\u{1F5FF}",
          "mrs_claus": "\u{1F936}",
          "muscle": "\u{1F4AA}",
          "mushroom": "\u{1F344}",
          "musical_keyboard": "\u{1F3B9}",
          "musical_note": "\u{1F3B5}",
          "musical_score": "\u{1F3BC}",
          "mute": "\u{1F507}",
          "nail_care": "\u{1F485}",
          "name_badge": "\u{1F4DB}",
          "national_park": "\u{1F3DE}",
          "nauseated_face": "\u{1F922}",
          "necktie": "\u{1F454}",
          "negative_squared_cross_mark": "\u274E",
          "nerd_face": "\u{1F913}",
          "neutral_face": "\u{1F610}",
          "new": "\u{1F195}",
          "new_moon": "\u{1F311}",
          "new_moon_with_face": "\u{1F31A}",
          "newspaper": "\u{1F4F0}",
          "newspaper_roll": "\u{1F5DE}",
          "next_track_button": "\u23ED",
          "ng": "\u{1F196}",
          "no_good_man": "\u{1F645}&zwj;\u2642\uFE0F",
          "no_good_woman": "\u{1F645}",
          "night_with_stars": "\u{1F303}",
          "no_bell": "\u{1F515}",
          "no_bicycles": "\u{1F6B3}",
          "no_entry": "\u26D4\uFE0F",
          "no_entry_sign": "\u{1F6AB}",
          "no_mobile_phones": "\u{1F4F5}",
          "no_mouth": "\u{1F636}",
          "no_pedestrians": "\u{1F6B7}",
          "no_smoking": "\u{1F6AD}",
          "non-potable_water": "\u{1F6B1}",
          "nose": "\u{1F443}",
          "notebook": "\u{1F4D3}",
          "notebook_with_decorative_cover": "\u{1F4D4}",
          "notes": "\u{1F3B6}",
          "nut_and_bolt": "\u{1F529}",
          "o": "\u2B55\uFE0F",
          "o2": "\u{1F17E}\uFE0F",
          "ocean": "\u{1F30A}",
          "octopus": "\u{1F419}",
          "oden": "\u{1F362}",
          "office": "\u{1F3E2}",
          "oil_drum": "\u{1F6E2}",
          "ok": "\u{1F197}",
          "ok_hand": "\u{1F44C}",
          "ok_man": "\u{1F646}&zwj;\u2642\uFE0F",
          "ok_woman": "\u{1F646}",
          "old_key": "\u{1F5DD}",
          "older_man": "\u{1F474}",
          "older_woman": "\u{1F475}",
          "om": "\u{1F549}",
          "on": "\u{1F51B}",
          "oncoming_automobile": "\u{1F698}",
          "oncoming_bus": "\u{1F68D}",
          "oncoming_police_car": "\u{1F694}",
          "oncoming_taxi": "\u{1F696}",
          "open_file_folder": "\u{1F4C2}",
          "open_hands": "\u{1F450}",
          "open_mouth": "\u{1F62E}",
          "open_umbrella": "\u2602\uFE0F",
          "ophiuchus": "\u26CE",
          "orange_book": "\u{1F4D9}",
          "orthodox_cross": "\u2626\uFE0F",
          "outbox_tray": "\u{1F4E4}",
          "owl": "\u{1F989}",
          "ox": "\u{1F402}",
          "package": "\u{1F4E6}",
          "page_facing_up": "\u{1F4C4}",
          "page_with_curl": "\u{1F4C3}",
          "pager": "\u{1F4DF}",
          "paintbrush": "\u{1F58C}",
          "palm_tree": "\u{1F334}",
          "pancakes": "\u{1F95E}",
          "panda_face": "\u{1F43C}",
          "paperclip": "\u{1F4CE}",
          "paperclips": "\u{1F587}",
          "parasol_on_ground": "\u26F1",
          "parking": "\u{1F17F}\uFE0F",
          "part_alternation_mark": "\u303D\uFE0F",
          "partly_sunny": "\u26C5\uFE0F",
          "passenger_ship": "\u{1F6F3}",
          "passport_control": "\u{1F6C2}",
          "pause_button": "\u23F8",
          "peace_symbol": "\u262E\uFE0F",
          "peach": "\u{1F351}",
          "peanuts": "\u{1F95C}",
          "pear": "\u{1F350}",
          "pen": "\u{1F58A}",
          "pencil2": "\u270F\uFE0F",
          "penguin": "\u{1F427}",
          "pensive": "\u{1F614}",
          "performing_arts": "\u{1F3AD}",
          "persevere": "\u{1F623}",
          "person_fencing": "\u{1F93A}",
          "pouting_woman": "\u{1F64E}",
          "phone": "\u260E\uFE0F",
          "pick": "\u26CF",
          "pig": "\u{1F437}",
          "pig2": "\u{1F416}",
          "pig_nose": "\u{1F43D}",
          "pill": "\u{1F48A}",
          "pineapple": "\u{1F34D}",
          "ping_pong": "\u{1F3D3}",
          "pisces": "\u2653\uFE0F",
          "pizza": "\u{1F355}",
          "place_of_worship": "\u{1F6D0}",
          "plate_with_cutlery": "\u{1F37D}",
          "play_or_pause_button": "\u23EF",
          "point_down": "\u{1F447}",
          "point_left": "\u{1F448}",
          "point_right": "\u{1F449}",
          "point_up": "\u261D\uFE0F",
          "point_up_2": "\u{1F446}",
          "police_car": "\u{1F693}",
          "policewoman": "\u{1F46E}&zwj;\u2640\uFE0F",
          "poodle": "\u{1F429}",
          "popcorn": "\u{1F37F}",
          "post_office": "\u{1F3E3}",
          "postal_horn": "\u{1F4EF}",
          "postbox": "\u{1F4EE}",
          "potable_water": "\u{1F6B0}",
          "potato": "\u{1F954}",
          "pouch": "\u{1F45D}",
          "poultry_leg": "\u{1F357}",
          "pound": "\u{1F4B7}",
          "rage": "\u{1F621}",
          "pouting_cat": "\u{1F63E}",
          "pouting_man": "\u{1F64E}&zwj;\u2642\uFE0F",
          "pray": "\u{1F64F}",
          "prayer_beads": "\u{1F4FF}",
          "pregnant_woman": "\u{1F930}",
          "previous_track_button": "\u23EE",
          "prince": "\u{1F934}",
          "princess": "\u{1F478}",
          "printer": "\u{1F5A8}",
          "purple_heart": "\u{1F49C}",
          "purse": "\u{1F45B}",
          "pushpin": "\u{1F4CC}",
          "put_litter_in_its_place": "\u{1F6AE}",
          "question": "\u2753",
          "rabbit": "\u{1F430}",
          "rabbit2": "\u{1F407}",
          "racehorse": "\u{1F40E}",
          "racing_car": "\u{1F3CE}",
          "radio": "\u{1F4FB}",
          "radio_button": "\u{1F518}",
          "radioactive": "\u2622\uFE0F",
          "railway_car": "\u{1F683}",
          "railway_track": "\u{1F6E4}",
          "rainbow": "\u{1F308}",
          "rainbow_flag": "\u{1F3F3}\uFE0F&zwj;\u{1F308}",
          "raised_back_of_hand": "\u{1F91A}",
          "raised_hand_with_fingers_splayed": "\u{1F590}",
          "raised_hands": "\u{1F64C}",
          "raising_hand_woman": "\u{1F64B}",
          "raising_hand_man": "\u{1F64B}&zwj;\u2642\uFE0F",
          "ram": "\u{1F40F}",
          "ramen": "\u{1F35C}",
          "rat": "\u{1F400}",
          "record_button": "\u23FA",
          "recycle": "\u267B\uFE0F",
          "red_circle": "\u{1F534}",
          "registered": "\xAE\uFE0F",
          "relaxed": "\u263A\uFE0F",
          "relieved": "\u{1F60C}",
          "reminder_ribbon": "\u{1F397}",
          "repeat": "\u{1F501}",
          "repeat_one": "\u{1F502}",
          "rescue_worker_helmet": "\u26D1",
          "restroom": "\u{1F6BB}",
          "revolving_hearts": "\u{1F49E}",
          "rewind": "\u23EA",
          "rhinoceros": "\u{1F98F}",
          "ribbon": "\u{1F380}",
          "rice": "\u{1F35A}",
          "rice_ball": "\u{1F359}",
          "rice_cracker": "\u{1F358}",
          "rice_scene": "\u{1F391}",
          "right_anger_bubble": "\u{1F5EF}",
          "ring": "\u{1F48D}",
          "robot": "\u{1F916}",
          "rocket": "\u{1F680}",
          "rofl": "\u{1F923}",
          "roll_eyes": "\u{1F644}",
          "roller_coaster": "\u{1F3A2}",
          "rooster": "\u{1F413}",
          "rose": "\u{1F339}",
          "rosette": "\u{1F3F5}",
          "rotating_light": "\u{1F6A8}",
          "round_pushpin": "\u{1F4CD}",
          "rowing_man": "\u{1F6A3}",
          "rowing_woman": "\u{1F6A3}&zwj;\u2640\uFE0F",
          "rugby_football": "\u{1F3C9}",
          "running_man": "\u{1F3C3}",
          "running_shirt_with_sash": "\u{1F3BD}",
          "running_woman": "\u{1F3C3}&zwj;\u2640\uFE0F",
          "sa": "\u{1F202}\uFE0F",
          "sagittarius": "\u2650\uFE0F",
          "sake": "\u{1F376}",
          "sandal": "\u{1F461}",
          "santa": "\u{1F385}",
          "satellite": "\u{1F4E1}",
          "saxophone": "\u{1F3B7}",
          "school": "\u{1F3EB}",
          "school_satchel": "\u{1F392}",
          "scissors": "\u2702\uFE0F",
          "scorpion": "\u{1F982}",
          "scorpius": "\u264F\uFE0F",
          "scream": "\u{1F631}",
          "scream_cat": "\u{1F640}",
          "scroll": "\u{1F4DC}",
          "seat": "\u{1F4BA}",
          "secret": "\u3299\uFE0F",
          "see_no_evil": "\u{1F648}",
          "seedling": "\u{1F331}",
          "selfie": "\u{1F933}",
          "shallow_pan_of_food": "\u{1F958}",
          "shamrock": "\u2618\uFE0F",
          "shark": "\u{1F988}",
          "shaved_ice": "\u{1F367}",
          "sheep": "\u{1F411}",
          "shell": "\u{1F41A}",
          "shield": "\u{1F6E1}",
          "shinto_shrine": "\u26E9",
          "ship": "\u{1F6A2}",
          "shirt": "\u{1F455}",
          "shopping": "\u{1F6CD}",
          "shopping_cart": "\u{1F6D2}",
          "shower": "\u{1F6BF}",
          "shrimp": "\u{1F990}",
          "signal_strength": "\u{1F4F6}",
          "six_pointed_star": "\u{1F52F}",
          "ski": "\u{1F3BF}",
          "skier": "\u26F7",
          "skull": "\u{1F480}",
          "skull_and_crossbones": "\u2620\uFE0F",
          "sleeping": "\u{1F634}",
          "sleeping_bed": "\u{1F6CC}",
          "sleepy": "\u{1F62A}",
          "slightly_frowning_face": "\u{1F641}",
          "slightly_smiling_face": "\u{1F642}",
          "slot_machine": "\u{1F3B0}",
          "small_airplane": "\u{1F6E9}",
          "small_blue_diamond": "\u{1F539}",
          "small_orange_diamond": "\u{1F538}",
          "small_red_triangle": "\u{1F53A}",
          "small_red_triangle_down": "\u{1F53B}",
          "smile": "\u{1F604}",
          "smile_cat": "\u{1F638}",
          "smiley": "\u{1F603}",
          "smiley_cat": "\u{1F63A}",
          "smiling_imp": "\u{1F608}",
          "smirk": "\u{1F60F}",
          "smirk_cat": "\u{1F63C}",
          "smoking": "\u{1F6AC}",
          "snail": "\u{1F40C}",
          "snake": "\u{1F40D}",
          "sneezing_face": "\u{1F927}",
          "snowboarder": "\u{1F3C2}",
          "snowflake": "\u2744\uFE0F",
          "snowman": "\u26C4\uFE0F",
          "snowman_with_snow": "\u2603\uFE0F",
          "sob": "\u{1F62D}",
          "soccer": "\u26BD\uFE0F",
          "soon": "\u{1F51C}",
          "sos": "\u{1F198}",
          "sound": "\u{1F509}",
          "space_invader": "\u{1F47E}",
          "spades": "\u2660\uFE0F",
          "spaghetti": "\u{1F35D}",
          "sparkle": "\u2747\uFE0F",
          "sparkler": "\u{1F387}",
          "sparkles": "\u2728",
          "sparkling_heart": "\u{1F496}",
          "speak_no_evil": "\u{1F64A}",
          "speaker": "\u{1F508}",
          "speaking_head": "\u{1F5E3}",
          "speech_balloon": "\u{1F4AC}",
          "speedboat": "\u{1F6A4}",
          "spider": "\u{1F577}",
          "spider_web": "\u{1F578}",
          "spiral_calendar": "\u{1F5D3}",
          "spiral_notepad": "\u{1F5D2}",
          "spoon": "\u{1F944}",
          "squid": "\u{1F991}",
          "stadium": "\u{1F3DF}",
          "star": "\u2B50\uFE0F",
          "star2": "\u{1F31F}",
          "star_and_crescent": "\u262A\uFE0F",
          "star_of_david": "\u2721\uFE0F",
          "stars": "\u{1F320}",
          "station": "\u{1F689}",
          "statue_of_liberty": "\u{1F5FD}",
          "steam_locomotive": "\u{1F682}",
          "stew": "\u{1F372}",
          "stop_button": "\u23F9",
          "stop_sign": "\u{1F6D1}",
          "stopwatch": "\u23F1",
          "straight_ruler": "\u{1F4CF}",
          "strawberry": "\u{1F353}",
          "stuck_out_tongue": "\u{1F61B}",
          "stuck_out_tongue_closed_eyes": "\u{1F61D}",
          "stuck_out_tongue_winking_eye": "\u{1F61C}",
          "studio_microphone": "\u{1F399}",
          "stuffed_flatbread": "\u{1F959}",
          "sun_behind_large_cloud": "\u{1F325}",
          "sun_behind_rain_cloud": "\u{1F326}",
          "sun_behind_small_cloud": "\u{1F324}",
          "sun_with_face": "\u{1F31E}",
          "sunflower": "\u{1F33B}",
          "sunglasses": "\u{1F60E}",
          "sunny": "\u2600\uFE0F",
          "sunrise": "\u{1F305}",
          "sunrise_over_mountains": "\u{1F304}",
          "surfing_man": "\u{1F3C4}",
          "surfing_woman": "\u{1F3C4}&zwj;\u2640\uFE0F",
          "sushi": "\u{1F363}",
          "suspension_railway": "\u{1F69F}",
          "sweat": "\u{1F613}",
          "sweat_drops": "\u{1F4A6}",
          "sweat_smile": "\u{1F605}",
          "sweet_potato": "\u{1F360}",
          "swimming_man": "\u{1F3CA}",
          "swimming_woman": "\u{1F3CA}&zwj;\u2640\uFE0F",
          "symbols": "\u{1F523}",
          "synagogue": "\u{1F54D}",
          "syringe": "\u{1F489}",
          "taco": "\u{1F32E}",
          "tada": "\u{1F389}",
          "tanabata_tree": "\u{1F38B}",
          "taurus": "\u2649\uFE0F",
          "taxi": "\u{1F695}",
          "tea": "\u{1F375}",
          "telephone_receiver": "\u{1F4DE}",
          "telescope": "\u{1F52D}",
          "tennis": "\u{1F3BE}",
          "tent": "\u26FA\uFE0F",
          "thermometer": "\u{1F321}",
          "thinking": "\u{1F914}",
          "thought_balloon": "\u{1F4AD}",
          "ticket": "\u{1F3AB}",
          "tickets": "\u{1F39F}",
          "tiger": "\u{1F42F}",
          "tiger2": "\u{1F405}",
          "timer_clock": "\u23F2",
          "tipping_hand_man": "\u{1F481}&zwj;\u2642\uFE0F",
          "tired_face": "\u{1F62B}",
          "tm": "\u2122\uFE0F",
          "toilet": "\u{1F6BD}",
          "tokyo_tower": "\u{1F5FC}",
          "tomato": "\u{1F345}",
          "tongue": "\u{1F445}",
          "top": "\u{1F51D}",
          "tophat": "\u{1F3A9}",
          "tornado": "\u{1F32A}",
          "trackball": "\u{1F5B2}",
          "tractor": "\u{1F69C}",
          "traffic_light": "\u{1F6A5}",
          "train": "\u{1F68B}",
          "train2": "\u{1F686}",
          "tram": "\u{1F68A}",
          "triangular_flag_on_post": "\u{1F6A9}",
          "triangular_ruler": "\u{1F4D0}",
          "trident": "\u{1F531}",
          "triumph": "\u{1F624}",
          "trolleybus": "\u{1F68E}",
          "trophy": "\u{1F3C6}",
          "tropical_drink": "\u{1F379}",
          "tropical_fish": "\u{1F420}",
          "truck": "\u{1F69A}",
          "trumpet": "\u{1F3BA}",
          "tulip": "\u{1F337}",
          "tumbler_glass": "\u{1F943}",
          "turkey": "\u{1F983}",
          "turtle": "\u{1F422}",
          "tv": "\u{1F4FA}",
          "twisted_rightwards_arrows": "\u{1F500}",
          "two_hearts": "\u{1F495}",
          "two_men_holding_hands": "\u{1F46C}",
          "two_women_holding_hands": "\u{1F46D}",
          "u5272": "\u{1F239}",
          "u5408": "\u{1F234}",
          "u55b6": "\u{1F23A}",
          "u6307": "\u{1F22F}\uFE0F",
          "u6708": "\u{1F237}\uFE0F",
          "u6709": "\u{1F236}",
          "u6e80": "\u{1F235}",
          "u7121": "\u{1F21A}\uFE0F",
          "u7533": "\u{1F238}",
          "u7981": "\u{1F232}",
          "u7a7a": "\u{1F233}",
          "umbrella": "\u2614\uFE0F",
          "unamused": "\u{1F612}",
          "underage": "\u{1F51E}",
          "unicorn": "\u{1F984}",
          "unlock": "\u{1F513}",
          "up": "\u{1F199}",
          "upside_down_face": "\u{1F643}",
          "v": "\u270C\uFE0F",
          "vertical_traffic_light": "\u{1F6A6}",
          "vhs": "\u{1F4FC}",
          "vibration_mode": "\u{1F4F3}",
          "video_camera": "\u{1F4F9}",
          "video_game": "\u{1F3AE}",
          "violin": "\u{1F3BB}",
          "virgo": "\u264D\uFE0F",
          "volcano": "\u{1F30B}",
          "volleyball": "\u{1F3D0}",
          "vs": "\u{1F19A}",
          "vulcan_salute": "\u{1F596}",
          "walking_man": "\u{1F6B6}",
          "walking_woman": "\u{1F6B6}&zwj;\u2640\uFE0F",
          "waning_crescent_moon": "\u{1F318}",
          "waning_gibbous_moon": "\u{1F316}",
          "warning": "\u26A0\uFE0F",
          "wastebasket": "\u{1F5D1}",
          "watch": "\u231A\uFE0F",
          "water_buffalo": "\u{1F403}",
          "watermelon": "\u{1F349}",
          "wave": "\u{1F44B}",
          "wavy_dash": "\u3030\uFE0F",
          "waxing_crescent_moon": "\u{1F312}",
          "wc": "\u{1F6BE}",
          "weary": "\u{1F629}",
          "wedding": "\u{1F492}",
          "weight_lifting_man": "\u{1F3CB}\uFE0F",
          "weight_lifting_woman": "\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",
          "whale": "\u{1F433}",
          "whale2": "\u{1F40B}",
          "wheel_of_dharma": "\u2638\uFE0F",
          "wheelchair": "\u267F\uFE0F",
          "white_check_mark": "\u2705",
          "white_circle": "\u26AA\uFE0F",
          "white_flag": "\u{1F3F3}\uFE0F",
          "white_flower": "\u{1F4AE}",
          "white_large_square": "\u2B1C\uFE0F",
          "white_medium_small_square": "\u25FD\uFE0F",
          "white_medium_square": "\u25FB\uFE0F",
          "white_small_square": "\u25AB\uFE0F",
          "white_square_button": "\u{1F533}",
          "wilted_flower": "\u{1F940}",
          "wind_chime": "\u{1F390}",
          "wind_face": "\u{1F32C}",
          "wine_glass": "\u{1F377}",
          "wink": "\u{1F609}",
          "wolf": "\u{1F43A}",
          "woman": "\u{1F469}",
          "woman_artist": "\u{1F469}&zwj;\u{1F3A8}",
          "woman_astronaut": "\u{1F469}&zwj;\u{1F680}",
          "woman_cartwheeling": "\u{1F938}&zwj;\u2640\uFE0F",
          "woman_cook": "\u{1F469}&zwj;\u{1F373}",
          "woman_facepalming": "\u{1F926}&zwj;\u2640\uFE0F",
          "woman_factory_worker": "\u{1F469}&zwj;\u{1F3ED}",
          "woman_farmer": "\u{1F469}&zwj;\u{1F33E}",
          "woman_firefighter": "\u{1F469}&zwj;\u{1F692}",
          "woman_health_worker": "\u{1F469}&zwj;\u2695\uFE0F",
          "woman_judge": "\u{1F469}&zwj;\u2696\uFE0F",
          "woman_juggling": "\u{1F939}&zwj;\u2640\uFE0F",
          "woman_mechanic": "\u{1F469}&zwj;\u{1F527}",
          "woman_office_worker": "\u{1F469}&zwj;\u{1F4BC}",
          "woman_pilot": "\u{1F469}&zwj;\u2708\uFE0F",
          "woman_playing_handball": "\u{1F93E}&zwj;\u2640\uFE0F",
          "woman_playing_water_polo": "\u{1F93D}&zwj;\u2640\uFE0F",
          "woman_scientist": "\u{1F469}&zwj;\u{1F52C}",
          "woman_shrugging": "\u{1F937}&zwj;\u2640\uFE0F",
          "woman_singer": "\u{1F469}&zwj;\u{1F3A4}",
          "woman_student": "\u{1F469}&zwj;\u{1F393}",
          "woman_teacher": "\u{1F469}&zwj;\u{1F3EB}",
          "woman_technologist": "\u{1F469}&zwj;\u{1F4BB}",
          "woman_with_turban": "\u{1F473}&zwj;\u2640\uFE0F",
          "womans_clothes": "\u{1F45A}",
          "womans_hat": "\u{1F452}",
          "women_wrestling": "\u{1F93C}&zwj;\u2640\uFE0F",
          "womens": "\u{1F6BA}",
          "world_map": "\u{1F5FA}",
          "worried": "\u{1F61F}",
          "wrench": "\u{1F527}",
          "writing_hand": "\u270D\uFE0F",
          "x": "\u274C",
          "yellow_heart": "\u{1F49B}",
          "yen": "\u{1F4B4}",
          "yin_yang": "\u262F\uFE0F",
          "yum": "\u{1F60B}",
          "zap": "\u26A1\uFE0F",
          "zipper_mouth_face": "\u{1F910}",
          "zzz": "\u{1F4A4}",
          "octocat": '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
          "showdown": `<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`
        };
        showdown2.Converter = function(converterOptions) {
          "use strict";
          var options = {}, langExtensions = [], outputModifiers = [], listeners = {}, setConvFlavor = setFlavor, metadata = {
            parsed: {},
            raw: "",
            format: ""
          };
          _constructor();
          function _constructor() {
            converterOptions = converterOptions || {};
            for (var gOpt in globalOptions) {
              if (globalOptions.hasOwnProperty(gOpt)) {
                options[gOpt] = globalOptions[gOpt];
              }
            }
            if (typeof converterOptions === "object") {
              for (var opt in converterOptions) {
                if (converterOptions.hasOwnProperty(opt)) {
                  options[opt] = converterOptions[opt];
                }
              }
            } else {
              throw Error("Converter expects the passed parameter to be an object, but " + typeof converterOptions + " was passed instead.");
            }
            if (options.extensions) {
              showdown2.helper.forEach(options.extensions, _parseExtension);
            }
          }
          function _parseExtension(ext, name2) {
            name2 = name2 || null;
            if (showdown2.helper.isString(ext)) {
              ext = showdown2.helper.stdExtName(ext);
              name2 = ext;
              if (showdown2.extensions[ext]) {
                console.warn("DEPRECATION WARNING: " + ext + " is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!");
                legacyExtensionLoading(showdown2.extensions[ext], ext);
                return;
              } else if (!showdown2.helper.isUndefined(extensions[ext])) {
                ext = extensions[ext];
              } else {
                throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
              }
            }
            if (typeof ext === "function") {
              ext = ext();
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var validExt = validate(ext, name2);
            if (!validExt.valid) {
              throw Error(validExt.error);
            }
            for (var i3 = 0; i3 < ext.length; ++i3) {
              switch (ext[i3].type) {
                case "lang":
                  langExtensions.push(ext[i3]);
                  break;
                case "output":
                  outputModifiers.push(ext[i3]);
                  break;
              }
              if (ext[i3].hasOwnProperty("listeners")) {
                for (var ln in ext[i3].listeners) {
                  if (ext[i3].listeners.hasOwnProperty(ln)) {
                    listen(ln, ext[i3].listeners[ln]);
                  }
                }
              }
            }
          }
          function legacyExtensionLoading(ext, name2) {
            if (typeof ext === "function") {
              ext = ext(new showdown2.Converter());
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var valid = validate(ext, name2);
            if (!valid.valid) {
              throw Error(valid.error);
            }
            for (var i3 = 0; i3 < ext.length; ++i3) {
              switch (ext[i3].type) {
                case "lang":
                  langExtensions.push(ext[i3]);
                  break;
                case "output":
                  outputModifiers.push(ext[i3]);
                  break;
                default:
                  throw Error("Extension loader error: Type unrecognized!!!");
              }
            }
          }
          function listen(name2, callback) {
            if (!showdown2.helper.isString(name2)) {
              throw Error("Invalid argument in converter.listen() method: name must be a string, but " + typeof name2 + " given");
            }
            if (typeof callback !== "function") {
              throw Error("Invalid argument in converter.listen() method: callback must be a function, but " + typeof callback + " given");
            }
            if (!listeners.hasOwnProperty(name2)) {
              listeners[name2] = [];
            }
            listeners[name2].push(callback);
          }
          function rTrimInputText(text) {
            var rsp = text.match(/^\s*/)[0].length, rgx = new RegExp("^\\s{0," + rsp + "}", "gm");
            return text.replace(rgx, "");
          }
          this._dispatch = function dispatch(evtName, text, options2, globals) {
            if (listeners.hasOwnProperty(evtName)) {
              for (var ei2 = 0; ei2 < listeners[evtName].length; ++ei2) {
                var nText = listeners[evtName][ei2](evtName, text, this, options2, globals);
                if (nText && typeof nText !== "undefined") {
                  text = nText;
                }
              }
            }
            return text;
          };
          this.listen = function(name2, callback) {
            listen(name2, callback);
            return this;
          };
          this.makeHtml = function(text) {
            if (!text) {
              return text;
            }
            var globals = {
              gHtmlBlocks: [],
              gHtmlMdBlocks: [],
              gHtmlSpans: [],
              gUrls: {},
              gTitles: {},
              gDimensions: {},
              gListLevel: 0,
              hashLinkCounts: {},
              langExtensions,
              outputModifiers,
              converter: this,
              ghCodeBlocks: [],
              metadata: {
                parsed: {},
                raw: "",
                format: ""
              }
            };
            text = text.replace(/¨/g, "\xA8T");
            text = text.replace(/\$/g, "\xA8D");
            text = text.replace(/\r\n/g, "\n");
            text = text.replace(/\r/g, "\n");
            text = text.replace(/\u00A0/g, "&nbsp;");
            if (options.smartIndentationFix) {
              text = rTrimInputText(text);
            }
            text = "\n\n" + text + "\n\n";
            text = showdown2.subParser("detab")(text, options, globals);
            text = text.replace(/^[ \t]+$/mg, "");
            showdown2.helper.forEach(langExtensions, function(ext) {
              text = showdown2.subParser("runExtension")(ext, text, options, globals);
            });
            text = showdown2.subParser("metadata")(text, options, globals);
            text = showdown2.subParser("hashPreCodeTags")(text, options, globals);
            text = showdown2.subParser("githubCodeBlocks")(text, options, globals);
            text = showdown2.subParser("hashHTMLBlocks")(text, options, globals);
            text = showdown2.subParser("hashCodeTags")(text, options, globals);
            text = showdown2.subParser("stripLinkDefinitions")(text, options, globals);
            text = showdown2.subParser("blockGamut")(text, options, globals);
            text = showdown2.subParser("unhashHTMLSpans")(text, options, globals);
            text = showdown2.subParser("unescapeSpecialChars")(text, options, globals);
            text = text.replace(/¨D/g, "$$");
            text = text.replace(/¨T/g, "\xA8");
            text = showdown2.subParser("completeHTMLDocument")(text, options, globals);
            showdown2.helper.forEach(outputModifiers, function(ext) {
              text = showdown2.subParser("runExtension")(ext, text, options, globals);
            });
            metadata = globals.metadata;
            return text;
          };
          this.makeMarkdown = this.makeMd = function(src, HTMLParser) {
            src = src.replace(/\r\n/g, "\n");
            src = src.replace(/\r/g, "\n");
            src = src.replace(/>[ \t]+</, ">\xA8NBSP;<");
            if (!HTMLParser) {
              if (window && window.document) {
                HTMLParser = window.document;
              } else {
                throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");
              }
            }
            var doc2 = HTMLParser.createElement("div");
            doc2.innerHTML = src;
            var globals = {
              preList: substitutePreCodeTags(doc2)
            };
            clean(doc2);
            var nodes = doc2.childNodes, mdDoc = "";
            for (var i3 = 0; i3 < nodes.length; i3++) {
              mdDoc += showdown2.subParser("makeMarkdown.node")(nodes[i3], globals);
            }
            function clean(node) {
              for (var n2 = 0; n2 < node.childNodes.length; ++n2) {
                var child = node.childNodes[n2];
                if (child.nodeType === 3) {
                  if (!/\S/.test(child.nodeValue) && !/^[ ]+$/.test(child.nodeValue)) {
                    node.removeChild(child);
                    --n2;
                  } else {
                    child.nodeValue = child.nodeValue.split("\n").join(" ");
                    child.nodeValue = child.nodeValue.replace(/(\s)+/g, "$1");
                  }
                } else if (child.nodeType === 1) {
                  clean(child);
                }
              }
            }
            function substitutePreCodeTags(doc3) {
              var pres = doc3.querySelectorAll("pre"), presPH = [];
              for (var i4 = 0; i4 < pres.length; ++i4) {
                if (pres[i4].childElementCount === 1 && pres[i4].firstChild.tagName.toLowerCase() === "code") {
                  var content = pres[i4].firstChild.innerHTML.trim(), language = pres[i4].firstChild.getAttribute("data-language") || "";
                  if (language === "") {
                    var classes = pres[i4].firstChild.className.split(" ");
                    for (var c2 = 0; c2 < classes.length; ++c2) {
                      var matches = classes[c2].match(/^language-(.+)$/);
                      if (matches !== null) {
                        language = matches[1];
                        break;
                      }
                    }
                  }
                  content = showdown2.helper.unescapeHTMLEntities(content);
                  presPH.push(content);
                  pres[i4].outerHTML = '<precode language="' + language + '" precodenum="' + i4.toString() + '"></precode>';
                } else {
                  presPH.push(pres[i4].innerHTML);
                  pres[i4].innerHTML = "";
                  pres[i4].setAttribute("prenum", i4.toString());
                }
              }
              return presPH;
            }
            return mdDoc;
          };
          this.setOption = function(key2, value2) {
            options[key2] = value2;
          };
          this.getOption = function(key2) {
            return options[key2];
          };
          this.getOptions = function() {
            return options;
          };
          this.addExtension = function(extension, name2) {
            name2 = name2 || null;
            _parseExtension(extension, name2);
          };
          this.useExtension = function(extensionName) {
            _parseExtension(extensionName);
          };
          this.setFlavor = function(name2) {
            if (!flavor.hasOwnProperty(name2)) {
              throw Error(name2 + " flavor was not found");
            }
            var preset = flavor[name2];
            setConvFlavor = name2;
            for (var option in preset) {
              if (preset.hasOwnProperty(option)) {
                options[option] = preset[option];
              }
            }
          };
          this.getFlavor = function() {
            return setConvFlavor;
          };
          this.removeExtension = function(extension) {
            if (!showdown2.helper.isArray(extension)) {
              extension = [extension];
            }
            for (var a2 = 0; a2 < extension.length; ++a2) {
              var ext = extension[a2];
              for (var i3 = 0; i3 < langExtensions.length; ++i3) {
                if (langExtensions[i3] === ext) {
                  langExtensions.splice(i3, 1);
                }
              }
              for (var ii2 = 0; ii2 < outputModifiers.length; ++ii2) {
                if (outputModifiers[ii2] === ext) {
                  outputModifiers.splice(ii2, 1);
                }
              }
            }
          };
          this.getAllExtensions = function() {
            return {
              language: langExtensions,
              output: outputModifiers
            };
          };
          this.getMetadata = function(raw) {
            if (raw) {
              return metadata.raw;
            } else {
              return metadata.parsed;
            }
          };
          this.getMetadataFormat = function() {
            return metadata.format;
          };
          this._setMetadataPair = function(key2, value2) {
            metadata.parsed[key2] = value2;
          };
          this._setMetadataFormat = function(format2) {
            metadata.format = format2;
          };
          this._setMetadataRaw = function(raw) {
            metadata.raw = raw;
          };
        };
        showdown2.subParser("anchors", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("anchors.before", text, options, globals);
          var writeAnchorTag = function(wholeMatch, linkText, linkId, url2, m5, m6, title) {
            if (showdown2.helper.isUndefined(title)) {
              title = "";
            }
            linkId = linkId.toLowerCase();
            if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
              url2 = "";
            } else if (!url2) {
              if (!linkId) {
                linkId = linkText.toLowerCase().replace(/ ?\n/g, " ");
              }
              url2 = "#" + linkId;
              if (!showdown2.helper.isUndefined(globals.gUrls[linkId])) {
                url2 = globals.gUrls[linkId];
                if (!showdown2.helper.isUndefined(globals.gTitles[linkId])) {
                  title = globals.gTitles[linkId];
                }
              } else {
                return wholeMatch;
              }
            }
            url2 = url2.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var result = '<a href="' + url2 + '"';
            if (title !== "" && title !== null) {
              title = title.replace(/"/g, "&quot;");
              title = title.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
              result += ' title="' + title + '"';
            }
            if (options.openLinksInNewWindow && !/^#/.test(url2)) {
              result += ' rel="noopener noreferrer" target="\xA8E95Eblank"';
            }
            result += ">" + linkText + "</a>";
            return result;
          };
          text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);
          text = text.replace(
            /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
            writeAnchorTag
          );
          text = text.replace(
            /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
            writeAnchorTag
          );
          text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);
          if (options.ghMentions) {
            text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function(wm, st3, escape2, mentions, username) {
              if (escape2 === "\\") {
                return st3 + mentions;
              }
              if (!showdown2.helper.isString(options.ghMentionsLink)) {
                throw new Error("ghMentionsLink option must be a string");
              }
              var lnk = options.ghMentionsLink.replace(/\{u}/g, username), target = "";
              if (options.openLinksInNewWindow) {
                target = ' rel="noopener noreferrer" target="\xA8E95Eblank"';
              }
              return st3 + '<a href="' + lnk + '"' + target + ">" + mentions + "</a>";
            });
          }
          text = globals.converter._dispatch("anchors.after", text, options, globals);
          return text;
        });
        var simpleURLRegex = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi, simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi, delimUrlRegex = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi, simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi, delimMailRegex = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi, replaceLink = function(options) {
          "use strict";
          return function(wm, leadingMagicChars, link, m22, m3, trailingPunctuation, trailingMagicChars) {
            link = link.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var lnkTxt = link, append = "", target = "", lmc = leadingMagicChars || "", tmc = trailingMagicChars || "";
            if (/^www\./i.test(link)) {
              link = link.replace(/^www\./i, "http://www.");
            }
            if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
              append = trailingPunctuation;
            }
            if (options.openLinksInNewWindow) {
              target = ' rel="noopener noreferrer" target="\xA8E95Eblank"';
            }
            return lmc + '<a href="' + link + '"' + target + ">" + lnkTxt + "</a>" + append + tmc;
          };
        }, replaceMail = function(options, globals) {
          "use strict";
          return function(wholeMatch, b2, mail) {
            var href = "mailto:";
            b2 = b2 || "";
            mail = showdown2.subParser("unescapeSpecialChars")(mail, options, globals);
            if (options.encodeEmails) {
              href = showdown2.helper.encodeEmailAddress(href + mail);
              mail = showdown2.helper.encodeEmailAddress(mail);
            } else {
              href = href + mail;
            }
            return b2 + '<a href="' + href + '">' + mail + "</a>";
          };
        };
        showdown2.subParser("autoLinks", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("autoLinks.before", text, options, globals);
          text = text.replace(delimUrlRegex, replaceLink(options));
          text = text.replace(delimMailRegex, replaceMail(options, globals));
          text = globals.converter._dispatch("autoLinks.after", text, options, globals);
          return text;
        });
        showdown2.subParser("simplifiedAutoLinks", function(text, options, globals) {
          "use strict";
          if (!options.simplifiedAutoLink) {
            return text;
          }
          text = globals.converter._dispatch("simplifiedAutoLinks.before", text, options, globals);
          if (options.excludeTrailingPunctuationFromURLs) {
            text = text.replace(simpleURLRegex2, replaceLink(options));
          } else {
            text = text.replace(simpleURLRegex, replaceLink(options));
          }
          text = text.replace(simpleMailRegex, replaceMail(options, globals));
          text = globals.converter._dispatch("simplifiedAutoLinks.after", text, options, globals);
          return text;
        });
        showdown2.subParser("blockGamut", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("blockGamut.before", text, options, globals);
          text = showdown2.subParser("blockQuotes")(text, options, globals);
          text = showdown2.subParser("headers")(text, options, globals);
          text = showdown2.subParser("horizontalRule")(text, options, globals);
          text = showdown2.subParser("lists")(text, options, globals);
          text = showdown2.subParser("codeBlocks")(text, options, globals);
          text = showdown2.subParser("tables")(text, options, globals);
          text = showdown2.subParser("hashHTMLBlocks")(text, options, globals);
          text = showdown2.subParser("paragraphs")(text, options, globals);
          text = globals.converter._dispatch("blockGamut.after", text, options, globals);
          return text;
        });
        showdown2.subParser("blockQuotes", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("blockQuotes.before", text, options, globals);
          text = text + "\n\n";
          var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;
          if (options.splitAdjacentBlockquotes) {
            rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
          }
          text = text.replace(rgx, function(bq) {
            bq = bq.replace(/^[ \t]*>[ \t]?/gm, "");
            bq = bq.replace(/¨0/g, "");
            bq = bq.replace(/^[ \t]+$/gm, "");
            bq = showdown2.subParser("githubCodeBlocks")(bq, options, globals);
            bq = showdown2.subParser("blockGamut")(bq, options, globals);
            bq = bq.replace(/(^|\n)/g, "$1  ");
            bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function(wholeMatch, m1) {
              var pre = m1;
              pre = pre.replace(/^  /mg, "\xA80");
              pre = pre.replace(/¨0/g, "");
              return pre;
            });
            return showdown2.subParser("hashBlock")("<blockquote>\n" + bq + "\n</blockquote>", options, globals);
          });
          text = globals.converter._dispatch("blockQuotes.after", text, options, globals);
          return text;
        });
        showdown2.subParser("codeBlocks", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("codeBlocks.before", text, options, globals);
          text += "\xA80";
          var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
          text = text.replace(pattern, function(wholeMatch, m1, m22) {
            var codeblock = m1, nextChar = m22, end = "\n";
            codeblock = showdown2.subParser("outdent")(codeblock, options, globals);
            codeblock = showdown2.subParser("encodeCode")(codeblock, options, globals);
            codeblock = showdown2.subParser("detab")(codeblock, options, globals);
            codeblock = codeblock.replace(/^\n+/g, "");
            codeblock = codeblock.replace(/\n+$/g, "");
            if (options.omitExtraWLInCodeBlocks) {
              end = "";
            }
            codeblock = "<pre><code>" + codeblock + end + "</code></pre>";
            return showdown2.subParser("hashBlock")(codeblock, options, globals) + nextChar;
          });
          text = text.replace(/¨0/, "");
          text = globals.converter._dispatch("codeBlocks.after", text, options, globals);
          return text;
        });
        showdown2.subParser("codeSpans", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("codeSpans.before", text, options, globals);
          if (typeof text === "undefined") {
            text = "";
          }
          text = text.replace(
            /(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
            function(wholeMatch, m1, m22, m3) {
              var c2 = m3;
              c2 = c2.replace(/^([ \t]*)/g, "");
              c2 = c2.replace(/[ \t]*$/g, "");
              c2 = showdown2.subParser("encodeCode")(c2, options, globals);
              c2 = m1 + "<code>" + c2 + "</code>";
              c2 = showdown2.subParser("hashHTMLSpans")(c2, options, globals);
              return c2;
            }
          );
          text = globals.converter._dispatch("codeSpans.after", text, options, globals);
          return text;
        });
        showdown2.subParser("completeHTMLDocument", function(text, options, globals) {
          "use strict";
          if (!options.completeHTMLDocument) {
            return text;
          }
          text = globals.converter._dispatch("completeHTMLDocument.before", text, options, globals);
          var doctype = "html", doctypeParsed = "<!DOCTYPE HTML>\n", title = "", charset = '<meta charset="utf-8">\n', lang = "", metadata = "";
          if (typeof globals.metadata.parsed.doctype !== "undefined") {
            doctypeParsed = "<!DOCTYPE " + globals.metadata.parsed.doctype + ">\n";
            doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
            if (doctype === "html" || doctype === "html5") {
              charset = '<meta charset="utf-8">';
            }
          }
          for (var meta in globals.metadata.parsed) {
            if (globals.metadata.parsed.hasOwnProperty(meta)) {
              switch (meta.toLowerCase()) {
                case "doctype":
                  break;
                case "title":
                  title = "<title>" + globals.metadata.parsed.title + "</title>\n";
                  break;
                case "charset":
                  if (doctype === "html" || doctype === "html5") {
                    charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
                  } else {
                    charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
                  }
                  break;
                case "language":
                case "lang":
                  lang = ' lang="' + globals.metadata.parsed[meta] + '"';
                  metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
                  break;
                default:
                  metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
              }
            }
          }
          text = doctypeParsed + "<html" + lang + ">\n<head>\n" + title + charset + metadata + "</head>\n<body>\n" + text.trim() + "\n</body>\n</html>";
          text = globals.converter._dispatch("completeHTMLDocument.after", text, options, globals);
          return text;
        });
        showdown2.subParser("detab", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("detab.before", text, options, globals);
          text = text.replace(/\t(?=\t)/g, "    ");
          text = text.replace(/\t/g, "\xA8A\xA8B");
          text = text.replace(/¨B(.+?)¨A/g, function(wholeMatch, m1) {
            var leadingText = m1, numSpaces = 4 - leadingText.length % 4;
            for (var i3 = 0; i3 < numSpaces; i3++) {
              leadingText += " ";
            }
            return leadingText;
          });
          text = text.replace(/¨A/g, "    ");
          text = text.replace(/¨B/g, "");
          text = globals.converter._dispatch("detab.after", text, options, globals);
          return text;
        });
        showdown2.subParser("ellipsis", function(text, options, globals) {
          "use strict";
          if (!options.ellipsis) {
            return text;
          }
          text = globals.converter._dispatch("ellipsis.before", text, options, globals);
          text = text.replace(/\.\.\./g, "\u2026");
          text = globals.converter._dispatch("ellipsis.after", text, options, globals);
          return text;
        });
        showdown2.subParser("emoji", function(text, options, globals) {
          "use strict";
          if (!options.emoji) {
            return text;
          }
          text = globals.converter._dispatch("emoji.before", text, options, globals);
          var emojiRgx = /:([\S]+?):/g;
          text = text.replace(emojiRgx, function(wm, emojiCode) {
            if (showdown2.helper.emojis.hasOwnProperty(emojiCode)) {
              return showdown2.helper.emojis[emojiCode];
            }
            return wm;
          });
          text = globals.converter._dispatch("emoji.after", text, options, globals);
          return text;
        });
        showdown2.subParser("encodeAmpsAndAngles", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("encodeAmpsAndAngles.before", text, options, globals);
          text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, "&amp;");
          text = text.replace(/<(?![a-z\/?$!])/gi, "&lt;");
          text = text.replace(/</g, "&lt;");
          text = text.replace(/>/g, "&gt;");
          text = globals.converter._dispatch("encodeAmpsAndAngles.after", text, options, globals);
          return text;
        });
        showdown2.subParser("encodeBackslashEscapes", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("encodeBackslashEscapes.before", text, options, globals);
          text = text.replace(/\\(\\)/g, showdown2.helper.escapeCharactersCallback);
          text = text.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, showdown2.helper.escapeCharactersCallback);
          text = globals.converter._dispatch("encodeBackslashEscapes.after", text, options, globals);
          return text;
        });
        showdown2.subParser("encodeCode", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("encodeCode.before", text, options, globals);
          text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/([*_{}\[\]\\=~-])/g, showdown2.helper.escapeCharactersCallback);
          text = globals.converter._dispatch("encodeCode.after", text, options, globals);
          return text;
        });
        showdown2.subParser("escapeSpecialCharsWithinTagAttributes", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before", text, options, globals);
          var tags = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi, comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;
          text = text.replace(tags, function(wholeMatch) {
            return wholeMatch.replace(/(.)<\/?code>(?=.)/g, "$1`").replace(/([\\`*_~=|])/g, showdown2.helper.escapeCharactersCallback);
          });
          text = text.replace(comments, function(wholeMatch) {
            return wholeMatch.replace(/([\\`*_~=|])/g, showdown2.helper.escapeCharactersCallback);
          });
          text = globals.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after", text, options, globals);
          return text;
        });
        showdown2.subParser("githubCodeBlocks", function(text, options, globals) {
          "use strict";
          if (!options.ghCodeBlocks) {
            return text;
          }
          text = globals.converter._dispatch("githubCodeBlocks.before", text, options, globals);
          text += "\xA80";
          text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function(wholeMatch, delim, language, codeblock) {
            var end = options.omitExtraWLInCodeBlocks ? "" : "\n";
            codeblock = showdown2.subParser("encodeCode")(codeblock, options, globals);
            codeblock = showdown2.subParser("detab")(codeblock, options, globals);
            codeblock = codeblock.replace(/^\n+/g, "");
            codeblock = codeblock.replace(/\n+$/g, "");
            codeblock = "<pre><code" + (language ? ' class="' + language + " language-" + language + '"' : "") + ">" + codeblock + end + "</code></pre>";
            codeblock = showdown2.subParser("hashBlock")(codeblock, options, globals);
            return "\n\n\xA8G" + (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock }) - 1) + "G\n\n";
          });
          text = text.replace(/¨0/, "");
          return globals.converter._dispatch("githubCodeBlocks.after", text, options, globals);
        });
        showdown2.subParser("hashBlock", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("hashBlock.before", text, options, globals);
          text = text.replace(/(^\n+|\n+$)/g, "");
          text = "\n\n\xA8K" + (globals.gHtmlBlocks.push(text) - 1) + "K\n\n";
          text = globals.converter._dispatch("hashBlock.after", text, options, globals);
          return text;
        });
        showdown2.subParser("hashCodeTags", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("hashCodeTags.before", text, options, globals);
          var repFunc = function(wholeMatch, match, left, right) {
            var codeblock = left + showdown2.subParser("encodeCode")(match, options, globals) + right;
            return "\xA8C" + (globals.gHtmlSpans.push(codeblock) - 1) + "C";
          };
          text = showdown2.helper.replaceRecursiveRegExp(text, repFunc, "<code\\b[^>]*>", "</code>", "gim");
          text = globals.converter._dispatch("hashCodeTags.after", text, options, globals);
          return text;
        });
        showdown2.subParser("hashElement", function(text, options, globals) {
          "use strict";
          return function(wholeMatch, m1) {
            var blockText = m1;
            blockText = blockText.replace(/\n\n/g, "\n");
            blockText = blockText.replace(/^\n/, "");
            blockText = blockText.replace(/\n+$/g, "");
            blockText = "\n\n\xA8K" + (globals.gHtmlBlocks.push(blockText) - 1) + "K\n\n";
            return blockText;
          };
        });
        showdown2.subParser("hashHTMLBlocks", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("hashHTMLBlocks.before", text, options, globals);
          var blockTags = [
            "pre",
            "div",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "blockquote",
            "table",
            "dl",
            "ol",
            "ul",
            "script",
            "noscript",
            "form",
            "fieldset",
            "iframe",
            "math",
            "style",
            "section",
            "header",
            "footer",
            "nav",
            "article",
            "aside",
            "address",
            "audio",
            "canvas",
            "figure",
            "hgroup",
            "output",
            "video",
            "p"
          ], repFunc = function(wholeMatch, match, left, right) {
            var txt2 = wholeMatch;
            if (left.search(/\bmarkdown\b/) !== -1) {
              txt2 = left + globals.converter.makeHtml(match) + right;
            }
            return "\n\n\xA8K" + (globals.gHtmlBlocks.push(txt2) - 1) + "K\n\n";
          };
          if (options.backslashEscapesHTMLTags) {
            text = text.replace(/\\<(\/?[^>]+?)>/g, function(wm, inside) {
              return "&lt;" + inside + "&gt;";
            });
          }
          for (var i3 = 0; i3 < blockTags.length; ++i3) {
            var opTagPos, rgx1 = new RegExp("^ {0,3}(<" + blockTags[i3] + "\\b[^>]*>)", "im"), patLeft = "<" + blockTags[i3] + "\\b[^>]*>", patRight = "</" + blockTags[i3] + ">";
            while ((opTagPos = showdown2.helper.regexIndexOf(text, rgx1)) !== -1) {
              var subTexts = showdown2.helper.splitAtIndex(text, opTagPos), newSubText1 = showdown2.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, "im");
              if (newSubText1 === subTexts[1]) {
                break;
              }
              text = subTexts[0].concat(newSubText1);
            }
          }
          text = text.replace(
            /(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
            showdown2.subParser("hashElement")(text, options, globals)
          );
          text = showdown2.helper.replaceRecursiveRegExp(text, function(txt2) {
            return "\n\n\xA8K" + (globals.gHtmlBlocks.push(txt2) - 1) + "K\n\n";
          }, "^ {0,3}<!--", "-->", "gm");
          text = text.replace(
            /(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
            showdown2.subParser("hashElement")(text, options, globals)
          );
          text = globals.converter._dispatch("hashHTMLBlocks.after", text, options, globals);
          return text;
        });
        showdown2.subParser("hashHTMLSpans", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("hashHTMLSpans.before", text, options, globals);
          function hashHTMLSpan(html) {
            return "\xA8C" + (globals.gHtmlSpans.push(html) - 1) + "C";
          }
          text = text.replace(/<[^>]+?\/>/gi, function(wm) {
            return hashHTMLSpan(wm);
          });
          text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function(wm) {
            return hashHTMLSpan(wm);
          });
          text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function(wm) {
            return hashHTMLSpan(wm);
          });
          text = text.replace(/<[^>]+?>/gi, function(wm) {
            return hashHTMLSpan(wm);
          });
          text = globals.converter._dispatch("hashHTMLSpans.after", text, options, globals);
          return text;
        });
        showdown2.subParser("unhashHTMLSpans", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("unhashHTMLSpans.before", text, options, globals);
          for (var i3 = 0; i3 < globals.gHtmlSpans.length; ++i3) {
            var repText = globals.gHtmlSpans[i3], limit = 0;
            while (/¨C(\d+)C/.test(repText)) {
              var num = RegExp.$1;
              repText = repText.replace("\xA8C" + num + "C", globals.gHtmlSpans[num]);
              if (limit === 10) {
                console.error("maximum nesting of 10 spans reached!!!");
                break;
              }
              ++limit;
            }
            text = text.replace("\xA8C" + i3 + "C", repText);
          }
          text = globals.converter._dispatch("unhashHTMLSpans.after", text, options, globals);
          return text;
        });
        showdown2.subParser("hashPreCodeTags", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("hashPreCodeTags.before", text, options, globals);
          var repFunc = function(wholeMatch, match, left, right) {
            var codeblock = left + showdown2.subParser("encodeCode")(match, options, globals) + right;
            return "\n\n\xA8G" + (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock }) - 1) + "G\n\n";
          };
          text = showdown2.helper.replaceRecursiveRegExp(text, repFunc, "^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>", "^ {0,3}</code>\\s*</pre>", "gim");
          text = globals.converter._dispatch("hashPreCodeTags.after", text, options, globals);
          return text;
        });
        showdown2.subParser("headers", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("headers.before", text, options, globals);
          var headerLevelStart = isNaN(parseInt(options.headerLevelStart)) ? 1 : parseInt(options.headerLevelStart), setextRegexH1 = options.smoothLivePreview ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm, setextRegexH2 = options.smoothLivePreview ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;
          text = text.replace(setextRegexH1, function(wholeMatch, m1) {
            var spanGamut = showdown2.subParser("spanGamut")(m1, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m1) + '"', hLevel = headerLevelStart, hashBlock = "<h" + hLevel + hID + ">" + spanGamut + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(hashBlock, options, globals);
          });
          text = text.replace(setextRegexH2, function(matchFound, m1) {
            var spanGamut = showdown2.subParser("spanGamut")(m1, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m1) + '"', hLevel = headerLevelStart + 1, hashBlock = "<h" + hLevel + hID + ">" + spanGamut + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(hashBlock, options, globals);
          });
          var atxStyle = options.requireSpaceBeforeHeadingText ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;
          text = text.replace(atxStyle, function(wholeMatch, m1, m22) {
            var hText = m22;
            if (options.customizedHeaderId) {
              hText = m22.replace(/\s?\{([^{]+?)}\s*$/, "");
            }
            var span = showdown2.subParser("spanGamut")(hText, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m22) + '"', hLevel = headerLevelStart - 1 + m1.length, header = "<h" + hLevel + hID + ">" + span + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(header, options, globals);
          });
          function headerId(m3) {
            var title, prefix;
            if (options.customizedHeaderId) {
              var match = m3.match(/\{([^{]+?)}\s*$/);
              if (match && match[1]) {
                m3 = match[1];
              }
            }
            title = m3;
            if (showdown2.helper.isString(options.prefixHeaderId)) {
              prefix = options.prefixHeaderId;
            } else if (options.prefixHeaderId === true) {
              prefix = "section-";
            } else {
              prefix = "";
            }
            if (!options.rawPrefixHeaderId) {
              title = prefix + title;
            }
            if (options.ghCompatibleHeaderId) {
              title = title.replace(/ /g, "-").replace(/&amp;/g, "").replace(/¨T/g, "").replace(/¨D/g, "").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, "").toLowerCase();
            } else if (options.rawHeaderId) {
              title = title.replace(/ /g, "-").replace(/&amp;/g, "&").replace(/¨T/g, "\xA8").replace(/¨D/g, "$").replace(/["']/g, "-").toLowerCase();
            } else {
              title = title.replace(/[^\w]/g, "").toLowerCase();
            }
            if (options.rawPrefixHeaderId) {
              title = prefix + title;
            }
            if (globals.hashLinkCounts[title]) {
              title = title + "-" + globals.hashLinkCounts[title]++;
            } else {
              globals.hashLinkCounts[title] = 1;
            }
            return title;
          }
          text = globals.converter._dispatch("headers.after", text, options, globals);
          return text;
        });
        showdown2.subParser("horizontalRule", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("horizontalRule.before", text, options, globals);
          var key2 = showdown2.subParser("hashBlock")("<hr />", options, globals);
          text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key2);
          text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key2);
          text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key2);
          text = globals.converter._dispatch("horizontalRule.after", text, options, globals);
          return text;
        });
        showdown2.subParser("images", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("images.before", text, options, globals);
          var inlineRegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, crazyRegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g, base64RegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, referenceRegExp = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g, refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;
          function writeImageTagBase64(wholeMatch, altText, linkId, url2, width, height, m5, title) {
            url2 = url2.replace(/\s/g, "");
            return writeImageTag(wholeMatch, altText, linkId, url2, width, height, m5, title);
          }
          function writeImageTag(wholeMatch, altText, linkId, url2, width, height, m5, title) {
            var gUrls = globals.gUrls, gTitles = globals.gTitles, gDims = globals.gDimensions;
            linkId = linkId.toLowerCase();
            if (!title) {
              title = "";
            }
            if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
              url2 = "";
            } else if (url2 === "" || url2 === null) {
              if (linkId === "" || linkId === null) {
                linkId = altText.toLowerCase().replace(/ ?\n/g, " ");
              }
              url2 = "#" + linkId;
              if (!showdown2.helper.isUndefined(gUrls[linkId])) {
                url2 = gUrls[linkId];
                if (!showdown2.helper.isUndefined(gTitles[linkId])) {
                  title = gTitles[linkId];
                }
                if (!showdown2.helper.isUndefined(gDims[linkId])) {
                  width = gDims[linkId].width;
                  height = gDims[linkId].height;
                }
              } else {
                return wholeMatch;
              }
            }
            altText = altText.replace(/"/g, "&quot;").replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            url2 = url2.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var result = '<img src="' + url2 + '" alt="' + altText + '"';
            if (title && showdown2.helper.isString(title)) {
              title = title.replace(/"/g, "&quot;").replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
              result += ' title="' + title + '"';
            }
            if (width && height) {
              width = width === "*" ? "auto" : width;
              height = height === "*" ? "auto" : height;
              result += ' width="' + width + '"';
              result += ' height="' + height + '"';
            }
            result += " />";
            return result;
          }
          text = text.replace(referenceRegExp, writeImageTag);
          text = text.replace(base64RegExp, writeImageTagBase64);
          text = text.replace(crazyRegExp, writeImageTag);
          text = text.replace(inlineRegExp, writeImageTag);
          text = text.replace(refShortcutRegExp, writeImageTag);
          text = globals.converter._dispatch("images.after", text, options, globals);
          return text;
        });
        showdown2.subParser("italicsAndBold", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("italicsAndBold.before", text, options, globals);
          function parseInside(txt2, left, right) {
            return left + txt2 + right;
          }
          if (options.literalMidWordUnderscores) {
            text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function(wm, txt2) {
              return parseInside(txt2, "<strong><em>", "</em></strong>");
            });
            text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function(wm, txt2) {
              return parseInside(txt2, "<strong>", "</strong>");
            });
            text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function(wm, txt2) {
              return parseInside(txt2, "<em>", "</em>");
            });
          } else {
            text = text.replace(/___(\S[\s\S]*?)___/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<strong><em>", "</em></strong>") : wm;
            });
            text = text.replace(/__(\S[\s\S]*?)__/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<strong>", "</strong>") : wm;
            });
            text = text.replace(/_([^\s_][\s\S]*?)_/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<em>", "</em>") : wm;
            });
          }
          if (options.literalMidWordAsterisks) {
            text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function(wm, lead, txt2) {
              return parseInside(txt2, lead + "<strong><em>", "</em></strong>");
            });
            text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function(wm, lead, txt2) {
              return parseInside(txt2, lead + "<strong>", "</strong>");
            });
            text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function(wm, lead, txt2) {
              return parseInside(txt2, lead + "<em>", "</em>");
            });
          } else {
            text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<strong><em>", "</em></strong>") : wm;
            });
            text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<strong>", "</strong>") : wm;
            });
            text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function(wm, m3) {
              return /\S$/.test(m3) ? parseInside(m3, "<em>", "</em>") : wm;
            });
          }
          text = globals.converter._dispatch("italicsAndBold.after", text, options, globals);
          return text;
        });
        showdown2.subParser("lists", function(text, options, globals) {
          "use strict";
          function processListItems(listStr, trimTrailing) {
            globals.gListLevel++;
            listStr = listStr.replace(/\n{2,}$/, "\n");
            listStr += "\xA80";
            var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm, isParagraphed = /\n[ \t]*\n(?!¨0)/.test(listStr);
            if (options.disableForced4SpacesIndentedSublists) {
              rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
            }
            listStr = listStr.replace(rgx, function(wholeMatch, m1, m22, m3, m4, taskbtn, checked) {
              checked = checked && checked.trim() !== "";
              var item = showdown2.subParser("outdent")(m4, options, globals), bulletStyle = "";
              if (taskbtn && options.tasklists) {
                bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
                item = item.replace(/^[ \t]*\[(x|X| )?]/m, function() {
                  var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
                  if (checked) {
                    otp += " checked";
                  }
                  otp += ">";
                  return otp;
                });
              }
              item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function(wm2) {
                return "\xA8A" + wm2;
              });
              if (m1 || item.search(/\n{2,}/) > -1) {
                item = showdown2.subParser("githubCodeBlocks")(item, options, globals);
                item = showdown2.subParser("blockGamut")(item, options, globals);
              } else {
                item = showdown2.subParser("lists")(item, options, globals);
                item = item.replace(/\n$/, "");
                item = showdown2.subParser("hashHTMLBlocks")(item, options, globals);
                item = item.replace(/\n\n+/g, "\n\n");
                if (isParagraphed) {
                  item = showdown2.subParser("paragraphs")(item, options, globals);
                } else {
                  item = showdown2.subParser("spanGamut")(item, options, globals);
                }
              }
              item = item.replace("\xA8A", "");
              item = "<li" + bulletStyle + ">" + item + "</li>\n";
              return item;
            });
            listStr = listStr.replace(/¨0/g, "");
            globals.gListLevel--;
            if (trimTrailing) {
              listStr = listStr.replace(/\s+$/, "");
            }
            return listStr;
          }
          function styleStartNumber(list, listType) {
            if (listType === "ol") {
              var res = list.match(/^ *(\d+)\./);
              if (res && res[1] !== "1") {
                return ' start="' + res[1] + '"';
              }
            }
            return "";
          }
          function parseConsecutiveLists(list, listType, trimTrailing) {
            var olRgx = options.disableForced4SpacesIndentedSublists ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm, ulRgx = options.disableForced4SpacesIndentedSublists ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm, counterRxg = listType === "ul" ? olRgx : ulRgx, result = "";
            if (list.search(counterRxg) !== -1) {
              (function parseCL(txt2) {
                var pos = txt2.search(counterRxg), style2 = styleStartNumber(list, listType);
                if (pos !== -1) {
                  result += "\n\n<" + listType + style2 + ">\n" + processListItems(txt2.slice(0, pos), !!trimTrailing) + "</" + listType + ">\n";
                  listType = listType === "ul" ? "ol" : "ul";
                  counterRxg = listType === "ul" ? olRgx : ulRgx;
                  parseCL(txt2.slice(pos));
                } else {
                  result += "\n\n<" + listType + style2 + ">\n" + processListItems(txt2, !!trimTrailing) + "</" + listType + ">\n";
                }
              })(list);
            } else {
              var style = styleStartNumber(list, listType);
              result = "\n\n<" + listType + style + ">\n" + processListItems(list, !!trimTrailing) + "</" + listType + ">\n";
            }
            return result;
          }
          text = globals.converter._dispatch("lists.before", text, options, globals);
          text += "\xA80";
          if (globals.gListLevel) {
            text = text.replace(
              /^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
              function(wholeMatch, list, m22) {
                var listType = m22.search(/[*+-]/g) > -1 ? "ul" : "ol";
                return parseConsecutiveLists(list, listType, true);
              }
            );
          } else {
            text = text.replace(
              /(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
              function(wholeMatch, m1, list, m3) {
                var listType = m3.search(/[*+-]/g) > -1 ? "ul" : "ol";
                return parseConsecutiveLists(list, listType, false);
              }
            );
          }
          text = text.replace(/¨0/, "");
          text = globals.converter._dispatch("lists.after", text, options, globals);
          return text;
        });
        showdown2.subParser("metadata", function(text, options, globals) {
          "use strict";
          if (!options.metadata) {
            return text;
          }
          text = globals.converter._dispatch("metadata.before", text, options, globals);
          function parseMetadataContents(content) {
            globals.metadata.raw = content;
            content = content.replace(/&/g, "&amp;").replace(/"/g, "&quot;");
            content = content.replace(/\n {4}/g, " ");
            content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function(wm, key2, value2) {
              globals.metadata.parsed[key2] = value2;
              return "";
            });
          }
          text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function(wholematch, format2, content) {
            parseMetadataContents(content);
            return "\xA8M";
          });
          text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function(wholematch, format2, content) {
            if (format2) {
              globals.metadata.format = format2;
            }
            parseMetadataContents(content);
            return "\xA8M";
          });
          text = text.replace(/¨M/g, "");
          text = globals.converter._dispatch("metadata.after", text, options, globals);
          return text;
        });
        showdown2.subParser("outdent", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("outdent.before", text, options, globals);
          text = text.replace(/^(\t|[ ]{1,4})/gm, "\xA80");
          text = text.replace(/¨0/g, "");
          text = globals.converter._dispatch("outdent.after", text, options, globals);
          return text;
        });
        showdown2.subParser("paragraphs", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("paragraphs.before", text, options, globals);
          text = text.replace(/^\n+/g, "");
          text = text.replace(/\n+$/g, "");
          var grafs = text.split(/\n{2,}/g), grafsOut = [], end = grafs.length;
          for (var i3 = 0; i3 < end; i3++) {
            var str = grafs[i3];
            if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
              grafsOut.push(str);
            } else if (str.search(/\S/) >= 0) {
              str = showdown2.subParser("spanGamut")(str, options, globals);
              str = str.replace(/^([ \t]*)/g, "<p>");
              str += "</p>";
              grafsOut.push(str);
            }
          }
          end = grafsOut.length;
          for (i3 = 0; i3 < end; i3++) {
            var blockText = "", grafsOutIt = grafsOut[i3], codeFlag = false;
            while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
              var delim = RegExp.$1, num = RegExp.$2;
              if (delim === "K") {
                blockText = globals.gHtmlBlocks[num];
              } else {
                if (codeFlag) {
                  blockText = showdown2.subParser("encodeCode")(globals.ghCodeBlocks[num].text, options, globals);
                } else {
                  blockText = globals.ghCodeBlocks[num].codeblock;
                }
              }
              blockText = blockText.replace(/\$/g, "$$$$");
              grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
              if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
                codeFlag = true;
              }
            }
            grafsOut[i3] = grafsOutIt;
          }
          text = grafsOut.join("\n");
          text = text.replace(/^\n+/g, "");
          text = text.replace(/\n+$/g, "");
          return globals.converter._dispatch("paragraphs.after", text, options, globals);
        });
        showdown2.subParser("runExtension", function(ext, text, options, globals) {
          "use strict";
          if (ext.filter) {
            text = ext.filter(text, globals.converter, options);
          } else if (ext.regex) {
            var re3 = ext.regex;
            if (!(re3 instanceof RegExp)) {
              re3 = new RegExp(re3, "g");
            }
            text = text.replace(re3, ext.replace);
          }
          return text;
        });
        showdown2.subParser("spanGamut", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("spanGamut.before", text, options, globals);
          text = showdown2.subParser("codeSpans")(text, options, globals);
          text = showdown2.subParser("escapeSpecialCharsWithinTagAttributes")(text, options, globals);
          text = showdown2.subParser("encodeBackslashEscapes")(text, options, globals);
          text = showdown2.subParser("images")(text, options, globals);
          text = showdown2.subParser("anchors")(text, options, globals);
          text = showdown2.subParser("autoLinks")(text, options, globals);
          text = showdown2.subParser("simplifiedAutoLinks")(text, options, globals);
          text = showdown2.subParser("emoji")(text, options, globals);
          text = showdown2.subParser("underline")(text, options, globals);
          text = showdown2.subParser("italicsAndBold")(text, options, globals);
          text = showdown2.subParser("strikethrough")(text, options, globals);
          text = showdown2.subParser("ellipsis")(text, options, globals);
          text = showdown2.subParser("hashHTMLSpans")(text, options, globals);
          text = showdown2.subParser("encodeAmpsAndAngles")(text, options, globals);
          if (options.simpleLineBreaks) {
            if (!/\n\n¨K/.test(text)) {
              text = text.replace(/\n+/g, "<br />\n");
            }
          } else {
            text = text.replace(/  +\n/g, "<br />\n");
          }
          text = globals.converter._dispatch("spanGamut.after", text, options, globals);
          return text;
        });
        showdown2.subParser("strikethrough", function(text, options, globals) {
          "use strict";
          function parseInside(txt2) {
            if (options.simplifiedAutoLink) {
              txt2 = showdown2.subParser("simplifiedAutoLinks")(txt2, options, globals);
            }
            return "<del>" + txt2 + "</del>";
          }
          if (options.strikethrough) {
            text = globals.converter._dispatch("strikethrough.before", text, options, globals);
            text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function(wm, txt2) {
              return parseInside(txt2);
            });
            text = globals.converter._dispatch("strikethrough.after", text, options, globals);
          }
          return text;
        });
        showdown2.subParser("stripLinkDefinitions", function(text, options, globals) {
          "use strict";
          var regex = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm, base64Regex = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;
          text += "\xA80";
          var replaceFunc = function(wholeMatch, linkId, url2, width, height, blankLines, title) {
            linkId = linkId.toLowerCase();
            if (text.toLowerCase().split(linkId).length - 1 < 2) {
              return wholeMatch;
            }
            if (url2.match(/^data:.+?\/.+?;base64,/)) {
              globals.gUrls[linkId] = url2.replace(/\s/g, "");
            } else {
              globals.gUrls[linkId] = showdown2.subParser("encodeAmpsAndAngles")(url2, options, globals);
            }
            if (blankLines) {
              return blankLines + title;
            } else {
              if (title) {
                globals.gTitles[linkId] = title.replace(/"|'/g, "&quot;");
              }
              if (options.parseImgDimensions && width && height) {
                globals.gDimensions[linkId] = {
                  width,
                  height
                };
              }
            }
            return "";
          };
          text = text.replace(base64Regex, replaceFunc);
          text = text.replace(regex, replaceFunc);
          text = text.replace(/¨0/, "");
          return text;
        });
        showdown2.subParser("tables", function(text, options, globals) {
          "use strict";
          if (!options.tables) {
            return text;
          }
          var tableRgx = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm, singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;
          function parseStyles(sLine) {
            if (/^:[ \t]*--*$/.test(sLine)) {
              return ' style="text-align:left;"';
            } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
              return ' style="text-align:right;"';
            } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
              return ' style="text-align:center;"';
            } else {
              return "";
            }
          }
          function parseHeaders(header, style) {
            var id = "";
            header = header.trim();
            if (options.tablesHeaderId || options.tableHeaderId) {
              id = ' id="' + header.replace(/ /g, "_").toLowerCase() + '"';
            }
            header = showdown2.subParser("spanGamut")(header, options, globals);
            return "<th" + id + style + ">" + header + "</th>\n";
          }
          function parseCells(cell, style) {
            var subText = showdown2.subParser("spanGamut")(cell, options, globals);
            return "<td" + style + ">" + subText + "</td>\n";
          }
          function buildTable(headers, cells) {
            var tb = "<table>\n<thead>\n<tr>\n", tblLgn = headers.length;
            for (var i3 = 0; i3 < tblLgn; ++i3) {
              tb += headers[i3];
            }
            tb += "</tr>\n</thead>\n<tbody>\n";
            for (i3 = 0; i3 < cells.length; ++i3) {
              tb += "<tr>\n";
              for (var ii2 = 0; ii2 < tblLgn; ++ii2) {
                tb += cells[i3][ii2];
              }
              tb += "</tr>\n";
            }
            tb += "</tbody>\n</table>\n";
            return tb;
          }
          function parseTable(rawTable) {
            var i3, tableLines = rawTable.split("\n");
            for (i3 = 0; i3 < tableLines.length; ++i3) {
              if (/^ {0,3}\|/.test(tableLines[i3])) {
                tableLines[i3] = tableLines[i3].replace(/^ {0,3}\|/, "");
              }
              if (/\|[ \t]*$/.test(tableLines[i3])) {
                tableLines[i3] = tableLines[i3].replace(/\|[ \t]*$/, "");
              }
              tableLines[i3] = showdown2.subParser("codeSpans")(tableLines[i3], options, globals);
            }
            var rawHeaders = tableLines[0].split("|").map(function(s2) {
              return s2.trim();
            }), rawStyles = tableLines[1].split("|").map(function(s2) {
              return s2.trim();
            }), rawCells = [], headers = [], styles = [], cells = [];
            tableLines.shift();
            tableLines.shift();
            for (i3 = 0; i3 < tableLines.length; ++i3) {
              if (tableLines[i3].trim() === "") {
                continue;
              }
              rawCells.push(
                tableLines[i3].split("|").map(function(s2) {
                  return s2.trim();
                })
              );
            }
            if (rawHeaders.length < rawStyles.length) {
              return rawTable;
            }
            for (i3 = 0; i3 < rawStyles.length; ++i3) {
              styles.push(parseStyles(rawStyles[i3]));
            }
            for (i3 = 0; i3 < rawHeaders.length; ++i3) {
              if (showdown2.helper.isUndefined(styles[i3])) {
                styles[i3] = "";
              }
              headers.push(parseHeaders(rawHeaders[i3], styles[i3]));
            }
            for (i3 = 0; i3 < rawCells.length; ++i3) {
              var row = [];
              for (var ii2 = 0; ii2 < headers.length; ++ii2) {
                if (showdown2.helper.isUndefined(rawCells[i3][ii2])) {
                }
                row.push(parseCells(rawCells[i3][ii2], styles[ii2]));
              }
              cells.push(row);
            }
            return buildTable(headers, cells);
          }
          text = globals.converter._dispatch("tables.before", text, options, globals);
          text = text.replace(/\\(\|)/g, showdown2.helper.escapeCharactersCallback);
          text = text.replace(tableRgx, parseTable);
          text = text.replace(singeColTblRgx, parseTable);
          text = globals.converter._dispatch("tables.after", text, options, globals);
          return text;
        });
        showdown2.subParser("underline", function(text, options, globals) {
          "use strict";
          if (!options.underline) {
            return text;
          }
          text = globals.converter._dispatch("underline.before", text, options, globals);
          if (options.literalMidWordUnderscores) {
            text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function(wm, txt2) {
              return "<u>" + txt2 + "</u>";
            });
            text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function(wm, txt2) {
              return "<u>" + txt2 + "</u>";
            });
          } else {
            text = text.replace(/___(\S[\s\S]*?)___/g, function(wm, m3) {
              return /\S$/.test(m3) ? "<u>" + m3 + "</u>" : wm;
            });
            text = text.replace(/__(\S[\s\S]*?)__/g, function(wm, m3) {
              return /\S$/.test(m3) ? "<u>" + m3 + "</u>" : wm;
            });
          }
          text = text.replace(/(_)/g, showdown2.helper.escapeCharactersCallback);
          text = globals.converter._dispatch("underline.after", text, options, globals);
          return text;
        });
        showdown2.subParser("unescapeSpecialChars", function(text, options, globals) {
          "use strict";
          text = globals.converter._dispatch("unescapeSpecialChars.before", text, options, globals);
          text = text.replace(/¨E(\d+)E/g, function(wholeMatch, m1) {
            var charCodeToReplace = parseInt(m1);
            return String.fromCharCode(charCodeToReplace);
          });
          text = globals.converter._dispatch("unescapeSpecialChars.after", text, options, globals);
          return text;
        });
        showdown2.subParser("makeMarkdown.blockquote", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes()) {
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              var innerTxt = showdown2.subParser("makeMarkdown.node")(children[i3], globals);
              if (innerTxt === "") {
                continue;
              }
              txt2 += innerTxt;
            }
          }
          txt2 = txt2.trim();
          txt2 = "> " + txt2.split("\n").join("\n> ");
          return txt2;
        });
        showdown2.subParser("makeMarkdown.codeBlock", function(node, globals) {
          "use strict";
          var lang = node.getAttribute("language"), num = node.getAttribute("precodenum");
          return "```" + lang + "\n" + globals.preList[num] + "\n```";
        });
        showdown2.subParser("makeMarkdown.codeSpan", function(node) {
          "use strict";
          return "`" + node.innerHTML + "`";
        });
        showdown2.subParser("makeMarkdown.emphasis", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes()) {
            txt2 += "*";
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt2 += "*";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.header", function(node, globals, headerLevel) {
          "use strict";
          var headerMark = new Array(headerLevel + 1).join("#"), txt2 = "";
          if (node.hasChildNodes()) {
            txt2 = headerMark + " ";
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.hr", function() {
          "use strict";
          return "---";
        });
        showdown2.subParser("makeMarkdown.image", function(node) {
          "use strict";
          var txt2 = "";
          if (node.hasAttribute("src")) {
            txt2 += "![" + node.getAttribute("alt") + "](";
            txt2 += "<" + node.getAttribute("src") + ">";
            if (node.hasAttribute("width") && node.hasAttribute("height")) {
              txt2 += " =" + node.getAttribute("width") + "x" + node.getAttribute("height");
            }
            if (node.hasAttribute("title")) {
              txt2 += ' "' + node.getAttribute("title") + '"';
            }
            txt2 += ")";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.links", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes() && node.hasAttribute("href")) {
            var children = node.childNodes, childrenLength = children.length;
            txt2 = "[";
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt2 += "](";
            txt2 += "<" + node.getAttribute("href") + ">";
            if (node.hasAttribute("title")) {
              txt2 += ' "' + node.getAttribute("title") + '"';
            }
            txt2 += ")";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.list", function(node, globals, type) {
          "use strict";
          var txt2 = "";
          if (!node.hasChildNodes()) {
            return "";
          }
          var listItems = node.childNodes, listItemsLenght = listItems.length, listNum = node.getAttribute("start") || 1;
          for (var i3 = 0; i3 < listItemsLenght; ++i3) {
            if (typeof listItems[i3].tagName === "undefined" || listItems[i3].tagName.toLowerCase() !== "li") {
              continue;
            }
            var bullet = "";
            if (type === "ol") {
              bullet = listNum.toString() + ". ";
            } else {
              bullet = "- ";
            }
            txt2 += bullet + showdown2.subParser("makeMarkdown.listItem")(listItems[i3], globals);
            ++listNum;
          }
          txt2 += "\n<!-- -->\n";
          return txt2.trim();
        });
        showdown2.subParser("makeMarkdown.listItem", function(node, globals) {
          "use strict";
          var listItemTxt = "";
          var children = node.childNodes, childrenLenght = children.length;
          for (var i3 = 0; i3 < childrenLenght; ++i3) {
            listItemTxt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
          }
          if (!/\n$/.test(listItemTxt)) {
            listItemTxt += "\n";
          } else {
            listItemTxt = listItemTxt.split("\n").join("\n    ").replace(/^ {4}$/gm, "").replace(/\n\n+/g, "\n\n");
          }
          return listItemTxt;
        });
        showdown2.subParser("makeMarkdown.node", function(node, globals, spansOnly) {
          "use strict";
          spansOnly = spansOnly || false;
          var txt2 = "";
          if (node.nodeType === 3) {
            return showdown2.subParser("makeMarkdown.txt")(node, globals);
          }
          if (node.nodeType === 8) {
            return "<!--" + node.data + "-->\n\n";
          }
          if (node.nodeType !== 1) {
            return "";
          }
          var tagName = node.tagName.toLowerCase();
          switch (tagName) {
            case "h1":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 1) + "\n\n";
              }
              break;
            case "h2":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 2) + "\n\n";
              }
              break;
            case "h3":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 3) + "\n\n";
              }
              break;
            case "h4":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 4) + "\n\n";
              }
              break;
            case "h5":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 5) + "\n\n";
              }
              break;
            case "h6":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.header")(node, globals, 6) + "\n\n";
              }
              break;
            case "p":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.paragraph")(node, globals) + "\n\n";
              }
              break;
            case "blockquote":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.blockquote")(node, globals) + "\n\n";
              }
              break;
            case "hr":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.hr")(node, globals) + "\n\n";
              }
              break;
            case "ol":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.list")(node, globals, "ol") + "\n\n";
              }
              break;
            case "ul":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.list")(node, globals, "ul") + "\n\n";
              }
              break;
            case "precode":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.codeBlock")(node, globals) + "\n\n";
              }
              break;
            case "pre":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.pre")(node, globals) + "\n\n";
              }
              break;
            case "table":
              if (!spansOnly) {
                txt2 = showdown2.subParser("makeMarkdown.table")(node, globals) + "\n\n";
              }
              break;
            case "code":
              txt2 = showdown2.subParser("makeMarkdown.codeSpan")(node, globals);
              break;
            case "em":
            case "i":
              txt2 = showdown2.subParser("makeMarkdown.emphasis")(node, globals);
              break;
            case "strong":
            case "b":
              txt2 = showdown2.subParser("makeMarkdown.strong")(node, globals);
              break;
            case "del":
              txt2 = showdown2.subParser("makeMarkdown.strikethrough")(node, globals);
              break;
            case "a":
              txt2 = showdown2.subParser("makeMarkdown.links")(node, globals);
              break;
            case "img":
              txt2 = showdown2.subParser("makeMarkdown.image")(node, globals);
              break;
            default:
              txt2 = node.outerHTML + "\n\n";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.paragraph", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes()) {
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
          }
          txt2 = txt2.trim();
          return txt2;
        });
        showdown2.subParser("makeMarkdown.pre", function(node, globals) {
          "use strict";
          var num = node.getAttribute("prenum");
          return "<pre>" + globals.preList[num] + "</pre>";
        });
        showdown2.subParser("makeMarkdown.strikethrough", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes()) {
            txt2 += "~~";
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt2 += "~~";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.strong", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (node.hasChildNodes()) {
            txt2 += "**";
            var children = node.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt2 += "**";
          }
          return txt2;
        });
        showdown2.subParser("makeMarkdown.table", function(node, globals) {
          "use strict";
          var txt2 = "", tableArray = [[], []], headings = node.querySelectorAll("thead>tr>th"), rows = node.querySelectorAll("tbody>tr"), i3, ii2;
          for (i3 = 0; i3 < headings.length; ++i3) {
            var headContent = showdown2.subParser("makeMarkdown.tableCell")(headings[i3], globals), allign = "---";
            if (headings[i3].hasAttribute("style")) {
              var style = headings[i3].getAttribute("style").toLowerCase().replace(/\s/g, "");
              switch (style) {
                case "text-align:left;":
                  allign = ":---";
                  break;
                case "text-align:right;":
                  allign = "---:";
                  break;
                case "text-align:center;":
                  allign = ":---:";
                  break;
              }
            }
            tableArray[0][i3] = headContent.trim();
            tableArray[1][i3] = allign;
          }
          for (i3 = 0; i3 < rows.length; ++i3) {
            var r2 = tableArray.push([]) - 1, cols = rows[i3].getElementsByTagName("td");
            for (ii2 = 0; ii2 < headings.length; ++ii2) {
              var cellContent = " ";
              if (typeof cols[ii2] !== "undefined") {
                cellContent = showdown2.subParser("makeMarkdown.tableCell")(cols[ii2], globals);
              }
              tableArray[r2].push(cellContent);
            }
          }
          var cellSpacesCount = 3;
          for (i3 = 0; i3 < tableArray.length; ++i3) {
            for (ii2 = 0; ii2 < tableArray[i3].length; ++ii2) {
              var strLen = tableArray[i3][ii2].length;
              if (strLen > cellSpacesCount) {
                cellSpacesCount = strLen;
              }
            }
          }
          for (i3 = 0; i3 < tableArray.length; ++i3) {
            for (ii2 = 0; ii2 < tableArray[i3].length; ++ii2) {
              if (i3 === 1) {
                if (tableArray[i3][ii2].slice(-1) === ":") {
                  tableArray[i3][ii2] = showdown2.helper.padEnd(tableArray[i3][ii2].slice(-1), cellSpacesCount - 1, "-") + ":";
                } else {
                  tableArray[i3][ii2] = showdown2.helper.padEnd(tableArray[i3][ii2], cellSpacesCount, "-");
                }
              } else {
                tableArray[i3][ii2] = showdown2.helper.padEnd(tableArray[i3][ii2], cellSpacesCount);
              }
            }
            txt2 += "| " + tableArray[i3].join(" | ") + " |\n";
          }
          return txt2.trim();
        });
        showdown2.subParser("makeMarkdown.tableCell", function(node, globals) {
          "use strict";
          var txt2 = "";
          if (!node.hasChildNodes()) {
            return "";
          }
          var children = node.childNodes, childrenLength = children.length;
          for (var i3 = 0; i3 < childrenLength; ++i3) {
            txt2 += showdown2.subParser("makeMarkdown.node")(children[i3], globals, true);
          }
          return txt2.trim();
        });
        showdown2.subParser("makeMarkdown.txt", function(node) {
          "use strict";
          var txt2 = node.nodeValue;
          txt2 = txt2.replace(/ +/g, " ");
          txt2 = txt2.replace(/¨NBSP;/g, " ");
          txt2 = showdown2.helper.unescapeHTMLEntities(txt2);
          txt2 = txt2.replace(/([*_~|`])/g, "\\$1");
          txt2 = txt2.replace(/^(\s*)>/g, "\\$1>");
          txt2 = txt2.replace(/^#/gm, "\\#");
          txt2 = txt2.replace(/^(\s*)([-=]{3,})(\s*)$/, "$1\\$2$3");
          txt2 = txt2.replace(/^( {0,3}\d+)\./gm, "$1\\.");
          txt2 = txt2.replace(/^( {0,3})([+-])/gm, "$1\\$2");
          txt2 = txt2.replace(/]([\s]*)\(/g, "\\]$1\\(");
          txt2 = txt2.replace(/^ {0,3}\[([\S \t]*?)]:/gm, "\\[$1]:");
          return txt2;
        });
        var root = this;
        if (typeof define === "function" && define.amd) {
          define(function() {
            "use strict";
            return showdown2;
          });
        } else if (typeof module2 !== "undefined" && module2.exports) {
          module2.exports = showdown2;
        } else {
          root.showdown = showdown2;
        }
      }).call(exports2);
    }
  });

  // frappe/public/js/frappe/ui/toolbar/awesome_bar.js
  var require_awesome_bar = __commonJS({
    "frappe/public/js/frappe/ui/toolbar/awesome_bar.js"(exports, module) {
      frappe.provide("frappe.search");
      frappe.provide("frappe.tags");
      frappe.search.AwesomeBar = class AwesomeBar {
        setup(element) {
          var me2 = this;
          $(".search-bar").removeClass("hidden");
          var $input = $(element);
          var input = $input.get(0);
          this.options = [];
          this.global_results = [];
          var awesomplete = new Awesomplete(input, {
            minChars: 0,
            maxItems: 99,
            autoFirst: true,
            list: [],
            filter: function(text, term) {
              return true;
            },
            data: function(item, input2) {
              return {
                label: item.index || "",
                value: item.value
              };
            },
            item: function(item, term) {
              var d3 = this.get_item(item.value);
              var name2 = __(d3.label || d3.value);
              var html = "<span>" + name2 + "</span>";
              if (d3.description && d3.value !== d3.description) {
                html += '<br><span class="text-muted ellipsis">' + __(d3.description) + "</span>";
              }
              return $("<li></li>").data("item.autocomplete", d3).html(`<a style="font-weight:normal">${html}</a>`).get(0);
            },
            sort: function(a2, b2) {
              return b2.label - a2.label;
            }
          });
          input.awesomplete = awesomplete;
          this.awesomplete = awesomplete;
          $input.on(
            "input",
            frappe.utils.debounce(function(e2) {
              var value2 = e2.target.value;
              var txt2 = value2.trim().replace(/\s\s+/g, " ");
              var last_space = txt2.lastIndexOf(" ");
              me2.global_results = [];
              me2.options = [];
              if (txt2 && txt2.length > 1) {
                if (last_space !== -1) {
                  me2.set_specifics(txt2.slice(0, last_space), txt2.slice(last_space + 1));
                }
                me2.add_defaults(txt2);
                me2.options = me2.options.concat(me2.build_options(txt2));
                me2.options = me2.options.concat(me2.global_results);
              } else {
                me2.options = me2.options.concat(
                  me2.deduplicate(frappe.search.utils.get_recent_pages(txt2 || ""))
                );
                me2.options = me2.options.concat(frappe.search.utils.get_frequent_links());
              }
              me2.add_help();
              awesomplete.list = me2.deduplicate(me2.options);
            }, 100)
          );
          var open_recent = function() {
            if (!this.autocomplete_open) {
              $(this).trigger("input");
            }
          };
          $input.on("focus", open_recent);
          $input.on("awesomplete-open", function(e2) {
            me2.autocomplete_open = e2.target;
          });
          $input.on("awesomplete-close", function(e2) {
            me2.autocomplete_open = false;
          });
          $input.on("awesomplete-select", function(e2) {
            var o2 = e2.originalEvent;
            var value2 = o2.text.value;
            var item = awesomplete.get_item(value2);
            if (item.route_options) {
              frappe.route_options = item.route_options;
            }
            if (item.onclick) {
              item.onclick(item.match);
            } else {
              let event2 = o2.originalEvent;
              if (event2.ctrlKey || event2.metaKey) {
                frappe.open_in_new_tab = true;
              }
              if (item.route[0].startsWith("https://")) {
                window.open(item.route[0], "_blank");
                return;
              }
              frappe.set_route(item.route);
            }
            $input.val("");
            $input.trigger("blur");
          });
          $input.on("awesomplete-selectcomplete", function(e2) {
            $input.val("");
          });
          $input.on("keydown", (e2) => {
            if (e2.key == "Escape") {
              $input.trigger("blur");
            }
          });
          frappe.search.utils.setup_recent();
        }
        add_help() {
          this.options.push({
            value: __("Help on Search"),
            index: -10,
            default: "Help",
            onclick: function() {
              var txt2 = '<table class="table table-bordered">					<tr><td style="width: 50%">' + __("Create a new record") + "</td><td>" + __("new type of document") + "</td></tr>					<tr><td>" + __("List a document type") + "</td><td>" + __("document type..., e.g. customer") + "</td></tr>					<tr><td>" + __("Search in a document type") + "</td><td>" + __("text in document type") + "</td></tr>					<tr><td>" + __("Tags") + "</td><td>" + __("tag name..., e.g. #tag") + "</td></tr>					<tr><td>" + __("Open a module or tool") + "</td><td>" + __("module name...") + "</td></tr>					<tr><td>" + __("Calculate") + "</td><td>" + __("e.g. (55 + 434) / 4 or =Math.sin(Math.PI/2)...") + "</td></tr>				</table>";
              frappe.msgprint(txt2, __("Search Help"));
            }
          });
        }
        set_specifics(txt2, end_txt) {
          var me2 = this;
          var results = this.build_options(txt2);
          results.forEach(function(r2) {
            if (r2.type && r2.type.toLowerCase().indexOf(end_txt.toLowerCase()) === 0) {
              me2.options.push(r2);
            }
          });
        }
        add_defaults(txt2) {
          this.make_global_search(txt2);
          this.make_search_in_current(txt2);
          this.make_calculator(txt2);
          this.make_random(txt2);
        }
        build_options(txt2) {
          var options = frappe.search.utils.get_creatables(txt2).concat(
            frappe.search.utils.get_search_in_list(txt2),
            frappe.search.utils.get_doctypes(txt2),
            frappe.search.utils.get_reports(txt2),
            frappe.search.utils.get_pages(txt2),
            frappe.search.utils.get_workspaces(txt2),
            frappe.search.utils.get_dashboards(txt2),
            frappe.search.utils.get_recent_pages(txt2 || ""),
            frappe.search.utils.get_executables(txt2),
            frappe.search.utils.get_marketplace_apps(txt2)
          );
          if (txt2.charAt(0) === "#") {
            options = frappe.tags.utils.get_tags(txt2);
          }
          var out = this.deduplicate(options);
          return out.sort(function(a2, b2) {
            return b2.index - a2.index;
          });
        }
        deduplicate(options) {
          var out = [], routes = [];
          options.forEach(function(option) {
            if (option.route) {
              if (option.route[0] === "List" && option.route[2] !== "Report" && option.route[2] !== "Inbox") {
                option.route.splice(2);
              }
              var str_route = typeof option.route === "string" ? option.route : option.route.join("/");
              if (routes.indexOf(str_route) === -1) {
                out.push(option);
                routes.push(str_route);
              } else {
                var old = routes.indexOf(str_route);
                if (out[old].index < option.index && !option.recent) {
                  out[old] = option;
                }
              }
            } else {
              out.push(option);
              routes.push("");
            }
          });
          return out;
        }
        set_global_results(global_results, txt2) {
          this.global_results = this.global_results.concat(global_results);
        }
        make_global_search(txt2) {
          if (txt2.charAt(0) === "#") {
            return;
          }
          this.options.push({
            label: `
				<span class="flex justify-between text-medium">
					<span class="ellipsis">${__("Search for {0}", [frappe.utils.xss_sanitise(txt2).bold()])}</span>
					<kbd>\u21B5</kbd>
				</span>
			`,
            value: __("Search for {0}", [txt2]),
            match: txt2,
            index: 100,
            default: "Search",
            onclick: function() {
              frappe.searchdialog.search.init_search(txt2, "global_search");
            }
          });
        }
        make_search_in_current(txt2) {
          var route = frappe.get_route();
          if (route[0] === "List" && txt2.indexOf(" in") === -1) {
            var meta = frappe.get_meta(frappe.container.page.list_view.doctype);
            var search_field = meta.title_field || "name";
            var options = {};
            options[search_field] = ["like", "%" + txt2 + "%"];
            this.options.push({
              label: __("Find {0} in {1}", [txt2.bold(), __(route[1]).bold()]),
              value: __("Find {0} in {1}", [txt2, __(route[1])]),
              route_options: options,
              onclick: function() {
                cur_list.show();
              },
              index: 90,
              default: "Current",
              match: txt2
            });
          }
        }
        make_calculator(txt) {
          var first = txt.substr(0, 1);
          if (first == parseInt(first) || first === "(" || first === "=") {
            if (first === "=") {
              txt = txt.substr(1);
            }
            try {
              var val = eval(txt);
              var formatted_value = __("{0} = {1}", [txt, (val + "").bold()]);
              this.options.push({
                label: formatted_value,
                value: __("{0} = {1}", [txt, val]),
                match: val,
                index: 80,
                default: "Calculator",
                onclick: function() {
                  frappe.msgprint(formatted_value, __("Result"));
                }
              });
            } catch (e2) {
            }
          }
        }
        make_random(txt2) {
          if (txt2.toLowerCase().includes("random")) {
            this.options.push({
              label: __("Generate Random Password"),
              value: frappe.utils.get_random(16),
              onclick: function() {
                frappe.msgprint(frappe.utils.get_random(16), __("Result"));
              }
            });
          }
        }
      };
    }
  });

  // node_modules/localforage/dist/localforage.js
  var require_localforage = __commonJS({
    "node_modules/localforage/dist/localforage.js"(exports2, module2) {
      (function(f3) {
        if (typeof exports2 === "object" && typeof module2 !== "undefined") {
          module2.exports = f3();
        } else if (typeof define === "function" && define.amd) {
          define([], f3);
        } else {
          var g2;
          if (typeof window !== "undefined") {
            g2 = window;
          } else if (typeof global !== "undefined") {
            g2 = global;
          } else if (typeof self !== "undefined") {
            g2 = self;
          } else {
            g2 = this;
          }
          g2.localforage = f3();
        }
      })(function() {
        var define2, module3, exports3;
        return function e2(t3, n2, r2) {
          function s2(o3, u2) {
            if (!n2[o3]) {
              if (!t3[o3]) {
                var a2 = typeof __require == "function" && __require;
                if (!u2 && a2)
                  return a2(o3, true);
                if (i3)
                  return i3(o3, true);
                var f3 = new Error("Cannot find module '" + o3 + "'");
                throw f3.code = "MODULE_NOT_FOUND", f3;
              }
              var l2 = n2[o3] = { exports: {} };
              t3[o3][0].call(l2.exports, function(e3) {
                var n3 = t3[o3][1][e3];
                return s2(n3 ? n3 : e3);
              }, l2, l2.exports, e2, t3, n2, r2);
            }
            return n2[o3].exports;
          }
          var i3 = typeof __require == "function" && __require;
          for (var o2 = 0; o2 < r2.length; o2++)
            s2(r2[o2]);
          return s2;
        }({ 1: [function(_dereq_, module4, exports4) {
          (function(global2) {
            "use strict";
            var Mutation = global2.MutationObserver || global2.WebKitMutationObserver;
            var scheduleDrain;
            {
              if (Mutation) {
                var called = 0;
                var observer = new Mutation(nextTick2);
                var element = global2.document.createTextNode("");
                observer.observe(element, {
                  characterData: true
                });
                scheduleDrain = function() {
                  element.data = called = ++called % 2;
                };
              } else if (!global2.setImmediate && typeof global2.MessageChannel !== "undefined") {
                var channel = new global2.MessageChannel();
                channel.port1.onmessage = nextTick2;
                scheduleDrain = function() {
                  channel.port2.postMessage(0);
                };
              } else if ("document" in global2 && "onreadystatechange" in global2.document.createElement("script")) {
                scheduleDrain = function() {
                  var scriptEl = global2.document.createElement("script");
                  scriptEl.onreadystatechange = function() {
                    nextTick2();
                    scriptEl.onreadystatechange = null;
                    scriptEl.parentNode.removeChild(scriptEl);
                    scriptEl = null;
                  };
                  global2.document.documentElement.appendChild(scriptEl);
                };
              } else {
                scheduleDrain = function() {
                  setTimeout(nextTick2, 0);
                };
              }
            }
            var draining;
            var queue = [];
            function nextTick2() {
              draining = true;
              var i3, oldQueue;
              var len = queue.length;
              while (len) {
                oldQueue = queue;
                queue = [];
                i3 = -1;
                while (++i3 < len) {
                  oldQueue[i3]();
                }
                len = queue.length;
              }
              draining = false;
            }
            module4.exports = immediate;
            function immediate(task) {
              if (queue.push(task) === 1 && !draining) {
                scheduleDrain();
              }
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}], 2: [function(_dereq_, module4, exports4) {
          "use strict";
          var immediate = _dereq_(1);
          function INTERNAL() {
          }
          var handlers = {};
          var REJECTED = ["REJECTED"];
          var FULFILLED = ["FULFILLED"];
          var PENDING = ["PENDING"];
          module4.exports = Promise2;
          function Promise2(resolver) {
            if (typeof resolver !== "function") {
              throw new TypeError("resolver must be a function");
            }
            this.state = PENDING;
            this.queue = [];
            this.outcome = void 0;
            if (resolver !== INTERNAL) {
              safelyResolveThenable(this, resolver);
            }
          }
          Promise2.prototype["catch"] = function(onRejected) {
            return this.then(null, onRejected);
          };
          Promise2.prototype.then = function(onFulfilled, onRejected) {
            if (typeof onFulfilled !== "function" && this.state === FULFILLED || typeof onRejected !== "function" && this.state === REJECTED) {
              return this;
            }
            var promise = new this.constructor(INTERNAL);
            if (this.state !== PENDING) {
              var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
              unwrap(promise, resolver, this.outcome);
            } else {
              this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
            }
            return promise;
          };
          function QueueItem(promise, onFulfilled, onRejected) {
            this.promise = promise;
            if (typeof onFulfilled === "function") {
              this.onFulfilled = onFulfilled;
              this.callFulfilled = this.otherCallFulfilled;
            }
            if (typeof onRejected === "function") {
              this.onRejected = onRejected;
              this.callRejected = this.otherCallRejected;
            }
          }
          QueueItem.prototype.callFulfilled = function(value2) {
            handlers.resolve(this.promise, value2);
          };
          QueueItem.prototype.otherCallFulfilled = function(value2) {
            unwrap(this.promise, this.onFulfilled, value2);
          };
          QueueItem.prototype.callRejected = function(value2) {
            handlers.reject(this.promise, value2);
          };
          QueueItem.prototype.otherCallRejected = function(value2) {
            unwrap(this.promise, this.onRejected, value2);
          };
          function unwrap(promise, func, value2) {
            immediate(function() {
              var returnValue;
              try {
                returnValue = func(value2);
              } catch (e2) {
                return handlers.reject(promise, e2);
              }
              if (returnValue === promise) {
                handlers.reject(promise, new TypeError("Cannot resolve promise with itself"));
              } else {
                handlers.resolve(promise, returnValue);
              }
            });
          }
          handlers.resolve = function(self2, value2) {
            var result = tryCatch(getThen, value2);
            if (result.status === "error") {
              return handlers.reject(self2, result.value);
            }
            var thenable = result.value;
            if (thenable) {
              safelyResolveThenable(self2, thenable);
            } else {
              self2.state = FULFILLED;
              self2.outcome = value2;
              var i3 = -1;
              var len = self2.queue.length;
              while (++i3 < len) {
                self2.queue[i3].callFulfilled(value2);
              }
            }
            return self2;
          };
          handlers.reject = function(self2, error) {
            self2.state = REJECTED;
            self2.outcome = error;
            var i3 = -1;
            var len = self2.queue.length;
            while (++i3 < len) {
              self2.queue[i3].callRejected(error);
            }
            return self2;
          };
          function getThen(obj) {
            var then = obj && obj.then;
            if (obj && (typeof obj === "object" || typeof obj === "function") && typeof then === "function") {
              return function appyThen() {
                then.apply(obj, arguments);
              };
            }
          }
          function safelyResolveThenable(self2, thenable) {
            var called = false;
            function onError(value2) {
              if (called) {
                return;
              }
              called = true;
              handlers.reject(self2, value2);
            }
            function onSuccess(value2) {
              if (called) {
                return;
              }
              called = true;
              handlers.resolve(self2, value2);
            }
            function tryToUnwrap() {
              thenable(onSuccess, onError);
            }
            var result = tryCatch(tryToUnwrap);
            if (result.status === "error") {
              onError(result.value);
            }
          }
          function tryCatch(func, value2) {
            var out = {};
            try {
              out.value = func(value2);
              out.status = "success";
            } catch (e2) {
              out.status = "error";
              out.value = e2;
            }
            return out;
          }
          Promise2.resolve = resolve;
          function resolve(value2) {
            if (value2 instanceof this) {
              return value2;
            }
            return handlers.resolve(new this(INTERNAL), value2);
          }
          Promise2.reject = reject;
          function reject(reason) {
            var promise = new this(INTERNAL);
            return handlers.reject(promise, reason);
          }
          Promise2.all = all;
          function all(iterable) {
            var self2 = this;
            if (Object.prototype.toString.call(iterable) !== "[object Array]") {
              return this.reject(new TypeError("must be an array"));
            }
            var len = iterable.length;
            var called = false;
            if (!len) {
              return this.resolve([]);
            }
            var values = new Array(len);
            var resolved = 0;
            var i3 = -1;
            var promise = new this(INTERNAL);
            while (++i3 < len) {
              allResolver(iterable[i3], i3);
            }
            return promise;
            function allResolver(value2, i4) {
              self2.resolve(value2).then(resolveFromAll, function(error) {
                if (!called) {
                  called = true;
                  handlers.reject(promise, error);
                }
              });
              function resolveFromAll(outValue) {
                values[i4] = outValue;
                if (++resolved === len && !called) {
                  called = true;
                  handlers.resolve(promise, values);
                }
              }
            }
          }
          Promise2.race = race;
          function race(iterable) {
            var self2 = this;
            if (Object.prototype.toString.call(iterable) !== "[object Array]") {
              return this.reject(new TypeError("must be an array"));
            }
            var len = iterable.length;
            var called = false;
            if (!len) {
              return this.resolve([]);
            }
            var i3 = -1;
            var promise = new this(INTERNAL);
            while (++i3 < len) {
              resolver(iterable[i3]);
            }
            return promise;
            function resolver(value2) {
              self2.resolve(value2).then(function(response) {
                if (!called) {
                  called = true;
                  handlers.resolve(promise, response);
                }
              }, function(error) {
                if (!called) {
                  called = true;
                  handlers.reject(promise, error);
                }
              });
            }
          }
        }, { "1": 1 }], 3: [function(_dereq_, module4, exports4) {
          (function(global2) {
            "use strict";
            if (typeof global2.Promise !== "function") {
              global2.Promise = _dereq_(2);
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "2": 2 }], 4: [function(_dereq_, module4, exports4) {
          "use strict";
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function getIDB() {
            try {
              if (typeof indexedDB !== "undefined") {
                return indexedDB;
              }
              if (typeof webkitIndexedDB !== "undefined") {
                return webkitIndexedDB;
              }
              if (typeof mozIndexedDB !== "undefined") {
                return mozIndexedDB;
              }
              if (typeof OIndexedDB !== "undefined") {
                return OIndexedDB;
              }
              if (typeof msIndexedDB !== "undefined") {
                return msIndexedDB;
              }
            } catch (e2) {
              return;
            }
          }
          var idb = getIDB();
          function isIndexedDBValid() {
            try {
              if (!idb || !idb.open) {
                return false;
              }
              var isSafari = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
              var hasFetch = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
              return (!isSafari || hasFetch) && typeof indexedDB !== "undefined" && typeof IDBKeyRange !== "undefined";
            } catch (e2) {
              return false;
            }
          }
          function createBlob(parts2, properties) {
            parts2 = parts2 || [];
            properties = properties || {};
            try {
              return new Blob(parts2, properties);
            } catch (e2) {
              if (e2.name !== "TypeError") {
                throw e2;
              }
              var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
              var builder = new Builder();
              for (var i3 = 0; i3 < parts2.length; i3 += 1) {
                builder.append(parts2[i3]);
              }
              return builder.getBlob(properties.type);
            }
          }
          if (typeof Promise === "undefined") {
            _dereq_(3);
          }
          var Promise$1 = Promise;
          function executeCallback(promise, callback) {
            if (callback) {
              promise.then(function(result) {
                callback(null, result);
              }, function(error) {
                callback(error);
              });
            }
          }
          function executeTwoCallbacks(promise, callback, errorCallback) {
            if (typeof callback === "function") {
              promise.then(callback);
            }
            if (typeof errorCallback === "function") {
              promise["catch"](errorCallback);
            }
          }
          function normalizeKey(key3) {
            if (typeof key3 !== "string") {
              console.warn(key3 + " used as a key, but it is not a string.");
              key3 = String(key3);
            }
            return key3;
          }
          function getCallback() {
            if (arguments.length && typeof arguments[arguments.length - 1] === "function") {
              return arguments[arguments.length - 1];
            }
          }
          var DETECT_BLOB_SUPPORT_STORE = "local-forage-detect-blob-support";
          var supportsBlobs = void 0;
          var dbContexts = {};
          var toString2 = Object.prototype.toString;
          var READ_ONLY = "readonly";
          var READ_WRITE = "readwrite";
          function _binStringToArrayBuffer(bin) {
            var length3 = bin.length;
            var buf = new ArrayBuffer(length3);
            var arr = new Uint8Array(buf);
            for (var i3 = 0; i3 < length3; i3++) {
              arr[i3] = bin.charCodeAt(i3);
            }
            return buf;
          }
          function _checkBlobSupportWithoutCaching(idb2) {
            return new Promise$1(function(resolve) {
              var txn = idb2.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
              var blob = createBlob([""]);
              txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, "key");
              txn.onabort = function(e2) {
                e2.preventDefault();
                e2.stopPropagation();
                resolve(false);
              };
              txn.oncomplete = function() {
                var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
                var matchedEdge = navigator.userAgent.match(/Edge\//);
                resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
              };
            })["catch"](function() {
              return false;
            });
          }
          function _checkBlobSupport(idb2) {
            if (typeof supportsBlobs === "boolean") {
              return Promise$1.resolve(supportsBlobs);
            }
            return _checkBlobSupportWithoutCaching(idb2).then(function(value2) {
              supportsBlobs = value2;
              return supportsBlobs;
            });
          }
          function _deferReadiness(dbInfo) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = {};
            deferredOperation.promise = new Promise$1(function(resolve, reject) {
              deferredOperation.resolve = resolve;
              deferredOperation.reject = reject;
            });
            dbContext.deferredOperations.push(deferredOperation);
            if (!dbContext.dbReady) {
              dbContext.dbReady = deferredOperation.promise;
            } else {
              dbContext.dbReady = dbContext.dbReady.then(function() {
                return deferredOperation.promise;
              });
            }
          }
          function _advanceReadiness(dbInfo) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = dbContext.deferredOperations.pop();
            if (deferredOperation) {
              deferredOperation.resolve();
              return deferredOperation.promise;
            }
          }
          function _rejectReadiness(dbInfo, err) {
            var dbContext = dbContexts[dbInfo.name];
            var deferredOperation = dbContext.deferredOperations.pop();
            if (deferredOperation) {
              deferredOperation.reject(err);
              return deferredOperation.promise;
            }
          }
          function _getConnection(dbInfo, upgradeNeeded) {
            return new Promise$1(function(resolve, reject) {
              dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();
              if (dbInfo.db) {
                if (upgradeNeeded) {
                  _deferReadiness(dbInfo);
                  dbInfo.db.close();
                } else {
                  return resolve(dbInfo.db);
                }
              }
              var dbArgs = [dbInfo.name];
              if (upgradeNeeded) {
                dbArgs.push(dbInfo.version);
              }
              var openreq = idb.open.apply(idb, dbArgs);
              if (upgradeNeeded) {
                openreq.onupgradeneeded = function(e2) {
                  var db = openreq.result;
                  try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e2.oldVersion <= 1) {
                      db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                  } catch (ex) {
                    if (ex.name === "ConstraintError") {
                      console.warn('The database "' + dbInfo.name + '" has been upgraded from version ' + e2.oldVersion + " to version " + e2.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                      throw ex;
                    }
                  }
                };
              }
              openreq.onerror = function(e2) {
                e2.preventDefault();
                reject(openreq.error);
              };
              openreq.onsuccess = function() {
                var db = openreq.result;
                db.onversionchange = function(e2) {
                  e2.target.close();
                };
                resolve(db);
                _advanceReadiness(dbInfo);
              };
            });
          }
          function _getOriginalConnection(dbInfo) {
            return _getConnection(dbInfo, false);
          }
          function _getUpgradedConnection(dbInfo) {
            return _getConnection(dbInfo, true);
          }
          function _isUpgradeNeeded(dbInfo, defaultVersion) {
            if (!dbInfo.db) {
              return true;
            }
            var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
            var isDowngrade = dbInfo.version < dbInfo.db.version;
            var isUpgrade = dbInfo.version > dbInfo.db.version;
            if (isDowngrade) {
              if (dbInfo.version !== defaultVersion) {
                console.warn('The database "' + dbInfo.name + `" can't be downgraded from version ` + dbInfo.db.version + " to version " + dbInfo.version + ".");
              }
              dbInfo.version = dbInfo.db.version;
            }
            if (isUpgrade || isNewStore) {
              if (isNewStore) {
                var incVersion = dbInfo.db.version + 1;
                if (incVersion > dbInfo.version) {
                  dbInfo.version = incVersion;
                }
              }
              return true;
            }
            return false;
          }
          function _encodeBlob(blob) {
            return new Promise$1(function(resolve, reject) {
              var reader = new FileReader();
              reader.onerror = reject;
              reader.onloadend = function(e2) {
                var base64 = btoa(e2.target.result || "");
                resolve({
                  __local_forage_encoded_blob: true,
                  data: base64,
                  type: blob.type
                });
              };
              reader.readAsBinaryString(blob);
            });
          }
          function _decodeBlob(encodedBlob) {
            var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
            return createBlob([arrayBuff], { type: encodedBlob.type });
          }
          function _isEncodedBlob(value2) {
            return value2 && value2.__local_forage_encoded_blob;
          }
          function _fullyReady(callback) {
            var self2 = this;
            var promise = self2._initReady().then(function() {
              var dbContext = dbContexts[self2._dbInfo.name];
              if (dbContext && dbContext.dbReady) {
                return dbContext.dbReady;
              }
            });
            executeTwoCallbacks(promise, callback, callback);
            return promise;
          }
          function _tryReconnect(dbInfo) {
            _deferReadiness(dbInfo);
            var dbContext = dbContexts[dbInfo.name];
            var forages = dbContext.forages;
            for (var i3 = 0; i3 < forages.length; i3++) {
              var forage = forages[i3];
              if (forage._dbInfo.db) {
                forage._dbInfo.db.close();
                forage._dbInfo.db = null;
              }
            }
            dbInfo.db = null;
            return _getOriginalConnection(dbInfo).then(function(db) {
              dbInfo.db = db;
              if (_isUpgradeNeeded(dbInfo)) {
                return _getUpgradedConnection(dbInfo);
              }
              return db;
            }).then(function(db) {
              dbInfo.db = dbContext.db = db;
              for (var i4 = 0; i4 < forages.length; i4++) {
                forages[i4]._dbInfo.db = db;
              }
            })["catch"](function(err) {
              _rejectReadiness(dbInfo, err);
              throw err;
            });
          }
          function createTransaction(dbInfo, mode, callback, retries) {
            if (retries === void 0) {
              retries = 1;
            }
            try {
              var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
              callback(null, tx);
            } catch (err) {
              if (retries > 0 && (!dbInfo.db || err.name === "InvalidStateError" || err.name === "NotFoundError")) {
                return Promise$1.resolve().then(function() {
                  if (!dbInfo.db || err.name === "NotFoundError" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    if (dbInfo.db) {
                      dbInfo.version = dbInfo.db.version + 1;
                    }
                    return _getUpgradedConnection(dbInfo);
                  }
                }).then(function() {
                  return _tryReconnect(dbInfo).then(function() {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                  });
                })["catch"](callback);
              }
              callback(err);
            }
          }
          function createDbContext() {
            return {
              forages: [],
              db: null,
              dbReady: null,
              deferredOperations: []
            };
          }
          function _initStorage(options) {
            var self2 = this;
            var dbInfo = {
              db: null
            };
            if (options) {
              for (var i3 in options) {
                dbInfo[i3] = options[i3];
              }
            }
            var dbContext = dbContexts[dbInfo.name];
            if (!dbContext) {
              dbContext = createDbContext();
              dbContexts[dbInfo.name] = dbContext;
            }
            dbContext.forages.push(self2);
            if (!self2._initReady) {
              self2._initReady = self2.ready;
              self2.ready = _fullyReady;
            }
            var initPromises = [];
            function ignoreErrors() {
              return Promise$1.resolve();
            }
            for (var j3 = 0; j3 < dbContext.forages.length; j3++) {
              var forage = dbContext.forages[j3];
              if (forage !== self2) {
                initPromises.push(forage._initReady()["catch"](ignoreErrors));
              }
            }
            var forages = dbContext.forages.slice(0);
            return Promise$1.all(initPromises).then(function() {
              dbInfo.db = dbContext.db;
              return _getOriginalConnection(dbInfo);
            }).then(function(db) {
              dbInfo.db = db;
              if (_isUpgradeNeeded(dbInfo, self2._defaultConfig.version)) {
                return _getUpgradedConnection(dbInfo);
              }
              return db;
            }).then(function(db) {
              dbInfo.db = dbContext.db = db;
              self2._dbInfo = dbInfo;
              for (var k2 = 0; k2 < forages.length; k2++) {
                var forage2 = forages[k2];
                if (forage2 !== self2) {
                  forage2._dbInfo.db = dbInfo.db;
                  forage2._dbInfo.version = dbInfo.version;
                }
              }
            });
          }
          function getItem(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.get(key3);
                    req.onsuccess = function() {
                      var value2 = req.result;
                      if (value2 === void 0) {
                        value2 = null;
                      }
                      if (_isEncodedBlob(value2)) {
                        value2 = _decodeBlob(value2);
                      }
                      resolve(value2);
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate(iterator, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (cursor) {
                        var value2 = cursor.value;
                        if (_isEncodedBlob(value2)) {
                          value2 = _decodeBlob(value2);
                        }
                        var result = iterator(value2, cursor.key, iterationNumber++);
                        if (result !== void 0) {
                          resolve(result);
                        } else {
                          cursor["continue"]();
                        }
                      } else {
                        resolve();
                      }
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem(key3, value2, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              var dbInfo;
              self2.ready().then(function() {
                dbInfo = self2._dbInfo;
                if (toString2.call(value2) === "[object Blob]") {
                  return _checkBlobSupport(dbInfo.db).then(function(blobSupport) {
                    if (blobSupport) {
                      return value2;
                    }
                    return _encodeBlob(value2);
                  });
                }
                return value2;
              }).then(function(value3) {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    if (value3 === null) {
                      value3 = void 0;
                    }
                    var req = store.put(value3, key3);
                    transaction.oncomplete = function() {
                      if (value3 === void 0) {
                        value3 = null;
                      }
                      resolve(value3);
                    };
                    transaction.onabort = transaction.onerror = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function removeItem(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store["delete"](key3);
                    transaction.oncomplete = function() {
                      resolve();
                    };
                    transaction.onerror = function() {
                      reject(req.error);
                    };
                    transaction.onabort = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function clear(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.clear();
                    transaction.oncomplete = function() {
                      resolve();
                    };
                    transaction.onabort = transaction.onerror = function() {
                      var err2 = req.error ? req.error : req.transaction.error;
                      reject(err2);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length2(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.count();
                    req.onsuccess = function() {
                      resolve(req.result);
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key2(n2, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              if (n2 < 0) {
                resolve(null);
                return;
              }
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openKeyCursor();
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (!cursor) {
                        resolve(null);
                        return;
                      }
                      if (n2 === 0) {
                        resolve(cursor.key);
                      } else {
                        if (!advanced) {
                          advanced = true;
                          cursor.advance(n2);
                        } else {
                          resolve(cursor.key);
                        }
                      }
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                  if (err) {
                    return reject(err);
                  }
                  try {
                    var store = transaction.objectStore(self2._dbInfo.storeName);
                    var req = store.openKeyCursor();
                    var keys2 = [];
                    req.onsuccess = function() {
                      var cursor = req.result;
                      if (!cursor) {
                        resolve(keys2);
                        return;
                      }
                      keys2.push(cursor.key);
                      cursor["continue"]();
                    };
                    req.onerror = function() {
                      reject(req.error);
                    };
                  } catch (e2) {
                    reject(e2);
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function dropInstance(options, callback) {
            callback = getCallback.apply(this, arguments);
            var currentConfig = this.config();
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              var isCurrentDb = options.name === currentConfig.name && self2._dbInfo.db;
              var dbPromise = isCurrentDb ? Promise$1.resolve(self2._dbInfo.db) : _getOriginalConnection(options).then(function(db) {
                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;
                dbContext.db = db;
                for (var i3 = 0; i3 < forages.length; i3++) {
                  forages[i3]._dbInfo.db = db;
                }
                return db;
              });
              if (!options.storeName) {
                promise = dbPromise.then(function(db) {
                  _deferReadiness(options);
                  var dbContext = dbContexts[options.name];
                  var forages = dbContext.forages;
                  db.close();
                  for (var i3 = 0; i3 < forages.length; i3++) {
                    var forage = forages[i3];
                    forage._dbInfo.db = null;
                  }
                  var dropDBPromise = new Promise$1(function(resolve, reject) {
                    var req = idb.deleteDatabase(options.name);
                    req.onerror = function() {
                      var db2 = req.result;
                      if (db2) {
                        db2.close();
                      }
                      reject(req.error);
                    };
                    req.onblocked = function() {
                      console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                    };
                    req.onsuccess = function() {
                      var db2 = req.result;
                      if (db2) {
                        db2.close();
                      }
                      resolve(db2);
                    };
                  });
                  return dropDBPromise.then(function(db2) {
                    dbContext.db = db2;
                    for (var i4 = 0; i4 < forages.length; i4++) {
                      var _forage = forages[i4];
                      _advanceReadiness(_forage._dbInfo);
                    }
                  })["catch"](function(err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                    });
                    throw err;
                  });
                });
              } else {
                promise = dbPromise.then(function(db) {
                  if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                  }
                  var newVersion = db.version + 1;
                  _deferReadiness(options);
                  var dbContext = dbContexts[options.name];
                  var forages = dbContext.forages;
                  db.close();
                  for (var i3 = 0; i3 < forages.length; i3++) {
                    var forage = forages[i3];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                  }
                  var dropObjectPromise = new Promise$1(function(resolve, reject) {
                    var req = idb.open(options.name, newVersion);
                    req.onerror = function(err) {
                      var db2 = req.result;
                      db2.close();
                      reject(err);
                    };
                    req.onupgradeneeded = function() {
                      var db2 = req.result;
                      db2.deleteObjectStore(options.storeName);
                    };
                    req.onsuccess = function() {
                      var db2 = req.result;
                      db2.close();
                      resolve(db2);
                    };
                  });
                  return dropObjectPromise.then(function(db2) {
                    dbContext.db = db2;
                    for (var j3 = 0; j3 < forages.length; j3++) {
                      var _forage2 = forages[j3];
                      _forage2._dbInfo.db = db2;
                      _advanceReadiness(_forage2._dbInfo);
                    }
                  })["catch"](function(err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                    });
                    throw err;
                  });
                });
              }
            }
            executeCallback(promise, callback);
            return promise;
          }
          var asyncStorage = {
            _driver: "asyncStorage",
            _initStorage,
            _support: isIndexedDBValid(),
            iterate,
            getItem,
            setItem,
            removeItem,
            clear,
            length: length2,
            key: key2,
            keys,
            dropInstance
          };
          function isWebSQLValid() {
            return typeof openDatabase === "function";
          }
          var BASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var BLOB_TYPE_PREFIX = "~~local_forage_type~";
          var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
          var SERIALIZED_MARKER = "__lfsc__:";
          var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;
          var TYPE_ARRAYBUFFER = "arbf";
          var TYPE_BLOB = "blob";
          var TYPE_INT8ARRAY = "si08";
          var TYPE_UINT8ARRAY = "ui08";
          var TYPE_UINT8CLAMPEDARRAY = "uic8";
          var TYPE_INT16ARRAY = "si16";
          var TYPE_INT32ARRAY = "si32";
          var TYPE_UINT16ARRAY = "ur16";
          var TYPE_UINT32ARRAY = "ui32";
          var TYPE_FLOAT32ARRAY = "fl32";
          var TYPE_FLOAT64ARRAY = "fl64";
          var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
          var toString$1 = Object.prototype.toString;
          function stringToBuffer(serializedString) {
            var bufferLength = serializedString.length * 0.75;
            var len = serializedString.length;
            var i3;
            var p2 = 0;
            var encoded1, encoded2, encoded3, encoded4;
            if (serializedString[serializedString.length - 1] === "=") {
              bufferLength--;
              if (serializedString[serializedString.length - 2] === "=") {
                bufferLength--;
              }
            }
            var buffer = new ArrayBuffer(bufferLength);
            var bytes = new Uint8Array(buffer);
            for (i3 = 0; i3 < len; i3 += 4) {
              encoded1 = BASE_CHARS.indexOf(serializedString[i3]);
              encoded2 = BASE_CHARS.indexOf(serializedString[i3 + 1]);
              encoded3 = BASE_CHARS.indexOf(serializedString[i3 + 2]);
              encoded4 = BASE_CHARS.indexOf(serializedString[i3 + 3]);
              bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
              bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
              bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
            }
            return buffer;
          }
          function bufferToString(buffer) {
            var bytes = new Uint8Array(buffer);
            var base64String = "";
            var i3;
            for (i3 = 0; i3 < bytes.length; i3 += 3) {
              base64String += BASE_CHARS[bytes[i3] >> 2];
              base64String += BASE_CHARS[(bytes[i3] & 3) << 4 | bytes[i3 + 1] >> 4];
              base64String += BASE_CHARS[(bytes[i3 + 1] & 15) << 2 | bytes[i3 + 2] >> 6];
              base64String += BASE_CHARS[bytes[i3 + 2] & 63];
            }
            if (bytes.length % 3 === 2) {
              base64String = base64String.substring(0, base64String.length - 1) + "=";
            } else if (bytes.length % 3 === 1) {
              base64String = base64String.substring(0, base64String.length - 2) + "==";
            }
            return base64String;
          }
          function serialize(value2, callback) {
            var valueType = "";
            if (value2) {
              valueType = toString$1.call(value2);
            }
            if (value2 && (valueType === "[object ArrayBuffer]" || value2.buffer && toString$1.call(value2.buffer) === "[object ArrayBuffer]")) {
              var buffer;
              var marker = SERIALIZED_MARKER;
              if (value2 instanceof ArrayBuffer) {
                buffer = value2;
                marker += TYPE_ARRAYBUFFER;
              } else {
                buffer = value2.buffer;
                if (valueType === "[object Int8Array]") {
                  marker += TYPE_INT8ARRAY;
                } else if (valueType === "[object Uint8Array]") {
                  marker += TYPE_UINT8ARRAY;
                } else if (valueType === "[object Uint8ClampedArray]") {
                  marker += TYPE_UINT8CLAMPEDARRAY;
                } else if (valueType === "[object Int16Array]") {
                  marker += TYPE_INT16ARRAY;
                } else if (valueType === "[object Uint16Array]") {
                  marker += TYPE_UINT16ARRAY;
                } else if (valueType === "[object Int32Array]") {
                  marker += TYPE_INT32ARRAY;
                } else if (valueType === "[object Uint32Array]") {
                  marker += TYPE_UINT32ARRAY;
                } else if (valueType === "[object Float32Array]") {
                  marker += TYPE_FLOAT32ARRAY;
                } else if (valueType === "[object Float64Array]") {
                  marker += TYPE_FLOAT64ARRAY;
                } else {
                  callback(new Error("Failed to get type for BinaryArray"));
                }
              }
              callback(marker + bufferToString(buffer));
            } else if (valueType === "[object Blob]") {
              var fileReader = new FileReader();
              fileReader.onload = function() {
                var str = BLOB_TYPE_PREFIX + value2.type + "~" + bufferToString(this.result);
                callback(SERIALIZED_MARKER + TYPE_BLOB + str);
              };
              fileReader.readAsArrayBuffer(value2);
            } else {
              try {
                callback(JSON.stringify(value2));
              } catch (e2) {
                console.error("Couldn't convert value into a JSON string: ", value2);
                callback(null, e2);
              }
            }
          }
          function deserialize(value2) {
            if (value2.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
              return JSON.parse(value2);
            }
            var serializedString = value2.substring(TYPE_SERIALIZED_MARKER_LENGTH);
            var type = value2.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
            var blobType;
            if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
              var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
              blobType = matcher[1];
              serializedString = serializedString.substring(matcher[0].length);
            }
            var buffer = stringToBuffer(serializedString);
            switch (type) {
              case TYPE_ARRAYBUFFER:
                return buffer;
              case TYPE_BLOB:
                return createBlob([buffer], { type: blobType });
              case TYPE_INT8ARRAY:
                return new Int8Array(buffer);
              case TYPE_UINT8ARRAY:
                return new Uint8Array(buffer);
              case TYPE_UINT8CLAMPEDARRAY:
                return new Uint8ClampedArray(buffer);
              case TYPE_INT16ARRAY:
                return new Int16Array(buffer);
              case TYPE_UINT16ARRAY:
                return new Uint16Array(buffer);
              case TYPE_INT32ARRAY:
                return new Int32Array(buffer);
              case TYPE_UINT32ARRAY:
                return new Uint32Array(buffer);
              case TYPE_FLOAT32ARRAY:
                return new Float32Array(buffer);
              case TYPE_FLOAT64ARRAY:
                return new Float64Array(buffer);
              default:
                throw new Error("Unkown type: " + type);
            }
          }
          var localforageSerializer = {
            serialize,
            deserialize,
            stringToBuffer,
            bufferToString
          };
          function createDbTable(t3, dbInfo, callback, errorCallback) {
            t3.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], callback, errorCallback);
          }
          function _initStorage$1(options) {
            var self2 = this;
            var dbInfo = {
              db: null
            };
            if (options) {
              for (var i3 in options) {
                dbInfo[i3] = typeof options[i3] !== "string" ? options[i3].toString() : options[i3];
              }
            }
            var dbInfoPromise = new Promise$1(function(resolve, reject) {
              try {
                dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
              } catch (e2) {
                return reject(e2);
              }
              dbInfo.db.transaction(function(t3) {
                createDbTable(t3, dbInfo, function() {
                  self2._dbInfo = dbInfo;
                  resolve();
                }, function(t4, error) {
                  reject(error);
                });
              }, reject);
            });
            dbInfo.serializer = localforageSerializer;
            return dbInfoPromise;
          }
          function tryExecuteSql(t3, dbInfo, sqlStatement, args, callback, errorCallback) {
            t3.executeSql(sqlStatement, args, callback, function(t4, error) {
              if (error.code === error.SYNTAX_ERR) {
                t4.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [dbInfo.storeName], function(t5, results) {
                  if (!results.rows.length) {
                    createDbTable(t5, dbInfo, function() {
                      t5.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                  } else {
                    errorCallback(t5, error);
                  }
                }, errorCallback);
              } else {
                errorCallback(t4, error);
              }
            }, errorCallback);
          }
          function getItem$1(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "SELECT * FROM " + dbInfo.storeName + " WHERE key = ? LIMIT 1", [key3], function(t4, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;
                    if (result) {
                      result = dbInfo.serializer.deserialize(result);
                    }
                    resolve(result);
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate$1(iterator, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "SELECT * FROM " + dbInfo.storeName, [], function(t4, results) {
                    var rows = results.rows;
                    var length3 = rows.length;
                    for (var i3 = 0; i3 < length3; i3++) {
                      var item = rows.item(i3);
                      var result = item.value;
                      if (result) {
                        result = dbInfo.serializer.deserialize(result);
                      }
                      result = iterator(result, item.key, i3 + 1);
                      if (result !== void 0) {
                        resolve(result);
                        return;
                      }
                    }
                    resolve();
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function _setItem(key3, value2, callback, retriesLeft) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                if (value2 === void 0) {
                  value2 = null;
                }
                var originalValue = value2;
                var dbInfo = self2._dbInfo;
                dbInfo.serializer.serialize(value2, function(value3, error) {
                  if (error) {
                    reject(error);
                  } else {
                    dbInfo.db.transaction(function(t3) {
                      tryExecuteSql(t3, dbInfo, "INSERT OR REPLACE INTO " + dbInfo.storeName + " (key, value) VALUES (?, ?)", [key3, value3], function() {
                        resolve(originalValue);
                      }, function(t4, error2) {
                        reject(error2);
                      });
                    }, function(sqlError) {
                      if (sqlError.code === sqlError.QUOTA_ERR) {
                        if (retriesLeft > 0) {
                          resolve(_setItem.apply(self2, [key3, originalValue, callback, retriesLeft - 1]));
                          return;
                        }
                        reject(sqlError);
                      }
                    });
                  }
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem$1(key3, value2, callback) {
            return _setItem.apply(this, [key3, value2, callback, 1]);
          }
          function removeItem$1(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "DELETE FROM " + dbInfo.storeName + " WHERE key = ?", [key3], function() {
                    resolve();
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function clear$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "DELETE FROM " + dbInfo.storeName, [], function() {
                    resolve();
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "SELECT COUNT(key) as c FROM " + dbInfo.storeName, [], function(t4, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key$1(n2, callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "SELECT key FROM " + dbInfo.storeName + " WHERE id = ? LIMIT 1", [n2 + 1], function(t4, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys$1(callback) {
            var self2 = this;
            var promise = new Promise$1(function(resolve, reject) {
              self2.ready().then(function() {
                var dbInfo = self2._dbInfo;
                dbInfo.db.transaction(function(t3) {
                  tryExecuteSql(t3, dbInfo, "SELECT key FROM " + dbInfo.storeName, [], function(t4, results) {
                    var keys2 = [];
                    for (var i3 = 0; i3 < results.rows.length; i3++) {
                      keys2.push(results.rows.item(i3).key);
                    }
                    resolve(keys2);
                  }, function(t4, error) {
                    reject(error);
                  });
                });
              })["catch"](reject);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function getAllStoreNames(db) {
            return new Promise$1(function(resolve, reject) {
              db.transaction(function(t3) {
                t3.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t4, results) {
                  var storeNames = [];
                  for (var i3 = 0; i3 < results.rows.length; i3++) {
                    storeNames.push(results.rows.item(i3).name);
                  }
                  resolve({
                    db,
                    storeNames
                  });
                }, function(t4, error) {
                  reject(error);
                });
              }, function(sqlError) {
                reject(sqlError);
              });
            });
          }
          function dropInstance$1(options, callback) {
            callback = getCallback.apply(this, arguments);
            var currentConfig = this.config();
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              promise = new Promise$1(function(resolve) {
                var db;
                if (options.name === currentConfig.name) {
                  db = self2._dbInfo.db;
                } else {
                  db = openDatabase(options.name, "", "", 0);
                }
                if (!options.storeName) {
                  resolve(getAllStoreNames(db));
                } else {
                  resolve({
                    db,
                    storeNames: [options.storeName]
                  });
                }
              }).then(function(operationInfo) {
                return new Promise$1(function(resolve, reject) {
                  operationInfo.db.transaction(function(t3) {
                    function dropTable(storeName) {
                      return new Promise$1(function(resolve2, reject2) {
                        t3.executeSql("DROP TABLE IF EXISTS " + storeName, [], function() {
                          resolve2();
                        }, function(t4, error) {
                          reject2(error);
                        });
                      });
                    }
                    var operations = [];
                    for (var i3 = 0, len = operationInfo.storeNames.length; i3 < len; i3++) {
                      operations.push(dropTable(operationInfo.storeNames[i3]));
                    }
                    Promise$1.all(operations).then(function() {
                      resolve();
                    })["catch"](function(e2) {
                      reject(e2);
                    });
                  }, function(sqlError) {
                    reject(sqlError);
                  });
                });
              });
            }
            executeCallback(promise, callback);
            return promise;
          }
          var webSQLStorage = {
            _driver: "webSQLStorage",
            _initStorage: _initStorage$1,
            _support: isWebSQLValid(),
            iterate: iterate$1,
            getItem: getItem$1,
            setItem: setItem$1,
            removeItem: removeItem$1,
            clear: clear$1,
            length: length$1,
            key: key$1,
            keys: keys$1,
            dropInstance: dropInstance$1
          };
          function isLocalStorageValid() {
            try {
              return typeof localStorage !== "undefined" && "setItem" in localStorage && !!localStorage.setItem;
            } catch (e2) {
              return false;
            }
          }
          function _getKeyPrefix(options, defaultConfig) {
            var keyPrefix = options.name + "/";
            if (options.storeName !== defaultConfig.storeName) {
              keyPrefix += options.storeName + "/";
            }
            return keyPrefix;
          }
          function checkIfLocalStorageThrows() {
            var localStorageTestKey = "_localforage_support_test";
            try {
              localStorage.setItem(localStorageTestKey, true);
              localStorage.removeItem(localStorageTestKey);
              return false;
            } catch (e2) {
              return true;
            }
          }
          function _isLocalStorageUsable() {
            return !checkIfLocalStorageThrows() || localStorage.length > 0;
          }
          function _initStorage$2(options) {
            var self2 = this;
            var dbInfo = {};
            if (options) {
              for (var i3 in options) {
                dbInfo[i3] = options[i3];
              }
            }
            dbInfo.keyPrefix = _getKeyPrefix(options, self2._defaultConfig);
            if (!_isLocalStorageUsable()) {
              return Promise$1.reject();
            }
            self2._dbInfo = dbInfo;
            dbInfo.serializer = localforageSerializer;
            return Promise$1.resolve();
          }
          function clear$2(callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var keyPrefix = self2._dbInfo.keyPrefix;
              for (var i3 = localStorage.length - 1; i3 >= 0; i3--) {
                var key3 = localStorage.key(i3);
                if (key3.indexOf(keyPrefix) === 0) {
                  localStorage.removeItem(key3);
                }
              }
            });
            executeCallback(promise, callback);
            return promise;
          }
          function getItem$2(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var result = localStorage.getItem(dbInfo.keyPrefix + key3);
              if (result) {
                result = dbInfo.serializer.deserialize(result);
              }
              return result;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function iterate$2(iterator, callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var keyPrefix = dbInfo.keyPrefix;
              var keyPrefixLength = keyPrefix.length;
              var length3 = localStorage.length;
              var iterationNumber = 1;
              for (var i3 = 0; i3 < length3; i3++) {
                var key3 = localStorage.key(i3);
                if (key3.indexOf(keyPrefix) !== 0) {
                  continue;
                }
                var value2 = localStorage.getItem(key3);
                if (value2) {
                  value2 = dbInfo.serializer.deserialize(value2);
                }
                value2 = iterator(value2, key3.substring(keyPrefixLength), iterationNumber++);
                if (value2 !== void 0) {
                  return value2;
                }
              }
            });
            executeCallback(promise, callback);
            return promise;
          }
          function key$2(n2, callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var result;
              try {
                result = localStorage.key(n2);
              } catch (error) {
                result = null;
              }
              if (result) {
                result = result.substring(dbInfo.keyPrefix.length);
              }
              return result;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function keys$2(callback) {
            var self2 = this;
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              var length3 = localStorage.length;
              var keys2 = [];
              for (var i3 = 0; i3 < length3; i3++) {
                var itemKey = localStorage.key(i3);
                if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                  keys2.push(itemKey.substring(dbInfo.keyPrefix.length));
                }
              }
              return keys2;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function length$2(callback) {
            var self2 = this;
            var promise = self2.keys().then(function(keys2) {
              return keys2.length;
            });
            executeCallback(promise, callback);
            return promise;
          }
          function removeItem$2(key3, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              localStorage.removeItem(dbInfo.keyPrefix + key3);
            });
            executeCallback(promise, callback);
            return promise;
          }
          function setItem$2(key3, value2, callback) {
            var self2 = this;
            key3 = normalizeKey(key3);
            var promise = self2.ready().then(function() {
              if (value2 === void 0) {
                value2 = null;
              }
              var originalValue = value2;
              return new Promise$1(function(resolve, reject) {
                var dbInfo = self2._dbInfo;
                dbInfo.serializer.serialize(value2, function(value3, error) {
                  if (error) {
                    reject(error);
                  } else {
                    try {
                      localStorage.setItem(dbInfo.keyPrefix + key3, value3);
                      resolve(originalValue);
                    } catch (e2) {
                      if (e2.name === "QuotaExceededError" || e2.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                        reject(e2);
                      }
                      reject(e2);
                    }
                  }
                });
              });
            });
            executeCallback(promise, callback);
            return promise;
          }
          function dropInstance$2(options, callback) {
            callback = getCallback.apply(this, arguments);
            options = typeof options !== "function" && options || {};
            if (!options.name) {
              var currentConfig = this.config();
              options.name = options.name || currentConfig.name;
              options.storeName = options.storeName || currentConfig.storeName;
            }
            var self2 = this;
            var promise;
            if (!options.name) {
              promise = Promise$1.reject("Invalid arguments");
            } else {
              promise = new Promise$1(function(resolve) {
                if (!options.storeName) {
                  resolve(options.name + "/");
                } else {
                  resolve(_getKeyPrefix(options, self2._defaultConfig));
                }
              }).then(function(keyPrefix) {
                for (var i3 = localStorage.length - 1; i3 >= 0; i3--) {
                  var key3 = localStorage.key(i3);
                  if (key3.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key3);
                  }
                }
              });
            }
            executeCallback(promise, callback);
            return promise;
          }
          var localStorageWrapper = {
            _driver: "localStorageWrapper",
            _initStorage: _initStorage$2,
            _support: isLocalStorageValid(),
            iterate: iterate$2,
            getItem: getItem$2,
            setItem: setItem$2,
            removeItem: removeItem$2,
            clear: clear$2,
            length: length$2,
            key: key$2,
            keys: keys$2,
            dropInstance: dropInstance$2
          };
          var sameValue = function sameValue2(x2, y2) {
            return x2 === y2 || typeof x2 === "number" && typeof y2 === "number" && isNaN(x2) && isNaN(y2);
          };
          var includes = function includes2(array, searchElement) {
            var len = array.length;
            var i3 = 0;
            while (i3 < len) {
              if (sameValue(array[i3], searchElement)) {
                return true;
              }
              i3++;
            }
            return false;
          };
          var isArray = Array.isArray || function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
          var DefinedDrivers = {};
          var DriverSupport = {};
          var DefaultDrivers = {
            INDEXEDDB: asyncStorage,
            WEBSQL: webSQLStorage,
            LOCALSTORAGE: localStorageWrapper
          };
          var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];
          var OptionalDriverMethods = ["dropInstance"];
          var LibraryMethods = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"].concat(OptionalDriverMethods);
          var DefaultConfig = {
            description: "",
            driver: DefaultDriverOrder.slice(),
            name: "localforage",
            size: 4980736,
            storeName: "keyvaluepairs",
            version: 1
          };
          function callWhenReady(localForageInstance, libraryMethod) {
            localForageInstance[libraryMethod] = function() {
              var _args = arguments;
              return localForageInstance.ready().then(function() {
                return localForageInstance[libraryMethod].apply(localForageInstance, _args);
              });
            };
          }
          function extend() {
            for (var i3 = 1; i3 < arguments.length; i3++) {
              var arg = arguments[i3];
              if (arg) {
                for (var _key in arg) {
                  if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                      arguments[0][_key] = arg[_key].slice();
                    } else {
                      arguments[0][_key] = arg[_key];
                    }
                  }
                }
              }
            }
            return arguments[0];
          }
          var LocalForage = function() {
            function LocalForage2(options) {
              _classCallCheck(this, LocalForage2);
              for (var driverTypeKey in DefaultDrivers) {
                if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                  var driver = DefaultDrivers[driverTypeKey];
                  var driverName = driver._driver;
                  this[driverTypeKey] = driverName;
                  if (!DefinedDrivers[driverName]) {
                    this.defineDriver(driver);
                  }
                }
              }
              this._defaultConfig = extend({}, DefaultConfig);
              this._config = extend({}, this._defaultConfig, options);
              this._driverSet = null;
              this._initDriver = null;
              this._ready = false;
              this._dbInfo = null;
              this._wrapLibraryMethodsWithReady();
              this.setDriver(this._config.driver)["catch"](function() {
              });
            }
            LocalForage2.prototype.config = function config(options) {
              if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
                if (this._ready) {
                  return new Error("Can't call config() after localforage has been used.");
                }
                for (var i3 in options) {
                  if (i3 === "storeName") {
                    options[i3] = options[i3].replace(/\W/g, "_");
                  }
                  if (i3 === "version" && typeof options[i3] !== "number") {
                    return new Error("Database version must be a number.");
                  }
                  this._config[i3] = options[i3];
                }
                if ("driver" in options && options.driver) {
                  return this.setDriver(this._config.driver);
                }
                return true;
              } else if (typeof options === "string") {
                return this._config[options];
              } else {
                return this._config;
              }
            };
            LocalForage2.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
              var promise = new Promise$1(function(resolve, reject) {
                try {
                  var driverName = driverObject._driver;
                  var complianceError = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                  if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                  }
                  var driverMethods = LibraryMethods.concat("_initStorage");
                  for (var i3 = 0, len = driverMethods.length; i3 < len; i3++) {
                    var driverMethodName = driverMethods[i3];
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== "function") {
                      reject(complianceError);
                      return;
                    }
                  }
                  var configureMissingMethods = function configureMissingMethods2() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory2(methodName) {
                      return function() {
                        var error = new Error("Method " + methodName + " is not implemented by the current driver");
                        var promise2 = Promise$1.reject(error);
                        executeCallback(promise2, arguments[arguments.length - 1]);
                        return promise2;
                      };
                    };
                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                      var optionalDriverMethod = OptionalDriverMethods[_i];
                      if (!driverObject[optionalDriverMethod]) {
                        driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                      }
                    }
                  };
                  configureMissingMethods();
                  var setDriverSupport = function setDriverSupport2(support) {
                    if (DefinedDrivers[driverName]) {
                      console.info("Redefining LocalForage driver: " + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    resolve();
                  };
                  if ("_support" in driverObject) {
                    if (driverObject._support && typeof driverObject._support === "function") {
                      driverObject._support().then(setDriverSupport, reject);
                    } else {
                      setDriverSupport(!!driverObject._support);
                    }
                  } else {
                    setDriverSupport(true);
                  }
                } catch (e2) {
                  reject(e2);
                }
              });
              executeTwoCallbacks(promise, callback, errorCallback);
              return promise;
            };
            LocalForage2.prototype.driver = function driver() {
              return this._driver || null;
            };
            LocalForage2.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
              var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error("Driver not found."));
              executeTwoCallbacks(getDriverPromise, callback, errorCallback);
              return getDriverPromise;
            };
            LocalForage2.prototype.getSerializer = function getSerializer(callback) {
              var serializerPromise = Promise$1.resolve(localforageSerializer);
              executeTwoCallbacks(serializerPromise, callback);
              return serializerPromise;
            };
            LocalForage2.prototype.ready = function ready(callback) {
              var self2 = this;
              var promise = self2._driverSet.then(function() {
                if (self2._ready === null) {
                  self2._ready = self2._initDriver();
                }
                return self2._ready;
              });
              executeTwoCallbacks(promise, callback, callback);
              return promise;
            };
            LocalForage2.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
              var self2 = this;
              if (!isArray(drivers)) {
                drivers = [drivers];
              }
              var supportedDrivers = this._getSupportedDrivers(drivers);
              function setDriverToConfig() {
                self2._config.driver = self2.driver();
              }
              function extendSelfWithDriver(driver) {
                self2._extend(driver);
                setDriverToConfig();
                self2._ready = self2._initStorage(self2._config);
                return self2._ready;
              }
              function initDriver(supportedDrivers2) {
                return function() {
                  var currentDriverIndex = 0;
                  function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers2.length) {
                      var driverName = supportedDrivers2[currentDriverIndex];
                      currentDriverIndex++;
                      self2._dbInfo = null;
                      self2._ready = null;
                      return self2.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }
                    setDriverToConfig();
                    var error = new Error("No available storage method found.");
                    self2._driverSet = Promise$1.reject(error);
                    return self2._driverSet;
                  }
                  return driverPromiseLoop();
                };
              }
              var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function() {
                return Promise$1.resolve();
              }) : Promise$1.resolve();
              this._driverSet = oldDriverSetDone.then(function() {
                var driverName = supportedDrivers[0];
                self2._dbInfo = null;
                self2._ready = null;
                return self2.getDriver(driverName).then(function(driver) {
                  self2._driver = driver._driver;
                  setDriverToConfig();
                  self2._wrapLibraryMethodsWithReady();
                  self2._initDriver = initDriver(supportedDrivers);
                });
              })["catch"](function() {
                setDriverToConfig();
                var error = new Error("No available storage method found.");
                self2._driverSet = Promise$1.reject(error);
                return self2._driverSet;
              });
              executeTwoCallbacks(this._driverSet, callback, errorCallback);
              return this._driverSet;
            };
            LocalForage2.prototype.supports = function supports(driverName) {
              return !!DriverSupport[driverName];
            };
            LocalForage2.prototype._extend = function _extend(libraryMethodsAndProperties) {
              extend(this, libraryMethodsAndProperties);
            };
            LocalForage2.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
              var supportedDrivers = [];
              for (var i3 = 0, len = drivers.length; i3 < len; i3++) {
                var driverName = drivers[i3];
                if (this.supports(driverName)) {
                  supportedDrivers.push(driverName);
                }
              }
              return supportedDrivers;
            };
            LocalForage2.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
              for (var i3 = 0, len = LibraryMethods.length; i3 < len; i3++) {
                callWhenReady(this, LibraryMethods[i3]);
              }
            };
            LocalForage2.prototype.createInstance = function createInstance(options) {
              return new LocalForage2(options);
            };
            return LocalForage2;
          }();
          var localforage_js = new LocalForage();
          module4.exports = localforage_js;
        }, { "3": 3 }] }, {}, [4])(4);
      });
    }
  });

  // node_modules/editorjs-undo/dist/bundle.js
  var require_bundle = __commonJS({
    "node_modules/editorjs-undo/dist/bundle.js"(exports2, module2) {
      !function(t3, e2) {
        "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e2() : "function" == typeof define && define.amd ? define([], e2) : "object" == typeof exports2 ? exports2.Undo = e2() : t3.Undo = e2();
      }(window, function() {
        return function(t3) {
          var e2 = {};
          function n2(i3) {
            if (e2[i3])
              return e2[i3].exports;
            var o2 = e2[i3] = { i: i3, l: false, exports: {} };
            return t3[i3].call(o2.exports, o2, o2.exports, n2), o2.l = true, o2.exports;
          }
          return n2.m = t3, n2.c = e2, n2.d = function(t4, e3, i3) {
            n2.o(t4, e3) || Object.defineProperty(t4, e3, { enumerable: true, get: i3 });
          }, n2.r = function(t4) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
          }, n2.t = function(t4, e3) {
            if (1 & e3 && (t4 = n2(t4)), 8 & e3)
              return t4;
            if (4 & e3 && "object" == typeof t4 && t4 && t4.__esModule)
              return t4;
            var i3 = /* @__PURE__ */ Object.create(null);
            if (n2.r(i3), Object.defineProperty(i3, "default", { enumerable: true, value: t4 }), 2 & e3 && "string" != typeof t4)
              for (var o2 in t4)
                n2.d(i3, o2, function(e4) {
                  return t4[e4];
                }.bind(null, o2));
            return i3;
          }, n2.n = function(t4) {
            var e3 = t4 && t4.__esModule ? function() {
              return t4.default;
            } : function() {
              return t4;
            };
            return n2.d(e3, "a", e3), e3;
          }, n2.o = function(t4, e3) {
            return Object.prototype.hasOwnProperty.call(t4, e3);
          }, n2.p = "/", n2(n2.s = 0);
        }([function(t3, e2, n2) {
          "use strict";
          function i3(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var i4 = e3[n3];
              i4.enumerable = i4.enumerable || false, i4.configurable = true, "value" in i4 && (i4.writable = true), Object.defineProperty(t4, i4.key, i4);
            }
          }
          n2.r(e2), n2.d(e2, "default", function() {
            return s2;
          });
          var o2 = function() {
            function t4(e4, n4) {
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4), this.holder = "string" == typeof n4 ? document.getElementById(n4) : n4, this.observer = null, this.debounceTimer = 200, this.mutationDebouncer = this.debounce(function() {
                e4();
              }, this.debounceTimer);
            }
            var e3, n3, o3;
            return e3 = t4, (n3 = [{ key: "setMutationObserver", value: function() {
              var t5 = this, e4 = this.holder;
              this.observer = new MutationObserver(function(e5) {
                t5.mutationHandler(e5);
              }), this.observer.observe(e4, { childList: true, attributes: true, subtree: true, characterData: true, characterDataOldValue: true });
            } }, { key: "mutationHandler", value: function(t5) {
              var e4 = this, n4 = false;
              t5.forEach(function(t6) {
                switch (t6.type) {
                  case "childList":
                    t6.target === e4.holder ? e4.onDestroy() : n4 = true;
                    break;
                  case "characterData":
                    n4 = true;
                    break;
                  case "attributes":
                    t6.target.classList.contains("ce-block") || (n4 = true);
                }
              }), n4 && this.mutationDebouncer();
            } }, { key: "debounce", value: function(t5, e4) {
              var n4, i4 = this;
              return function() {
                for (var o4 = arguments.length, r3 = new Array(o4), s3 = 0; s3 < o4; s3++)
                  r3[s3] = arguments[s3];
                var a2 = i4;
                clearTimeout(n4), n4 = setTimeout(function() {
                  return t5.apply(a2, r3);
                }, e4);
              };
            } }, { key: "onDestroy", value: function() {
              var t5 = new CustomEvent("destroy");
              document.dispatchEvent(t5), this.observer.disconnect();
            } }]) && i3(e3.prototype, n3), o3 && i3(e3, o3), t4;
          }();
          function r2(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var i4 = e3[n3];
              i4.enumerable = i4.enumerable || false, i4.configurable = true, "value" in i4 && (i4.writable = true), Object.defineProperty(t4, i4.key, i4);
            }
          }
          var s2 = function() {
            function t4(e4) {
              var n4 = this, i5 = e4.editor, r3 = e4.onUpdate, s3 = e4.maxLength;
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4);
              var a2 = { maxLength: 30, onUpdate: function() {
              } }, u2 = i5.configuration;
              this.editor = i5, this.shouldSaveHistory = true, this.readOnly = u2.readOnly, this.maxLength = s3 || a2.maxLength, this.onUpdate = r3 || a2.onUpdate, new o2(function() {
                return n4.registerChange();
              }, u2.holder).setMutationObserver(), this.setEventListeners(), this.initialItem = null, this.clear();
            }
            var e3, n3, i4;
            return e3 = t4, i4 = [{ key: "isReadOnlySupported", get: function() {
              return true;
            } }], (n3 = [{ key: "truncate", value: function(t5, e4) {
              for (; t5.length > e4; )
                t5.shift();
            } }, { key: "initialize", value: function(t5) {
              var e4 = "blocks" in t5 ? t5.blocks : t5, n4 = { index: e4.length - 1, state: e4 };
              this.stack[0] = n4, this.initialItem = n4;
            } }, { key: "clear", value: function() {
              this.stack = this.initialItem ? [this.initialItem] : [{ index: 0, state: [] }], this.position = 0, this.onUpdate();
            } }, { key: "registerChange", value: function() {
              var t5 = this;
              this.readOnly || (this.editor && this.editor.save && this.shouldSaveHistory && this.editor.save().then(function(e4) {
                t5.editorDidUpdate(e4.blocks) && t5.save(e4.blocks);
              }), this.shouldSaveHistory = true);
            } }, { key: "editorDidUpdate", value: function(t5) {
              var e4 = this.stack[this.position].state;
              return t5.length !== e4.length || JSON.stringify(e4) !== JSON.stringify(t5);
            } }, { key: "save", value: function(t5) {
              this.position >= this.maxLength && this.truncate(this.stack, this.maxLength), this.position = Math.min(this.position, this.stack.length - 1), this.stack = this.stack.slice(0, this.position + 1);
              var e4 = this.editor.blocks.getCurrentBlockIndex();
              this.stack.push({ index: e4, state: t5 }), this.position += 1, this.onUpdate();
            } }, { key: "undo", value: function() {
              var t5 = this;
              if (this.canUndo()) {
                this.shouldSaveHistory = false;
                var e4 = this.stack[this.position -= 1], n4 = e4.index, i5 = e4.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i5 }).then(function() {
                  return t5.editor.caret.setToBlock(n4, "end");
                });
              }
            } }, { key: "redo", value: function() {
              var t5 = this;
              if (this.canRedo()) {
                this.shouldSaveHistory = false;
                var e4 = this.stack[this.position += 1], n4 = e4.index, i5 = e4.state;
                this.onUpdate(), this.editor.blocks.render({ blocks: i5 }).then(function() {
                  return t5.editor.caret.setToBlock(n4, "end");
                });
              }
            } }, { key: "canUndo", value: function() {
              return !this.readOnly && this.position > 0;
            } }, { key: "canRedo", value: function() {
              return !this.readOnly && this.position < this.count();
            } }, { key: "count", value: function() {
              return this.stack.length - 1;
            } }, { key: "setEventListeners", value: function() {
              var t5 = this, e4 = /(Mac)/i.test(navigator.platform) ? "metaKey" : "ctrlKey", n4 = function(n5) {
                n5[e4] && "z" === n5.key && (n5.preventDefault(), t5.undo());
              }, i5 = function(n5) {
                n5[e4] && "y" === n5.key && (n5.preventDefault(), t5.redo());
              };
              document.addEventListener("keydown", n4), document.addEventListener("keydown", i5), document.addEventListener("destroy", function() {
                document.removeEventListener("keydown", n4), document.removeEventListener("keydown", i5);
              });
            } }]) && r2(e3.prototype, n3), i4 && r2(e3, i4), t4;
          }();
        }]).default;
      });
    }
  });

  // frappe/public/js/frappe/utils/dashboard_utils.js
  var require_dashboard_utils = __commonJS({
    "frappe/public/js/frappe/utils/dashboard_utils.js"(exports, module) {
      frappe.dashboard_utils = {
        render_chart_filters: function(filters2, button_class, container, append) {
          filters2.forEach((filter) => {
            let icon_html = "", filter_class = "";
            if (filter.icon) {
              icon_html = frappe.utils.icon(filter.icon);
            }
            if (filter.class) {
              filter_class = filter.class;
            }
            let chart_filter_html = `<div class="${button_class} ${filter_class} btn-group dropdown pull-right">
					<a data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						<button class="btn btn-secondary btn-xs">
							${icon_html}
							<span class="filter-label">${__(filter.label)}</span>
							${frappe.utils.icon("select", "xs")}
						</button>
				</a>`;
            let options_html;
            if (filter.fieldnames) {
              options_html = filter.options.map(
                (option, i3) => `<li>
						<a class="dropdown-item" data-fieldname="${filter.fieldnames[i3]}" data-option="${encodeURIComponent(option)}">${__(option)}</a>
					</li>`
              ).join("");
            } else {
              options_html = filter.options.map(
                (option) => `<li><a class="dropdown-item" data-option="${encodeURIComponent(
                  option
                )}">${__(option)}</a></li>`
              ).join("");
            }
            let dropdown_html = chart_filter_html + `<ul class="dropdown-menu">${options_html}</ul></div>`;
            let $chart_filter = $(dropdown_html);
            if (append) {
              $chart_filter.prependTo(container);
            } else
              $chart_filter.appendTo(container);
            $chart_filter.find(".dropdown-menu").on("click", "li a", (e2) => {
              let $el = $(e2.currentTarget);
              let fieldname;
              if ($el.attr("data-fieldname")) {
                fieldname = $el.attr("data-fieldname");
              }
              let selected_item = decodeURIComponent($el.data("option"));
              $el.parents(`.${button_class}`).find(".filter-label").html(__(selected_item));
              filter.action(selected_item, fieldname);
            });
          });
        },
        get_filters_for_chart_type: function(chart) {
          if (chart.chart_type === "Custom" && chart.source) {
            const method = "frappe.desk.doctype.dashboard_chart_source.dashboard_chart_source.get_config";
            return frappe.xcall(method, { name: chart.source }).then((config) => {
              frappe.dom.eval(config);
              return frappe.dashboards.chart_sources[chart.source].filters;
            });
          } else if (chart.chart_type === "Report" && chart.report_name) {
            return frappe.report_utils.get_report_filters(chart.report_name).then((filters2) => {
              return filters2;
            });
          } else {
            return Promise.resolve();
          }
        },
        get_dashboard_settings() {
          return frappe.db.get_list("Dashboard Settings", {
            filters: {
              name: frappe.session.user
            },
            fields: ["*"]
          }).then((settings) => {
            if (!settings.length) {
              return this.create_dashboard_settings().then((settings2) => {
                return settings2;
              });
            } else {
              return settings[0];
            }
          });
        },
        create_dashboard_settings() {
          return frappe.xcall(
            "frappe.desk.doctype.dashboard_settings.dashboard_settings.create_dashboard_settings",
            {
              user: frappe.session.user
            }
          ).then((settings) => {
            return settings;
          });
        },
        get_years_since_creation(creation) {
          let creation_year = this.get_year(creation);
          let current_year = this.get_year(frappe.datetime.now_date());
          let years_list = [];
          for (var year = current_year; year >= creation_year; year--) {
            years_list.push(year);
          }
          return years_list;
        },
        get_year(date_str) {
          return date_str.substring(0, date_str.indexOf("-"));
        },
        remove_common_static_filter_values(static_filters, dynamic_filters2) {
          if (dynamic_filters2) {
            if ($.isArray(static_filters)) {
              static_filters = static_filters.filter((static_filter) => {
                for (let dynamic_filter of dynamic_filters2) {
                  if (static_filter[0] == dynamic_filter[0] && static_filter[1] == dynamic_filter[1]) {
                    return false;
                  }
                }
                return true;
              });
            } else {
              for (let key2 of Object.keys(dynamic_filters2)) {
                delete static_filters[key2];
              }
            }
          }
          return static_filters;
        },
        get_fields_for_dynamic_filter_dialog(is_document_type, filters2, dynamic_filters2) {
          let fields = [
            {
              fieldtype: "HTML",
              fieldname: "description",
              options: `<div>
						<p>Set dynamic filter values in JavaScript for the required fields here.
						</p>
						<p>Ex:
							<code>frappe.defaults.get_user_default("Company")</code>
						</p>
					</div>`
            }
          ];
          if (is_document_type) {
            if (dynamic_filters2) {
              filters2 = [...filters2, ...dynamic_filters2];
            }
            filters2.forEach((f3) => {
              for (let field of fields) {
                if (field.fieldname == f3[0] + ":" + f3[1]) {
                  return;
                }
              }
              if (f3[2] == "=") {
                fields.push({
                  label: `${f3[1]} (${f3[0]})`,
                  fieldname: f3[0] + ":" + f3[1],
                  fieldtype: "Data"
                });
              }
            });
          } else {
            filters2 = __spreadValues(__spreadValues({}, dynamic_filters2), filters2);
            for (let key2 of Object.keys(filters2)) {
              fields.push({
                label: key2,
                fieldname: key2,
                fieldtype: "Data"
              });
            }
          }
          return fields;
        },
        get_all_filters(doc) {
          let filters = doc.filters_json ? JSON.parse(doc.filters_json) : null;
          let dynamic_filters = doc.dynamic_filters_json ? JSON.parse(doc.dynamic_filters_json) : null;
          if (!dynamic_filters || !Object.keys(dynamic_filters).length) {
            return filters;
          }
          if (Array.isArray(dynamic_filters)) {
            dynamic_filters.forEach((f) => {
              try {
                f[3] = eval(f[3]);
              } catch (e2) {
                frappe.throw(__("Invalid expression set in filter {0} ({1})", [f[1], f[0]]));
              }
            });
            filters = [...filters, ...dynamic_filters];
          } else {
            for (let key of Object.keys(dynamic_filters)) {
              try {
                const val = eval(dynamic_filters[key]);
                dynamic_filters[key] = val;
              } catch (e2) {
                frappe.throw(__("Invalid expression set in filter {0}", [key]));
              }
            }
            Object.assign(filters, dynamic_filters);
          }
          return filters;
        },
        get_dashboard_link_field() {
          let field = {
            label: __("Select Dashboard"),
            fieldtype: "Link",
            fieldname: "dashboard",
            options: "Dashboard"
          };
          if (!frappe.boot.developer_mode) {
            field.get_query = () => {
              return {
                filters: {
                  is_standard: 0
                }
              };
            };
          }
          return field;
        },
        get_add_to_dashboard_dialog(docname, doctype, method) {
          const field = this.get_dashboard_link_field();
          const dialog = new frappe.ui.Dialog({
            title: __("Add to Dashboard"),
            fields: [field],
            primary_action: (values) => {
              values.name = docname;
              values.set_standard = frappe.boot.developer_mode;
              frappe.xcall(method, { args: values }).then(() => {
                let dashboard_route_html = `<a href = "/app/dashboard/${values.dashboard}">${values.dashboard}</a>`;
                let message = __("{0} {1} added to Dashboard {2}", [
                  doctype,
                  values.name,
                  dashboard_route_html
                ]);
                frappe.msgprint(message);
              });
              dialog.hide();
            }
          });
          return dialog;
        }
      };
    }
  });

  // node_modules/sortablejs/Sortable.min.js
  var require_Sortable_min = __commonJS({
    "node_modules/sortablejs/Sortable.min.js"(exports2, module2) {
      !function(t3, e2) {
        "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (t3 = t3 || self).Sortable = e2();
      }(exports2, function() {
        "use strict";
        function e2(e3, t4) {
          var n3, o3 = Object.keys(e3);
          return Object.getOwnPropertySymbols && (n3 = Object.getOwnPropertySymbols(e3), t4 && (n3 = n3.filter(function(t5) {
            return Object.getOwnPropertyDescriptor(e3, t5).enumerable;
          })), o3.push.apply(o3, n3)), o3;
        }
        function M2(o3) {
          for (var t4 = 1; t4 < arguments.length; t4++) {
            var i4 = null != arguments[t4] ? arguments[t4] : {};
            t4 % 2 ? e2(Object(i4), true).forEach(function(t5) {
              var e3, n3;
              e3 = o3, t5 = i4[n3 = t5], n3 in e3 ? Object.defineProperty(e3, n3, { value: t5, enumerable: true, configurable: true, writable: true }) : e3[n3] = t5;
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(o3, Object.getOwnPropertyDescriptors(i4)) : e2(Object(i4)).forEach(function(t5) {
              Object.defineProperty(o3, t5, Object.getOwnPropertyDescriptor(i4, t5));
            });
          }
          return o3;
        }
        function o2(t4) {
          return (o2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
            return typeof t5;
          } : function(t5) {
            return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
          })(t4);
        }
        function a2() {
          return (a2 = Object.assign || function(t4) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var n3, o3 = arguments[e3];
              for (n3 in o3)
                Object.prototype.hasOwnProperty.call(o3, n3) && (t4[n3] = o3[n3]);
            }
            return t4;
          }).apply(this, arguments);
        }
        function i3(t4, e3) {
          if (null == t4)
            return {};
          var n3, o3 = function(t5, e4) {
            if (null == t5)
              return {};
            for (var n4, o4 = {}, i5 = Object.keys(t5), r4 = 0; r4 < i5.length; r4++)
              n4 = i5[r4], 0 <= e4.indexOf(n4) || (o4[n4] = t5[n4]);
            return o4;
          }(t4, e3);
          if (Object.getOwnPropertySymbols)
            for (var i4 = Object.getOwnPropertySymbols(t4), r3 = 0; r3 < i4.length; r3++)
              n3 = i4[r3], 0 <= e3.indexOf(n3) || Object.prototype.propertyIsEnumerable.call(t4, n3) && (o3[n3] = t4[n3]);
          return o3;
        }
        function r2(t4) {
          return function(t5) {
            if (Array.isArray(t5))
              return l2(t5);
          }(t4) || function(t5) {
            if ("undefined" != typeof Symbol && null != t5[Symbol.iterator] || null != t5["@@iterator"])
              return Array.from(t5);
          }(t4) || function(t5, e3) {
            if (t5) {
              if ("string" == typeof t5)
                return l2(t5, e3);
              var n3 = Object.prototype.toString.call(t5).slice(8, -1);
              return "Map" === (n3 = "Object" === n3 && t5.constructor ? t5.constructor.name : n3) || "Set" === n3 ? Array.from(t5) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? l2(t5, e3) : void 0;
            }
          }(t4) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function l2(t4, e3) {
          (null == e3 || e3 > t4.length) && (e3 = t4.length);
          for (var n3 = 0, o3 = new Array(e3); n3 < e3; n3++)
            o3[n3] = t4[n3];
          return o3;
        }
        function t3(t4) {
          if ("undefined" != typeof window && window.navigator)
            return !!navigator.userAgent.match(t4);
        }
        var y2 = t3(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i), w2 = t3(/Edge/i), s2 = t3(/firefox/i), u2 = t3(/safari/i) && !t3(/chrome/i) && !t3(/android/i), n2 = t3(/iP(ad|od|hone)/i), c2 = t3(/chrome/i) && t3(/android/i), d3 = { capture: false, passive: false };
        function h2(t4, e3, n3) {
          t4.addEventListener(e3, n3, !y2 && d3);
        }
        function f3(t4, e3, n3) {
          t4.removeEventListener(e3, n3, !y2 && d3);
        }
        function p2(t4, e3) {
          if (e3 && (">" === e3[0] && (e3 = e3.substring(1)), t4))
            try {
              if (t4.matches)
                return t4.matches(e3);
              if (t4.msMatchesSelector)
                return t4.msMatchesSelector(e3);
              if (t4.webkitMatchesSelector)
                return t4.webkitMatchesSelector(e3);
            } catch (t5) {
              return;
            }
        }
        function N2(t4, e3, n3, o3) {
          if (t4) {
            n3 = n3 || document;
            do {
              if (null != e3 && (">" !== e3[0] || t4.parentNode === n3) && p2(t4, e3) || o3 && t4 === n3)
                return t4;
            } while (t4 !== n3 && (t4 = (i4 = t4).host && i4 !== document && i4.host.nodeType ? i4.host : i4.parentNode));
          }
          var i4;
          return null;
        }
        var g2, m3 = /\s+/g;
        function I2(t4, e3, n3) {
          var o3;
          t4 && e3 && (t4.classList ? t4.classList[n3 ? "add" : "remove"](e3) : (o3 = (" " + t4.className + " ").replace(m3, " ").replace(" " + e3 + " ", " "), t4.className = (o3 + (n3 ? " " + e3 : "")).replace(m3, " ")));
        }
        function P3(t4, e3, n3) {
          var o3 = t4 && t4.style;
          if (o3) {
            if (void 0 === n3)
              return document.defaultView && document.defaultView.getComputedStyle ? n3 = document.defaultView.getComputedStyle(t4, "") : t4.currentStyle && (n3 = t4.currentStyle), void 0 === e3 ? n3 : n3[e3];
            o3[e3 = !(e3 in o3 || -1 !== e3.indexOf("webkit")) ? "-webkit-" + e3 : e3] = n3 + ("string" == typeof n3 ? "" : "px");
          }
        }
        function v2(t4, e3) {
          var n3 = "";
          if ("string" == typeof t4)
            n3 = t4;
          else
            do {
              var o3 = P3(t4, "transform");
            } while (o3 && "none" !== o3 && (n3 = o3 + " " + n3), !e3 && (t4 = t4.parentNode));
          var i4 = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
          return i4 && new i4(n3);
        }
        function b2(t4, e3, n3) {
          if (t4) {
            var o3 = t4.getElementsByTagName(e3), i4 = 0, r3 = o3.length;
            if (n3)
              for (; i4 < r3; i4++)
                n3(o3[i4], i4);
            return o3;
          }
          return [];
        }
        function O2() {
          var t4 = document.scrollingElement;
          return t4 || document.documentElement;
        }
        function k2(t4, e3, n3, o3, i4) {
          if (t4.getBoundingClientRect || t4 === window) {
            var r3, a3, l3, s3, c3, u3, d4 = t4 !== window && t4.parentNode && t4 !== O2() ? (a3 = (r3 = t4.getBoundingClientRect()).top, l3 = r3.left, s3 = r3.bottom, c3 = r3.right, u3 = r3.height, r3.width) : (l3 = a3 = 0, s3 = window.innerHeight, c3 = window.innerWidth, u3 = window.innerHeight, window.innerWidth);
            if ((e3 || n3) && t4 !== window && (i4 = i4 || t4.parentNode, !y2))
              do {
                if (i4 && i4.getBoundingClientRect && ("none" !== P3(i4, "transform") || n3 && "static" !== P3(i4, "position"))) {
                  var h3 = i4.getBoundingClientRect();
                  a3 -= h3.top + parseInt(P3(i4, "border-top-width")), l3 -= h3.left + parseInt(P3(i4, "border-left-width")), s3 = a3 + r3.height, c3 = l3 + r3.width;
                  break;
                }
              } while (i4 = i4.parentNode);
            return o3 && t4 !== window && (o3 = (e3 = v2(i4 || t4)) && e3.a, t4 = e3 && e3.d, e3 && (s3 = (a3 /= t4) + (u3 /= t4), c3 = (l3 /= o3) + (d4 /= o3))), { top: a3, left: l3, bottom: s3, right: c3, width: d4, height: u3 };
          }
        }
        function R2(t4, e3, n3) {
          for (var o3 = A2(t4, true), i4 = k2(t4)[e3]; o3; ) {
            var r3 = k2(o3)[n3];
            if (!("top" === n3 || "left" === n3 ? r3 <= i4 : i4 <= r3))
              return o3;
            if (o3 === O2())
              break;
            o3 = A2(o3, false);
          }
          return false;
        }
        function X3(t4, e3, n3, o3) {
          for (var i4 = 0, r3 = 0, a3 = t4.children; r3 < a3.length; ) {
            if ("none" !== a3[r3].style.display && a3[r3] !== Bt3.ghost && (o3 || a3[r3] !== Bt3.dragged) && N2(a3[r3], n3.draggable, t4, false)) {
              if (i4 === e3)
                return a3[r3];
              i4++;
            }
            r3++;
          }
          return null;
        }
        function Y3(t4, e3) {
          for (var n3 = t4.lastElementChild; n3 && (n3 === Bt3.ghost || "none" === P3(n3, "display") || e3 && !p2(n3, e3)); )
            n3 = n3.previousElementSibling;
          return n3 || null;
        }
        function B3(t4, e3) {
          var n3 = 0;
          if (!t4 || !t4.parentNode)
            return -1;
          for (; t4 = t4.previousElementSibling; )
            "TEMPLATE" === t4.nodeName.toUpperCase() || t4 === Bt3.clone || e3 && !p2(t4, e3) || n3++;
          return n3;
        }
        function E2(t4) {
          var e3 = 0, n3 = 0, o3 = O2();
          if (t4)
            do {
              var i4 = v2(t4), r3 = i4.a, i4 = i4.d;
            } while (e3 += t4.scrollLeft * r3, n3 += t4.scrollTop * i4, t4 !== o3 && (t4 = t4.parentNode));
          return [e3, n3];
        }
        function A2(t4, e3) {
          if (!t4 || !t4.getBoundingClientRect)
            return O2();
          var n3 = t4, o3 = false;
          do {
            if (n3.clientWidth < n3.scrollWidth || n3.clientHeight < n3.scrollHeight) {
              var i4 = P3(n3);
              if (n3.clientWidth < n3.scrollWidth && ("auto" == i4.overflowX || "scroll" == i4.overflowX) || n3.clientHeight < n3.scrollHeight && ("auto" == i4.overflowY || "scroll" == i4.overflowY)) {
                if (!n3.getBoundingClientRect || n3 === document.body)
                  return O2();
                if (o3 || e3)
                  return n3;
                o3 = true;
              }
            }
          } while (n3 = n3.parentNode);
          return O2();
        }
        function D3(t4, e3) {
          return Math.round(t4.top) === Math.round(e3.top) && Math.round(t4.left) === Math.round(e3.left) && Math.round(t4.height) === Math.round(e3.height) && Math.round(t4.width) === Math.round(e3.width);
        }
        function S3(e3, n3) {
          return function() {
            var t4;
            g2 || (1 === (t4 = arguments).length ? e3.call(this, t4[0]) : e3.apply(this, t4), g2 = setTimeout(function() {
              g2 = void 0;
            }, n3));
          };
        }
        function F3(t4, e3, n3) {
          t4.scrollLeft += e3, t4.scrollTop += n3;
        }
        function _2(t4) {
          var e3 = window.Polymer, n3 = window.jQuery || window.Zepto;
          return e3 && e3.dom ? e3.dom(t4).cloneNode(true) : n3 ? n3(t4).clone(true)[0] : t4.cloneNode(true);
        }
        function C2(t4, e3) {
          P3(t4, "position", "absolute"), P3(t4, "top", e3.top), P3(t4, "left", e3.left), P3(t4, "width", e3.width), P3(t4, "height", e3.height);
        }
        function T3(t4) {
          P3(t4, "position", ""), P3(t4, "top", ""), P3(t4, "left", ""), P3(t4, "width", ""), P3(t4, "height", "");
        }
        var j3 = "Sortable" + new Date().getTime();
        function x2() {
          var e3, o3 = [];
          return { captureAnimationState: function() {
            o3 = [], this.options.animation && [].slice.call(this.el.children).forEach(function(t4) {
              var e4, n3;
              "none" !== P3(t4, "display") && t4 !== Bt3.ghost && (o3.push({ target: t4, rect: k2(t4) }), e4 = M2({}, o3[o3.length - 1].rect), !t4.thisAnimationDuration || (n3 = v2(t4, true)) && (e4.top -= n3.f, e4.left -= n3.e), t4.fromRect = e4);
            });
          }, addAnimationState: function(t4) {
            o3.push(t4);
          }, removeAnimationState: function(t4) {
            o3.splice(function(t5, e4) {
              for (var n3 in t5)
                if (t5.hasOwnProperty(n3)) {
                  for (var o4 in e4)
                    if (e4.hasOwnProperty(o4) && e4[o4] === t5[n3][o4])
                      return Number(n3);
                }
              return -1;
            }(o3, { target: t4 }), 1);
          }, animateAll: function(t4) {
            var c3 = this;
            if (!this.options.animation)
              return clearTimeout(e3), void ("function" == typeof t4 && t4());
            var u3 = false, d4 = 0;
            o3.forEach(function(t5) {
              var e4 = 0, n3 = t5.target, o4 = n3.fromRect, i4 = k2(n3), r3 = n3.prevFromRect, a3 = n3.prevToRect, l3 = t5.rect, s3 = v2(n3, true);
              s3 && (i4.top -= s3.f, i4.left -= s3.e), n3.toRect = i4, n3.thisAnimationDuration && D3(r3, i4) && !D3(o4, i4) && (l3.top - i4.top) / (l3.left - i4.left) == (o4.top - i4.top) / (o4.left - i4.left) && (t5 = l3, s3 = r3, r3 = a3, a3 = c3.options, e4 = Math.sqrt(Math.pow(s3.top - t5.top, 2) + Math.pow(s3.left - t5.left, 2)) / Math.sqrt(Math.pow(s3.top - r3.top, 2) + Math.pow(s3.left - r3.left, 2)) * a3.animation), D3(i4, o4) || (n3.prevFromRect = o4, n3.prevToRect = i4, e4 = e4 || c3.options.animation, c3.animate(n3, l3, i4, e4)), e4 && (u3 = true, d4 = Math.max(d4, e4), clearTimeout(n3.animationResetTimer), n3.animationResetTimer = setTimeout(function() {
                n3.animationTime = 0, n3.prevFromRect = null, n3.fromRect = null, n3.prevToRect = null, n3.thisAnimationDuration = null;
              }, e4), n3.thisAnimationDuration = e4);
            }), clearTimeout(e3), u3 ? e3 = setTimeout(function() {
              "function" == typeof t4 && t4();
            }, d4) : "function" == typeof t4 && t4(), o3 = [];
          }, animate: function(t4, e4, n3, o4) {
            var i4, r3;
            o4 && (P3(t4, "transition", ""), P3(t4, "transform", ""), i4 = (r3 = v2(this.el)) && r3.a, r3 = r3 && r3.d, i4 = (e4.left - n3.left) / (i4 || 1), r3 = (e4.top - n3.top) / (r3 || 1), t4.animatingX = !!i4, t4.animatingY = !!r3, P3(t4, "transform", "translate3d(" + i4 + "px," + r3 + "px,0)"), this.forRepaintDummy = t4.offsetWidth, P3(t4, "transition", "transform " + o4 + "ms" + (this.options.easing ? " " + this.options.easing : "")), P3(t4, "transform", "translate3d(0,0,0)"), "number" == typeof t4.animated && clearTimeout(t4.animated), t4.animated = setTimeout(function() {
              P3(t4, "transition", ""), P3(t4, "transform", ""), t4.animated = false, t4.animatingX = false, t4.animatingY = false;
            }, o4));
          } };
        }
        var H2 = [], L2 = { initializeByDefault: true }, K3 = { mount: function(e3) {
          for (var t4 in L2)
            !L2.hasOwnProperty(t4) || t4 in e3 || (e3[t4] = L2[t4]);
          H2.forEach(function(t5) {
            if (t5.pluginName === e3.pluginName)
              throw "Sortable: Cannot mount plugin ".concat(e3.pluginName, " more than once");
          }), H2.push(e3);
        }, pluginEvent: function(e3, n3, o3) {
          var t4 = this;
          this.eventCanceled = false, o3.cancel = function() {
            t4.eventCanceled = true;
          };
          var i4 = e3 + "Global";
          H2.forEach(function(t5) {
            n3[t5.pluginName] && (n3[t5.pluginName][i4] && n3[t5.pluginName][i4](M2({ sortable: n3 }, o3)), n3.options[t5.pluginName] && n3[t5.pluginName][e3] && n3[t5.pluginName][e3](M2({ sortable: n3 }, o3)));
          });
        }, initializePlugins: function(n3, o3, i4, t4) {
          for (var e3 in H2.forEach(function(t5) {
            var e4 = t5.pluginName;
            (n3.options[e4] || t5.initializeByDefault) && ((t5 = new t5(n3, o3, n3.options)).sortable = n3, t5.options = n3.options, n3[e4] = t5, a2(i4, t5.defaults));
          }), n3.options) {
            var r3;
            n3.options.hasOwnProperty(e3) && (void 0 !== (r3 = this.modifyOption(n3, e3, n3.options[e3])) && (n3.options[e3] = r3));
          }
        }, getEventProperties: function(e3, n3) {
          var o3 = {};
          return H2.forEach(function(t4) {
            "function" == typeof t4.eventProperties && a2(o3, t4.eventProperties.call(n3[t4.pluginName], e3));
          }), o3;
        }, modifyOption: function(e3, n3, o3) {
          var i4;
          return H2.forEach(function(t4) {
            e3[t4.pluginName] && t4.optionListeners && "function" == typeof t4.optionListeners[n3] && (i4 = t4.optionListeners[n3].call(e3[t4.pluginName], o3));
          }), i4;
        } };
        function W2(t4) {
          var e3 = t4.sortable, n3 = t4.rootEl, o3 = t4.name, i4 = t4.targetEl, r3 = t4.cloneEl, a3 = t4.toEl, l3 = t4.fromEl, s3 = t4.oldIndex, c3 = t4.newIndex, u3 = t4.oldDraggableIndex, d4 = t4.newDraggableIndex, h3 = t4.originalEvent, f4 = t4.putSortable, p3 = t4.extraEventProperties;
          if (e3 = e3 || n3 && n3[j3]) {
            var g3, m4 = e3.options, t4 = "on" + o3.charAt(0).toUpperCase() + o3.substr(1);
            !window.CustomEvent || y2 || w2 ? (g3 = document.createEvent("Event")).initEvent(o3, true, true) : g3 = new CustomEvent(o3, { bubbles: true, cancelable: true }), g3.to = a3 || n3, g3.from = l3 || n3, g3.item = i4 || n3, g3.clone = r3, g3.oldIndex = s3, g3.newIndex = c3, g3.oldDraggableIndex = u3, g3.newDraggableIndex = d4, g3.originalEvent = h3, g3.pullMode = f4 ? f4.lastPutMode : void 0;
            var v3, b3 = M2(M2({}, p3), K3.getEventProperties(o3, e3));
            for (v3 in b3)
              g3[v3] = b3[v3];
            n3 && n3.dispatchEvent(g3), m4[t4] && m4[t4].call(e3, g3);
          }
        }
        function z3(t4, e3) {
          var n3 = (o3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {}).evt, o3 = i3(o3, G3);
          K3.pluginEvent.bind(Bt3)(t4, e3, M2({ dragEl: q3, parentEl: V3, ghostEl: Z3, rootEl: $4, nextEl: Q2, lastDownEl: J3, cloneEl: tt3, cloneHidden: et3, dragStarted: pt3, putSortable: lt3, activeSortable: Bt3.active, originalEvent: n3, oldIndex: nt3, oldDraggableIndex: it3, newIndex: ot3, newDraggableIndex: rt3, hideGhostForTarget: kt3, unhideGhostForTarget: Rt3, cloneNowHidden: function() {
            et3 = true;
          }, cloneNowShown: function() {
            et3 = false;
          }, dispatchSortableEvent: function(t5) {
            U3({ sortable: e3, name: t5, originalEvent: n3 });
          } }, o3));
        }
        var G3 = ["evt"];
        function U3(t4) {
          W2(M2({ putSortable: lt3, cloneEl: tt3, targetEl: q3, rootEl: $4, oldIndex: nt3, oldDraggableIndex: it3, newIndex: ot3, newDraggableIndex: rt3 }, t4));
        }
        var q3, V3, Z3, $4, Q2, J3, tt3, et3, nt3, ot3, it3, rt3, at3, lt3, st3, ct3, ut3, dt3, ht3, ft3, pt3, gt3, mt3, vt3, bt3, yt3 = false, wt3 = false, Et3 = [], Dt3 = false, St3 = false, _t2 = [], Ct3 = false, Tt3 = [], xt3 = "undefined" != typeof document, Ot3 = n2, At3 = w2 || y2 ? "cssFloat" : "float", Mt2 = xt3 && !c2 && !n2 && "draggable" in document.createElement("div"), Nt3 = function() {
          if (xt3) {
            if (y2)
              return false;
            var t4 = document.createElement("x");
            return t4.style.cssText = "pointer-events:auto", "auto" === t4.style.pointerEvents;
          }
        }(), It2 = function(t4, e3) {
          var n3 = P3(t4), o3 = parseInt(n3.width) - parseInt(n3.paddingLeft) - parseInt(n3.paddingRight) - parseInt(n3.borderLeftWidth) - parseInt(n3.borderRightWidth), i4 = X3(t4, 0, e3), r3 = X3(t4, 1, e3), a3 = i4 && P3(i4), l3 = r3 && P3(r3), s3 = a3 && parseInt(a3.marginLeft) + parseInt(a3.marginRight) + k2(i4).width, t4 = l3 && parseInt(l3.marginLeft) + parseInt(l3.marginRight) + k2(r3).width;
          if ("flex" === n3.display)
            return "column" === n3.flexDirection || "column-reverse" === n3.flexDirection ? "vertical" : "horizontal";
          if ("grid" === n3.display)
            return n3.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
          if (i4 && a3.float && "none" !== a3.float) {
            e3 = "left" === a3.float ? "left" : "right";
            return !r3 || "both" !== l3.clear && l3.clear !== e3 ? "horizontal" : "vertical";
          }
          return i4 && ("block" === a3.display || "flex" === a3.display || "table" === a3.display || "grid" === a3.display || o3 <= s3 && "none" === n3[At3] || r3 && "none" === n3[At3] && o3 < s3 + t4) ? "vertical" : "horizontal";
        }, Pt3 = function(t4) {
          function l3(r3, a3) {
            return function(t5, e4, n4, o3) {
              var i4 = t5.options.group.name && e4.options.group.name && t5.options.group.name === e4.options.group.name;
              if (null == r3 && (a3 || i4))
                return true;
              if (null == r3 || false === r3)
                return false;
              if (a3 && "clone" === r3)
                return r3;
              if ("function" == typeof r3)
                return l3(r3(t5, e4, n4, o3), a3)(t5, e4, n4, o3);
              e4 = (a3 ? t5 : e4).options.group.name;
              return true === r3 || "string" == typeof r3 && r3 === e4 || r3.join && -1 < r3.indexOf(e4);
            };
          }
          var e3 = {}, n3 = t4.group;
          n3 && "object" == o2(n3) || (n3 = { name: n3 }), e3.name = n3.name, e3.checkPull = l3(n3.pull, true), e3.checkPut = l3(n3.put), e3.revertClone = n3.revertClone, t4.group = e3;
        }, kt3 = function() {
          !Nt3 && Z3 && P3(Z3, "display", "none");
        }, Rt3 = function() {
          !Nt3 && Z3 && P3(Z3, "display", "");
        };
        xt3 && !c2 && document.addEventListener("click", function(t4) {
          if (wt3)
            return t4.preventDefault(), t4.stopPropagation && t4.stopPropagation(), t4.stopImmediatePropagation && t4.stopImmediatePropagation(), wt3 = false;
        }, true);
        function Xt2(t4) {
          if (q3) {
            t4 = t4.touches ? t4.touches[0] : t4;
            var e3 = (i4 = t4.clientX, r3 = t4.clientY, Et3.some(function(t5) {
              var e4 = t5[j3].options.emptyInsertThreshold;
              if (e4 && !Y3(t5)) {
                var n4 = k2(t5), o4 = i4 >= n4.left - e4 && i4 <= n4.right + e4, e4 = r3 >= n4.top - e4 && r3 <= n4.bottom + e4;
                return o4 && e4 ? a3 = t5 : void 0;
              }
            }), a3);
            if (e3) {
              var n3, o3 = {};
              for (n3 in t4)
                t4.hasOwnProperty(n3) && (o3[n3] = t4[n3]);
              o3.target = o3.rootEl = e3, o3.preventDefault = void 0, o3.stopPropagation = void 0, e3[j3]._onDragOver(o3);
            }
          }
          var i4, r3, a3;
        }
        function Yt3(t4) {
          q3 && q3.parentNode[j3]._isOutsideThisEl(t4.target);
        }
        function Bt3(t4, e3) {
          if (!t4 || !t4.nodeType || 1 !== t4.nodeType)
            throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t4));
          this.el = t4, this.options = e3 = a2({}, e3), t4[j3] = this;
          var n3, o3, i4 = { group: null, sort: true, disabled: false, store: null, handle: null, draggable: /^[uo]l$/i.test(t4.nodeName) ? ">li" : ">*", swapThreshold: 1, invertSwap: false, invertedSwapThreshold: null, removeCloneOnHide: true, direction: function() {
            return It2(t4, this.options);
          }, ghostClass: "sortable-ghost", chosenClass: "sortable-chosen", dragClass: "sortable-drag", ignore: "a, img", filter: null, preventOnFilter: true, animation: 0, easing: null, setData: function(t5, e4) {
            t5.setData("Text", e4.textContent);
          }, dropBubble: false, dragoverBubble: false, dataIdAttr: "data-id", delay: 0, delayOnTouchOnly: false, touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1, forceFallback: false, fallbackClass: "sortable-fallback", fallbackOnBody: false, fallbackTolerance: 0, fallbackOffset: { x: 0, y: 0 }, supportPointer: false !== Bt3.supportPointer && "PointerEvent" in window && !u2, emptyInsertThreshold: 5 };
          for (n3 in K3.initializePlugins(this, t4, i4), i4)
            n3 in e3 || (e3[n3] = i4[n3]);
          for (o3 in Pt3(e3), this)
            "_" === o3.charAt(0) && "function" == typeof this[o3] && (this[o3] = this[o3].bind(this));
          this.nativeDraggable = !e3.forceFallback && Mt2, this.nativeDraggable && (this.options.touchStartThreshold = 1), e3.supportPointer ? h2(t4, "pointerdown", this._onTapStart) : (h2(t4, "mousedown", this._onTapStart), h2(t4, "touchstart", this._onTapStart)), this.nativeDraggable && (h2(t4, "dragover", this), h2(t4, "dragenter", this)), Et3.push(this.el), e3.store && e3.store.get && this.sort(e3.store.get(this) || []), a2(this, x2());
        }
        function Ft3(t4, e3, n3, o3, i4, r3, a3, l3) {
          var s3, c3, u3 = t4[j3], d4 = u3.options.onMove;
          return !window.CustomEvent || y2 || w2 ? (s3 = document.createEvent("Event")).initEvent("move", true, true) : s3 = new CustomEvent("move", { bubbles: true, cancelable: true }), s3.to = e3, s3.from = t4, s3.dragged = n3, s3.draggedRect = o3, s3.related = i4 || e3, s3.relatedRect = r3 || k2(e3), s3.willInsertAfter = l3, s3.originalEvent = a3, t4.dispatchEvent(s3), c3 = d4 ? d4.call(u3, s3, a3) : c3;
        }
        function jt3(t4) {
          t4.draggable = false;
        }
        function Ht3() {
          Ct3 = false;
        }
        function Lt3(t4) {
          return setTimeout(t4, 0);
        }
        function Kt2(t4) {
          return clearTimeout(t4);
        }
        Bt3.prototype = { constructor: Bt3, _isOutsideThisEl: function(t4) {
          this.el.contains(t4) || t4 === this.el || (gt3 = null);
        }, _getDirection: function(t4, e3) {
          return "function" == typeof this.options.direction ? this.options.direction.call(this, t4, e3, q3) : this.options.direction;
        }, _onTapStart: function(e3) {
          if (e3.cancelable) {
            var n3 = this, o3 = this.el, t4 = this.options, i4 = t4.preventOnFilter, r3 = e3.type, a3 = e3.touches && e3.touches[0] || e3.pointerType && "touch" === e3.pointerType && e3, l3 = (a3 || e3).target, s3 = e3.target.shadowRoot && (e3.path && e3.path[0] || e3.composedPath && e3.composedPath()[0]) || l3, c3 = t4.filter;
            if (!function(t5) {
              Tt3.length = 0;
              var e4 = t5.getElementsByTagName("input"), n4 = e4.length;
              for (; n4--; ) {
                var o4 = e4[n4];
                o4.checked && Tt3.push(o4);
              }
            }(o3), !q3 && !(/mousedown|pointerdown/.test(r3) && 0 !== e3.button || t4.disabled) && !s3.isContentEditable && (this.nativeDraggable || !u2 || !l3 || "SELECT" !== l3.tagName.toUpperCase()) && !((l3 = N2(l3, t4.draggable, o3, false)) && l3.animated || J3 === l3)) {
              if (nt3 = B3(l3), it3 = B3(l3, t4.draggable), "function" == typeof c3) {
                if (c3.call(this, e3, l3, this))
                  return U3({ sortable: n3, rootEl: s3, name: "filter", targetEl: l3, toEl: o3, fromEl: o3 }), z3("filter", n3, { evt: e3 }), void (i4 && e3.cancelable && e3.preventDefault());
              } else if (c3 = c3 && c3.split(",").some(function(t5) {
                if (t5 = N2(s3, t5.trim(), o3, false))
                  return U3({ sortable: n3, rootEl: t5, name: "filter", targetEl: l3, fromEl: o3, toEl: o3 }), z3("filter", n3, { evt: e3 }), true;
              }))
                return void (i4 && e3.cancelable && e3.preventDefault());
              t4.handle && !N2(s3, t4.handle, o3, false) || this._prepareDragStart(e3, a3, l3);
            }
          }
        }, _prepareDragStart: function(t4, e3, n3) {
          var o3, i4 = this, r3 = i4.el, a3 = i4.options, l3 = r3.ownerDocument;
          n3 && !q3 && n3.parentNode === r3 && (o3 = k2(n3), $4 = r3, V3 = (q3 = n3).parentNode, Q2 = q3.nextSibling, J3 = n3, at3 = a3.group, st3 = { target: Bt3.dragged = q3, clientX: (e3 || t4).clientX, clientY: (e3 || t4).clientY }, ht3 = st3.clientX - o3.left, ft3 = st3.clientY - o3.top, this._lastX = (e3 || t4).clientX, this._lastY = (e3 || t4).clientY, q3.style["will-change"] = "all", o3 = function() {
            z3("delayEnded", i4, { evt: t4 }), Bt3.eventCanceled ? i4._onDrop() : (i4._disableDelayedDragEvents(), !s2 && i4.nativeDraggable && (q3.draggable = true), i4._triggerDragStart(t4, e3), U3({ sortable: i4, name: "choose", originalEvent: t4 }), I2(q3, a3.chosenClass, true));
          }, a3.ignore.split(",").forEach(function(t5) {
            b2(q3, t5.trim(), jt3);
          }), h2(l3, "dragover", Xt2), h2(l3, "mousemove", Xt2), h2(l3, "touchmove", Xt2), h2(l3, "mouseup", i4._onDrop), h2(l3, "touchend", i4._onDrop), h2(l3, "touchcancel", i4._onDrop), s2 && this.nativeDraggable && (this.options.touchStartThreshold = 4, q3.draggable = true), z3("delayStart", this, { evt: t4 }), !a3.delay || a3.delayOnTouchOnly && !e3 || this.nativeDraggable && (w2 || y2) ? o3() : Bt3.eventCanceled ? this._onDrop() : (h2(l3, "mouseup", i4._disableDelayedDrag), h2(l3, "touchend", i4._disableDelayedDrag), h2(l3, "touchcancel", i4._disableDelayedDrag), h2(l3, "mousemove", i4._delayedDragTouchMoveHandler), h2(l3, "touchmove", i4._delayedDragTouchMoveHandler), a3.supportPointer && h2(l3, "pointermove", i4._delayedDragTouchMoveHandler), i4._dragStartTimer = setTimeout(o3, a3.delay)));
        }, _delayedDragTouchMoveHandler: function(t4) {
          t4 = t4.touches ? t4.touches[0] : t4;
          Math.max(Math.abs(t4.clientX - this._lastX), Math.abs(t4.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1)) && this._disableDelayedDrag();
        }, _disableDelayedDrag: function() {
          q3 && jt3(q3), clearTimeout(this._dragStartTimer), this._disableDelayedDragEvents();
        }, _disableDelayedDragEvents: function() {
          var t4 = this.el.ownerDocument;
          f3(t4, "mouseup", this._disableDelayedDrag), f3(t4, "touchend", this._disableDelayedDrag), f3(t4, "touchcancel", this._disableDelayedDrag), f3(t4, "mousemove", this._delayedDragTouchMoveHandler), f3(t4, "touchmove", this._delayedDragTouchMoveHandler), f3(t4, "pointermove", this._delayedDragTouchMoveHandler);
        }, _triggerDragStart: function(t4, e3) {
          e3 = e3 || "touch" == t4.pointerType && t4, !this.nativeDraggable || e3 ? this.options.supportPointer ? h2(document, "pointermove", this._onTouchMove) : h2(document, e3 ? "touchmove" : "mousemove", this._onTouchMove) : (h2(q3, "dragend", this), h2($4, "dragstart", this._onDragStart));
          try {
            document.selection ? Lt3(function() {
              document.selection.empty();
            }) : window.getSelection().removeAllRanges();
          } catch (t5) {
          }
        }, _dragStarted: function(t4, e3) {
          var n3;
          yt3 = false, $4 && q3 ? (z3("dragStarted", this, { evt: e3 }), this.nativeDraggable && h2(document, "dragover", Yt3), n3 = this.options, t4 || I2(q3, n3.dragClass, false), I2(q3, n3.ghostClass, true), Bt3.active = this, t4 && this._appendGhost(), U3({ sortable: this, name: "start", originalEvent: e3 })) : this._nulling();
        }, _emulateDragOver: function() {
          if (ct3) {
            this._lastX = ct3.clientX, this._lastY = ct3.clientY, kt3();
            for (var t4 = document.elementFromPoint(ct3.clientX, ct3.clientY), e3 = t4; t4 && t4.shadowRoot && (t4 = t4.shadowRoot.elementFromPoint(ct3.clientX, ct3.clientY)) !== e3; )
              e3 = t4;
            if (q3.parentNode[j3]._isOutsideThisEl(t4), e3)
              do {
                if (e3[j3]) {
                  if (e3[j3]._onDragOver({ clientX: ct3.clientX, clientY: ct3.clientY, target: t4, rootEl: e3 }) && !this.options.dragoverBubble)
                    break;
                }
              } while (e3 = (t4 = e3).parentNode);
            Rt3();
          }
        }, _onTouchMove: function(t4) {
          if (st3) {
            var e3 = this.options, n3 = e3.fallbackTolerance, o3 = e3.fallbackOffset, i4 = t4.touches ? t4.touches[0] : t4, r3 = Z3 && v2(Z3, true), a3 = Z3 && r3 && r3.a, l3 = Z3 && r3 && r3.d, e3 = Ot3 && bt3 && E2(bt3), a3 = (i4.clientX - st3.clientX + o3.x) / (a3 || 1) + (e3 ? e3[0] - _t2[0] : 0) / (a3 || 1), l3 = (i4.clientY - st3.clientY + o3.y) / (l3 || 1) + (e3 ? e3[1] - _t2[1] : 0) / (l3 || 1);
            if (!Bt3.active && !yt3) {
              if (n3 && Math.max(Math.abs(i4.clientX - this._lastX), Math.abs(i4.clientY - this._lastY)) < n3)
                return;
              this._onDragStart(t4, true);
            }
            Z3 && (r3 ? (r3.e += a3 - (ut3 || 0), r3.f += l3 - (dt3 || 0)) : r3 = { a: 1, b: 0, c: 0, d: 1, e: a3, f: l3 }, r3 = "matrix(".concat(r3.a, ",").concat(r3.b, ",").concat(r3.c, ",").concat(r3.d, ",").concat(r3.e, ",").concat(r3.f, ")"), P3(Z3, "webkitTransform", r3), P3(Z3, "mozTransform", r3), P3(Z3, "msTransform", r3), P3(Z3, "transform", r3), ut3 = a3, dt3 = l3, ct3 = i4), t4.cancelable && t4.preventDefault();
          }
        }, _appendGhost: function() {
          if (!Z3) {
            var t4 = this.options.fallbackOnBody ? document.body : $4, e3 = k2(q3, true, Ot3, true, t4), n3 = this.options;
            if (Ot3) {
              for (bt3 = t4; "static" === P3(bt3, "position") && "none" === P3(bt3, "transform") && bt3 !== document; )
                bt3 = bt3.parentNode;
              bt3 !== document.body && bt3 !== document.documentElement ? (bt3 === document && (bt3 = O2()), e3.top += bt3.scrollTop, e3.left += bt3.scrollLeft) : bt3 = O2(), _t2 = E2(bt3);
            }
            I2(Z3 = q3.cloneNode(true), n3.ghostClass, false), I2(Z3, n3.fallbackClass, true), I2(Z3, n3.dragClass, true), P3(Z3, "transition", ""), P3(Z3, "transform", ""), P3(Z3, "box-sizing", "border-box"), P3(Z3, "margin", 0), P3(Z3, "top", e3.top), P3(Z3, "left", e3.left), P3(Z3, "width", e3.width), P3(Z3, "height", e3.height), P3(Z3, "opacity", "0.8"), P3(Z3, "position", Ot3 ? "absolute" : "fixed"), P3(Z3, "zIndex", "100000"), P3(Z3, "pointerEvents", "none"), Bt3.ghost = Z3, t4.appendChild(Z3), P3(Z3, "transform-origin", ht3 / parseInt(Z3.style.width) * 100 + "% " + ft3 / parseInt(Z3.style.height) * 100 + "%");
          }
        }, _onDragStart: function(t4, e3) {
          var n3 = this, o3 = t4.dataTransfer, i4 = n3.options;
          z3("dragStart", this, { evt: t4 }), Bt3.eventCanceled ? this._onDrop() : (z3("setupClone", this), Bt3.eventCanceled || ((tt3 = _2(q3)).removeAttribute("id"), tt3.draggable = false, tt3.style["will-change"] = "", this._hideClone(), I2(tt3, this.options.chosenClass, false), Bt3.clone = tt3), n3.cloneId = Lt3(function() {
            z3("clone", n3), Bt3.eventCanceled || (n3.options.removeCloneOnHide || $4.insertBefore(tt3, q3), n3._hideClone(), U3({ sortable: n3, name: "clone" }));
          }), e3 || I2(q3, i4.dragClass, true), e3 ? (wt3 = true, n3._loopId = setInterval(n3._emulateDragOver, 50)) : (f3(document, "mouseup", n3._onDrop), f3(document, "touchend", n3._onDrop), f3(document, "touchcancel", n3._onDrop), o3 && (o3.effectAllowed = "move", i4.setData && i4.setData.call(n3, o3, q3)), h2(document, "drop", n3), P3(q3, "transform", "translateZ(0)")), yt3 = true, n3._dragStartId = Lt3(n3._dragStarted.bind(n3, e3, t4)), h2(document, "selectstart", n3), pt3 = true, u2 && P3(document.body, "user-select", "none"));
        }, _onDragOver: function(n3) {
          var o3, i4, r3, t4, a3 = this.el, l3 = n3.target, e3 = this.options, s3 = e3.group, c3 = Bt3.active, u3 = at3 === s3, d4 = e3.sort, h3 = lt3 || c3, f4 = this, p3 = false;
          if (!Ct3) {
            if (void 0 !== n3.preventDefault && n3.cancelable && n3.preventDefault(), l3 = N2(l3, e3.draggable, a3, true), T4("dragOver"), Bt3.eventCanceled)
              return p3;
            if (q3.contains(n3.target) || l3.animated && l3.animatingX && l3.animatingY || f4._ignoreWhileAnimating === l3)
              return O3(false);
            if (wt3 = false, c3 && !e3.disabled && (u3 ? d4 || (i4 = V3 !== $4) : lt3 === this || (this.lastPutMode = at3.checkPull(this, c3, q3, n3)) && s3.checkPut(this, c3, q3, n3))) {
              if (r3 = "vertical" === this._getDirection(n3, l3), o3 = k2(q3), T4("dragOverValid"), Bt3.eventCanceled)
                return p3;
              if (i4)
                return V3 = $4, x3(), this._hideClone(), T4("revert"), Bt3.eventCanceled || (Q2 ? $4.insertBefore(q3, Q2) : $4.appendChild(q3)), O3(true);
              var g3 = Y3(a3, e3.draggable);
              if (!g3 || function(t5, e4, n4) {
                n4 = k2(Y3(n4.el, n4.options.draggable));
                return e4 ? t5.clientX > n4.right + 10 || t5.clientX <= n4.right && t5.clientY > n4.bottom && t5.clientX >= n4.left : t5.clientX > n4.right && t5.clientY > n4.top || t5.clientX <= n4.right && t5.clientY > n4.bottom + 10;
              }(n3, r3, this) && !g3.animated) {
                if (g3 === q3)
                  return O3(false);
                if ((l3 = g3 && a3 === n3.target ? g3 : l3) && (w3 = k2(l3)), false !== Ft3($4, a3, q3, o3, l3, w3, n3, !!l3))
                  return x3(), g3 && g3.nextSibling ? a3.insertBefore(q3, g3.nextSibling) : a3.appendChild(q3), V3 = a3, A3(), O3(true);
              } else if (g3 && function(t5, e4, n4) {
                n4 = k2(X3(n4.el, 0, n4.options, true));
                return e4 ? t5.clientX < n4.left - 10 || t5.clientY < n4.top && t5.clientX < n4.right : t5.clientY < n4.top - 10 || t5.clientY < n4.bottom && t5.clientX < n4.left;
              }(n3, r3, this)) {
                var m4 = X3(a3, 0, e3, true);
                if (m4 === q3)
                  return O3(false);
                if (w3 = k2(l3 = m4), false !== Ft3($4, a3, q3, o3, l3, w3, n3, false))
                  return x3(), a3.insertBefore(q3, m4), V3 = a3, A3(), O3(true);
              } else if (l3.parentNode === a3) {
                var v3, b3, y3, w3 = k2(l3), E3 = q3.parentNode !== a3, D4 = (D4 = q3.animated && q3.toRect || o3, C3 = l3.animated && l3.toRect || w3, S4 = (t4 = r3) ? D4.left : D4.top, s3 = t4 ? D4.right : D4.bottom, g3 = t4 ? D4.width : D4.height, m4 = t4 ? C3.left : C3.top, D4 = t4 ? C3.right : C3.bottom, C3 = t4 ? C3.width : C3.height, !(S4 === m4 || s3 === D4 || S4 + g3 / 2 === m4 + C3 / 2)), S4 = r3 ? "top" : "left", g3 = R2(l3, "top", "top") || R2(q3, "top", "top"), m4 = g3 ? g3.scrollTop : void 0;
                if (gt3 !== l3 && (b3 = w3[S4], Dt3 = false, St3 = !D4 && e3.invertSwap || E3), 0 !== (v3 = function(t5, e4, n4, o4, i5, r4, a4, l4) {
                  var s4 = o4 ? t5.clientY : t5.clientX, c4 = o4 ? n4.height : n4.width, t5 = o4 ? n4.top : n4.left, o4 = o4 ? n4.bottom : n4.right, n4 = false;
                  if (!a4) {
                    if (l4 && vt3 < c4 * i5) {
                      if (Dt3 = !Dt3 && (1 === mt3 ? t5 + c4 * r4 / 2 < s4 : s4 < o4 - c4 * r4 / 2) ? true : Dt3)
                        n4 = true;
                      else if (1 === mt3 ? s4 < t5 + vt3 : o4 - vt3 < s4)
                        return -mt3;
                    } else if (t5 + c4 * (1 - i5) / 2 < s4 && s4 < o4 - c4 * (1 - i5) / 2)
                      return function(t6) {
                        return B3(q3) < B3(t6) ? 1 : -1;
                      }(e4);
                  }
                  if ((n4 = n4 || a4) && (s4 < t5 + c4 * r4 / 2 || o4 - c4 * r4 / 2 < s4))
                    return t5 + c4 / 2 < s4 ? 1 : -1;
                  return 0;
                }(n3, l3, w3, r3, D4 ? 1 : e3.swapThreshold, null == e3.invertedSwapThreshold ? e3.swapThreshold : e3.invertedSwapThreshold, St3, gt3 === l3)))
                  for (var _3 = B3(q3); (y3 = V3.children[_3 -= v3]) && ("none" === P3(y3, "display") || y3 === Z3); )
                    ;
                if (0 === v3 || y3 === l3)
                  return O3(false);
                mt3 = v3;
                var C3 = (gt3 = l3).nextElementSibling, E3 = false, D4 = Ft3($4, a3, q3, o3, l3, w3, n3, E3 = 1 === v3);
                if (false !== D4)
                  return 1 !== D4 && -1 !== D4 || (E3 = 1 === D4), Ct3 = true, setTimeout(Ht3, 30), x3(), E3 && !C3 ? a3.appendChild(q3) : l3.parentNode.insertBefore(q3, E3 ? C3 : l3), g3 && F3(g3, 0, m4 - g3.scrollTop), V3 = q3.parentNode, void 0 === b3 || St3 || (vt3 = Math.abs(b3 - k2(l3)[S4])), A3(), O3(true);
              }
              if (a3.contains(q3))
                return O3(false);
            }
            return false;
          }
          function T4(t5, e4) {
            z3(t5, f4, M2({ evt: n3, isOwner: u3, axis: r3 ? "vertical" : "horizontal", revert: i4, dragRect: o3, targetRect: w3, canSort: d4, fromSortable: h3, target: l3, completed: O3, onMove: function(t6, e5) {
              return Ft3($4, a3, q3, o3, t6, k2(t6), n3, e5);
            }, changed: A3 }, e4));
          }
          function x3() {
            T4("dragOverAnimationCapture"), f4.captureAnimationState(), f4 !== h3 && h3.captureAnimationState();
          }
          function O3(t5) {
            return T4("dragOverCompleted", { insertion: t5 }), t5 && (u3 ? c3._hideClone() : c3._showClone(f4), f4 !== h3 && (I2(q3, (lt3 || c3).options.ghostClass, false), I2(q3, e3.ghostClass, true)), lt3 !== f4 && f4 !== Bt3.active ? lt3 = f4 : f4 === Bt3.active && lt3 && (lt3 = null), h3 === f4 && (f4._ignoreWhileAnimating = l3), f4.animateAll(function() {
              T4("dragOverAnimationComplete"), f4._ignoreWhileAnimating = null;
            }), f4 !== h3 && (h3.animateAll(), h3._ignoreWhileAnimating = null)), (l3 === q3 && !q3.animated || l3 === a3 && !l3.animated) && (gt3 = null), e3.dragoverBubble || n3.rootEl || l3 === document || (q3.parentNode[j3]._isOutsideThisEl(n3.target), t5 || Xt2(n3)), !e3.dragoverBubble && n3.stopPropagation && n3.stopPropagation(), p3 = true;
          }
          function A3() {
            ot3 = B3(q3), rt3 = B3(q3, e3.draggable), U3({ sortable: f4, name: "change", toEl: a3, newIndex: ot3, newDraggableIndex: rt3, originalEvent: n3 });
          }
        }, _ignoreWhileAnimating: null, _offMoveEvents: function() {
          f3(document, "mousemove", this._onTouchMove), f3(document, "touchmove", this._onTouchMove), f3(document, "pointermove", this._onTouchMove), f3(document, "dragover", Xt2), f3(document, "mousemove", Xt2), f3(document, "touchmove", Xt2);
        }, _offUpEvents: function() {
          var t4 = this.el.ownerDocument;
          f3(t4, "mouseup", this._onDrop), f3(t4, "touchend", this._onDrop), f3(t4, "pointerup", this._onDrop), f3(t4, "touchcancel", this._onDrop), f3(document, "selectstart", this);
        }, _onDrop: function(t4) {
          var e3 = this.el, n3 = this.options;
          ot3 = B3(q3), rt3 = B3(q3, n3.draggable), z3("drop", this, { evt: t4 }), V3 = q3 && q3.parentNode, ot3 = B3(q3), rt3 = B3(q3, n3.draggable), Bt3.eventCanceled || (Dt3 = St3 = yt3 = false, clearInterval(this._loopId), clearTimeout(this._dragStartTimer), Kt2(this.cloneId), Kt2(this._dragStartId), this.nativeDraggable && (f3(document, "drop", this), f3(e3, "dragstart", this._onDragStart)), this._offMoveEvents(), this._offUpEvents(), u2 && P3(document.body, "user-select", ""), P3(q3, "transform", ""), t4 && (pt3 && (t4.cancelable && t4.preventDefault(), n3.dropBubble || t4.stopPropagation()), Z3 && Z3.parentNode && Z3.parentNode.removeChild(Z3), ($4 === V3 || lt3 && "clone" !== lt3.lastPutMode) && tt3 && tt3.parentNode && tt3.parentNode.removeChild(tt3), q3 && (this.nativeDraggable && f3(q3, "dragend", this), jt3(q3), q3.style["will-change"] = "", pt3 && !yt3 && I2(q3, (lt3 || this).options.ghostClass, false), I2(q3, this.options.chosenClass, false), U3({ sortable: this, name: "unchoose", toEl: V3, newIndex: null, newDraggableIndex: null, originalEvent: t4 }), $4 !== V3 ? (0 <= ot3 && (U3({ rootEl: V3, name: "add", toEl: V3, fromEl: $4, originalEvent: t4 }), U3({ sortable: this, name: "remove", toEl: V3, originalEvent: t4 }), U3({ rootEl: V3, name: "sort", toEl: V3, fromEl: $4, originalEvent: t4 }), U3({ sortable: this, name: "sort", toEl: V3, originalEvent: t4 })), lt3 && lt3.save()) : ot3 !== nt3 && 0 <= ot3 && (U3({ sortable: this, name: "update", toEl: V3, originalEvent: t4 }), U3({ sortable: this, name: "sort", toEl: V3, originalEvent: t4 })), Bt3.active && (null != ot3 && -1 !== ot3 || (ot3 = nt3, rt3 = it3), U3({ sortable: this, name: "end", toEl: V3, originalEvent: t4 }), this.save())))), this._nulling();
        }, _nulling: function() {
          z3("nulling", this), $4 = q3 = V3 = Z3 = Q2 = tt3 = J3 = et3 = st3 = ct3 = pt3 = ot3 = rt3 = nt3 = it3 = gt3 = mt3 = lt3 = at3 = Bt3.dragged = Bt3.ghost = Bt3.clone = Bt3.active = null, Tt3.forEach(function(t4) {
            t4.checked = true;
          }), Tt3.length = ut3 = dt3 = 0;
        }, handleEvent: function(t4) {
          switch (t4.type) {
            case "drop":
            case "dragend":
              this._onDrop(t4);
              break;
            case "dragenter":
            case "dragover":
              q3 && (this._onDragOver(t4), function(t5) {
                t5.dataTransfer && (t5.dataTransfer.dropEffect = "move");
                t5.cancelable && t5.preventDefault();
              }(t4));
              break;
            case "selectstart":
              t4.preventDefault();
          }
        }, toArray: function() {
          for (var t4, e3 = [], n3 = this.el.children, o3 = 0, i4 = n3.length, r3 = this.options; o3 < i4; o3++)
            N2(t4 = n3[o3], r3.draggable, this.el, false) && e3.push(t4.getAttribute(r3.dataIdAttr) || function(t5) {
              var e4 = t5.tagName + t5.className + t5.src + t5.href + t5.textContent, n4 = e4.length, o4 = 0;
              for (; n4--; )
                o4 += e4.charCodeAt(n4);
              return o4.toString(36);
            }(t4));
          return e3;
        }, sort: function(t4, e3) {
          var n3 = {}, o3 = this.el;
          this.toArray().forEach(function(t5, e4) {
            e4 = o3.children[e4];
            N2(e4, this.options.draggable, o3, false) && (n3[t5] = e4);
          }, this), e3 && this.captureAnimationState(), t4.forEach(function(t5) {
            n3[t5] && (o3.removeChild(n3[t5]), o3.appendChild(n3[t5]));
          }), e3 && this.animateAll();
        }, save: function() {
          var t4 = this.options.store;
          t4 && t4.set && t4.set(this);
        }, closest: function(t4, e3) {
          return N2(t4, e3 || this.options.draggable, this.el, false);
        }, option: function(t4, e3) {
          var n3 = this.options;
          if (void 0 === e3)
            return n3[t4];
          var o3 = K3.modifyOption(this, t4, e3);
          n3[t4] = void 0 !== o3 ? o3 : e3, "group" === t4 && Pt3(n3);
        }, destroy: function() {
          z3("destroy", this);
          var t4 = this.el;
          t4[j3] = null, f3(t4, "mousedown", this._onTapStart), f3(t4, "touchstart", this._onTapStart), f3(t4, "pointerdown", this._onTapStart), this.nativeDraggable && (f3(t4, "dragover", this), f3(t4, "dragenter", this)), Array.prototype.forEach.call(t4.querySelectorAll("[draggable]"), function(t5) {
            t5.removeAttribute("draggable");
          }), this._onDrop(), this._disableDelayedDragEvents(), Et3.splice(Et3.indexOf(this.el), 1), this.el = t4 = null;
        }, _hideClone: function() {
          et3 || (z3("hideClone", this), Bt3.eventCanceled || (P3(tt3, "display", "none"), this.options.removeCloneOnHide && tt3.parentNode && tt3.parentNode.removeChild(tt3), et3 = true));
        }, _showClone: function(t4) {
          "clone" === t4.lastPutMode ? et3 && (z3("showClone", this), Bt3.eventCanceled || (q3.parentNode != $4 || this.options.group.revertClone ? Q2 ? $4.insertBefore(tt3, Q2) : $4.appendChild(tt3) : $4.insertBefore(tt3, q3), this.options.group.revertClone && this.animate(q3, tt3), P3(tt3, "display", ""), et3 = false)) : this._hideClone();
        } }, xt3 && h2(document, "touchmove", function(t4) {
          (Bt3.active || yt3) && t4.cancelable && t4.preventDefault();
        }), Bt3.utils = { on: h2, off: f3, css: P3, find: b2, is: function(t4, e3) {
          return !!N2(t4, e3, t4, false);
        }, extend: function(t4, e3) {
          if (t4 && e3)
            for (var n3 in e3)
              e3.hasOwnProperty(n3) && (t4[n3] = e3[n3]);
          return t4;
        }, throttle: S3, closest: N2, toggleClass: I2, clone: _2, index: B3, nextTick: Lt3, cancelNextTick: Kt2, detectDirection: It2, getChild: X3 }, Bt3.get = function(t4) {
          return t4[j3];
        }, Bt3.mount = function() {
          for (var t4 = arguments.length, e3 = new Array(t4), n3 = 0; n3 < t4; n3++)
            e3[n3] = arguments[n3];
          (e3 = e3[0].constructor === Array ? e3[0] : e3).forEach(function(t5) {
            if (!t5.prototype || !t5.prototype.constructor)
              throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t5));
            t5.utils && (Bt3.utils = M2(M2({}, Bt3.utils), t5.utils)), K3.mount(t5);
          });
        }, Bt3.create = function(t4, e3) {
          return new Bt3(t4, e3);
        };
        var Wt3, zt3, Gt3, Ut3, qt3, Vt3, Zt2 = [], $t2 = !(Bt3.version = "1.15.0");
        function Qt2() {
          Zt2.forEach(function(t4) {
            clearInterval(t4.pid);
          }), Zt2 = [];
        }
        function Jt2() {
          clearInterval(Vt3);
        }
        var te2, ee2 = S3(function(n3, t4, e3, o3) {
          if (t4.scroll) {
            var i4, r3 = (n3.touches ? n3.touches[0] : n3).clientX, a3 = (n3.touches ? n3.touches[0] : n3).clientY, l3 = t4.scrollSensitivity, s3 = t4.scrollSpeed, c3 = O2(), u3 = false;
            zt3 !== e3 && (zt3 = e3, Qt2(), Wt3 = t4.scroll, i4 = t4.scrollFn, true === Wt3 && (Wt3 = A2(e3, true)));
            var d4 = 0, h3 = Wt3;
            do {
              var f4 = h3, p3 = k2(f4), g3 = p3.top, m4 = p3.bottom, v3 = p3.left, b3 = p3.right, y3 = p3.width, w3 = p3.height, E3 = void 0, D4 = void 0, S4 = f4.scrollWidth, _3 = f4.scrollHeight, C3 = P3(f4), T4 = f4.scrollLeft, p3 = f4.scrollTop, D4 = f4 === c3 ? (E3 = y3 < S4 && ("auto" === C3.overflowX || "scroll" === C3.overflowX || "visible" === C3.overflowX), w3 < _3 && ("auto" === C3.overflowY || "scroll" === C3.overflowY || "visible" === C3.overflowY)) : (E3 = y3 < S4 && ("auto" === C3.overflowX || "scroll" === C3.overflowX), w3 < _3 && ("auto" === C3.overflowY || "scroll" === C3.overflowY)), T4 = E3 && (Math.abs(b3 - r3) <= l3 && T4 + y3 < S4) - (Math.abs(v3 - r3) <= l3 && !!T4), p3 = D4 && (Math.abs(m4 - a3) <= l3 && p3 + w3 < _3) - (Math.abs(g3 - a3) <= l3 && !!p3);
              if (!Zt2[d4])
                for (var x3 = 0; x3 <= d4; x3++)
                  Zt2[x3] || (Zt2[x3] = {});
              Zt2[d4].vx == T4 && Zt2[d4].vy == p3 && Zt2[d4].el === f4 || (Zt2[d4].el = f4, Zt2[d4].vx = T4, Zt2[d4].vy = p3, clearInterval(Zt2[d4].pid), 0 == T4 && 0 == p3 || (u3 = true, Zt2[d4].pid = setInterval(function() {
                o3 && 0 === this.layer && Bt3.active._onTouchMove(qt3);
                var t5 = Zt2[this.layer].vy ? Zt2[this.layer].vy * s3 : 0, e4 = Zt2[this.layer].vx ? Zt2[this.layer].vx * s3 : 0;
                "function" == typeof i4 && "continue" !== i4.call(Bt3.dragged.parentNode[j3], e4, t5, n3, qt3, Zt2[this.layer].el) || F3(Zt2[this.layer].el, e4, t5);
              }.bind({ layer: d4 }), 24))), d4++;
            } while (t4.bubbleScroll && h3 !== c3 && (h3 = A2(h3, false)));
            $t2 = u3;
          }
        }, 30), c2 = function(t4) {
          var e3 = t4.originalEvent, n3 = t4.putSortable, o3 = t4.dragEl, i4 = t4.activeSortable, r3 = t4.dispatchSortableEvent, a3 = t4.hideGhostForTarget, t4 = t4.unhideGhostForTarget;
          e3 && (i4 = n3 || i4, a3(), e3 = e3.changedTouches && e3.changedTouches.length ? e3.changedTouches[0] : e3, e3 = document.elementFromPoint(e3.clientX, e3.clientY), t4(), i4 && !i4.el.contains(e3) && (r3("spill"), this.onSpill({ dragEl: o3, putSortable: n3 })));
        };
        function ne2() {
        }
        function oe2() {
        }
        ne2.prototype = { startIndex: null, dragStart: function(t4) {
          t4 = t4.oldDraggableIndex;
          this.startIndex = t4;
        }, onSpill: function(t4) {
          var e3 = t4.dragEl, n3 = t4.putSortable;
          this.sortable.captureAnimationState(), n3 && n3.captureAnimationState();
          t4 = X3(this.sortable.el, this.startIndex, this.options);
          t4 ? this.sortable.el.insertBefore(e3, t4) : this.sortable.el.appendChild(e3), this.sortable.animateAll(), n3 && n3.animateAll();
        }, drop: c2 }, a2(ne2, { pluginName: "revertOnSpill" }), oe2.prototype = { onSpill: function(t4) {
          var e3 = t4.dragEl, t4 = t4.putSortable || this.sortable;
          t4.captureAnimationState(), e3.parentNode && e3.parentNode.removeChild(e3), t4.animateAll();
        }, drop: c2 }, a2(oe2, { pluginName: "removeOnSpill" });
        var ie2, re3, ae2, le, se2, ce2 = [], ue2 = [], de2 = false, he2 = false, fe2 = false;
        function pe2(n3, o3) {
          ue2.forEach(function(t4, e3) {
            e3 = o3.children[t4.sortableIndex + (n3 ? Number(e3) : 0)];
            e3 ? o3.insertBefore(t4, e3) : o3.appendChild(t4);
          });
        }
        function ge2() {
          ce2.forEach(function(t4) {
            t4 !== ae2 && t4.parentNode && t4.parentNode.removeChild(t4);
          });
        }
        return Bt3.mount(new function() {
          function t4() {
            for (var t5 in this.defaults = { scroll: true, forceAutoScrollFallback: false, scrollSensitivity: 30, scrollSpeed: 10, bubbleScroll: true }, this)
              "_" === t5.charAt(0) && "function" == typeof this[t5] && (this[t5] = this[t5].bind(this));
          }
          return t4.prototype = { dragStarted: function(t5) {
            t5 = t5.originalEvent;
            this.sortable.nativeDraggable ? h2(document, "dragover", this._handleAutoScroll) : this.options.supportPointer ? h2(document, "pointermove", this._handleFallbackAutoScroll) : t5.touches ? h2(document, "touchmove", this._handleFallbackAutoScroll) : h2(document, "mousemove", this._handleFallbackAutoScroll);
          }, dragOverCompleted: function(t5) {
            t5 = t5.originalEvent;
            this.options.dragOverBubble || t5.rootEl || this._handleAutoScroll(t5);
          }, drop: function() {
            this.sortable.nativeDraggable ? f3(document, "dragover", this._handleAutoScroll) : (f3(document, "pointermove", this._handleFallbackAutoScroll), f3(document, "touchmove", this._handleFallbackAutoScroll), f3(document, "mousemove", this._handleFallbackAutoScroll)), Jt2(), Qt2(), clearTimeout(g2), g2 = void 0;
          }, nulling: function() {
            qt3 = zt3 = Wt3 = $t2 = Vt3 = Gt3 = Ut3 = null, Zt2.length = 0;
          }, _handleFallbackAutoScroll: function(t5) {
            this._handleAutoScroll(t5, true);
          }, _handleAutoScroll: function(e3, n3) {
            var o3, i4 = this, r3 = (e3.touches ? e3.touches[0] : e3).clientX, a3 = (e3.touches ? e3.touches[0] : e3).clientY, t5 = document.elementFromPoint(r3, a3);
            qt3 = e3, n3 || this.options.forceAutoScrollFallback || w2 || y2 || u2 ? (ee2(e3, this.options, t5, n3), o3 = A2(t5, true), !$t2 || Vt3 && r3 === Gt3 && a3 === Ut3 || (Vt3 && Jt2(), Vt3 = setInterval(function() {
              var t6 = A2(document.elementFromPoint(r3, a3), true);
              t6 !== o3 && (o3 = t6, Qt2()), ee2(e3, i4.options, t6, n3);
            }, 10), Gt3 = r3, Ut3 = a3)) : this.options.bubbleScroll && A2(t5, true) !== O2() ? ee2(e3, this.options, A2(t5, false), false) : Qt2();
          } }, a2(t4, { pluginName: "scroll", initializeByDefault: true });
        }()), Bt3.mount(oe2, ne2), Bt3.mount(new function() {
          function t4() {
            this.defaults = { swapClass: "sortable-swap-highlight" };
          }
          return t4.prototype = { dragStart: function(t5) {
            t5 = t5.dragEl;
            te2 = t5;
          }, dragOverValid: function(t5) {
            var e3 = t5.completed, n3 = t5.target, o3 = t5.onMove, i4 = t5.activeSortable, r3 = t5.changed, a3 = t5.cancel;
            i4.options.swap && (t5 = this.sortable.el, i4 = this.options, n3 && n3 !== t5 && (t5 = te2, te2 = false !== o3(n3) ? (I2(n3, i4.swapClass, true), n3) : null, t5 && t5 !== te2 && I2(t5, i4.swapClass, false)), r3(), e3(true), a3());
          }, drop: function(t5) {
            var e3, n3, o3 = t5.activeSortable, i4 = t5.putSortable, r3 = t5.dragEl, a3 = i4 || this.sortable, l3 = this.options;
            te2 && I2(te2, l3.swapClass, false), te2 && (l3.swap || i4 && i4.options.swap) && r3 !== te2 && (a3.captureAnimationState(), a3 !== o3 && o3.captureAnimationState(), n3 = te2, t5 = (e3 = r3).parentNode, l3 = n3.parentNode, t5 && l3 && !t5.isEqualNode(n3) && !l3.isEqualNode(e3) && (i4 = B3(e3), r3 = B3(n3), t5.isEqualNode(l3) && i4 < r3 && r3++, t5.insertBefore(n3, t5.children[i4]), l3.insertBefore(e3, l3.children[r3])), a3.animateAll(), a3 !== o3 && o3.animateAll());
          }, nulling: function() {
            te2 = null;
          } }, a2(t4, { pluginName: "swap", eventProperties: function() {
            return { swapItem: te2 };
          } });
        }()), Bt3.mount(new function() {
          function t4(o3) {
            for (var t5 in this)
              "_" === t5.charAt(0) && "function" == typeof this[t5] && (this[t5] = this[t5].bind(this));
            o3.options.avoidImplicitDeselect || (o3.options.supportPointer ? h2(document, "pointerup", this._deselectMultiDrag) : (h2(document, "mouseup", this._deselectMultiDrag), h2(document, "touchend", this._deselectMultiDrag))), h2(document, "keydown", this._checkKeyDown), h2(document, "keyup", this._checkKeyUp), this.defaults = { selectedClass: "sortable-selected", multiDragKey: null, avoidImplicitDeselect: false, setData: function(t6, e3) {
              var n3 = "";
              ce2.length && re3 === o3 ? ce2.forEach(function(t7, e4) {
                n3 += (e4 ? ", " : "") + t7.textContent;
              }) : n3 = e3.textContent, t6.setData("Text", n3);
            } };
          }
          return t4.prototype = { multiDragKeyDown: false, isMultiDrag: false, delayStartGlobal: function(t5) {
            t5 = t5.dragEl;
            ae2 = t5;
          }, delayEnded: function() {
            this.isMultiDrag = ~ce2.indexOf(ae2);
          }, setupClone: function(t5) {
            var e3 = t5.sortable, t5 = t5.cancel;
            if (this.isMultiDrag) {
              for (var n3 = 0; n3 < ce2.length; n3++)
                ue2.push(_2(ce2[n3])), ue2[n3].sortableIndex = ce2[n3].sortableIndex, ue2[n3].draggable = false, ue2[n3].style["will-change"] = "", I2(ue2[n3], this.options.selectedClass, false), ce2[n3] === ae2 && I2(ue2[n3], this.options.chosenClass, false);
              e3._hideClone(), t5();
            }
          }, clone: function(t5) {
            var e3 = t5.sortable, n3 = t5.rootEl, o3 = t5.dispatchSortableEvent, t5 = t5.cancel;
            this.isMultiDrag && (this.options.removeCloneOnHide || ce2.length && re3 === e3 && (pe2(true, n3), o3("clone"), t5()));
          }, showClone: function(t5) {
            var e3 = t5.cloneNowShown, n3 = t5.rootEl, t5 = t5.cancel;
            this.isMultiDrag && (pe2(false, n3), ue2.forEach(function(t6) {
              P3(t6, "display", "");
            }), e3(), se2 = false, t5());
          }, hideClone: function(t5) {
            var e3 = this, n3 = (t5.sortable, t5.cloneNowHidden), t5 = t5.cancel;
            this.isMultiDrag && (ue2.forEach(function(t6) {
              P3(t6, "display", "none"), e3.options.removeCloneOnHide && t6.parentNode && t6.parentNode.removeChild(t6);
            }), n3(), se2 = true, t5());
          }, dragStartGlobal: function(t5) {
            t5.sortable;
            !this.isMultiDrag && re3 && re3.multiDrag._deselectMultiDrag(), ce2.forEach(function(t6) {
              t6.sortableIndex = B3(t6);
            }), ce2 = ce2.sort(function(t6, e3) {
              return t6.sortableIndex - e3.sortableIndex;
            }), fe2 = true;
          }, dragStarted: function(t5) {
            var e3, n3 = this, t5 = t5.sortable;
            this.isMultiDrag && (this.options.sort && (t5.captureAnimationState(), this.options.animation && (ce2.forEach(function(t6) {
              t6 !== ae2 && P3(t6, "position", "absolute");
            }), e3 = k2(ae2, false, true, true), ce2.forEach(function(t6) {
              t6 !== ae2 && C2(t6, e3);
            }), de2 = he2 = true)), t5.animateAll(function() {
              de2 = he2 = false, n3.options.animation && ce2.forEach(function(t6) {
                T3(t6);
              }), n3.options.sort && ge2();
            }));
          }, dragOver: function(t5) {
            var e3 = t5.target, n3 = t5.completed, t5 = t5.cancel;
            he2 && ~ce2.indexOf(e3) && (n3(false), t5());
          }, revert: function(t5) {
            var n3, o3, e3 = t5.fromSortable, i4 = t5.rootEl, r3 = t5.sortable, a3 = t5.dragRect;
            1 < ce2.length && (ce2.forEach(function(t6) {
              r3.addAnimationState({ target: t6, rect: he2 ? k2(t6) : a3 }), T3(t6), t6.fromRect = a3, e3.removeAnimationState(t6);
            }), he2 = false, n3 = !this.options.removeCloneOnHide, o3 = i4, ce2.forEach(function(t6, e4) {
              e4 = o3.children[t6.sortableIndex + (n3 ? Number(e4) : 0)];
              e4 ? o3.insertBefore(t6, e4) : o3.appendChild(t6);
            }));
          }, dragOverCompleted: function(t5) {
            var e3, n3 = t5.sortable, o3 = t5.isOwner, i4 = t5.insertion, r3 = t5.activeSortable, a3 = t5.parentEl, l3 = t5.putSortable, t5 = this.options;
            i4 && (o3 && r3._hideClone(), de2 = false, t5.animation && 1 < ce2.length && (he2 || !o3 && !r3.options.sort && !l3) && (e3 = k2(ae2, false, true, true), ce2.forEach(function(t6) {
              t6 !== ae2 && (C2(t6, e3), a3.appendChild(t6));
            }), he2 = true), o3 || (he2 || ge2(), 1 < ce2.length ? (o3 = se2, r3._showClone(n3), r3.options.animation && !se2 && o3 && ue2.forEach(function(t6) {
              r3.addAnimationState({ target: t6, rect: le }), t6.fromRect = le, t6.thisAnimationDuration = null;
            })) : r3._showClone(n3)));
          }, dragOverAnimationCapture: function(t5) {
            var e3 = t5.dragRect, n3 = t5.isOwner, t5 = t5.activeSortable;
            ce2.forEach(function(t6) {
              t6.thisAnimationDuration = null;
            }), t5.options.animation && !n3 && t5.multiDrag.isMultiDrag && (le = a2({}, e3), e3 = v2(ae2, true), le.top -= e3.f, le.left -= e3.e);
          }, dragOverAnimationComplete: function() {
            he2 && (he2 = false, ge2());
          }, drop: function(t5) {
            var e3 = t5.originalEvent, n3 = t5.rootEl, o3 = t5.parentEl, i4 = t5.sortable, r3 = t5.dispatchSortableEvent, a3 = t5.oldIndex, l3 = t5.putSortable, s3 = l3 || this.sortable;
            if (e3) {
              var c3, u3, d4, h3 = this.options, f4 = o3.children;
              if (!fe2)
                if (h3.multiDragKey && !this.multiDragKeyDown && this._deselectMultiDrag(), I2(ae2, h3.selectedClass, !~ce2.indexOf(ae2)), ~ce2.indexOf(ae2))
                  ce2.splice(ce2.indexOf(ae2), 1), ie2 = null, W2({ sortable: i4, rootEl: n3, name: "deselect", targetEl: ae2, originalEvent: e3 });
                else {
                  if (ce2.push(ae2), W2({ sortable: i4, rootEl: n3, name: "select", targetEl: ae2, originalEvent: e3 }), e3.shiftKey && ie2 && i4.el.contains(ie2)) {
                    var p3 = B3(ie2), t5 = B3(ae2);
                    if (~p3 && ~t5 && p3 !== t5)
                      for (var g3, m4 = p3 < t5 ? (g3 = p3, t5) : (g3 = t5, p3 + 1); g3 < m4; g3++)
                        ~ce2.indexOf(f4[g3]) || (I2(f4[g3], h3.selectedClass, true), ce2.push(f4[g3]), W2({ sortable: i4, rootEl: n3, name: "select", targetEl: f4[g3], originalEvent: e3 }));
                  } else
                    ie2 = ae2;
                  re3 = s3;
                }
              fe2 && this.isMultiDrag && (he2 = false, (o3[j3].options.sort || o3 !== n3) && 1 < ce2.length && (c3 = k2(ae2), u3 = B3(ae2, ":not(." + this.options.selectedClass + ")"), !de2 && h3.animation && (ae2.thisAnimationDuration = null), s3.captureAnimationState(), de2 || (h3.animation && (ae2.fromRect = c3, ce2.forEach(function(t6) {
                var e4;
                t6.thisAnimationDuration = null, t6 !== ae2 && (e4 = he2 ? k2(t6) : c3, t6.fromRect = e4, s3.addAnimationState({ target: t6, rect: e4 }));
              })), ge2(), ce2.forEach(function(t6) {
                f4[u3] ? o3.insertBefore(t6, f4[u3]) : o3.appendChild(t6), u3++;
              }), a3 === B3(ae2) && (d4 = false, ce2.forEach(function(t6) {
                t6.sortableIndex !== B3(t6) && (d4 = true);
              }), d4 && r3("update"))), ce2.forEach(function(t6) {
                T3(t6);
              }), s3.animateAll()), re3 = s3), (n3 === o3 || l3 && "clone" !== l3.lastPutMode) && ue2.forEach(function(t6) {
                t6.parentNode && t6.parentNode.removeChild(t6);
              });
            }
          }, nullingGlobal: function() {
            this.isMultiDrag = fe2 = false, ue2.length = 0;
          }, destroyGlobal: function() {
            this._deselectMultiDrag(), f3(document, "pointerup", this._deselectMultiDrag), f3(document, "mouseup", this._deselectMultiDrag), f3(document, "touchend", this._deselectMultiDrag), f3(document, "keydown", this._checkKeyDown), f3(document, "keyup", this._checkKeyUp);
          }, _deselectMultiDrag: function(t5) {
            if (!(void 0 !== fe2 && fe2 || re3 !== this.sortable || t5 && N2(t5.target, this.options.draggable, this.sortable.el, false) || t5 && 0 !== t5.button))
              for (; ce2.length; ) {
                var e3 = ce2[0];
                I2(e3, this.options.selectedClass, false), ce2.shift(), W2({ sortable: this.sortable, rootEl: this.sortable.el, name: "deselect", targetEl: e3, originalEvent: t5 });
              }
          }, _checkKeyDown: function(t5) {
            t5.key === this.options.multiDragKey && (this.multiDragKeyDown = true);
          }, _checkKeyUp: function(t5) {
            t5.key === this.options.multiDragKey && (this.multiDragKeyDown = false);
          } }, a2(t4, { pluginName: "multiDrag", utils: { select: function(t5) {
            var e3 = t5.parentNode[j3];
            e3 && e3.options.multiDrag && !~ce2.indexOf(t5) && (re3 && re3 !== e3 && (re3.multiDrag._deselectMultiDrag(), re3 = e3), I2(t5, e3.options.selectedClass, true), ce2.push(t5));
          }, deselect: function(t5) {
            var e3 = t5.parentNode[j3], n3 = ce2.indexOf(t5);
            e3 && e3.options.multiDrag && ~n3 && (I2(t5, e3.options.selectedClass, false), ce2.splice(n3, 1));
          } }, eventProperties: function() {
            var n3 = this, o3 = [], i4 = [];
            return ce2.forEach(function(t5) {
              var e3;
              o3.push({ multiDragElement: t5, index: t5.sortableIndex }), e3 = he2 && t5 !== ae2 ? -1 : he2 ? B3(t5, ":not(." + n3.options.selectedClass + ")") : B3(t5), i4.push({ multiDragElement: t5, index: e3 });
            }), { items: r2(ce2), clones: [].concat(ue2), oldIndicies: o3, newIndicies: i4 };
          }, optionListeners: { multiDragKey: function(t5) {
            return "ctrl" === (t5 = t5.toLowerCase()) ? t5 = "Control" : 1 < t5.length && (t5 = t5.charAt(0).toUpperCase() + t5.substr(1)), t5;
          } } });
        }()), Bt3;
      });
    }
  });

  // node_modules/frappe-datatable/dist/frappe-datatable.cjs.js
  var require_frappe_datatable_cjs = __commonJS({
    "node_modules/frappe-datatable/dist/frappe-datatable.cjs.js"(exports2, module2) {
      "use strict";
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var Sortable2 = _interopDefault(require_Sortable_min());
      function $4(expr, con) {
        return typeof expr === "string" ? (con || document).querySelector(expr) : expr || null;
      }
      $4.each = (expr, con) => {
        return typeof expr === "string" ? Array.from((con || document).querySelectorAll(expr)) : expr || null;
      };
      $4.create = (tag, o2) => {
        let element = document.createElement(tag);
        for (let i3 in o2) {
          let val2 = o2[i3];
          if (i3 === "inside") {
            $4(val2).appendChild(element);
          } else if (i3 === "around") {
            let ref = $4(val2);
            ref.parentNode.insertBefore(element, ref);
            element.appendChild(ref);
          } else if (i3 === "styles") {
            if (typeof val2 === "object") {
              Object.keys(val2).map((prop) => {
                element.style[prop] = val2[prop];
              });
            }
          } else if (i3 in element) {
            element[i3] = val2;
          } else {
            element.setAttribute(i3, val2);
          }
        }
        return element;
      };
      $4.on = (element, event2, selector, callback) => {
        if (!callback) {
          callback = selector;
          $4.bind(element, event2, callback);
        } else {
          $4.delegate(element, event2, selector, callback);
        }
      };
      $4.off = (element, event2, handler) => {
        element.removeEventListener(event2, handler);
      };
      $4.bind = (element, event2, callback) => {
        event2.split(/\s+/).forEach(function(event3) {
          element.addEventListener(event3, callback);
        });
      };
      $4.delegate = (element, event2, selector, callback) => {
        element.addEventListener(event2, function(e2) {
          const delegatedTarget = e2.target.closest(selector);
          if (delegatedTarget) {
            e2.delegatedTarget = delegatedTarget;
            callback.call(this, e2, delegatedTarget);
          }
        });
      };
      $4.unbind = (element, o2) => {
        if (element) {
          for (let event2 in o2) {
            let callback = o2[event2];
            event2.split(/\s+/).forEach(function(event3) {
              element.removeEventListener(event3, callback);
            });
          }
        }
      };
      $4.fire = (target, type, properties) => {
        let evt = document.createEvent("HTMLEvents");
        evt.initEvent(type, true, true);
        for (let j3 in properties) {
          evt[j3] = properties[j3];
        }
        return target.dispatchEvent(evt);
      };
      $4.data = (element, attrs) => {
        if (!attrs) {
          return element.dataset;
        }
        for (const attr in attrs) {
          element.dataset[attr] = attrs[attr];
        }
      };
      $4.style = (elements, styleMap) => {
        if (typeof styleMap === "string") {
          return $4.getStyle(elements, styleMap);
        }
        if (!Array.isArray(elements)) {
          elements = [elements];
        }
        elements.map((element) => {
          for (const prop in styleMap) {
            element.style[prop] = styleMap[prop];
          }
        });
      };
      $4.removeStyle = (elements, styleProps) => {
        if (!Array.isArray(elements)) {
          elements = [elements];
        }
        if (!Array.isArray(styleProps)) {
          styleProps = [styleProps];
        }
        elements.map((element) => {
          for (const prop of styleProps) {
            element.style[prop] = "";
          }
        });
      };
      $4.getStyle = (element, prop) => {
        if (!prop) {
          return getComputedStyle(element);
        }
        let val2 = getComputedStyle(element)[prop];
        if (["width", "height"].includes(prop)) {
          val2 = parseFloat(val2);
        }
        return val2;
      };
      $4.closest = (selector, element) => {
        if (!element)
          return null;
        if (element.matches(selector)) {
          return element;
        }
        return $4.closest(selector, element.parentNode);
      };
      $4.inViewport = (el, parentEl) => {
        const {
          top,
          left,
          bottom,
          right
        } = el.getBoundingClientRect();
        const {
          top: pTop,
          left: pLeft,
          bottom: pBottom,
          right: pRight
        } = parentEl.getBoundingClientRect();
        return top >= pTop && left >= pLeft && bottom <= pBottom && right <= pRight;
      };
      $4.scrollTop = function scrollTop(element, pixels) {
        requestAnimationFrame(() => {
          element.scrollTop = pixels;
        });
      };
      $4.scrollbarSize = function scrollbarSize() {
        if (!$4.scrollBarSizeValue) {
          $4.scrollBarSizeValue = getScrollBarSize();
        }
        return $4.scrollBarSizeValue;
      };
      function getScrollBarSize() {
        const scrollDiv = document.createElement("div");
        $4.style(scrollDiv, {
          width: "100px",
          height: "100px",
          overflow: "scroll",
          position: "absolute",
          top: "-9999px"
        });
        document.body.appendChild(scrollDiv);
        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
      }
      $4.hasVerticalOverflow = function(element) {
        return element.scrollHeight > element.offsetHeight + 10;
      };
      $4.hasHorizontalOverflow = function(element) {
        return element.scrollWidth > element.offsetWidth + 10;
      };
      $4.measureTextWidth = function(text) {
        const div = document.createElement("div");
        div.style.position = "absolute";
        div.style.visibility = "hidden";
        div.style.height = "auto";
        div.style.width = "auto";
        div.style.whiteSpace = "nowrap";
        div.innerText = text;
        document.body.appendChild(div);
        return div.clientWidth + 1;
      };
      function isObject2(value2) {
        var type = typeof value2;
        return value2 != null && (type == "object" || type == "function");
      }
      var isObject_1 = isObject2;
      var commonjsGlobal = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function commonjsRequire() {
        throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs");
      }
      function unwrapExports(x2) {
        return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
      }
      function createCommonjsModule(fn, module3) {
        return module3 = { exports: {} }, fn(module3, module3.exports), module3.exports;
      }
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var _freeGlobal = freeGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = _freeGlobal || freeSelf || Function("return this")();
      var _root = root;
      var now = function() {
        return _root.Date.now();
      };
      var now_1 = now;
      var Symbol2 = _root.Symbol;
      var _Symbol = Symbol2;
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = _Symbol ? _Symbol.toStringTag : void 0;
      function getRawTag(value2) {
        var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
        try {
          value2[symToStringTag] = void 0;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value2);
        {
          if (isOwn) {
            value2[symToStringTag] = tag;
          } else {
            delete value2[symToStringTag];
          }
        }
        return result;
      }
      var _getRawTag = getRawTag;
      var objectProto$1 = Object.prototype;
      var nativeObjectToString$1 = objectProto$1.toString;
      function objectToString(value2) {
        return nativeObjectToString$1.call(value2);
      }
      var _objectToString = objectToString;
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : void 0;
      function baseGetTag(value2) {
        if (value2 == null) {
          return value2 === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag$1 && symToStringTag$1 in Object(value2) ? _getRawTag(value2) : _objectToString(value2);
      }
      var _baseGetTag = baseGetTag;
      function isObjectLike(value2) {
        return value2 != null && typeof value2 == "object";
      }
      var isObjectLike_1 = isObjectLike;
      var symbolTag = "[object Symbol]";
      function isSymbol(value2) {
        return typeof value2 == "symbol" || isObjectLike_1(value2) && _baseGetTag(value2) == symbolTag;
      }
      var isSymbol_1 = isSymbol;
      var NAN = 0 / 0;
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value2) {
        if (typeof value2 == "number") {
          return value2;
        }
        if (isSymbol_1(value2)) {
          return NAN;
        }
        if (isObject_1(value2)) {
          var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
          value2 = isObject_1(other) ? other + "" : other;
        }
        if (typeof value2 != "string") {
          return value2 === 0 ? value2 : +value2;
        }
        value2 = value2.replace(reTrim, "");
        var isBinary2 = reIsBinary.test(value2);
        return isBinary2 || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
      }
      var toNumber_1 = toNumber;
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber_1(wait) || 0;
        if (isObject_1(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now_1();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now_1());
        }
        function debounced() {
          var time = now_1(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var debounce_1 = debounce;
      var FUNC_ERROR_TEXT$1 = "Expected a function";
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT$1);
        }
        if (isObject_1(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce_1(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      var throttle_1 = throttle;
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction(value2) {
        if (!isObject_1(value2)) {
          return false;
        }
        var tag = _baseGetTag(value2);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      var isFunction_1 = isFunction;
      var coreJsData = _root["__core-js_shared__"];
      var _coreJsData = coreJsData;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var _isMasked = isMasked;
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      var _toSource = toSource;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto$1 = Function.prototype;
      var objectProto$2 = Object.prototype;
      var funcToString$1 = funcProto$1.toString;
      var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value2) {
        if (!isObject_1(value2) || _isMasked(value2)) {
          return false;
        }
        var pattern = isFunction_1(value2) ? reIsNative : reIsHostCtor;
        return pattern.test(_toSource(value2));
      }
      var _baseIsNative = baseIsNative;
      function getValue(object, key2) {
        return object == null ? void 0 : object[key2];
      }
      var _getValue = getValue;
      function getNative(object, key2) {
        var value2 = _getValue(object, key2);
        return _baseIsNative(value2) ? value2 : void 0;
      }
      var _getNative = getNative;
      var nativeCreate = _getNative(Object, "create");
      var _nativeCreate = nativeCreate;
      function hashClear() {
        this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
        this.size = 0;
      }
      var _hashClear = hashClear;
      function hashDelete(key2) {
        var result = this.has(key2) && delete this.__data__[key2];
        this.size -= result ? 1 : 0;
        return result;
      }
      var _hashDelete = hashDelete;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto$3 = Object.prototype;
      var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
      function hashGet(key2) {
        var data = this.__data__;
        if (_nativeCreate) {
          var result = data[key2];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty$2.call(data, key2) ? data[key2] : void 0;
      }
      var _hashGet = hashGet;
      var objectProto$4 = Object.prototype;
      var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
      function hashHas(key2) {
        var data = this.__data__;
        return _nativeCreate ? data[key2] !== void 0 : hasOwnProperty$3.call(data, key2);
      }
      var _hashHas = hashHas;
      var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
      function hashSet(key2, value2) {
        var data = this.__data__;
        this.size += this.has(key2) ? 0 : 1;
        data[key2] = _nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
        return this;
      }
      var _hashSet = hashSet;
      function Hash(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = _hashClear;
      Hash.prototype["delete"] = _hashDelete;
      Hash.prototype.get = _hashGet;
      Hash.prototype.has = _hashHas;
      Hash.prototype.set = _hashSet;
      var _Hash = Hash;
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      var _listCacheClear = listCacheClear;
      function eq(value2, other) {
        return value2 === other || value2 !== value2 && other !== other;
      }
      var eq_1 = eq;
      function assocIndexOf(array, key2) {
        var length2 = array.length;
        while (length2--) {
          if (eq_1(array[length2][0], key2)) {
            return length2;
          }
        }
        return -1;
      }
      var _assocIndexOf = assocIndexOf;
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key2) {
        var data = this.__data__, index = _assocIndexOf(data, key2);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      var _listCacheDelete = listCacheDelete;
      function listCacheGet(key2) {
        var data = this.__data__, index = _assocIndexOf(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      var _listCacheGet = listCacheGet;
      function listCacheHas(key2) {
        return _assocIndexOf(this.__data__, key2) > -1;
      }
      var _listCacheHas = listCacheHas;
      function listCacheSet(key2, value2) {
        var data = this.__data__, index = _assocIndexOf(data, key2);
        if (index < 0) {
          ++this.size;
          data.push([key2, value2]);
        } else {
          data[index][1] = value2;
        }
        return this;
      }
      var _listCacheSet = listCacheSet;
      function ListCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = _listCacheClear;
      ListCache.prototype["delete"] = _listCacheDelete;
      ListCache.prototype.get = _listCacheGet;
      ListCache.prototype.has = _listCacheHas;
      ListCache.prototype.set = _listCacheSet;
      var _ListCache = ListCache;
      var Map2 = _getNative(_root, "Map");
      var _Map = Map2;
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new _Hash(),
          "map": new (_Map || _ListCache)(),
          "string": new _Hash()
        };
      }
      var _mapCacheClear = mapCacheClear;
      function isKeyable(value2) {
        var type = typeof value2;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
      }
      var _isKeyable = isKeyable;
      function getMapData(map2, key2) {
        var data = map2.__data__;
        return _isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
      }
      var _getMapData = getMapData;
      function mapCacheDelete(key2) {
        var result = _getMapData(this, key2)["delete"](key2);
        this.size -= result ? 1 : 0;
        return result;
      }
      var _mapCacheDelete = mapCacheDelete;
      function mapCacheGet(key2) {
        return _getMapData(this, key2).get(key2);
      }
      var _mapCacheGet = mapCacheGet;
      function mapCacheHas(key2) {
        return _getMapData(this, key2).has(key2);
      }
      var _mapCacheHas = mapCacheHas;
      function mapCacheSet(key2, value2) {
        var data = _getMapData(this, key2), size = data.size;
        data.set(key2, value2);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      var _mapCacheSet = mapCacheSet;
      function MapCache(entries) {
        var index = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length2) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = _mapCacheClear;
      MapCache.prototype["delete"] = _mapCacheDelete;
      MapCache.prototype.get = _mapCacheGet;
      MapCache.prototype.has = _mapCacheHas;
      MapCache.prototype.set = _mapCacheSet;
      var _MapCache = MapCache;
      var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
      function setCacheAdd(value2) {
        this.__data__.set(value2, HASH_UNDEFINED$2);
        return this;
      }
      var _setCacheAdd = setCacheAdd;
      function setCacheHas(value2) {
        return this.__data__.has(value2);
      }
      var _setCacheHas = setCacheHas;
      function SetCache(values) {
        var index = -1, length2 = values == null ? 0 : values.length;
        this.__data__ = new _MapCache();
        while (++index < length2) {
          this.add(values[index]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
      SetCache.prototype.has = _setCacheHas;
      var _SetCache = SetCache;
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length2 = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length2) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      var _baseFindIndex = baseFindIndex;
      function baseIsNaN(value2) {
        return value2 !== value2;
      }
      var _baseIsNaN = baseIsNaN;
      function strictIndexOf(array, value2, fromIndex) {
        var index = fromIndex - 1, length2 = array.length;
        while (++index < length2) {
          if (array[index] === value2) {
            return index;
          }
        }
        return -1;
      }
      var _strictIndexOf = strictIndexOf;
      function baseIndexOf(array, value2, fromIndex) {
        return value2 === value2 ? _strictIndexOf(array, value2, fromIndex) : _baseFindIndex(array, _baseIsNaN, fromIndex);
      }
      var _baseIndexOf = baseIndexOf;
      function arrayIncludes(array, value2) {
        var length2 = array == null ? 0 : array.length;
        return !!length2 && _baseIndexOf(array, value2, 0) > -1;
      }
      var _arrayIncludes = arrayIncludes;
      function arrayIncludesWith(array, value2, comparator) {
        var index = -1, length2 = array == null ? 0 : array.length;
        while (++index < length2) {
          if (comparator(value2, array[index])) {
            return true;
          }
        }
        return false;
      }
      var _arrayIncludesWith = arrayIncludesWith;
      function cacheHas(cache2, key2) {
        return cache2.has(key2);
      }
      var _cacheHas = cacheHas;
      var Set2 = _getNative(_root, "Set");
      var _Set = Set2;
      function noop() {
      }
      var noop_1 = noop;
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value2) {
          result[++index] = value2;
        });
        return result;
      }
      var _setToArray = setToArray;
      var INFINITY = 1 / 0;
      var createSet = !(_Set && 1 / _setToArray(new _Set([, -0]))[1] == INFINITY) ? noop_1 : function(values) {
        return new _Set(values);
      };
      var _createSet = createSet;
      var LARGE_ARRAY_SIZE = 200;
      function baseUniq(array, iteratee, comparator) {
        var index = -1, includes = _arrayIncludes, length2 = array.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = _arrayIncludesWith;
        } else if (length2 >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : _createSet(array);
          if (set) {
            return _setToArray(set);
          }
          isCommon = false;
          includes = _cacheHas;
          seen = new _SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index < length2) {
            var value2 = array[index], computed = iteratee ? iteratee(value2) : value2;
            value2 = comparator || value2 !== 0 ? value2 : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value2);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value2);
            }
          }
        return result;
      }
      var _baseUniq = baseUniq;
      function uniq(array) {
        return array && array.length ? _baseUniq(array) : [];
      }
      var uniq_1 = uniq;
      function camelCaseToDash(str) {
        return str.replace(/([A-Z])/g, (g2) => `-${g2[0].toLowerCase()}`);
      }
      function makeDataAttributeString(props) {
        const keys = Object.keys(props);
        return keys.map((key2) => {
          const _key = camelCaseToDash(key2);
          const val2 = props[key2];
          if (val2 === void 0)
            return "";
          return `data-${_key}="${val2}" `;
        }).join("").trim();
      }
      function copyTextToClipboard(text) {
        var textArea = document.createElement("textarea");
        textArea.style.position = "fixed";
        textArea.style.top = 0;
        textArea.style.left = 0;
        textArea.style.width = "2em";
        textArea.style.height = "2em";
        textArea.style.padding = 0;
        textArea.style.border = "none";
        textArea.style.outline = "none";
        textArea.style.boxShadow = "none";
        textArea.style.background = "transparent";
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        try {
          document.execCommand("copy");
        } catch (err) {
          console.log("Oops, unable to copy");
        }
        document.body.removeChild(textArea);
      }
      function isNumeric(val2) {
        return !isNaN(val2);
      }
      var throttle$1 = throttle_1;
      var debounce$1 = debounce_1;
      function nextTick2(fn, context = null) {
        return (...args) => {
          return new Promise((resolve) => {
            const execute = () => {
              const out = fn.apply(context, args);
              resolve(out);
            };
            setTimeout(execute);
          });
        };
      }
      function linkProperties(target, source, properties) {
        const props = properties.reduce((acc, prop) => {
          acc[prop] = {
            get() {
              return source[prop];
            }
          };
          return acc;
        }, {});
        Object.defineProperties(target, props);
      }
      function isSet(val2) {
        return val2 !== void 0 || val2 !== null;
      }
      function notSet(val2) {
        return !isSet(val2);
      }
      function isNumber(val2) {
        return !isNaN(val2);
      }
      function ensureArray(val2) {
        if (!Array.isArray(val2)) {
          return [val2];
        }
        return val2;
      }
      function uniq$1(arr) {
        return uniq_1(arr);
      }
      function numberSortAsc(a2, b2) {
        return a2 - b2;
      }
      function stripHTML(html) {
        return html.replace(/<[^>]*>/g, "");
      }
      function format2(str, args) {
        if (!str)
          return str;
        Object.keys(args).forEach((arg) => {
          let regex = new RegExp(`{(${arg})}`, "g");
          str = str.replace(regex, args[arg]);
        });
        return str;
      }
      function escapeHTML(txt2) {
        if (!txt2)
          return "";
        let escapeHtmlMapping = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;",
          "/": "&#x2F;",
          "`": "&#x60;",
          "=": "&#x3D;"
        };
        return String(txt2).replace(/[&<>"'`=/]/g, (char) => escapeHtmlMapping[char] || char);
      }
      var DataManager = class {
        constructor(options) {
          this.options = options;
          this.sortRows = nextTick2(this.sortRows, this);
          this.switchColumn = nextTick2(this.switchColumn, this);
          this.removeColumn = nextTick2(this.removeColumn, this);
          this.options.filterRows = nextTick2(this.options.filterRows, this);
        }
        init(data, columns) {
          if (!data) {
            data = this.options.data;
          }
          if (columns) {
            this.options.columns = columns;
          }
          this.data = data;
          this.rowCount = 0;
          this.columns = [];
          this.rows = [];
          this.prepareColumns();
          this.prepareRows();
          this.prepareTreeRows();
          this.prepareRowView();
          this.prepareNumericColumns();
        }
        get currentSort() {
          const col = this.columns.find((col2) => col2.sortOrder !== "none");
          return col || {
            colIndex: -1,
            sortOrder: "none"
          };
        }
        prepareColumns() {
          this.columns = [];
          this.validateColumns();
          this.prepareDefaultColumns();
          this.prepareHeader();
        }
        prepareDefaultColumns() {
          if (this.options.checkboxColumn && !this.hasColumnById("_checkbox")) {
            const cell = {
              id: "_checkbox",
              content: this.getCheckboxHTML(),
              editable: false,
              resizable: false,
              sortable: false,
              focusable: false,
              dropdown: false,
              width: 32
            };
            this.columns.push(cell);
          }
          if (this.options.serialNoColumn && !this.hasColumnById("_rowIndex")) {
            let cell = {
              id: "_rowIndex",
              content: "",
              align: "center",
              editable: false,
              resizable: false,
              focusable: false,
              dropdown: false
            };
            this.columns.push(cell);
          }
        }
        prepareHeader() {
          let columns = this.columns.concat(this.options.columns);
          const baseCell = {
            isHeader: 1,
            editable: true,
            sortable: true,
            resizable: true,
            focusable: true,
            dropdown: true,
            width: null,
            format: (value2) => {
              if (value2 === null || value2 === void 0) {
                return "";
              }
              return value2 + "";
            }
          };
          this.columns = columns.map((cell, i3) => this.prepareCell(cell, i3)).map((col) => Object.assign({}, baseCell, col)).map((col) => {
            col.content = col.content || col.name || "";
            col.id = col.id || col.content;
            return col;
          });
        }
        prepareCell(content, i3) {
          const cell = {
            content: "",
            sortOrder: "none",
            colIndex: i3,
            column: this.columns[i3]
          };
          if (content !== null && typeof content === "object") {
            Object.assign(cell, content);
          } else {
            cell.content = content;
          }
          return cell;
        }
        prepareNumericColumns() {
          const row0 = this.getRow(0);
          if (!row0)
            return;
          this.columns = this.columns.map((column, i3) => {
            const cellValue = row0[i3].content;
            if (!column.align && isNumeric(cellValue)) {
              column.align = "right";
            }
            return column;
          });
        }
        prepareRows() {
          this.validateData(this.data);
          this.rows = this.data.map((d3, i3) => {
            const index = this._getNextRowCount();
            let row = [];
            let meta = {
              rowIndex: index
            };
            if (Array.isArray(d3)) {
              if (this.options.checkboxColumn) {
                row.push(this.getCheckboxHTML());
              }
              if (this.options.serialNoColumn) {
                row.push(index + 1 + "");
              }
              row = row.concat(d3);
              while (row.length < this.columns.length) {
                row.push("");
              }
            } else {
              for (let col of this.columns) {
                if (col.id === "_checkbox") {
                  row.push(this.getCheckboxHTML());
                } else if (col.id === "_rowIndex") {
                  row.push(index + 1 + "");
                } else {
                  row.push(d3[col.id]);
                }
              }
              meta.indent = d3.indent || 0;
            }
            return this.prepareRow(row, meta);
          });
        }
        prepareTreeRows() {
          this.rows.forEach((row, i3) => {
            if (isNumber(row.meta.indent)) {
              const nextRow = this.getRow(i3 + 1);
              row.meta.isLeaf = !nextRow || notSet(nextRow.meta.indent) || nextRow.meta.indent <= row.meta.indent;
              row.meta.isTreeNodeClose = false;
            }
          });
        }
        prepareRowView() {
          this.rowViewOrder = this.rows.map((row) => row.meta.rowIndex);
        }
        prepareRow(row, meta) {
          const baseRowCell = {
            rowIndex: meta.rowIndex,
            indent: meta.indent
          };
          row = row.map((cell, i3) => this.prepareCell(cell, i3)).map((cell) => Object.assign({}, baseRowCell, cell));
          row.meta = meta;
          return row;
        }
        validateColumns() {
          const columns = this.options.columns;
          if (!Array.isArray(columns)) {
            throw new DataError("`columns` must be an array");
          }
          columns.forEach((column, i3) => {
            if (typeof column !== "string" && typeof column !== "object") {
              throw new DataError(`column "${i3}" must be a string or an object`);
            }
          });
        }
        validateData(data) {
          if (Array.isArray(data) && (data.length === 0 || Array.isArray(data[0]) || typeof data[0] === "object")) {
            return true;
          }
          throw new DataError("`data` must be an array of arrays or objects");
        }
        appendRows(rows) {
          this.validateData(rows);
          this.rows.push(...this.prepareRows(rows));
        }
        sortRows(colIndex, sortOrder = "none") {
          colIndex = +colIndex;
          this.getColumns().map((col) => {
            if (col.colIndex === colIndex) {
              col.sortOrder = sortOrder;
            } else {
              col.sortOrder = "none";
            }
          });
          this._sortRows(colIndex, sortOrder);
        }
        _sortRows(colIndex, sortOrder) {
          if (this.currentSort.colIndex === colIndex) {
            if (this.currentSort.sortOrder === "asc" && sortOrder === "desc" || this.currentSort.sortOrder === "desc" && sortOrder === "asc") {
              this.reverseArray(this.rowViewOrder);
              this.currentSort.sortOrder = sortOrder;
              return;
            }
          }
          this.rowViewOrder.sort((a2, b2) => {
            const aIndex = a2;
            const bIndex = b2;
            let aContent = this.getCell(colIndex, a2).content;
            let bContent = this.getCell(colIndex, b2).content;
            aContent = aContent == null ? "" : aContent;
            bContent = bContent == null ? "" : bContent;
            if (sortOrder === "none") {
              return aIndex - bIndex;
            } else if (sortOrder === "asc") {
              if (aContent < bContent)
                return -1;
              if (aContent > bContent)
                return 1;
              if (aContent === bContent)
                return 0;
            } else if (sortOrder === "desc") {
              if (aContent < bContent)
                return 1;
              if (aContent > bContent)
                return -1;
              if (aContent === bContent)
                return 0;
            }
            return 0;
          });
          if (this.hasColumnById("_rowIndex")) {
            const srNoColIndex = this.getColumnIndexById("_rowIndex");
            this.rows.forEach((row, index) => {
              const viewIndex = this.rowViewOrder.indexOf(index);
              const cell = row[srNoColIndex];
              cell.content = viewIndex + 1 + "";
            });
          }
        }
        reverseArray(array) {
          let left = null;
          let right = null;
          let length2 = array.length;
          for (left = 0, right = length2 - 1; left < right; left += 1, right -= 1) {
            const temporary = array[left];
            array[left] = array[right];
            array[right] = temporary;
          }
        }
        switchColumn(index1, index2) {
          const temp = this.columns[index1];
          this.columns[index1] = this.columns[index2];
          this.columns[index2] = temp;
          this.columns[index1].colIndex = index1;
          this.columns[index2].colIndex = index2;
          this.rows.forEach((row) => {
            const newCell1 = Object.assign({}, row[index1], {
              colIndex: index2
            });
            const newCell2 = Object.assign({}, row[index2], {
              colIndex: index1
            });
            row[index2] = newCell1;
            row[index1] = newCell2;
          });
        }
        removeColumn(index) {
          index = +index;
          const filter = (cell) => cell.colIndex !== index;
          const map2 = (cell, i3) => Object.assign({}, cell, {
            colIndex: i3
          });
          this.columns = this.columns.filter(filter).map(map2);
          this.rows.forEach((row) => {
            row.splice(index, 1);
            row.forEach((cell, i3) => {
              cell.colIndex = i3;
            });
          });
        }
        updateRow(row, rowIndex) {
          if (row.length < this.columns.length) {
            if (this.hasColumnById("_rowIndex")) {
              const val2 = rowIndex + 1 + "";
              row = [val2].concat(row);
            }
            if (this.hasColumnById("_checkbox")) {
              const val2 = '<input type="checkbox" />';
              row = [val2].concat(row);
            }
          }
          const _row = this.prepareRow(row, { rowIndex });
          const index = this.rows.findIndex((row2) => row2[0].rowIndex === rowIndex);
          this.rows[index] = _row;
          return _row;
        }
        updateCell(colIndex, rowIndex, options) {
          let cell;
          if (typeof colIndex === "object") {
            cell = colIndex;
            colIndex = cell.colIndex;
            rowIndex = cell.rowIndex;
            options = cell;
          }
          cell = this.getCell(colIndex, rowIndex);
          for (let key2 in options) {
            const newVal = options[key2];
            if (newVal !== void 0) {
              cell[key2] = newVal;
            }
          }
          return cell;
        }
        updateColumn(colIndex, keyValPairs) {
          const column = this.getColumn(colIndex);
          for (let key2 in keyValPairs) {
            const newVal = keyValPairs[key2];
            if (newVal !== void 0) {
              column[key2] = newVal;
            }
          }
          return column;
        }
        filterRows(filters2) {
          return this.options.filterRows(this.rows, filters2).then((result) => {
            if (!result) {
              result = this.getAllRowIndices();
            }
            if (!result.then) {
              result = Promise.resolve(result);
            }
            return result.then((rowsToShow) => {
              this._filteredRows = rowsToShow;
              const rowsToHide = this.getAllRowIndices().filter((index) => !rowsToShow.includes(index));
              return {
                rowsToHide,
                rowsToShow
              };
            });
          });
        }
        getFilteredRowIndices() {
          return this._filteredRows || this.getAllRowIndices();
        }
        getAllRowIndices() {
          return this.rows.map((row) => row.meta.rowIndex);
        }
        getRowCount() {
          return this.rowCount;
        }
        _getNextRowCount() {
          const val2 = this.rowCount;
          this.rowCount++;
          return val2;
        }
        getRows(start, end) {
          return this.rows.slice(start, end);
        }
        getRowsForView(start, end) {
          const rows = this.rowViewOrder.map((i3) => this.rows[i3]);
          return rows.slice(start, end);
        }
        getColumns(skipStandardColumns) {
          let columns = this.columns;
          if (skipStandardColumns) {
            columns = columns.slice(this.getStandardColumnCount());
          }
          return columns;
        }
        getStandardColumnCount() {
          if (this.options.checkboxColumn && this.options.serialNoColumn) {
            return 2;
          }
          if (this.options.checkboxColumn || this.options.serialNoColumn) {
            return 1;
          }
          return 0;
        }
        getColumnCount(skipStandardColumns) {
          let val2 = this.columns.length;
          if (skipStandardColumns) {
            val2 = val2 - this.getStandardColumnCount();
          }
          return val2;
        }
        getColumn(colIndex) {
          colIndex = +colIndex;
          if (colIndex < 0) {
            colIndex = this.columns.length + colIndex;
          }
          return this.columns.find((col) => col.colIndex === colIndex);
        }
        getColumnById(id) {
          return this.columns.find((col) => col.id === id);
        }
        getRow(rowIndex) {
          rowIndex = +rowIndex;
          return this.rows[rowIndex];
        }
        getCell(colIndex, rowIndex) {
          rowIndex = +rowIndex;
          colIndex = +colIndex;
          return this.getRow(rowIndex)[colIndex];
        }
        getChildren(parentRowIndex) {
          parentRowIndex = +parentRowIndex;
          const parentIndent = this.getRow(parentRowIndex).meta.indent;
          const out = [];
          for (let i3 = parentRowIndex + 1; i3 < this.rowCount; i3++) {
            const row = this.getRow(i3);
            if (isNaN(row.meta.indent))
              continue;
            if (row.meta.indent > parentIndent) {
              out.push(i3);
            }
            if (row.meta.indent === parentIndent) {
              break;
            }
          }
          return out;
        }
        getImmediateChildren(parentRowIndex) {
          parentRowIndex = +parentRowIndex;
          const parentIndent = this.getRow(parentRowIndex).meta.indent;
          const out = [];
          const childIndent = parentIndent + 1;
          for (let i3 = parentRowIndex + 1; i3 < this.rowCount; i3++) {
            const row = this.getRow(i3);
            if (isNaN(row.meta.indent) || row.meta.indent > childIndent)
              continue;
            if (row.meta.indent === childIndent) {
              out.push(i3);
            }
            if (row.meta.indent === parentIndent) {
              break;
            }
          }
          return out;
        }
        get() {
          return {
            columns: this.columns,
            rows: this.rows
          };
        }
        getData(rowIndex) {
          return this.data[rowIndex];
        }
        hasColumn(name3) {
          return Boolean(this.columns.find((col) => col.content === name3));
        }
        hasColumnById(id) {
          return Boolean(this.columns.find((col) => col.id === id));
        }
        getColumnIndex(name3) {
          return this.columns.findIndex((col) => col.content === name3);
        }
        getColumnIndexById(id) {
          return this.columns.findIndex((col) => col.id === id);
        }
        getCheckboxHTML() {
          return '<input type="checkbox" />';
        }
      };
      var DataError = class extends TypeError {
      };
      var icons = {
        chevronDown: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down"><polyline points="6 9 12 15 18 9"></polyline></svg>',
        chevronRight: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>'
      };
      var CellManager = class {
        constructor(instance) {
          this.instance = instance;
          linkProperties(this, this.instance, [
            "wrapper",
            "options",
            "style",
            "header",
            "bodyScrollable",
            "columnmanager",
            "rowmanager",
            "datamanager",
            "keyboard"
          ]);
          this.bindEvents();
        }
        bindEvents() {
          this.bindFocusCell();
          this.bindEditCell();
          this.bindKeyboardSelection();
          this.bindCopyCellContents();
          this.bindMouseEvents();
          this.bindTreeEvents();
        }
        bindFocusCell() {
          this.bindKeyboardNav();
        }
        bindEditCell() {
          this.$editingCell = null;
          $4.on(this.bodyScrollable, "dblclick", ".dt-cell", (e2, cell) => {
            this.activateEditing(cell);
          });
          this.keyboard.on("enter", () => {
            if (this.$focusedCell && !this.$editingCell) {
              this.activateEditing(this.$focusedCell);
            } else if (this.$editingCell) {
              this.deactivateEditing();
            }
          });
        }
        bindKeyboardNav() {
          const focusLastCell = (direction) => {
            if (!this.$focusedCell || this.$editingCell) {
              return false;
            }
            let $cell = this.$focusedCell;
            const {
              rowIndex,
              colIndex
            } = $4.data($cell);
            if (direction === "left") {
              $cell = this.getLeftMostCell$(rowIndex);
            } else if (direction === "right") {
              $cell = this.getRightMostCell$(rowIndex);
            } else if (direction === "up") {
              $cell = this.getTopMostCell$(colIndex);
            } else if (direction === "down") {
              $cell = this.getBottomMostCell$(colIndex);
            }
            this.focusCell($cell);
            return true;
          };
          ["left", "right", "up", "down", "tab", "shift+tab"].map((direction) => this.keyboard.on(direction, () => this.focusCellInDirection(direction)));
          ["left", "right", "up", "down"].map((direction) => this.keyboard.on(`ctrl+${direction}`, () => focusLastCell(direction)));
          this.keyboard.on("esc", () => {
            this.deactivateEditing(false);
            this.columnmanager.toggleFilter(false);
          });
          if (this.options.inlineFilters) {
            this.keyboard.on("ctrl+f", (e2) => {
              const $cell = $4.closest(".dt-cell", e2.target);
              const { colIndex } = $4.data($cell);
              this.activateFilter(colIndex);
              return true;
            });
            $4.on(this.header, "focusin", ".dt-filter", () => {
              this.unfocusCell(this.$focusedCell);
            });
          }
        }
        bindKeyboardSelection() {
          const getNextSelectionCursor = (direction) => {
            let $selectionCursor = this.getSelectionCursor();
            if (direction === "left") {
              $selectionCursor = this.getLeftCell$($selectionCursor);
            } else if (direction === "right") {
              $selectionCursor = this.getRightCell$($selectionCursor);
            } else if (direction === "up") {
              $selectionCursor = this.getAboveCell$($selectionCursor);
            } else if (direction === "down") {
              $selectionCursor = this.getBelowCell$($selectionCursor);
            }
            return $selectionCursor;
          };
          ["left", "right", "up", "down"].map((direction) => this.keyboard.on(`shift+${direction}`, () => this.selectArea(getNextSelectionCursor(direction))));
        }
        bindCopyCellContents() {
          this.keyboard.on("ctrl+c", () => {
            const noOfCellsCopied = this.copyCellContents(this.$focusedCell, this.$selectionCursor);
            const message = this.instance.translate("{count} cells copied", {
              count: noOfCellsCopied
            });
            if (noOfCellsCopied) {
              this.instance.showToastMessage(message, 2);
            }
          });
          if (this.options.pasteFromClipboard) {
            this.keyboard.on("ctrl+v", (e2) => {
              this.instance.pasteTarget.focus();
              setTimeout(() => {
                const data = this.instance.pasteTarget.value;
                this.instance.pasteTarget.value = "";
                this.pasteContentInCell(data);
              }, 10);
              return false;
            });
          }
        }
        bindMouseEvents() {
          let mouseDown = null;
          $4.on(this.bodyScrollable, "mousedown", ".dt-cell", (e2) => {
            mouseDown = true;
            this.focusCell($4(e2.delegatedTarget));
          });
          $4.on(this.bodyScrollable, "mouseup", () => {
            mouseDown = false;
          });
          const selectArea = (e2) => {
            if (!mouseDown)
              return;
            this.selectArea($4(e2.delegatedTarget));
          };
          $4.on(this.bodyScrollable, "mousemove", ".dt-cell", throttle$1(selectArea, 50));
        }
        bindTreeEvents() {
          $4.on(this.bodyScrollable, "click", ".dt-tree-node__toggle", (e2, $toggle) => {
            const $cell = $4.closest(".dt-cell", $toggle);
            const { rowIndex } = $4.data($cell);
            if ($cell.classList.contains("dt-cell--tree-close")) {
              this.rowmanager.openSingleNode(rowIndex);
            } else {
              this.rowmanager.closeSingleNode(rowIndex);
            }
          });
        }
        focusCell($cell, {
          skipClearSelection = 0,
          skipDOMFocus = 0,
          skipScrollToCell = 0
        } = {}) {
          if (!$cell)
            return;
          if ($cell === this.$editingCell)
            return;
          const {
            colIndex,
            isHeader
          } = $4.data($cell);
          if (isHeader) {
            return;
          }
          const column = this.columnmanager.getColumn(colIndex);
          if (column.focusable === false) {
            return;
          }
          if (!skipScrollToCell) {
            this.scrollToCell($cell);
          }
          this.deactivateEditing();
          if (!skipClearSelection) {
            this.clearSelection();
          }
          if (this.$focusedCell) {
            this.$focusedCell.classList.remove("dt-cell--focus");
          }
          this.$focusedCell = $cell;
          $cell.classList.add("dt-cell--focus");
          if (!skipDOMFocus) {
            $cell.focus();
          }
          this.highlightRowColumnHeader($cell);
        }
        unfocusCell($cell) {
          if (!$cell)
            return;
          $cell.classList.remove("dt-cell--focus");
          this.$focusedCell = null;
          if (this.lastHeaders) {
            this.lastHeaders.forEach((header) => header && header.classList.remove("dt-cell--highlight"));
          }
        }
        highlightRowColumnHeader($cell) {
          const {
            colIndex,
            rowIndex
          } = $4.data($cell);
          const srNoColIndex = this.datamanager.getColumnIndexById("_rowIndex");
          const colHeaderSelector = `.dt-cell--header-${colIndex}`;
          const rowHeaderSelector = `.dt-cell--${srNoColIndex}-${rowIndex}`;
          if (this.lastHeaders) {
            this.lastHeaders.forEach((header) => header && header.classList.remove("dt-cell--highlight"));
          }
          const colHeader = $4(colHeaderSelector, this.wrapper);
          const rowHeader = $4(rowHeaderSelector, this.wrapper);
          this.lastHeaders = [colHeader, rowHeader];
          this.lastHeaders.forEach((header) => header && header.classList.add("dt-cell--highlight"));
        }
        selectAreaOnClusterChanged() {
          if (!(this.$focusedCell && this.$selectionCursor))
            return;
          const {
            colIndex,
            rowIndex
          } = $4.data(this.$selectionCursor);
          const $cell = this.getCell$(colIndex, rowIndex);
          if (!$cell || $cell === this.$selectionCursor)
            return;
          const fCell = $4.data(this.$focusedCell);
          this.$focusedCell = this.getCell$(fCell.colIndex, fCell.rowIndex);
          this.selectArea($cell);
        }
        focusCellOnClusterChanged() {
          if (!this.$focusedCell)
            return;
          const {
            colIndex,
            rowIndex
          } = $4.data(this.$focusedCell);
          const $cell = this.getCell$(colIndex, rowIndex);
          if (!$cell)
            return;
          this.focusCell($cell, {
            skipClearSelection: 1,
            skipDOMFocus: 1,
            skipScrollToCell: 1
          });
        }
        selectArea($selectionCursor) {
          if (!this.$focusedCell)
            return;
          if (this._selectArea(this.$focusedCell, $selectionCursor)) {
            this.$selectionCursor = $selectionCursor;
          }
        }
        _selectArea($cell1, $cell2) {
          if ($cell1 === $cell2)
            return false;
          const cells = this.getCellsInRange($cell1, $cell2);
          if (!cells)
            return false;
          this.clearSelection();
          this._selectedCells = cells.map((index) => this.getCell$(...index));
          requestAnimationFrame(() => {
            this._selectedCells.map(($cell) => $cell.classList.add("dt-cell--highlight"));
          });
          return true;
        }
        getCellsInRange($cell1, $cell2) {
          let colIndex1, rowIndex1, colIndex2, rowIndex2;
          if (typeof $cell1 === "number") {
            [colIndex1, rowIndex1, colIndex2, rowIndex2] = arguments;
          } else if (typeof $cell1 === "object") {
            if (!($cell1 && $cell2)) {
              return false;
            }
            const cell1 = $4.data($cell1);
            const cell2 = $4.data($cell2);
            colIndex1 = +cell1.colIndex;
            rowIndex1 = +cell1.rowIndex;
            colIndex2 = +cell2.colIndex;
            rowIndex2 = +cell2.rowIndex;
          }
          if (rowIndex1 > rowIndex2) {
            [rowIndex1, rowIndex2] = [rowIndex2, rowIndex1];
          }
          if (colIndex1 > colIndex2) {
            [colIndex1, colIndex2] = [colIndex2, colIndex1];
          }
          if (this.isStandardCell(colIndex1) || this.isStandardCell(colIndex2)) {
            return false;
          }
          const cells = [];
          let colIndex = colIndex1;
          let rowIndex = rowIndex1;
          const rowIndices = [];
          while (rowIndex <= rowIndex2) {
            rowIndices.push(rowIndex);
            rowIndex += 1;
          }
          rowIndices.map((rowIndex3) => {
            while (colIndex <= colIndex2) {
              cells.push([colIndex, rowIndex3]);
              colIndex++;
            }
            colIndex = colIndex1;
          });
          return cells;
        }
        clearSelection() {
          (this._selectedCells || []).forEach(($cell) => $cell.classList.remove("dt-cell--highlight"));
          this._selectedCells = [];
          this.$selectionCursor = null;
        }
        getSelectionCursor() {
          return this.$selectionCursor || this.$focusedCell;
        }
        activateEditing($cell) {
          this.focusCell($cell);
          const {
            rowIndex,
            colIndex
          } = $4.data($cell);
          const col = this.columnmanager.getColumn(colIndex);
          if (col && (col.editable === false || col.focusable === false)) {
            return;
          }
          const cell = this.getCell(colIndex, rowIndex);
          if (cell && cell.editable === false) {
            return;
          }
          if (this.$editingCell) {
            const {
              _rowIndex,
              _colIndex
            } = $4.data(this.$editingCell);
            if (rowIndex === _rowIndex && colIndex === _colIndex) {
              return;
            }
          }
          this.$editingCell = $cell;
          $cell.classList.add("dt-cell--editing");
          const $editCell = $4(".dt-cell__edit", $cell);
          $editCell.innerHTML = "";
          const editor = this.getEditor(colIndex, rowIndex, cell.content, $editCell);
          if (editor) {
            this.currentCellEditor = editor;
            editor.initValue(cell.content, rowIndex, col);
          }
        }
        deactivateEditing(submitValue = true) {
          if (submitValue) {
            this.submitEditing();
          }
          if (this.$focusedCell)
            this.$focusedCell.focus();
          if (!this.$editingCell)
            return;
          this.$editingCell.classList.remove("dt-cell--editing");
          this.$editingCell = null;
        }
        getEditor(colIndex, rowIndex, value2, parent) {
          const column = this.datamanager.getColumn(colIndex);
          const row = this.datamanager.getRow(rowIndex);
          const data = this.datamanager.getData(rowIndex);
          let editor = this.options.getEditor ? this.options.getEditor(colIndex, rowIndex, value2, parent, column, row, data) : this.getDefaultEditor(parent);
          if (editor === false) {
            return false;
          }
          if (editor === void 0) {
            editor = this.getDefaultEditor(parent);
          }
          return editor;
        }
        getDefaultEditor(parent) {
          const $input = $4.create("input", {
            class: "dt-input",
            type: "text",
            inside: parent
          });
          return {
            initValue(value2) {
              $input.focus();
              $input.value = value2;
            },
            getValue() {
              return $input.value;
            },
            setValue(value2) {
              $input.value = value2;
            }
          };
        }
        submitEditing() {
          let promise = Promise.resolve();
          if (!this.$editingCell)
            return promise;
          const $cell = this.$editingCell;
          const {
            rowIndex,
            colIndex
          } = $4.data($cell);
          const col = this.datamanager.getColumn(colIndex);
          if ($cell) {
            const editor = this.currentCellEditor;
            if (editor) {
              let valuePromise = editor.getValue();
              if (!valuePromise.then) {
                valuePromise = Promise.resolve(valuePromise);
              }
              promise = valuePromise.then((value2) => {
                const oldValue = this.getCell(colIndex, rowIndex).content;
                if (oldValue === value2)
                  return false;
                const done = editor.setValue(value2, rowIndex, col);
                this.updateCell(colIndex, rowIndex, value2, true);
                $cell.focus();
                if (done && done.then) {
                  done.catch((e2) => {
                    console.log(e2);
                    this.updateCell(colIndex, rowIndex, oldValue);
                  });
                }
                return done;
              });
            }
          }
          this.currentCellEditor = null;
          return promise;
        }
        copyCellContents($cell1, $cell2) {
          if (!$cell2 && $cell1) {
            const {
              colIndex,
              rowIndex
            } = $4.data($cell1);
            const cell = this.getCell(colIndex, rowIndex);
            copyTextToClipboard(cell.content);
            return 1;
          }
          const cells = this.getCellsInRange($cell1, $cell2);
          if (!cells)
            return 0;
          const rows = cells.map((index) => this.getCell(...index)).reduce((acc, curr) => {
            const rowIndex = curr.rowIndex;
            acc[rowIndex] = acc[rowIndex] || [];
            acc[rowIndex].push(curr.content);
            return acc;
          }, []);
          const values = rows.map((row) => row.join("	")).join("\n");
          copyTextToClipboard(values);
          return rows.reduce((total, row) => total + row.length, 0);
        }
        pasteContentInCell(data) {
          if (!this.$focusedCell)
            return;
          const matrix = data.split("\n").map((row) => row.split("	")).filter((row) => row.length && row.every((it4) => it4));
          let { colIndex, rowIndex } = $4.data(this.$focusedCell);
          let focusedCell = {
            colIndex: +colIndex,
            rowIndex: +rowIndex
          };
          matrix.forEach((row, i3) => {
            let rowIndex2 = i3 + focusedCell.rowIndex;
            row.forEach((cell, j3) => {
              let colIndex2 = j3 + focusedCell.colIndex;
              this.updateCell(colIndex2, rowIndex2, cell, true);
            });
          });
        }
        activateFilter(colIndex) {
          this.columnmanager.toggleFilter();
          this.columnmanager.focusFilter(colIndex);
          if (!this.columnmanager.isFilterShown) {
            this.$focusedCell && this.$focusedCell.focus();
          }
        }
        updateCell(colIndex, rowIndex, value2, refreshHtml = false) {
          const cell = this.datamanager.updateCell(colIndex, rowIndex, {
            content: value2
          });
          this.refreshCell(cell, refreshHtml);
        }
        refreshCell(cell, refreshHtml = false) {
          const $cell = $4(this.selector(cell.colIndex, cell.rowIndex), this.bodyScrollable);
          $cell.innerHTML = this.getCellContent(cell, refreshHtml);
        }
        toggleTreeButton(rowIndex, flag) {
          const colIndex = this.columnmanager.getFirstColumnIndex();
          const $cell = this.getCell$(colIndex, rowIndex);
          if ($cell) {
            $cell.classList[flag ? "remove" : "add"]("dt-cell--tree-close");
          }
        }
        isStandardCell(colIndex) {
          return colIndex < this.columnmanager.getFirstColumnIndex();
        }
        focusCellInDirection(direction) {
          if (!this.$focusedCell || this.$editingCell && ["left", "right", "up", "down"].includes(direction)) {
            return false;
          } else if (this.$editingCell && ["tab", "shift+tab"].includes(direction)) {
            this.deactivateEditing();
          }
          let $cell = this.$focusedCell;
          if (direction === "left" || direction === "shift+tab") {
            $cell = this.getLeftCell$($cell);
          } else if (direction === "right" || direction === "tab") {
            $cell = this.getRightCell$($cell);
          } else if (direction === "up") {
            $cell = this.getAboveCell$($cell);
          } else if (direction === "down") {
            $cell = this.getBelowCell$($cell);
          }
          if (!$cell) {
            return false;
          }
          const {
            colIndex
          } = $4.data($cell);
          const column = this.columnmanager.getColumn(colIndex);
          if (!column.focusable) {
            let $prevFocusedCell = this.$focusedCell;
            this.unfocusCell($prevFocusedCell);
            this.$focusedCell = $cell;
            let ret = this.focusCellInDirection(direction);
            if (!ret) {
              this.focusCell($prevFocusedCell);
            }
            return ret;
          }
          this.focusCell($cell);
          return true;
        }
        getCell$(colIndex, rowIndex) {
          return $4(this.selector(colIndex, rowIndex), this.bodyScrollable);
        }
        getAboveCell$($cell) {
          const {
            colIndex
          } = $4.data($cell);
          let $aboveRow = $cell.parentElement.previousElementSibling;
          while ($aboveRow && $aboveRow.classList.contains("dt-row--hide")) {
            $aboveRow = $aboveRow.previousElementSibling;
          }
          if (!$aboveRow)
            return $cell;
          return $4(`.dt-cell--col-${colIndex}`, $aboveRow);
        }
        getBelowCell$($cell) {
          const {
            colIndex
          } = $4.data($cell);
          let $belowRow = $cell.parentElement.nextElementSibling;
          while ($belowRow && $belowRow.classList.contains("dt-row--hide")) {
            $belowRow = $belowRow.nextElementSibling;
          }
          if (!$belowRow)
            return $cell;
          return $4(`.dt-cell--col-${colIndex}`, $belowRow);
        }
        getLeftCell$($cell) {
          return $cell.previousElementSibling;
        }
        getRightCell$($cell) {
          return $cell.nextElementSibling;
        }
        getLeftMostCell$(rowIndex) {
          return this.getCell$(this.columnmanager.getFirstColumnIndex(), rowIndex);
        }
        getRightMostCell$(rowIndex) {
          return this.getCell$(this.columnmanager.getLastColumnIndex(), rowIndex);
        }
        getTopMostCell$(colIndex) {
          return this.getCell$(colIndex, this.rowmanager.getFirstRowIndex());
        }
        getBottomMostCell$(colIndex) {
          return this.getCell$(colIndex, this.rowmanager.getLastRowIndex());
        }
        getCell(colIndex, rowIndex) {
          return this.instance.datamanager.getCell(colIndex, rowIndex);
        }
        getRowHeight() {
          return $4.style($4(".dt-row", this.bodyScrollable), "height");
        }
        scrollToCell($cell) {
          if ($4.inViewport($cell, this.bodyScrollable))
            return false;
          const {
            rowIndex
          } = $4.data($cell);
          this.rowmanager.scrollToRow(rowIndex);
          return false;
        }
        getRowCountPerPage() {
          return Math.ceil(this.instance.getViewportHeight() / this.getRowHeight());
        }
        getCellHTML(cell) {
          const {
            rowIndex,
            colIndex,
            isHeader,
            isFilter,
            isTotalRow
          } = cell;
          const dataAttr = makeDataAttributeString({
            rowIndex,
            colIndex,
            isHeader,
            isFilter,
            isTotalRow
          });
          const row = this.datamanager.getRow(rowIndex);
          const isBodyCell = !(isHeader || isFilter || isTotalRow);
          const className = [
            "dt-cell",
            "dt-cell--col-" + colIndex,
            isBodyCell ? `dt-cell--${colIndex}-${rowIndex}` : "",
            isBodyCell ? "dt-cell--row-" + rowIndex : "",
            isHeader ? "dt-cell--header" : "",
            isHeader ? `dt-cell--header-${colIndex}` : "",
            isFilter ? "dt-cell--filter" : "",
            isBodyCell && (row && row.meta.isTreeNodeClose) ? "dt-cell--tree-close" : ""
          ].join(" ");
          return `
            <div class="${className}" ${dataAttr} tabindex="0">
                ${this.getCellContent(cell)}
            </div>
        `;
        }
        getCellContent(cell, refreshHtml = false) {
          const {
            isHeader,
            isFilter,
            colIndex
          } = cell;
          const editable = !isHeader && cell.editable !== false;
          const editCellHTML = editable ? this.getEditCellHTML(colIndex) : "";
          const sortable = isHeader && cell.sortable !== false;
          const sortIndicator = sortable ? `<span class="sort-indicator">
                ${this.options.sortIndicator[cell.sortOrder]}
            </span>` : "";
          const resizable = isHeader && cell.resizable !== false;
          const resizeColumn = resizable ? '<span class="dt-cell__resize-handle"></span>' : "";
          const hasDropdown = isHeader && cell.dropdown !== false;
          const dropdown = hasDropdown ? this.columnmanager.getDropdownHTML() : "";
          let customFormatter = CellManager.getCustomCellFormatter(cell);
          let contentHTML;
          if (isHeader || isFilter || !customFormatter) {
            contentHTML = cell.content;
          } else {
            if (!cell.html || refreshHtml) {
              const row = this.datamanager.getRow(cell.rowIndex);
              const data = this.datamanager.getData(cell.rowIndex);
              contentHTML = customFormatter(cell.content, row, cell.column, data);
            } else {
              contentHTML = cell.html;
            }
          }
          cell.html = contentHTML;
          if (this.options.treeView && !(isHeader || isFilter) && cell.indent !== void 0) {
            const nextRow = this.datamanager.getRow(cell.rowIndex + 1);
            const addToggle = nextRow && nextRow.meta.indent > cell.indent;
            const leftPadding = 20;
            const unit = "px";
            const firstColumnIndex = this.datamanager.getColumnIndexById("_rowIndex") + 1;
            if (firstColumnIndex === cell.colIndex) {
              const padding = (cell.indent || 0) * leftPadding;
              const toggleHTML = addToggle ? `<span class="dt-tree-node__toggle" style="left: ${padding - leftPadding}${unit}">
                        <span class="icon-open">${icons.chevronDown}</span>
                        <span class="icon-close">${icons.chevronRight}</span>
                    </span>` : "";
              contentHTML = `<span class="dt-tree-node" style="padding-left: ${padding}${unit}">
                    ${toggleHTML}
                    <span>${contentHTML}</span>
                </span>`;
            }
          }
          const className = [
            "dt-cell__content",
            isHeader ? `dt-cell__content--header-${colIndex}` : `dt-cell__content--col-${colIndex}`
          ].join(" ");
          let cellContentHTML = `
            <div class="${className}">
                ${contentHTML}
                ${sortIndicator}
                ${resizeColumn}
                ${dropdown}
            </div>
            ${editCellHTML}
        `;
          let div = document.createElement("div");
          div.innerHTML = contentHTML;
          let textContent = div.textContent;
          textContent = textContent.replace(/\s+/g, " ").trim();
          cellContentHTML = cellContentHTML.replace(">", ` title="${escapeHTML(textContent)}">`);
          return cellContentHTML;
        }
        getEditCellHTML(colIndex) {
          return `<div class="dt-cell__edit dt-cell__edit--col-${colIndex}"></div>`;
        }
        selector(colIndex, rowIndex) {
          return `.dt-cell--${colIndex}-${rowIndex}`;
        }
        static getCustomCellFormatter(cell) {
          return cell.format || cell.column && cell.column.format || null;
        }
      };
      var ColumnManager = class {
        constructor(instance) {
          this.instance = instance;
          linkProperties(this, this.instance, [
            "options",
            "fireEvent",
            "header",
            "datamanager",
            "cellmanager",
            "style",
            "wrapper",
            "rowmanager",
            "bodyScrollable",
            "bodyRenderer"
          ]);
          this.bindEvents();
        }
        renderHeader() {
          this.header.innerHTML = "<div></div>";
          this.refreshHeader();
        }
        refreshHeader() {
          const columns = this.datamanager.getColumns();
          $4("div", this.header).innerHTML = this.getHeaderHTML(columns);
          this.$filterRow = $4(".dt-row-filter", this.header);
          if (this.$filterRow) {
            $4.style(this.$filterRow, { display: "none" });
          }
          this.$columnMap = [];
          this.bindMoveColumn();
        }
        getHeaderHTML(columns) {
          let html = this.rowmanager.getRowHTML(columns, {
            isHeader: 1
          });
          if (this.options.inlineFilters) {
            html += this.rowmanager.getRowHTML(columns, {
              isFilter: 1
            });
          }
          return html;
        }
        bindEvents() {
          this.bindDropdown();
          this.bindResizeColumn();
          this.bindPerfectColumnWidth();
          this.bindFilter();
        }
        bindDropdown() {
          let toggleClass = ".dt-dropdown__toggle";
          let dropdownClass = ".dt-dropdown__list";
          this.instance.dropdownContainer.innerHTML = this.getDropdownListHTML();
          this.$dropdownList = this.instance.dropdownContainer.firstElementChild;
          $4.on(this.header, "click", toggleClass, (e2) => {
            this.openDropdown(e2);
          });
          const deactivateDropdownOnBodyClick = (e2) => {
            const selector = [
              toggleClass,
              toggleClass + " *",
              dropdownClass,
              dropdownClass + " *"
            ].join(",");
            if (e2.target.matches(selector))
              return;
            deactivateDropdown();
          };
          $4.on(document.body, "click", deactivateDropdownOnBodyClick);
          document.addEventListener("scroll", deactivateDropdown, true);
          this.instance.on("onDestroy", () => {
            $4.off(document.body, "click", deactivateDropdownOnBodyClick);
            $4.off(document, "scroll", deactivateDropdown);
          });
          $4.on(this.$dropdownList, "click", ".dt-dropdown__list-item", (e2, $item) => {
            if (!this._dropdownActiveColIndex)
              return;
            const dropdownItems = this.options.headerDropdown;
            const { index } = $4.data($item);
            const colIndex = this._dropdownActiveColIndex;
            let callback = dropdownItems[index].action;
            callback && callback.call(this.instance, this.getColumn(colIndex));
            this.hideDropdown();
          });
          const _this = this;
          function deactivateDropdown(e2) {
            _this.hideDropdown();
          }
          this.hideDropdown();
        }
        openDropdown(e2) {
          if (!this._dropdownWidth) {
            $4.style(this.$dropdownList, { display: "" });
            this._dropdownWidth = $4.style(this.$dropdownList, "width");
          }
          $4.style(this.$dropdownList, {
            display: "",
            left: e2.clientX - this._dropdownWidth + 4 + "px",
            top: e2.clientY + 4 + "px"
          });
          const $cell = $4.closest(".dt-cell", e2.target);
          const { colIndex } = $4.data($cell);
          this._dropdownActiveColIndex = colIndex;
        }
        hideDropdown() {
          $4.style(this.$dropdownList, {
            display: "none"
          });
          this._dropdownActiveColIndex = null;
        }
        bindResizeColumn() {
          let isDragging = false;
          let $resizingCell, startWidth, startX;
          $4.on(this.header, "mousedown", ".dt-cell .dt-cell__resize-handle", (e2, $handle) => {
            document.body.classList.add("dt-resize");
            const $cell = $handle.parentNode.parentNode;
            $resizingCell = $cell;
            const {
              colIndex
            } = $4.data($resizingCell);
            const col = this.getColumn(colIndex);
            if (col && col.resizable === false) {
              return;
            }
            isDragging = true;
            startWidth = $4.style($4(".dt-cell__content", $resizingCell), "width");
            startX = e2.pageX;
          });
          const onMouseup = (e2) => {
            document.body.classList.remove("dt-resize");
            if (!$resizingCell)
              return;
            isDragging = false;
            const {
              colIndex
            } = $4.data($resizingCell);
            this.setColumnWidth(colIndex);
            this.style.setBodyStyle();
            $resizingCell = null;
          };
          $4.on(document.body, "mouseup", onMouseup);
          this.instance.on("onDestroy", () => {
            $4.off(document.body, "mouseup", onMouseup);
          });
          const onMouseMove = (e2) => {
            if (!isDragging)
              return;
            let delta = e2.pageX - startX;
            if (this.options.direction === "rtl") {
              delta = -1 * delta;
            }
            const finalWidth = startWidth + delta;
            const {
              colIndex
            } = $4.data($resizingCell);
            let columnMinWidth = this.options.minimumColumnWidth;
            if (columnMinWidth > finalWidth) {
              return;
            }
            this.datamanager.updateColumn(colIndex, {
              width: finalWidth
            });
            this.setColumnHeaderWidth(colIndex);
          };
          $4.on(document.body, "mousemove", onMouseMove);
          this.instance.on("onDestroy", () => {
            $4.off(document.body, "mousemove", onMouseMove);
          });
        }
        bindPerfectColumnWidth() {
          $4.on(this.header, "dblclick", ".dt-cell .dt-cell__resize-handle", (e2, $handle) => {
            const $cell = $handle.parentNode.parentNode;
            const { colIndex } = $4.data($cell);
            let longestCell = this.bodyRenderer.visibleRows.map((d3) => d3[colIndex]).reduce((acc, curr) => acc.content.length > curr.content.length ? acc : curr);
            let $longestCellHTML = this.cellmanager.getCellHTML(longestCell);
            let $div = document.createElement("div");
            $div.innerHTML = $longestCellHTML;
            let cellText = $div.querySelector(".dt-cell__content").textContent;
            let {
              borderLeftWidth,
              borderRightWidth,
              paddingLeft,
              paddingRight
            } = $4.getStyle(this.bodyScrollable.querySelector(".dt-cell__content"));
            let padding = [borderLeftWidth, borderRightWidth, paddingLeft, paddingRight].map(parseFloat).reduce((sum, val2) => sum + val2);
            let width = $4.measureTextWidth(cellText) + padding;
            this.datamanager.updateColumn(colIndex, { width });
            this.setColumnHeaderWidth(colIndex);
            this.setColumnWidth(colIndex);
          });
        }
        bindMoveColumn() {
          if (this.options.disableReorderColumn)
            return;
          const $parent = $4(".dt-row", this.header);
          this.sortable = Sortable2.create($parent, {
            onEnd: (e2) => {
              const {
                oldIndex,
                newIndex
              } = e2;
              const $draggedCell = e2.item;
              const {
                colIndex
              } = $4.data($draggedCell);
              if (+colIndex === newIndex)
                return;
              this.switchColumn(oldIndex, newIndex);
            },
            preventOnFilter: false,
            filter: ".dt-cell__resize-handle, .dt-dropdown",
            chosenClass: "dt-cell--dragging",
            animation: 150
          });
        }
        sortColumn(colIndex, nextSortOrder) {
          this.instance.freeze();
          this.sortRows(colIndex, nextSortOrder).then(() => {
            this.refreshHeader();
            return this.rowmanager.refreshRows();
          }).then(() => this.instance.unfreeze()).then(() => {
            this.fireEvent("onSortColumn", this.getColumn(colIndex));
          });
        }
        removeColumn(colIndex) {
          const removedCol = this.getColumn(colIndex);
          this.instance.freeze();
          this.datamanager.removeColumn(colIndex).then(() => {
            this.refreshHeader();
            return this.rowmanager.refreshRows();
          }).then(() => this.instance.unfreeze()).then(() => {
            this.fireEvent("onRemoveColumn", removedCol);
          });
        }
        switchColumn(oldIndex, newIndex) {
          this.instance.freeze();
          this.datamanager.switchColumn(oldIndex, newIndex).then(() => {
            this.refreshHeader();
            return this.rowmanager.refreshRows();
          }).then(() => {
            this.setColumnWidth(oldIndex);
            this.setColumnWidth(newIndex);
            this.instance.unfreeze();
          }).then(() => {
            this.fireEvent(
              "onSwitchColumn",
              this.getColumn(oldIndex),
              this.getColumn(newIndex)
            );
          });
        }
        toggleFilter(flag) {
          if (!this.options.inlineFilters)
            return;
          let showFilter;
          if (flag === void 0) {
            showFilter = !this.isFilterShown;
          } else {
            showFilter = flag;
          }
          if (showFilter) {
            $4.style(this.$filterRow, { display: "" });
          } else {
            $4.style(this.$filterRow, { display: "none" });
          }
          this.isFilterShown = showFilter;
          this.style.setBodyStyle();
        }
        focusFilter(colIndex) {
          if (!this.isFilterShown)
            return;
          const $filterInput = $4(`.dt-cell--col-${colIndex} .dt-filter`, this.$filterRow);
          $filterInput.focus();
        }
        bindFilter() {
          if (!this.options.inlineFilters)
            return;
          const handler = (e2) => {
            this.applyFilter(this.getAppliedFilters());
          };
          $4.on(this.header, "keydown", ".dt-filter", debounce$1(handler, 300));
        }
        applyFilter(filters2) {
          this.datamanager.filterRows(filters2).then(({
            rowsToShow
          }) => {
            this.rowmanager.showRows(rowsToShow);
          });
        }
        getAppliedFilters() {
          const filters2 = {};
          $4.each(".dt-filter", this.header).map((input) => {
            const value2 = input.value;
            if (value2) {
              filters2[input.dataset.colIndex] = value2;
            }
          });
          return filters2;
        }
        applyDefaultSortOrder() {
          const columnsToSort = this.getColumns().filter((col) => col.sortOrder !== "none");
          if (columnsToSort.length === 1) {
            const column = columnsToSort[0];
            this.sortColumn(column.colIndex, column.sortOrder);
          }
        }
        sortRows(colIndex, sortOrder) {
          return this.datamanager.sortRows(colIndex, sortOrder);
        }
        getColumn(colIndex) {
          return this.datamanager.getColumn(colIndex);
        }
        getColumns() {
          return this.datamanager.getColumns();
        }
        setColumnWidth(colIndex, width) {
          colIndex = +colIndex;
          let columnWidth = width || this.getColumn(colIndex).width;
          const selector = [
            `.dt-cell__content--col-${colIndex}`,
            `.dt-cell__edit--col-${colIndex}`
          ].join(", ");
          const styles = {
            width: columnWidth + "px"
          };
          this.style.setStyle(selector, styles);
        }
        setColumnHeaderWidth(colIndex) {
          colIndex = +colIndex;
          this.$columnMap = this.$columnMap || [];
          const selector = `.dt-cell__content--header-${colIndex}`;
          const {
            width
          } = this.getColumn(colIndex);
          let $column = this.$columnMap[colIndex];
          if (!$column) {
            $column = this.header.querySelector(selector);
            this.$columnMap[colIndex] = $column;
          }
          $column.style.width = width + "px";
        }
        getColumnMinWidth(colIndex) {
          colIndex = +colIndex;
          return this.getColumn(colIndex).minWidth || 24;
        }
        getFirstColumnIndex() {
          return this.datamanager.getColumnIndexById("_rowIndex") + 1;
        }
        getHeaderCell$(colIndex) {
          return $4(`.dt-cell--header-${colIndex}`, this.header);
        }
        getLastColumnIndex() {
          return this.datamanager.getColumnCount() - 1;
        }
        getDropdownHTML() {
          const { dropdownButton } = this.options;
          return `
            <div class="dt-dropdown">
                <div class="dt-dropdown__toggle">${dropdownButton}</div>
            </div>
      `;
        }
        getDropdownListHTML() {
          const { headerDropdown: dropdownItems } = this.options;
          return `
            <div class="dt-dropdown__list">
            ${dropdownItems.map((d3, i3) => `
                <div class="dt-dropdown__list-item" data-index="${i3}">${d3.label}</div>
            `).join("")}
            </div>
        `;
        }
      };
      var RowManager = class {
        constructor(instance) {
          this.instance = instance;
          linkProperties(this, this.instance, [
            "options",
            "fireEvent",
            "wrapper",
            "bodyScrollable",
            "bodyRenderer",
            "style"
          ]);
          this.bindEvents();
          this.refreshRows = nextTick2(this.refreshRows, this);
        }
        get datamanager() {
          return this.instance.datamanager;
        }
        get cellmanager() {
          return this.instance.cellmanager;
        }
        bindEvents() {
          this.bindCheckbox();
        }
        bindCheckbox() {
          if (!this.options.checkboxColumn)
            return;
          this.checkMap = [];
          $4.on(this.wrapper, "click", '.dt-cell--col-0 [type="checkbox"]', (e2, $checkbox) => {
            const $cell = $checkbox.closest(".dt-cell");
            const {
              rowIndex,
              isHeader
            } = $4.data($cell);
            const checked = $checkbox.checked;
            if (isHeader) {
              this.checkAll(checked);
            } else {
              this.checkRow(rowIndex, checked);
            }
          });
        }
        refreshRows() {
          this.instance.renderBody();
          this.instance.setDimensions();
        }
        refreshRow(row, rowIndex) {
          const _row = this.datamanager.updateRow(row, rowIndex);
          _row.forEach((cell) => {
            this.cellmanager.refreshCell(cell, true);
          });
        }
        getCheckedRows() {
          if (!this.checkMap) {
            return [];
          }
          let out = [];
          for (let rowIndex in this.checkMap) {
            const checked = this.checkMap[rowIndex];
            if (checked === 1) {
              out.push(rowIndex);
            }
          }
          return out;
        }
        highlightCheckedRows() {
          this.getCheckedRows().map((rowIndex) => this.checkRow(rowIndex, true));
        }
        checkRow(rowIndex, toggle) {
          const value2 = toggle ? 1 : 0;
          const selector = (rowIndex2) => `.dt-cell--0-${rowIndex2} [type="checkbox"]`;
          this.checkMap[rowIndex] = value2;
          $4.each(selector(rowIndex), this.bodyScrollable).map((input) => {
            input.checked = toggle;
          });
          this.highlightRow(rowIndex, toggle);
          this.showCheckStatus();
          this.fireEvent("onCheckRow", this.datamanager.getRow(rowIndex));
        }
        checkAll(toggle) {
          const value2 = toggle ? 1 : 0;
          if (toggle) {
            if (this.datamanager._filteredRows) {
              this.datamanager._filteredRows.forEach((f3) => {
                this.checkRow(f3, toggle);
              });
            } else {
              this.checkMap = Array.from(Array(this.getTotalRows())).map((c2) => value2);
            }
          } else {
            this.checkMap = [];
          }
          $4.each('.dt-cell--col-0 [type="checkbox"]', this.bodyScrollable).map((input) => {
            input.checked = toggle;
          });
          this.highlightAll(toggle);
          this.showCheckStatus();
          this.fireEvent("onCheckRow");
        }
        showCheckStatus() {
          if (!this.options.checkedRowStatus)
            return;
          const checkedRows = this.getCheckedRows();
          const count = checkedRows.length;
          if (count > 0) {
            let message = this.instance.translate("{count} rows selected", {
              count
            });
            this.bodyRenderer.showToastMessage(message);
          } else {
            this.bodyRenderer.clearToastMessage();
          }
        }
        highlightRow(rowIndex, toggle = true) {
          const $row = this.getRow$(rowIndex);
          if (!$row)
            return;
          if (!toggle && this.bodyScrollable.classList.contains("dt-scrollable--highlight-all")) {
            $row.classList.add("dt-row--unhighlight");
            return;
          }
          if (toggle && $row.classList.contains("dt-row--unhighlight")) {
            $row.classList.remove("dt-row--unhighlight");
          }
          this._highlightedRows = this._highlightedRows || {};
          if (toggle) {
            $row.classList.add("dt-row--highlight");
            this._highlightedRows[rowIndex] = $row;
          } else {
            $row.classList.remove("dt-row--highlight");
            delete this._highlightedRows[rowIndex];
          }
        }
        highlightAll(toggle = true) {
          if (toggle) {
            this.bodyScrollable.classList.add("dt-scrollable--highlight-all");
          } else {
            this.bodyScrollable.classList.remove("dt-scrollable--highlight-all");
            for (const rowIndex in this._highlightedRows) {
              const $row = this._highlightedRows[rowIndex];
              $row.classList.remove("dt-row--highlight");
            }
            this._highlightedRows = {};
          }
        }
        showRows(rowIndices) {
          rowIndices = ensureArray(rowIndices);
          const rows = rowIndices.map((rowIndex) => this.datamanager.getRow(rowIndex));
          this.bodyRenderer.renderRows(rows);
        }
        showAllRows() {
          const rowIndices = this.datamanager.getAllRowIndices();
          this.showRows(rowIndices);
        }
        getChildrenToShowForNode(rowIndex) {
          const row = this.datamanager.getRow(rowIndex);
          row.meta.isTreeNodeClose = false;
          return this.datamanager.getImmediateChildren(rowIndex);
        }
        openSingleNode(rowIndex) {
          const childrenToShow = this.getChildrenToShowForNode(rowIndex);
          const visibleRowIndices = this.bodyRenderer.visibleRowIndices;
          const rowsToShow = uniq$1([...childrenToShow, ...visibleRowIndices]).sort(numberSortAsc);
          this.showRows(rowsToShow);
        }
        getChildrenToHideForNode(rowIndex) {
          const row = this.datamanager.getRow(rowIndex);
          row.meta.isTreeNodeClose = true;
          const rowsToHide = this.datamanager.getChildren(rowIndex);
          rowsToHide.forEach((rowIndex2) => {
            const row2 = this.datamanager.getRow(rowIndex2);
            if (!row2.meta.isLeaf) {
              row2.meta.isTreeNodeClose = true;
            }
          });
          return rowsToHide;
        }
        closeSingleNode(rowIndex) {
          const rowsToHide = this.getChildrenToHideForNode(rowIndex);
          const visibleRows = this.bodyRenderer.visibleRowIndices;
          const rowsToShow = visibleRows.filter((rowIndex2) => !rowsToHide.includes(rowIndex2)).sort(numberSortAsc);
          this.showRows(rowsToShow);
        }
        expandAllNodes() {
          let rows = this.datamanager.getRows();
          let rootNodes = rows.filter((row) => !row.meta.isLeaf);
          const childrenToShow = rootNodes.map((row) => this.getChildrenToShowForNode(row.meta.rowIndex)).flat();
          const visibleRowIndices = this.bodyRenderer.visibleRowIndices;
          const rowsToShow = uniq$1([...childrenToShow, ...visibleRowIndices]).sort(numberSortAsc);
          this.showRows(rowsToShow);
        }
        collapseAllNodes() {
          let rows = this.datamanager.getRows();
          let rootNodes = rows.filter((row) => row.meta.indent === 0);
          const rowsToHide = rootNodes.map((row) => this.getChildrenToHideForNode(row.meta.rowIndex)).flat();
          const visibleRows = this.bodyRenderer.visibleRowIndices;
          const rowsToShow = visibleRows.filter((rowIndex) => !rowsToHide.includes(rowIndex)).sort(numberSortAsc);
          this.showRows(rowsToShow);
        }
        setTreeDepth(depth) {
          let rows = this.datamanager.getRows();
          const rowsToOpen = rows.filter((row) => row.meta.indent < depth);
          const rowsToClose = rows.filter((row) => row.meta.indent >= depth);
          const rowsToHide = rowsToClose.filter((row) => row.meta.indent > depth);
          rowsToClose.forEach((row) => {
            if (!row.meta.isLeaf) {
              row.meta.isTreeNodeClose = true;
            }
          });
          rowsToOpen.forEach((row) => {
            if (!row.meta.isLeaf) {
              row.meta.isTreeNodeClose = false;
            }
          });
          const rowsToShow = rows.filter((row) => !rowsToHide.includes(row)).map((row) => row.meta.rowIndex).sort(numberSortAsc);
          this.showRows(rowsToShow);
        }
        getRow$(rowIndex) {
          return $4(this.selector(rowIndex), this.bodyScrollable);
        }
        getTotalRows() {
          return this.datamanager.getRowCount();
        }
        getFirstRowIndex() {
          return 0;
        }
        getLastRowIndex() {
          return this.datamanager.getRowCount() - 1;
        }
        scrollToRow(rowIndex) {
          rowIndex = +rowIndex;
          this._lastScrollTo = this._lastScrollTo || 0;
          const $row = this.getRow$(rowIndex);
          if ($4.inViewport($row, this.bodyScrollable))
            return;
          const {
            height
          } = $row.getBoundingClientRect();
          const {
            top,
            bottom
          } = this.bodyScrollable.getBoundingClientRect();
          const rowsInView = Math.floor((bottom - top) / height);
          let offset = 0;
          if (rowIndex > this._lastScrollTo) {
            offset = height * (rowIndex + 1 - rowsInView);
          } else {
            offset = height * (rowIndex + 1 - 1);
          }
          this._lastScrollTo = rowIndex;
          $4.scrollTop(this.bodyScrollable, offset);
        }
        getRowHTML(row, props) {
          const dataAttr = makeDataAttributeString(props);
          let rowIdentifier = props.rowIndex;
          if (props.isFilter) {
            row = row.map((cell) => Object.assign({}, cell, {
              content: this.getFilterInput({
                colIndex: cell.colIndex,
                name: cell.name
              }),
              isFilter: 1,
              isHeader: void 0,
              editable: false
            }));
            rowIdentifier = "filter";
          }
          if (props.isHeader) {
            rowIdentifier = "header";
          }
          return `
            <div class="dt-row dt-row-${rowIdentifier}" ${dataAttr}>
                ${row.map((cell) => this.cellmanager.getCellHTML(cell)).join("")}
            </div>
        `;
        }
        getFilterInput(props) {
          let title = `title="Filter based on ${props.name || "Index"}"`;
          const dataAttr = makeDataAttributeString(props);
          return `<input class="dt-filter dt-input" type="text" ${dataAttr} tabindex="1"
            ${props.colIndex === 0 ? "disabled" : title} />`;
        }
        selector(rowIndex) {
          return `.dt-row-${rowIndex}`;
        }
      };
      var hyperlist = createCommonjsModule(function(module3, exports3) {
        (function(f3) {
          {
            module3.exports = f3();
          }
        })(function() {
          return function e2(t3, n2, r2) {
            function s2(o3, u2) {
              if (!n2[o3]) {
                if (!t3[o3]) {
                  var a2 = typeof commonjsRequire == "function" && commonjsRequire;
                  if (!u2 && a2)
                    return a2(o3, true);
                  if (i3)
                    return i3(o3, true);
                  var f3 = new Error("Cannot find module '" + o3 + "'");
                  throw f3.code = "MODULE_NOT_FOUND", f3;
                }
                var l2 = n2[o3] = { exports: {} };
                t3[o3][0].call(l2.exports, function(e3) {
                  var n3 = t3[o3][1][e3];
                  return s2(n3 ? n3 : e3);
                }, l2, l2.exports, e2, t3, n2, r2);
              }
              return n2[o3].exports;
            }
            var i3 = typeof commonjsRequire == "function" && commonjsRequire;
            for (var o2 = 0; o2 < r2.length; o2++)
              s2(r2[o2]);
            return s2;
          }({ 1: [function(_dereq_, module4, exports4) {
            Object.defineProperty(exports4, "__esModule", {
              value: true
            });
            var _createClass = function() {
              function defineProperties(target, props) {
                for (var i3 = 0; i3 < props.length; i3++) {
                  var descriptor = props[i3];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var defaultConfig = {
              width: "100%",
              height: "100%"
            };
            var isNumber2 = function isNumber3(input) {
              return Number(input) === Number(input);
            };
            var HyperList2 = function() {
              _createClass(HyperList3, null, [{
                key: "create",
                value: function create(element, userProvidedConfig) {
                  return new HyperList3(element, userProvidedConfig);
                }
              }, {
                key: "mergeStyle",
                value: function mergeStyle(element, style) {
                  for (var i3 in style) {
                    if (element.style[i3] !== style[i3]) {
                      element.style[i3] = style[i3];
                    }
                  }
                }
              }, {
                key: "getMaxBrowserHeight",
                value: function getMaxBrowserHeight() {
                  var wrapper = document.createElement("div");
                  var fixture = document.createElement("div");
                  HyperList3.mergeStyle(wrapper, { position: "absolute", height: "1px", opacity: 0 });
                  HyperList3.mergeStyle(fixture, { height: "1e7px" });
                  wrapper.appendChild(fixture);
                  document.body.appendChild(wrapper);
                  var maxElementHeight = fixture.offsetHeight;
                  document.body.removeChild(wrapper);
                  return maxElementHeight;
                }
              }]);
              function HyperList3(element, userProvidedConfig) {
                var _this = this;
                _classCallCheck(this, HyperList3);
                this._config = {};
                this._lastRepaint = null;
                this._maxElementHeight = HyperList3.getMaxBrowserHeight();
                this.refresh(element, userProvidedConfig);
                var config2 = this._config;
                var render = function render2() {
                  var scrollTop = _this._getScrollPosition();
                  var lastRepaint = _this._lastRepaint;
                  _this._renderAnimationFrame = window.requestAnimationFrame(render2);
                  if (scrollTop === lastRepaint) {
                    return;
                  }
                  if (!lastRepaint || Math.abs(scrollTop - lastRepaint) > _this._averageHeight) {
                    var rendered = _this._renderChunk();
                    _this._lastRepaint = scrollTop;
                    if (rendered !== false && typeof config2.afterRender === "function") {
                      config2.afterRender();
                    }
                  }
                };
                render();
              }
              _createClass(HyperList3, [{
                key: "destroy",
                value: function destroy() {
                  window.cancelAnimationFrame(this._renderAnimationFrame);
                }
              }, {
                key: "refresh",
                value: function refresh(element, userProvidedConfig) {
                  var _this2 = this;
                  Object.assign(this._config, defaultConfig, userProvidedConfig);
                  if (!element || element.nodeType !== 1) {
                    throw new Error("HyperList requires a valid DOM Node container");
                  }
                  this._element = element;
                  var config2 = this._config;
                  var scroller = this._scroller || config2.scroller || document.createElement(config2.scrollerTagName || "tr");
                  if (typeof config2.useFragment !== "boolean") {
                    this._config.useFragment = true;
                  }
                  if (!config2.generate) {
                    throw new Error("Missing required `generate` function");
                  }
                  if (!isNumber2(config2.total)) {
                    throw new Error("Invalid required `total` value, expected number");
                  }
                  if (!Array.isArray(config2.itemHeight) && !isNumber2(config2.itemHeight)) {
                    throw new Error("\n        Invalid required `itemHeight` value, expected number or array\n      ".trim());
                  } else if (isNumber2(config2.itemHeight)) {
                    this._itemHeights = Array(config2.total).fill(config2.itemHeight);
                  } else {
                    this._itemHeights = config2.itemHeight;
                  }
                  Object.keys(defaultConfig).filter(function(prop) {
                    return prop in config2;
                  }).forEach(function(prop) {
                    var value2 = config2[prop];
                    var isValueNumber = isNumber2(value2);
                    var isValuePercent = isValueNumber ? false : value2.slice(-1) === "%";
                    if (value2 && typeof value2 !== "string" && typeof value2 !== "number") {
                      var msg = "Invalid optional `" + prop + "`, expected string or number";
                      throw new Error(msg);
                    } else if (isValueNumber) {
                      config2[prop] = value2 + "px";
                    }
                    if (prop !== "height") {
                      return;
                    }
                    var numberValue = isValueNumber ? value2 : parseInt(value2.replace(/px|%/, ""), 10);
                    if (isValuePercent) {
                      _this2._containerHeight = window.innerHeight * numberValue / 100;
                    } else {
                      _this2._containerHeight = isNumber2(value2) ? value2 : numberValue;
                    }
                  });
                  var elementStyle = {
                    width: "" + config2.width,
                    height: "" + config2.height,
                    overflow: "auto",
                    position: "relative"
                  };
                  HyperList3.mergeStyle(element, elementStyle);
                  var scrollerHeight = config2.itemHeight * config2.total;
                  var maxElementHeight = this._maxElementHeight;
                  if (scrollerHeight > maxElementHeight) {
                    console.warn(["HyperList: The maximum element height", maxElementHeight + "px has", "been exceeded; please reduce your item height."].join(" "));
                  }
                  var scrollerStyle = {
                    opacity: "0",
                    position: "absolute",
                    width: "1px",
                    height: scrollerHeight + "px"
                  };
                  HyperList3.mergeStyle(scroller, scrollerStyle);
                  if (!this._scroller) {
                    element.appendChild(scroller);
                  }
                  this._scroller = scroller;
                  this._scrollHeight = this._computeScrollHeight();
                  this._itemPositions = this._itemPositions || Array(config2.total).fill(0);
                  this._computePositions(0);
                  this._renderChunk(this._lastRepaint !== null);
                  if (typeof config2.afterRender === "function") {
                    config2.afterRender();
                  }
                }
              }, {
                key: "_getRow",
                value: function _getRow(i3) {
                  var config2 = this._config;
                  var item = config2.generate(i3);
                  var height = item.height;
                  if (height !== void 0 && isNumber2(height)) {
                    item = item.element;
                    if (height !== this._itemHeights) {
                      this._itemHeights[i3] = height;
                      this._computePositions(i3);
                      this._scrollHeight = this._computeScrollHeight(i3);
                    }
                  } else {
                    height = this._itemHeights[i3];
                  }
                  if (!item || item.nodeType !== 1) {
                    throw new Error("Generator did not return a DOM Node for index: " + i3);
                  }
                  var oldClass = item.getAttribute("class") || "";
                  item.setAttribute("class", oldClass + " " + (config2.rowClassName || "vrow"));
                  var top = this._itemPositions[i3];
                  HyperList3.mergeStyle(item, {
                    position: "absolute",
                    top: top + "px"
                  });
                  return item;
                }
              }, {
                key: "_getScrollPosition",
                value: function _getScrollPosition() {
                  var config2 = this._config;
                  if (typeof config2.overrideScrollPosition === "function") {
                    return config2.overrideScrollPosition();
                  }
                  return this._element.scrollTop;
                }
              }, {
                key: "_renderChunk",
                value: function _renderChunk(force) {
                  var config2 = this._config;
                  var element = this._element;
                  var scrollTop = this._getScrollPosition();
                  var total = config2.total;
                  var from = config2.reverse ? this._getReverseFrom(scrollTop) : this._getFrom(scrollTop) - 1;
                  if (from < 0 || from - this._screenItemsLen < 0) {
                    from = 0;
                  }
                  if (!force && this._lastFrom === from) {
                    return false;
                  }
                  this._lastFrom = from;
                  var to2 = from + this._cachedItemsLen;
                  if (to2 > total || to2 + this._cachedItemsLen > total) {
                    to2 = total;
                  }
                  var fragment = config2.useFragment ? document.createDocumentFragment() : [];
                  var scroller = this._scroller;
                  fragment[config2.useFragment ? "appendChild" : "push"](scroller);
                  for (var i3 = from; i3 < to2; i3++) {
                    var row = this._getRow(i3);
                    fragment[config2.useFragment ? "appendChild" : "push"](row);
                  }
                  if (config2.applyPatch) {
                    return config2.applyPatch(element, fragment);
                  }
                  element.innerHTML = "";
                  element.appendChild(fragment);
                }
              }, {
                key: "_computePositions",
                value: function _computePositions() {
                  var from = arguments.length <= 0 || arguments[0] === void 0 ? 1 : arguments[0];
                  var config2 = this._config;
                  var total = config2.total;
                  var reverse = config2.reverse;
                  if (from < 1 && !reverse) {
                    from = 1;
                  }
                  for (var i3 = from; i3 < total; i3++) {
                    if (reverse) {
                      if (i3 === 0) {
                        this._itemPositions[0] = this._scrollHeight - this._itemHeights[0];
                      } else {
                        this._itemPositions[i3] = this._itemPositions[i3 - 1] - this._itemHeights[i3];
                      }
                    } else {
                      this._itemPositions[i3] = this._itemHeights[i3 - 1] + this._itemPositions[i3 - 1];
                    }
                  }
                }
              }, {
                key: "_computeScrollHeight",
                value: function _computeScrollHeight() {
                  var _this3 = this;
                  var config2 = this._config;
                  var total = config2.total;
                  var scrollHeight = this._itemHeights.reduce(function(a2, b2) {
                    return a2 + b2;
                  }, 0);
                  HyperList3.mergeStyle(this._scroller, {
                    opacity: 0,
                    position: "absolute",
                    width: "1px",
                    height: scrollHeight + "px"
                  });
                  var sortedItemHeights = this._itemHeights.slice(0).sort(function(a2, b2) {
                    return a2 - b2;
                  });
                  var middle = Math.floor(total / 2);
                  var averageHeight = total % 2 === 0 ? (sortedItemHeights[middle] + sortedItemHeights[middle - 1]) / 2 : sortedItemHeights[middle];
                  var containerHeight = this._element.clientHeight ? this._element.clientHeight : this._containerHeight;
                  this._screenItemsLen = Math.ceil(containerHeight / averageHeight);
                  this._containerHeight = containerHeight;
                  this._cachedItemsLen = Math.max(this._cachedItemsLen || 0, this._screenItemsLen * 3);
                  this._averageHeight = averageHeight;
                  if (config2.reverse) {
                    window.requestAnimationFrame(function() {
                      _this3._element.scrollTop = scrollHeight;
                    });
                  }
                  return scrollHeight;
                }
              }, {
                key: "_getFrom",
                value: function _getFrom(scrollTop) {
                  var i3 = 0;
                  while (this._itemPositions[i3] < scrollTop) {
                    i3++;
                  }
                  return i3;
                }
              }, {
                key: "_getReverseFrom",
                value: function _getReverseFrom(scrollTop) {
                  var i3 = this._config.total - 1;
                  while (i3 > 0 && this._itemPositions[i3] < scrollTop + this._containerHeight) {
                    i3--;
                  }
                  return i3;
                }
              }]);
              return HyperList3;
            }();
            exports4.default = HyperList2;
            module4.exports = exports4["default"];
          }, {}] }, {}, [1])(1);
        });
      });
      var HyperList = unwrapExports(hyperlist);
      var BodyRenderer = class {
        constructor(instance) {
          this.instance = instance;
          this.options = instance.options;
          this.datamanager = instance.datamanager;
          this.rowmanager = instance.rowmanager;
          this.cellmanager = instance.cellmanager;
          this.bodyScrollable = instance.bodyScrollable;
          this.footer = this.instance.footer;
          this.log = instance.log;
        }
        renderRows(rows) {
          this.visibleRows = rows;
          this.visibleRowIndices = rows.map((row) => row.meta.rowIndex);
          if (rows.length === 0) {
            this.bodyScrollable.innerHTML = this.getNoDataHTML();
            return;
          }
          const rowViewOrder = this.datamanager.rowViewOrder.map((index) => {
            if (this.visibleRowIndices.includes(index)) {
              return index;
            }
            return null;
          }).filter((index) => index !== null);
          const computedStyle = getComputedStyle(this.bodyScrollable);
          let config2 = {
            width: computedStyle.width,
            height: computedStyle.height,
            itemHeight: this.options.cellHeight,
            total: rows.length,
            generate: (index) => {
              const el = document.createElement("div");
              const rowIndex = rowViewOrder[index];
              const row = this.datamanager.getRow(rowIndex);
              const rowHTML = this.rowmanager.getRowHTML(row, row.meta);
              el.innerHTML = rowHTML;
              return el.children[0];
            },
            afterRender: () => {
              this.restoreState();
            }
          };
          if (!this.hyperlist) {
            this.hyperlist = new HyperList(this.bodyScrollable, config2);
          } else {
            this.hyperlist.refresh(this.bodyScrollable, config2);
          }
          this.renderFooter();
        }
        render() {
          const rows = this.datamanager.getRowsForView();
          this.renderRows(rows);
          this.instance.setDimensions();
        }
        renderFooter() {
          if (!this.options.showTotalRow)
            return;
          const totalRow = this.getTotalRow();
          let html = this.rowmanager.getRowHTML(totalRow, { isTotalRow: 1, rowIndex: "totalRow" });
          this.footer.innerHTML = html;
        }
        getTotalRow() {
          const columns = this.datamanager.getColumns();
          const totalRowTemplate = columns.map((col) => {
            let content = null;
            if (["_rowIndex", "_checkbox"].includes(col.id)) {
              content = "";
            }
            return {
              content,
              isTotalRow: 1,
              colIndex: col.colIndex,
              column: col
            };
          });
          const totalRow = totalRowTemplate.map((cell, i3) => {
            if (cell.content === "")
              return cell;
            if (this.options.hooks.columnTotal) {
              const columnValues = this.visibleRows.map((row) => row[i3].content);
              const result = this.options.hooks.columnTotal.call(this.instance, columnValues, cell);
              if (result != null) {
                cell.content = result;
                return cell;
              }
            }
            cell.content = this.visibleRows.reduce((acc, prevRow) => {
              const prevCell = prevRow[i3];
              if (typeof prevCell.content === "number") {
                if (acc == null)
                  acc = 0;
                return acc + prevCell.content;
              }
              return acc;
            }, cell.content);
            return cell;
          });
          return totalRow;
        }
        restoreState() {
          this.rowmanager.highlightCheckedRows();
          this.cellmanager.selectAreaOnClusterChanged();
          this.cellmanager.focusCellOnClusterChanged();
        }
        showToastMessage(message, hideAfter) {
          this.instance.toastMessage.innerHTML = this.getToastMessageHTML(message);
          if (hideAfter) {
            setTimeout(() => {
              this.clearToastMessage();
            }, hideAfter * 1e3);
          }
        }
        clearToastMessage() {
          this.instance.toastMessage.innerHTML = "";
        }
        getNoDataHTML() {
          return `<div class="dt-scrollable__no-data">${this.options.noDataMessage}</div>`;
        }
        getToastMessageHTML(message) {
          return `<span class="dt-toast__message">${message}</span>`;
        }
      };
      var Style = class {
        constructor(instance) {
          this.instance = instance;
          linkProperties(this, this.instance, [
            "options",
            "datamanager",
            "columnmanager",
            "header",
            "footer",
            "bodyScrollable",
            "datatableWrapper",
            "getColumn",
            "bodyRenderer"
          ]);
          this.scopeClass = "dt-instance-" + instance.constructor.instances;
          instance.datatableWrapper.classList.add(this.scopeClass);
          const styleEl = document.createElement("style");
          instance.wrapper.insertBefore(styleEl, instance.datatableWrapper);
          this.styleEl = styleEl;
          this.bindResizeWindow();
          this.bindScrollHeader();
        }
        get stylesheet() {
          return this.styleEl.sheet;
        }
        bindResizeWindow() {
          this.onWindowResize = this.onWindowResize.bind(this);
          this.onWindowResize = throttle$1(this.onWindowResize, 300);
          if (this.options.layout === "fluid") {
            $4.on(window, "resize", this.onWindowResize);
          }
        }
        bindScrollHeader() {
          this._settingHeaderPosition = false;
          $4.on(this.bodyScrollable, "scroll", (e2) => {
            if (this._settingHeaderPosition)
              return;
            this._settingHeaderPosition = true;
            requestAnimationFrame(() => {
              const left = -e2.target.scrollLeft;
              $4.style(this.header, {
                transform: `translateX(${left}px)`
              });
              $4.style(this.footer, {
                transform: `translateX(${left}px)`
              });
              this._settingHeaderPosition = false;
            });
          });
        }
        onWindowResize() {
          this.distributeRemainingWidth();
          this.refreshColumnWidth();
          this.setBodyStyle();
        }
        destroy() {
          this.styleEl.remove();
          $4.off(window, "resize", this.onWindowResize);
        }
        setStyle(selector, styleObject) {
          if (selector.includes(",")) {
            selector.split(",").map((s2) => s2.trim()).forEach((selector2) => {
              this.setStyle(selector2, styleObject);
            });
            return;
          }
          selector = selector.trim();
          if (!selector)
            return;
          this._styleRulesMap = this._styleRulesMap || {};
          const prefixedSelector = this._getPrefixedSelector(selector);
          if (this._styleRulesMap[prefixedSelector]) {
            this.removeStyle(selector);
            styleObject = Object.assign({}, this._styleRulesMap[prefixedSelector], styleObject);
          }
          const styleString = this._getRuleString(styleObject);
          const ruleString = `${prefixedSelector} { ${styleString} }`;
          this._styleRulesMap[prefixedSelector] = styleObject;
          this.stylesheet.insertRule(ruleString);
        }
        removeStyle(selector) {
          if (selector.includes(",")) {
            selector.split(",").map((s2) => s2.trim()).forEach((selector2) => {
              this.removeStyle(selector2);
            });
            return;
          }
          selector = selector.trim();
          if (!selector)
            return;
          const prefixedSelector = this._getPrefixedSelector(selector);
          const index = Array.from(this.stylesheet.cssRules).findIndex((rule) => rule.selectorText === prefixedSelector);
          if (index === -1)
            return;
          this.stylesheet.deleteRule(index);
        }
        _getPrefixedSelector(selector) {
          return `.${this.scopeClass} ${selector}`;
        }
        _getRuleString(styleObject) {
          return Object.keys(styleObject).map((prop) => {
            let dashed = prop;
            if (!prop.includes("-")) {
              dashed = camelCaseToDash(prop);
            }
            return `${dashed}:${styleObject[prop]};`;
          }).join("");
        }
        setDimensions() {
          this.setCellHeight();
          this.setupMinWidth();
          this.setupNaturalColumnWidth();
          this.setupColumnWidth();
          this.distributeRemainingWidth();
          this.setColumnStyle();
          this.setBodyStyle();
        }
        setCellHeight() {
          this.setStyle(".dt-cell", {
            height: this.options.cellHeight + "px"
          });
        }
        setupMinWidth() {
          $4.each(".dt-cell--header", this.header).map((col) => {
            const { colIndex } = $4.data(col);
            const column = this.getColumn(colIndex);
            if (!column.minWidth) {
              const width = $4.style($4(".dt-cell__content", col), "width");
              column.minWidth = width;
            }
          });
        }
        setupNaturalColumnWidth() {
          if (!$4(".dt-row"))
            return;
          $4.each(".dt-row-header .dt-cell", this.header).map(($headerCell) => {
            const { colIndex } = $4.data($headerCell);
            const column = this.datamanager.getColumn(colIndex);
            let width = $4.style($4(".dt-cell__content", $headerCell), "width");
            if (typeof width === "number" && width >= this.options.minimumColumnWidth) {
              column.naturalWidth = width;
            } else {
              column.naturalWidth = this.options.minimumColumnWidth;
            }
          });
          $4.each(".dt-row-0 .dt-cell", this.bodyScrollable).map(($cell) => {
            const {
              colIndex
            } = $4.data($cell);
            const column = this.datamanager.getColumn(colIndex);
            let naturalWidth = $4.style($4(".dt-cell__content", $cell), "width");
            if (typeof naturalWidth === "number" && naturalWidth >= column.naturalWidth) {
              column.naturalWidth = naturalWidth;
            } else {
              column.naturalWidth = column.naturalWidth;
            }
          });
        }
        setupColumnWidth() {
          if (this.options.layout === "ratio") {
            let totalWidth = $4.style(this.datatableWrapper, "width");
            if (this.options.serialNoColumn) {
              const rowIndexColumn = this.datamanager.getColumnById("_rowIndex");
              totalWidth = totalWidth - rowIndexColumn.width - 1;
            }
            if (this.options.checkboxColumn) {
              const rowIndexColumn = this.datamanager.getColumnById("_checkbox");
              totalWidth = totalWidth - rowIndexColumn.width - 1;
            }
            const totalParts = this.datamanager.getColumns().map((column) => {
              if (column.id === "_rowIndex" || column.id === "_checkbox") {
                return 0;
              }
              if (!column.width) {
                column.width = 1;
              }
              column.ratioWidth = parseInt(column.width, 10);
              return column.ratioWidth;
            }).reduce((a2, c2) => a2 + c2);
            const onePart = totalWidth / totalParts;
            this.datamanager.getColumns().map((column) => {
              if (column.id === "_rowIndex" || column.id === "_checkbox")
                return;
              column.width = Math.floor(onePart * column.ratioWidth) - 1;
            });
          } else {
            this.datamanager.getColumns().map((column) => {
              if (!column.width) {
                column.width = column.naturalWidth;
              }
              if (column.id === "_rowIndex") {
                column.width = this.getRowIndexColumnWidth();
              }
              if (column.width < this.options.minimumColumnWidth) {
                column.width = this.options.minimumColumnWidth;
              }
            });
          }
        }
        distributeRemainingWidth() {
          if (this.options.layout !== "fluid")
            return;
          const wrapperWidth = $4.style(this.instance.datatableWrapper, "width");
          let firstRow = $4(".dt-row", this.bodyScrollable);
          let firstRowWidth = wrapperWidth;
          if (!firstRow) {
            let headerRow = $4(".dt-row", this.instance.header);
            let cellWidths = Array.from(headerRow.children).map((cell) => cell.offsetWidth);
            firstRowWidth = cellWidths.reduce((sum, a2) => sum + a2, 0);
          } else {
            firstRowWidth = $4.style(firstRow, "width");
          }
          const resizableColumns = this.datamanager.getColumns().filter((col) => col.resizable);
          const deltaWidth = (wrapperWidth - firstRowWidth) / resizableColumns.length;
          resizableColumns.map((col) => {
            const width = $4.style(this.getColumnHeaderElement(col.colIndex), "width");
            let finalWidth = Math.floor(width + deltaWidth) - 2;
            this.datamanager.updateColumn(col.colIndex, {
              width: finalWidth
            });
          });
        }
        setColumnStyle() {
          this.datamanager.getColumns().map((column) => {
            if (!column.align) {
              column.align = "left";
            }
            if (!["left", "center", "right"].includes(column.align)) {
              column.align = "left";
            }
            this.setStyle(`.dt-cell--col-${column.colIndex}`, {
              "text-align": column.align
            });
            this.columnmanager.setColumnHeaderWidth(column.colIndex);
            this.columnmanager.setColumnWidth(column.colIndex);
          });
        }
        refreshColumnWidth() {
          this.datamanager.getColumns().map((column) => {
            this.columnmanager.setColumnHeaderWidth(column.colIndex);
            this.columnmanager.setColumnWidth(column.colIndex);
          });
        }
        setBodyStyle() {
          const bodyWidth = $4.style(this.datatableWrapper, "width");
          const firstRow = $4(".dt-row", this.bodyScrollable);
          if (!firstRow)
            return;
          const rowWidth = $4.style(firstRow, "width");
          let width = bodyWidth > rowWidth ? rowWidth : bodyWidth;
          $4.style(this.bodyScrollable, {
            width: width + "px"
          });
          $4.removeStyle(this.bodyScrollable, "height");
          let bodyHeight = $4.getStyle(this.bodyScrollable, "height");
          const scrollHeight = (this.bodyRenderer.hyperlist || {})._scrollHeight || Infinity;
          const hasHorizontalOverflow = $4.hasHorizontalOverflow(this.bodyScrollable);
          let height;
          if (scrollHeight < bodyHeight) {
            height = scrollHeight;
            if (hasHorizontalOverflow) {
              height += $4.scrollbarSize();
            }
            $4.style(this.bodyScrollable, {
              height: height + "px"
            });
          }
          const verticalOverflow = this.bodyScrollable.scrollHeight - this.bodyScrollable.offsetHeight;
          if (verticalOverflow < $4.scrollbarSize()) {
            $4.style(this.bodyScrollable, {
              overflowY: "hidden"
            });
          }
          if (this.options.layout === "fluid") {
            $4.style(this.bodyScrollable, {
              overflowX: "hidden"
            });
          }
        }
        getColumnHeaderElement(colIndex) {
          colIndex = +colIndex;
          if (colIndex < 0)
            return null;
          return $4(`.dt-cell--col-${colIndex}`, this.header);
        }
        getRowIndexColumnWidth() {
          const rowCount = this.datamanager.getRowCount();
          const padding = 22;
          return $4.measureTextWidth(rowCount + "") + padding;
        }
      };
      var KEYCODES = {
        13: "enter",
        91: "meta",
        16: "shift",
        17: "ctrl",
        18: "alt",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        9: "tab",
        27: "esc",
        67: "c",
        70: "f",
        86: "v"
      };
      var Keyboard = class {
        constructor(element) {
          this.listeners = {};
          $4.on(element, "keydown", this.handler.bind(this));
        }
        handler(e2) {
          let key2 = KEYCODES[e2.keyCode];
          if (e2.shiftKey && key2 !== "shift") {
            key2 = "shift+" + key2;
          }
          if (e2.ctrlKey && key2 !== "ctrl" || e2.metaKey && key2 !== "meta") {
            key2 = "ctrl+" + key2;
          }
          const listeners = this.listeners[key2];
          if (listeners && listeners.length > 0) {
            for (let listener of listeners) {
              const preventBubbling = listener(e2);
              if (preventBubbling === void 0 || preventBubbling === true) {
                e2.preventDefault();
              }
            }
          }
        }
        on(key2, listener) {
          const keys = key2.split(",").map((k2) => k2.trim());
          keys.map((key3) => {
            this.listeners[key3] = this.listeners[key3] || [];
            this.listeners[key3].push(listener);
          });
        }
      };
      var en = {
        "Sort Ascending": "Sort Ascending",
        "Sort Descending": "Sort Descending",
        "Reset sorting": "Reset sorting",
        "Remove column": "Remove column",
        "No Data": "No Data",
        "{count} cells copied": { "1": "{count} cell copied", "default": "{count} cells copied" },
        "{count} rows selected": { "1": "{count} row selected", "default": "{count} rows selected" }
      };
      var de2 = {
        "Sort Ascending": "Aufsteigend sortieren",
        "Sort Descending": "Absteigend sortieren",
        "Reset sorting": "Sortierung zur\xFCcksetzen",
        "Remove column": "Spalte entfernen",
        "No Data": "Keine Daten",
        "{count} cells copied": { "1": "{count} Zelle kopiert", "default": "{count} Zellen kopiert" },
        "{count} rows selected": { "1": "{count} Zeile ausgew\xE4hlt", "default": "{count} Zeilen ausgew\xE4hlt" }
      };
      var fr = {
        "Sort Ascending": "Trier par ordre croissant",
        "Sort Descending": "Trier par ordre d\xE9croissant",
        "Reset sorting": "R\xE9initialiser le tri",
        "Remove column": "Supprimer colonne",
        "No Data": "Pas de donn\xE9es",
        "{count} cells copied": { "1": "{count} cellule copi\xE9e", "default": "{count} cellules copi\xE9es" },
        "{count} rows selected": { "1": "{count} ligne s\xE9lectionn\xE9e", "default": "{count} lignes s\xE9lectionn\xE9es" }
      };
      var it3 = {
        "Sort Ascending": "Ordinamento ascendente",
        "Sort Descending": "Ordinamento decrescente",
        "Reset sorting": "Azzeramento ordinamento",
        "Remove column": "Rimuovi colonna",
        "No Data": "Nessun dato",
        "{count} cells copied": { "1": "Copiato {count} cella", "default": "{count} celle copiate" },
        "{count} rows selected": { "1": "{count} linea selezionata", "default": "{count} linee selezionate" }
      };
      function getTranslations() {
        return {
          en,
          de: de2,
          fr,
          it: it3
        };
      }
      var TranslationManager2 = class {
        constructor(language) {
          this.language = language;
          this.translations = getTranslations();
        }
        addTranslations(translations) {
          this.translations = Object.assign(this.translations, translations);
        }
        translate(sourceText, args) {
          let translation = this.translations[this.language] && this.translations[this.language][sourceText] || sourceText;
          if (typeof translation === "object") {
            translation = args && args.count ? this.getPluralizedTranslation(translation, args.count) : sourceText;
          }
          return format2(translation, args || {});
        }
        getPluralizedTranslation(translations, count) {
          return translations[count] || translations["default"];
        }
      };
      function filterRows(rows, filters2) {
        let filteredRowIndices = [];
        if (Object.keys(filters2).length === 0) {
          return rows.map((row) => row.meta.rowIndex);
        }
        for (let colIndex in filters2) {
          const keyword = filters2[colIndex];
          const filteredRows = filteredRowIndices.length ? filteredRowIndices.map((i3) => rows[i3]) : rows;
          const cells = filteredRows.map((row) => row[colIndex]);
          let filter = guessFilter(keyword);
          let filterMethod = getFilterMethod(rows, filter);
          if (filterMethod) {
            filteredRowIndices = filterMethod(filter.text, cells);
          } else {
            filteredRowIndices = cells.map((cell) => cell.rowIndex);
          }
        }
        return filteredRowIndices;
      }
      function getFilterMethod(rows, filter) {
        const getFormattedValue = (cell) => {
          let formatter = CellManager.getCustomCellFormatter(cell);
          if (formatter && cell.content) {
            cell.html = formatter(cell.content, rows[cell.rowIndex], cell.column, rows[cell.rowIndex], true);
            return stripHTML(cell.html);
          }
          return cell.content || "";
        };
        const stringCompareValue = (cell) => String(stripHTML(cell.html || "") || getFormattedValue(cell)).toLowerCase();
        const numberCompareValue = (cell) => parseFloat(cell.content);
        const getCompareValues = (cell, keyword) => {
          if (cell.column.compareValue) {
            const compareValues = cell.column.compareValue(cell, keyword);
            if (compareValues && Array.isArray(compareValues))
              return compareValues;
          }
          const float = numberCompareValue(cell);
          if (!isNaN(float)) {
            return [float, keyword];
          }
          return [stringCompareValue(cell), keyword];
        };
        let filterMethodMap = {
          contains(keyword, cells) {
            return cells.filter((cell) => {
              const hay = stringCompareValue(cell);
              const needle = (keyword || "").toLowerCase();
              return !needle || hay.includes(needle);
            }).map((cell) => cell.rowIndex);
          },
          greaterThan(keyword, cells) {
            return cells.filter((cell) => {
              const [compareValue, keywordValue] = getCompareValues(cell, keyword);
              return compareValue > keywordValue;
            }).map((cell) => cell.rowIndex);
          },
          lessThan(keyword, cells) {
            return cells.filter((cell) => {
              const [compareValue, keywordValue] = getCompareValues(cell, keyword);
              return compareValue < keywordValue;
            }).map((cell) => cell.rowIndex);
          },
          equals(keyword, cells) {
            return cells.filter((cell) => {
              const value2 = parseFloat(cell.content);
              return value2 === keyword;
            }).map((cell) => cell.rowIndex);
          },
          notEquals(keyword, cells) {
            return cells.filter((cell) => {
              const value2 = parseFloat(cell.content);
              return value2 !== keyword;
            }).map((cell) => cell.rowIndex);
          },
          range(rangeValues, cells) {
            return cells.filter((cell) => {
              const values1 = getCompareValues(cell, rangeValues[0]);
              const values2 = getCompareValues(cell, rangeValues[1]);
              const value2 = values1[0];
              return value2 >= values1[1] && value2 <= values2[1];
            }).map((cell) => cell.rowIndex);
          },
          containsNumber(keyword, cells) {
            return cells.filter((cell) => {
              let number = parseFloat(keyword, 10);
              let string = keyword;
              let hayNumber = numberCompareValue(cell);
              let hayString = stringCompareValue(cell);
              return number === hayNumber || hayString.includes(string);
            }).map((cell) => cell.rowIndex);
          }
        };
        return filterMethodMap[filter.type];
      }
      function guessFilter(keyword = "") {
        if (keyword.length === 0)
          return {};
        let compareString = keyword;
        if ([">", "<", "="].includes(compareString[0])) {
          compareString = keyword.slice(1);
        } else if (compareString.startsWith("!=")) {
          compareString = keyword.slice(2);
        }
        if (keyword.startsWith(">")) {
          if (compareString) {
            return {
              type: "greaterThan",
              text: compareString.trim()
            };
          }
        }
        if (keyword.startsWith("<")) {
          if (compareString) {
            return {
              type: "lessThan",
              text: compareString.trim()
            };
          }
        }
        if (keyword.startsWith("=")) {
          if (isNumber(compareString)) {
            return {
              type: "equals",
              text: Number(keyword.slice(1).trim())
            };
          }
        }
        if (isNumber(compareString)) {
          return {
            type: "containsNumber",
            text: compareString
          };
        }
        if (keyword.startsWith("!=")) {
          if (isNumber(compareString)) {
            return {
              type: "notEquals",
              text: Number(keyword.slice(2).trim())
            };
          }
        }
        if (keyword.split(":").length === 2 && keyword.split(":").every((v2) => isNumber(v2.trim()))) {
          compareString = keyword.split(":");
          return {
            type: "range",
            text: compareString.map((v2) => v2.trim())
          };
        }
        return {
          type: "contains",
          text: compareString.toLowerCase()
        };
      }
      function getDefaultOptions(instance) {
        return {
          columns: [],
          data: [],
          dropdownButton: icons.chevronDown,
          headerDropdown: [
            {
              label: instance.translate("Sort Ascending"),
              action: function(column) {
                this.sortColumn(column.colIndex, "asc");
              }
            },
            {
              label: instance.translate("Sort Descending"),
              action: function(column) {
                this.sortColumn(column.colIndex, "desc");
              }
            },
            {
              label: instance.translate("Reset sorting"),
              action: function(column) {
                this.sortColumn(column.colIndex, "none");
              }
            },
            {
              label: instance.translate("Remove column"),
              action: function(column) {
                this.removeColumn(column.colIndex);
              }
            }
          ],
          events: {
            onRemoveColumn(column) {
            },
            onSwitchColumn(column1, column2) {
            },
            onSortColumn(column) {
            },
            onCheckRow(row) {
            },
            onDestroy() {
            }
          },
          hooks: {
            columnTotal: null
          },
          sortIndicator: {
            asc: "\u2191",
            desc: "\u2193",
            none: ""
          },
          overrideComponents: {},
          filterRows,
          freezeMessage: "",
          getEditor: null,
          serialNoColumn: true,
          checkboxColumn: false,
          clusterize: true,
          logs: false,
          layout: "fixed",
          noDataMessage: instance.translate("No Data"),
          cellHeight: 40,
          minimumColumnWidth: 30,
          inlineFilters: false,
          treeView: false,
          checkedRowStatus: true,
          dynamicRowHeight: false,
          pasteFromClipboard: false,
          showTotalRow: false,
          direction: "ltr",
          disableReorderColumn: false
        };
      }
      var defaultComponents = {
        DataManager,
        CellManager,
        ColumnManager,
        RowManager,
        BodyRenderer,
        Style,
        Keyboard
      };
      var DataTable2 = class {
        constructor(wrapper, options) {
          DataTable2.instances++;
          if (typeof wrapper === "string") {
            wrapper = document.querySelector(wrapper);
          }
          this.wrapper = wrapper;
          if (!(this.wrapper instanceof HTMLElement)) {
            throw new Error("Invalid argument given for `wrapper`");
          }
          this.initializeTranslations(options);
          this.setDefaultOptions();
          this.buildOptions(options);
          this.prepare();
          this.initializeComponents();
          if (this.options.data) {
            this.refresh();
            this.columnmanager.applyDefaultSortOrder();
          }
        }
        initializeTranslations(options) {
          this.language = options.language || "en";
          this.translationManager = new TranslationManager2(this.language);
          if (options.translations) {
            this.translationManager.addTranslations(options.translations);
          }
        }
        setDefaultOptions() {
          this.DEFAULT_OPTIONS = getDefaultOptions(this);
        }
        buildOptions(options) {
          this.options = this.options || {};
          this.options = Object.assign(
            {},
            this.DEFAULT_OPTIONS,
            this.options || {},
            options
          );
          options.headerDropdown = options.headerDropdown || [];
          this.options.headerDropdown = [
            ...this.DEFAULT_OPTIONS.headerDropdown,
            ...options.headerDropdown
          ];
          this.events = Object.assign(
            {},
            this.DEFAULT_OPTIONS.events,
            this.options.events || {},
            options.events || {}
          );
          this.fireEvent = this.fireEvent.bind(this);
        }
        prepare() {
          this.prepareDom();
          this.unfreeze();
        }
        initializeComponents() {
          let components = Object.assign({}, defaultComponents, this.options.overrideComponents);
          let {
            Style: Style$$1,
            Keyboard: Keyboard$$1,
            DataManager: DataManager$$1,
            RowManager: RowManager$$1,
            ColumnManager: ColumnManager$$1,
            CellManager: CellManager$$1,
            BodyRenderer: BodyRenderer$$1
          } = components;
          this.style = new Style$$1(this);
          this.keyboard = new Keyboard$$1(this.wrapper);
          this.datamanager = new DataManager$$1(this.options);
          this.rowmanager = new RowManager$$1(this);
          this.columnmanager = new ColumnManager$$1(this);
          this.cellmanager = new CellManager$$1(this);
          this.bodyRenderer = new BodyRenderer$$1(this);
        }
        prepareDom() {
          this.wrapper.innerHTML = `
            <div class="datatable" dir="${this.options.direction}">
                <div class="dt-header"></div>
                <div class="dt-scrollable"></div>
                <div class="dt-footer"></div>
                <div class="dt-freeze">
                    <span class="dt-freeze__message">
                        ${this.options.freezeMessage}
                    </span>
                </div>
                <div class="dt-toast"></div>
                <div class="dt-dropdown-container"></div>
                <textarea class="dt-paste-target"></textarea>
            </div>
        `;
          this.datatableWrapper = $4(".datatable", this.wrapper);
          this.header = $4(".dt-header", this.wrapper);
          this.footer = $4(".dt-footer", this.wrapper);
          this.bodyScrollable = $4(".dt-scrollable", this.wrapper);
          this.freezeContainer = $4(".dt-freeze", this.wrapper);
          this.toastMessage = $4(".dt-toast", this.wrapper);
          this.pasteTarget = $4(".dt-paste-target", this.wrapper);
          this.dropdownContainer = $4(".dt-dropdown-container", this.wrapper);
        }
        refresh(data, columns) {
          this.datamanager.init(data, columns);
          this.render();
          this.setDimensions();
        }
        destroy() {
          this.wrapper.innerHTML = "";
          this.style.destroy();
          this.fireEvent("onDestroy");
        }
        appendRows(rows) {
          this.datamanager.appendRows(rows);
          this.rowmanager.refreshRows();
        }
        refreshRow(row, rowIndex) {
          this.rowmanager.refreshRow(row, rowIndex);
        }
        render() {
          this.renderHeader();
          this.renderBody();
        }
        renderHeader() {
          this.columnmanager.renderHeader();
        }
        renderBody() {
          this.bodyRenderer.render();
        }
        setDimensions() {
          this.style.setDimensions();
        }
        showToastMessage(message, hideAfter) {
          this.bodyRenderer.showToastMessage(message, hideAfter);
        }
        clearToastMessage() {
          this.bodyRenderer.clearToastMessage();
        }
        getColumn(colIndex) {
          return this.datamanager.getColumn(colIndex);
        }
        getColumns() {
          return this.datamanager.getColumns();
        }
        getRows() {
          return this.datamanager.getRows();
        }
        getCell(colIndex, rowIndex) {
          return this.datamanager.getCell(colIndex, rowIndex);
        }
        getColumnHeaderElement(colIndex) {
          return this.columnmanager.getColumnHeaderElement(colIndex);
        }
        getViewportHeight() {
          if (!this.viewportHeight) {
            this.viewportHeight = $4.style(this.bodyScrollable, "height");
          }
          return this.viewportHeight;
        }
        sortColumn(colIndex, sortOrder) {
          this.columnmanager.sortColumn(colIndex, sortOrder);
        }
        removeColumn(colIndex) {
          this.columnmanager.removeColumn(colIndex);
        }
        scrollToLastColumn() {
          this.datatableWrapper.scrollLeft = 9999;
        }
        freeze() {
          $4.style(this.freezeContainer, {
            display: ""
          });
        }
        unfreeze() {
          $4.style(this.freezeContainer, {
            display: "none"
          });
        }
        updateOptions(options) {
          this.buildOptions(options);
        }
        fireEvent(eventName, ...args) {
          const handlers = [
            ...this._internalEventHandlers[eventName] || [],
            this.events[eventName]
          ].filter(Boolean);
          for (let handler of handlers) {
            handler.apply(this, args);
          }
        }
        on(event2, handler) {
          this._internalEventHandlers = this._internalEventHandlers || {};
          this._internalEventHandlers[event2] = this._internalEventHandlers[event2] || [];
          this._internalEventHandlers[event2].push(handler);
        }
        log() {
          if (this.options.logs) {
            console.log.apply(console, arguments);
          }
        }
        translate(str, args) {
          return this.translationManager.translate(str, args);
        }
      };
      DataTable2.instances = 0;
      var name2 = "frappe-datatable";
      var version = "0.0.0-development";
      var description = "A modern datatable library for the web";
      var main = "dist/frappe-datatable.cjs.js";
      var unpkg = "dist/frappe-datatable.min.js";
      var jsdelivr = "dist/frappe-datatable.min.js";
      var scripts = { "start": "yarn run dev", "build": "rollup -c && NODE_ENV=production rollup -c", "dev": "rollup -c -w", "cy:server": "http-server -p 8989", "cy:open": "cypress open", "cy:run": "cypress run", "test": "start-server-and-test cy:server http://localhost:8989 cy:run", "test-local": "start-server-and-test cy:server http://localhost:8989 cy:open", "travis-deploy-once": "travis-deploy-once", "semantic-release": "semantic-release", "lint": "eslint src", "lint-and-build": "yarn lint && yarn build", "commit": "npx git-cz" };
      var files = ["dist", "src"];
      var devDependencies = { "autoprefixer": "^9.0.0", "chai": "3.5.0", "cypress": "^9.2.0", "cz-conventional-changelog": "^2.1.0", "deepmerge": "^2.0.1", "eslint": "^5.0.1", "eslint-config-airbnb": "^16.1.0", "eslint-config-airbnb-base": "^12.1.0", "eslint-plugin-import": "^2.11.0", "http-server": "^0.11.1", "mocha": "3.3.0", "postcss-custom-properties": "^7.0.0", "postcss-nested": "^3.0.0", "rollup": "^0.59.4", "rollup-plugin-commonjs": "^8.3.0", "rollup-plugin-eslint": "^4.0.0", "rollup-plugin-json": "^2.3.0", "rollup-plugin-node-resolve": "^3.0.3", "rollup-plugin-postcss": "^1.2.8", "rollup-plugin-uglify-es": "^0.0.1", "semantic-release": "^17.1.1", "start-server-and-test": "^1.4.1", "travis-deploy-once": "^5.0.1" };
      var repository = { "type": "git", "url": "https://github.com/frappe/datatable.git" };
      var keywords = ["datatable", "data", "grid", "table"];
      var author = "Faris Ansari";
      var license = "MIT";
      var bugs = { "url": "https://github.com/frappe/datatable/issues" };
      var homepage = "https://frappe.io/datatable";
      var dependencies = { "hyperlist": "^1.0.0-beta", "lodash": "^4.17.5", "sortablejs": "^1.7.0" };
      var config = { "commitizen": { "path": "cz-conventional-changelog" } };
      var packageJson = {
        name: name2,
        version,
        description,
        main,
        unpkg,
        jsdelivr,
        scripts,
        files,
        devDependencies,
        repository,
        keywords,
        author,
        license,
        bugs,
        homepage,
        dependencies,
        config
      };
      DataTable2.__version__ = packageJson.version;
      module2.exports = DataTable2;
    }
  });

  // node_modules/driver.js/dist/driver.min.js
  var require_driver_min = __commonJS({
    "node_modules/driver.js/dist/driver.min.js"(exports2, module2) {
      !function(t3, e2) {
        "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = e2() : "function" == typeof define && define.amd ? define([], e2) : "object" == typeof exports2 ? exports2.Driver = e2() : t3.Driver = e2();
      }(window, function() {
        return function(t3) {
          var e2 = {};
          function n2(o2) {
            if (e2[o2])
              return e2[o2].exports;
            var i3 = e2[o2] = { i: o2, l: false, exports: {} };
            return t3[o2].call(i3.exports, i3, i3.exports, n2), i3.l = true, i3.exports;
          }
          return n2.m = t3, n2.c = e2, n2.d = function(t4, e3, o2) {
            n2.o(t4, e3) || Object.defineProperty(t4, e3, { enumerable: true, get: o2 });
          }, n2.r = function(t4) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t4, "__esModule", { value: true });
          }, n2.t = function(t4, e3) {
            if (1 & e3 && (t4 = n2(t4)), 8 & e3)
              return t4;
            if (4 & e3 && "object" == typeof t4 && t4 && t4.__esModule)
              return t4;
            var o2 = /* @__PURE__ */ Object.create(null);
            if (n2.r(o2), Object.defineProperty(o2, "default", { enumerable: true, value: t4 }), 2 & e3 && "string" != typeof t4)
              for (var i3 in t4)
                n2.d(o2, i3, function(e4) {
                  return t4[e4];
                }.bind(null, i3));
            return o2;
          }, n2.n = function(t4) {
            var e3 = t4 && t4.__esModule ? function() {
              return t4.default;
            } : function() {
              return t4;
            };
            return n2.d(e3, "a", e3), e3;
          }, n2.o = function(t4, e3) {
            return Object.prototype.hasOwnProperty.call(t4, e3);
          }, n2.p = "/dist/", n2(n2.s = 57);
        }([function(t3, e2, n2) {
          var o2 = n2(2), i3 = n2(11), r2 = n2(4), s2 = n2(13), a2 = n2(22), c2 = function(t4, e3, n3) {
            var u2, l2, h2, f3, p2 = t4 & c2.F, d3 = t4 & c2.G, v2 = t4 & c2.S, y2 = t4 & c2.P, g2 = t4 & c2.B, m3 = d3 ? o2 : v2 ? o2[e3] || (o2[e3] = {}) : (o2[e3] || {}).prototype, b2 = d3 ? i3 : i3[e3] || (i3[e3] = {}), w2 = b2.prototype || (b2.prototype = {});
            for (u2 in d3 && (n3 = e3), n3)
              h2 = ((l2 = !p2 && m3 && void 0 !== m3[u2]) ? m3 : n3)[u2], f3 = g2 && l2 ? a2(h2, o2) : y2 && "function" == typeof h2 ? a2(Function.call, h2) : h2, m3 && s2(m3, u2, h2, t4 & c2.U), b2[u2] != h2 && r2(b2, u2, f3), y2 && w2[u2] != h2 && (w2[u2] = h2);
          };
          o2.core = i3, c2.F = 1, c2.G = 2, c2.S = 4, c2.P = 8, c2.B = 16, c2.W = 32, c2.U = 64, c2.R = 128, t3.exports = c2;
        }, function(t3, e2, n2) {
          var o2 = n2(17)("wks"), i3 = n2(14), r2 = n2(2).Symbol, s2 = "function" == typeof r2;
          (t3.exports = function(t4) {
            return o2[t4] || (o2[t4] = s2 && r2[t4] || (s2 ? r2 : i3)("Symbol." + t4));
          }).store = o2;
        }, function(t3, e2) {
          var n2 = t3.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
          "number" == typeof __g && (__g = n2);
        }, function(t3, e2) {
          t3.exports = function(t4) {
            return "object" == typeof t4 ? null !== t4 : "function" == typeof t4;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(5), i3 = n2(16);
          t3.exports = n2(6) ? function(t4, e3, n3) {
            return o2.f(t4, e3, i3(1, n3));
          } : function(t4, e3, n3) {
            return t4[e3] = n3, t4;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(12), i3 = n2(35), r2 = n2(21), s2 = Object.defineProperty;
          e2.f = n2(6) ? Object.defineProperty : function(t4, e3, n3) {
            if (o2(t4), e3 = r2(e3, true), o2(n3), i3)
              try {
                return s2(t4, e3, n3);
              } catch (t5) {
              }
            if ("get" in n3 || "set" in n3)
              throw TypeError("Accessors not supported!");
            return "value" in n3 && (t4[e3] = n3.value), t4;
          };
        }, function(t3, e2, n2) {
          t3.exports = !n2(7)(function() {
            return 7 != Object.defineProperty({}, "a", { get: function() {
              return 7;
            } }).a;
          });
        }, function(t3, e2) {
          t3.exports = function(t4) {
            try {
              return !!t4();
            } catch (t5) {
              return true;
            }
          };
        }, function(t3, e2) {
          var n2 = {}.hasOwnProperty;
          t3.exports = function(t4, e3) {
            return n2.call(t4, e3);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(39), i3 = n2(24);
          t3.exports = function(t4) {
            return o2(i3(t4));
          };
        }, function(t3, e2, n2) {
          var o2 = n2(0);
          o2(o2.S + o2.F * !n2(6), "Object", { defineProperty: n2(5).f });
        }, function(t3, e2) {
          var n2 = t3.exports = { version: "2.6.9" };
          "number" == typeof __e && (__e = n2);
        }, function(t3, e2, n2) {
          var o2 = n2(3);
          t3.exports = function(t4) {
            if (!o2(t4))
              throw TypeError(t4 + " is not an object!");
            return t4;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(2), i3 = n2(4), r2 = n2(8), s2 = n2(14)("src"), a2 = n2(59), c2 = ("" + a2).split("toString");
          n2(11).inspectSource = function(t4) {
            return a2.call(t4);
          }, (t3.exports = function(t4, e3, n3, a3) {
            var u2 = "function" == typeof n3;
            u2 && (r2(n3, "name") || i3(n3, "name", e3)), t4[e3] !== n3 && (u2 && (r2(n3, s2) || i3(n3, s2, t4[e3] ? "" + t4[e3] : c2.join(String(e3)))), t4 === o2 ? t4[e3] = n3 : a3 ? t4[e3] ? t4[e3] = n3 : i3(t4, e3, n3) : (delete t4[e3], i3(t4, e3, n3)));
          })(Function.prototype, "toString", function() {
            return "function" == typeof this && this[s2] || a2.call(this);
          });
        }, function(t3, e2) {
          var n2 = 0, o2 = Math.random();
          t3.exports = function(t4) {
            return "Symbol(".concat(void 0 === t4 ? "" : t4, ")_", (++n2 + o2).toString(36));
          };
        }, function(t3, e2, n2) {
          var o2 = n2(45), i3 = n2(28);
          t3.exports = Object.keys || function(t4) {
            return o2(t4, i3);
          };
        }, function(t3, e2) {
          t3.exports = function(t4, e3) {
            return { enumerable: !(1 & t4), configurable: !(2 & t4), writable: !(4 & t4), value: e3 };
          };
        }, function(t3, e2, n2) {
          var o2 = n2(11), i3 = n2(2), r2 = i3["__core-js_shared__"] || (i3["__core-js_shared__"] = {});
          (t3.exports = function(t4, e3) {
            return r2[t4] || (r2[t4] = void 0 !== e3 ? e3 : {});
          })("versions", []).push({ version: o2.version, mode: n2(18) ? "pure" : "global", copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)" });
        }, function(t3, e2) {
          t3.exports = false;
        }, function(t3, e2, n2) {
          var o2 = n2(24);
          t3.exports = function(t4) {
            return Object(o2(t4));
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(2), i3 = n2(8), r2 = n2(6), s2 = n2(0), a2 = n2(13), c2 = n2(62).KEY, u2 = n2(7), l2 = n2(17), h2 = n2(26), f3 = n2(14), p2 = n2(1), d3 = n2(43), v2 = n2(44), y2 = n2(63), g2 = n2(42), m3 = n2(12), b2 = n2(3), w2 = n2(19), x2 = n2(9), S3 = n2(21), O2 = n2(16), k2 = n2(30), P3 = n2(67), E2 = n2(49), N2 = n2(47), j3 = n2(5), L2 = n2(15), T3 = E2.f, C2 = j3.f, _2 = P3.f, M2 = o2.Symbol, H2 = o2.JSON, B3 = H2 && H2.stringify, F3 = p2("_hidden"), I2 = p2("toPrimitive"), R2 = {}.propertyIsEnumerable, A2 = l2("symbol-registry"), z3 = l2("symbols"), D3 = l2("op-symbols"), V3 = Object.prototype, W2 = "function" == typeof M2 && !!N2.f, q3 = o2.QObject, G3 = !q3 || !q3.prototype || !q3.prototype.findChild, K3 = r2 && u2(function() {
            return 7 != k2(C2({}, "a", { get: function() {
              return C2(this, "a", { value: 7 }).a;
            } })).a;
          }) ? function(t4, e3, n3) {
            var o3 = T3(V3, e3);
            o3 && delete V3[e3], C2(t4, e3, n3), o3 && t4 !== V3 && C2(V3, e3, o3);
          } : C2, U3 = function(t4) {
            var e3 = z3[t4] = k2(M2.prototype);
            return e3._k = t4, e3;
          }, Y3 = W2 && "symbol" == typeof M2.iterator ? function(t4) {
            return "symbol" == typeof t4;
          } : function(t4) {
            return t4 instanceof M2;
          }, J3 = function(t4, e3, n3) {
            return t4 === V3 && J3(D3, e3, n3), m3(t4), e3 = S3(e3, true), m3(n3), i3(z3, e3) ? (n3.enumerable ? (i3(t4, F3) && t4[F3][e3] && (t4[F3][e3] = false), n3 = k2(n3, { enumerable: O2(0, false) })) : (i3(t4, F3) || C2(t4, F3, O2(1, {})), t4[F3][e3] = true), K3(t4, e3, n3)) : C2(t4, e3, n3);
          }, X3 = function(t4, e3) {
            m3(t4);
            for (var n3, o3 = y2(e3 = x2(e3)), i4 = 0, r3 = o3.length; r3 > i4; )
              J3(t4, n3 = o3[i4++], e3[n3]);
            return t4;
          }, Q2 = function(t4) {
            var e3 = R2.call(this, t4 = S3(t4, true));
            return !(this === V3 && i3(z3, t4) && !i3(D3, t4)) && (!(e3 || !i3(this, t4) || !i3(z3, t4) || i3(this, F3) && this[F3][t4]) || e3);
          }, $4 = function(t4, e3) {
            if (t4 = x2(t4), e3 = S3(e3, true), t4 !== V3 || !i3(z3, e3) || i3(D3, e3)) {
              var n3 = T3(t4, e3);
              return !n3 || !i3(z3, e3) || i3(t4, F3) && t4[F3][e3] || (n3.enumerable = true), n3;
            }
          }, Z3 = function(t4) {
            for (var e3, n3 = _2(x2(t4)), o3 = [], r3 = 0; n3.length > r3; )
              i3(z3, e3 = n3[r3++]) || e3 == F3 || e3 == c2 || o3.push(e3);
            return o3;
          }, tt3 = function(t4) {
            for (var e3, n3 = t4 === V3, o3 = _2(n3 ? D3 : x2(t4)), r3 = [], s3 = 0; o3.length > s3; )
              !i3(z3, e3 = o3[s3++]) || n3 && !i3(V3, e3) || r3.push(z3[e3]);
            return r3;
          };
          W2 || (a2((M2 = function() {
            if (this instanceof M2)
              throw TypeError("Symbol is not a constructor!");
            var t4 = f3(arguments.length > 0 ? arguments[0] : void 0), e3 = function(n3) {
              this === V3 && e3.call(D3, n3), i3(this, F3) && i3(this[F3], t4) && (this[F3][t4] = false), K3(this, t4, O2(1, n3));
            };
            return r2 && G3 && K3(V3, t4, { configurable: true, set: e3 }), U3(t4);
          }).prototype, "toString", function() {
            return this._k;
          }), E2.f = $4, j3.f = J3, n2(48).f = P3.f = Z3, n2(29).f = Q2, N2.f = tt3, r2 && !n2(18) && a2(V3, "propertyIsEnumerable", Q2, true), d3.f = function(t4) {
            return U3(p2(t4));
          }), s2(s2.G + s2.W + s2.F * !W2, { Symbol: M2 });
          for (var et3 = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), nt3 = 0; et3.length > nt3; )
            p2(et3[nt3++]);
          for (var ot3 = L2(p2.store), it3 = 0; ot3.length > it3; )
            v2(ot3[it3++]);
          s2(s2.S + s2.F * !W2, "Symbol", { for: function(t4) {
            return i3(A2, t4 += "") ? A2[t4] : A2[t4] = M2(t4);
          }, keyFor: function(t4) {
            if (!Y3(t4))
              throw TypeError(t4 + " is not a symbol!");
            for (var e3 in A2)
              if (A2[e3] === t4)
                return e3;
          }, useSetter: function() {
            G3 = true;
          }, useSimple: function() {
            G3 = false;
          } }), s2(s2.S + s2.F * !W2, "Object", { create: function(t4, e3) {
            return void 0 === e3 ? k2(t4) : X3(k2(t4), e3);
          }, defineProperty: J3, defineProperties: X3, getOwnPropertyDescriptor: $4, getOwnPropertyNames: Z3, getOwnPropertySymbols: tt3 });
          var rt3 = u2(function() {
            N2.f(1);
          });
          s2(s2.S + s2.F * rt3, "Object", { getOwnPropertySymbols: function(t4) {
            return N2.f(w2(t4));
          } }), H2 && s2(s2.S + s2.F * (!W2 || u2(function() {
            var t4 = M2();
            return "[null]" != B3([t4]) || "{}" != B3({ a: t4 }) || "{}" != B3(Object(t4));
          })), "JSON", { stringify: function(t4) {
            for (var e3, n3, o3 = [t4], i4 = 1; arguments.length > i4; )
              o3.push(arguments[i4++]);
            if (n3 = e3 = o3[1], (b2(e3) || void 0 !== t4) && !Y3(t4))
              return g2(e3) || (e3 = function(t5, e4) {
                if ("function" == typeof n3 && (e4 = n3.call(this, t5, e4)), !Y3(e4))
                  return e4;
              }), o3[1] = e3, B3.apply(H2, o3);
          } }), M2.prototype[I2] || n2(4)(M2.prototype, I2, M2.prototype.valueOf), h2(M2, "Symbol"), h2(Math, "Math", true), h2(o2.JSON, "JSON", true);
        }, function(t3, e2, n2) {
          var o2 = n2(3);
          t3.exports = function(t4, e3) {
            if (!o2(t4))
              return t4;
            var n3, i3;
            if (e3 && "function" == typeof (n3 = t4.toString) && !o2(i3 = n3.call(t4)))
              return i3;
            if ("function" == typeof (n3 = t4.valueOf) && !o2(i3 = n3.call(t4)))
              return i3;
            if (!e3 && "function" == typeof (n3 = t4.toString) && !o2(i3 = n3.call(t4)))
              return i3;
            throw TypeError("Can't convert object to primitive value");
          };
        }, function(t3, e2, n2) {
          var o2 = n2(37);
          t3.exports = function(t4, e3, n3) {
            if (o2(t4), void 0 === e3)
              return t4;
            switch (n3) {
              case 1:
                return function(n4) {
                  return t4.call(e3, n4);
                };
              case 2:
                return function(n4, o3) {
                  return t4.call(e3, n4, o3);
                };
              case 3:
                return function(n4, o3, i3) {
                  return t4.call(e3, n4, o3, i3);
                };
            }
            return function() {
              return t4.apply(e3, arguments);
            };
          };
        }, function(t3, e2) {
          var n2 = {}.toString;
          t3.exports = function(t4) {
            return n2.call(t4).slice(8, -1);
          };
        }, function(t3, e2) {
          t3.exports = function(t4) {
            if (null == t4)
              throw TypeError("Can't call method on  " + t4);
            return t4;
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(7);
          t3.exports = function(t4, e3) {
            return !!t4 && o2(function() {
              e3 ? t4.call(null, function() {
              }, 1) : t4.call(null);
            });
          };
        }, function(t3, e2, n2) {
          var o2 = n2(5).f, i3 = n2(8), r2 = n2(1)("toStringTag");
          t3.exports = function(t4, e3, n3) {
            t4 && !i3(t4 = n3 ? t4 : t4.prototype, r2) && o2(t4, r2, { configurable: true, value: e3 });
          };
        }, function(t3, e2, n2) {
          var o2 = n2(17)("keys"), i3 = n2(14);
          t3.exports = function(t4) {
            return o2[t4] || (o2[t4] = i3(t4));
          };
        }, function(t3, e2) {
          t3.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
        }, function(t3, e2) {
          e2.f = {}.propertyIsEnumerable;
        }, function(t3, e2, n2) {
          var o2 = n2(12), i3 = n2(65), r2 = n2(28), s2 = n2(27)("IE_PROTO"), a2 = function() {
          }, c2 = function() {
            var t4, e3 = n2(36)("iframe"), o3 = r2.length;
            for (e3.style.display = "none", n2(66).appendChild(e3), e3.src = "javascript:", (t4 = e3.contentWindow.document).open(), t4.write("<script>document.F=Object<\/script>"), t4.close(), c2 = t4.F; o3--; )
              delete c2.prototype[r2[o3]];
            return c2();
          };
          t3.exports = Object.create || function(t4, e3) {
            var n3;
            return null !== t4 ? (a2.prototype = o2(t4), n3 = new a2(), a2.prototype = null, n3[s2] = t4) : n3 = c2(), void 0 === e3 ? n3 : i3(n3, e3);
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(68), i3 = n2(69), r2 = n2(32), s2 = n2(9);
          t3.exports = n2(70)(Array, "Array", function(t4, e3) {
            this._t = s2(t4), this._i = 0, this._k = e3;
          }, function() {
            var t4 = this._t, e3 = this._k, n3 = this._i++;
            return !t4 || n3 >= t4.length ? (this._t = void 0, i3(1)) : i3(0, "keys" == e3 ? n3 : "values" == e3 ? t4[n3] : [n3, t4[n3]]);
          }, "values"), r2.Arguments = r2.Array, o2("keys"), o2("values"), o2("entries");
        }, function(t3, e2) {
          t3.exports = {};
        }, function(t3, e2, n2) {
          n2(44)("asyncIterator");
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(0), i3 = n2(38)(0), r2 = n2(25)([].forEach, true);
          o2(o2.P + o2.F * !r2, "Array", { forEach: function(t4) {
            return i3(this, t4, arguments[1]);
          } });
        }, function(t3, e2, n2) {
          t3.exports = !n2(6) && !n2(7)(function() {
            return 7 != Object.defineProperty(n2(36)("div"), "a", { get: function() {
              return 7;
            } }).a;
          });
        }, function(t3, e2, n2) {
          var o2 = n2(3), i3 = n2(2).document, r2 = o2(i3) && o2(i3.createElement);
          t3.exports = function(t4) {
            return r2 ? i3.createElement(t4) : {};
          };
        }, function(t3, e2) {
          t3.exports = function(t4) {
            if ("function" != typeof t4)
              throw TypeError(t4 + " is not a function!");
            return t4;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(22), i3 = n2(39), r2 = n2(19), s2 = n2(40), a2 = n2(60);
          t3.exports = function(t4, e3) {
            var n3 = 1 == t4, c2 = 2 == t4, u2 = 3 == t4, l2 = 4 == t4, h2 = 6 == t4, f3 = 5 == t4 || h2, p2 = e3 || a2;
            return function(e4, a3, d3) {
              for (var v2, y2, g2 = r2(e4), m3 = i3(g2), b2 = o2(a3, d3, 3), w2 = s2(m3.length), x2 = 0, S3 = n3 ? p2(e4, w2) : c2 ? p2(e4, 0) : void 0; w2 > x2; x2++)
                if ((f3 || x2 in m3) && (y2 = b2(v2 = m3[x2], x2, g2), t4)) {
                  if (n3)
                    S3[x2] = y2;
                  else if (y2)
                    switch (t4) {
                      case 3:
                        return true;
                      case 5:
                        return v2;
                      case 6:
                        return x2;
                      case 2:
                        S3.push(v2);
                    }
                  else if (l2)
                    return false;
                }
              return h2 ? -1 : u2 || l2 ? l2 : S3;
            };
          };
        }, function(t3, e2, n2) {
          var o2 = n2(23);
          t3.exports = Object("z").propertyIsEnumerable(0) ? Object : function(t4) {
            return "String" == o2(t4) ? t4.split("") : Object(t4);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(41), i3 = Math.min;
          t3.exports = function(t4) {
            return t4 > 0 ? i3(o2(t4), 9007199254740991) : 0;
          };
        }, function(t3, e2) {
          var n2 = Math.ceil, o2 = Math.floor;
          t3.exports = function(t4) {
            return isNaN(t4 = +t4) ? 0 : (t4 > 0 ? o2 : n2)(t4);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(23);
          t3.exports = Array.isArray || function(t4) {
            return "Array" == o2(t4);
          };
        }, function(t3, e2, n2) {
          e2.f = n2(1);
        }, function(t3, e2, n2) {
          var o2 = n2(2), i3 = n2(11), r2 = n2(18), s2 = n2(43), a2 = n2(5).f;
          t3.exports = function(t4) {
            var e3 = i3.Symbol || (i3.Symbol = r2 ? {} : o2.Symbol || {});
            "_" == t4.charAt(0) || t4 in e3 || a2(e3, t4, { value: s2.f(t4) });
          };
        }, function(t3, e2, n2) {
          var o2 = n2(8), i3 = n2(9), r2 = n2(46)(false), s2 = n2(27)("IE_PROTO");
          t3.exports = function(t4, e3) {
            var n3, a2 = i3(t4), c2 = 0, u2 = [];
            for (n3 in a2)
              n3 != s2 && o2(a2, n3) && u2.push(n3);
            for (; e3.length > c2; )
              o2(a2, n3 = e3[c2++]) && (~r2(u2, n3) || u2.push(n3));
            return u2;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(9), i3 = n2(40), r2 = n2(64);
          t3.exports = function(t4) {
            return function(e3, n3, s2) {
              var a2, c2 = o2(e3), u2 = i3(c2.length), l2 = r2(s2, u2);
              if (t4 && n3 != n3) {
                for (; u2 > l2; )
                  if ((a2 = c2[l2++]) != a2)
                    return true;
              } else
                for (; u2 > l2; l2++)
                  if ((t4 || l2 in c2) && c2[l2] === n3)
                    return t4 || l2 || 0;
              return !t4 && -1;
            };
          };
        }, function(t3, e2) {
          e2.f = Object.getOwnPropertySymbols;
        }, function(t3, e2, n2) {
          var o2 = n2(45), i3 = n2(28).concat("length", "prototype");
          e2.f = Object.getOwnPropertyNames || function(t4) {
            return o2(t4, i3);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(29), i3 = n2(16), r2 = n2(9), s2 = n2(21), a2 = n2(8), c2 = n2(35), u2 = Object.getOwnPropertyDescriptor;
          e2.f = n2(6) ? u2 : function(t4, e3) {
            if (t4 = r2(t4), e3 = s2(e3, true), c2)
              try {
                return u2(t4, e3);
              } catch (t5) {
              }
            if (a2(t4, e3))
              return i3(!o2.f.call(t4, e3), t4[e3]);
          };
        }, function(t3, e2, n2) {
          for (var o2 = n2(31), i3 = n2(15), r2 = n2(13), s2 = n2(2), a2 = n2(4), c2 = n2(32), u2 = n2(1), l2 = u2("iterator"), h2 = u2("toStringTag"), f3 = c2.Array, p2 = { CSSRuleList: true, CSSStyleDeclaration: false, CSSValueList: false, ClientRectList: false, DOMRectList: false, DOMStringList: false, DOMTokenList: true, DataTransferItemList: false, FileList: false, HTMLAllCollection: false, HTMLCollection: false, HTMLFormElement: false, HTMLSelectElement: false, MediaList: true, MimeTypeArray: false, NamedNodeMap: false, NodeList: true, PaintRequestList: false, Plugin: false, PluginArray: false, SVGLengthList: false, SVGNumberList: false, SVGPathSegList: false, SVGPointList: false, SVGStringList: false, SVGTransformList: false, SourceBufferList: false, StyleSheetList: true, TextTrackCueList: false, TextTrackList: false, TouchList: false }, d3 = i3(p2), v2 = 0; v2 < d3.length; v2++) {
            var y2, g2 = d3[v2], m3 = p2[g2], b2 = s2[g2], w2 = b2 && b2.prototype;
            if (w2 && (w2[l2] || a2(w2, l2, f3), w2[h2] || a2(w2, h2, g2), c2[g2] = f3, m3))
              for (y2 in o2)
                w2[y2] || r2(w2, y2, o2[y2], true);
          }
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(73), i3 = {};
          i3[n2(1)("toStringTag")] = "z", i3 + "" != "[object z]" && n2(13)(Object.prototype, "toString", function() {
            return "[object " + o2(this) + "]";
          }, true);
        }, function(t3, e2, n2) {
          var o2 = n2(19), i3 = n2(15);
          n2(74)("keys", function() {
            return function(t4) {
              return i3(o2(t4));
            };
          });
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(0), i3 = n2(38)(2);
          o2(o2.P + o2.F * !n2(25)([].filter, true), "Array", { filter: function(t4) {
            return i3(this, t4, arguments[1]);
          } });
        }, function(t3, e2, n2) {
          var o2 = n2(0);
          o2(o2.P, "Function", { bind: n2(75) });
        }, function(t3, e2, n2) {
          var o2 = n2(0);
          o2(o2.S, "Object", { create: n2(30) });
        }, function(t3, e2, n2) {
          var o2 = n2(0);
          o2(o2.S, "Object", { setPrototypeOf: n2(81).set });
        }, function(t3, e2, n2) {
          n2(58), t3.exports = n2(82);
        }, function(t3, e2) {
        }, function(t3, e2, n2) {
          t3.exports = n2(17)("native-function-to-string", Function.toString);
        }, function(t3, e2, n2) {
          var o2 = n2(61);
          t3.exports = function(t4, e3) {
            return new (o2(t4))(e3);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(3), i3 = n2(42), r2 = n2(1)("species");
          t3.exports = function(t4) {
            var e3;
            return i3(t4) && ("function" != typeof (e3 = t4.constructor) || e3 !== Array && !i3(e3.prototype) || (e3 = void 0), o2(e3) && null === (e3 = e3[r2]) && (e3 = void 0)), void 0 === e3 ? Array : e3;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(14)("meta"), i3 = n2(3), r2 = n2(8), s2 = n2(5).f, a2 = 0, c2 = Object.isExtensible || function() {
            return true;
          }, u2 = !n2(7)(function() {
            return c2(Object.preventExtensions({}));
          }), l2 = function(t4) {
            s2(t4, o2, { value: { i: "O" + ++a2, w: {} } });
          }, h2 = t3.exports = { KEY: o2, NEED: false, fastKey: function(t4, e3) {
            if (!i3(t4))
              return "symbol" == typeof t4 ? t4 : ("string" == typeof t4 ? "S" : "P") + t4;
            if (!r2(t4, o2)) {
              if (!c2(t4))
                return "F";
              if (!e3)
                return "E";
              l2(t4);
            }
            return t4[o2].i;
          }, getWeak: function(t4, e3) {
            if (!r2(t4, o2)) {
              if (!c2(t4))
                return true;
              if (!e3)
                return false;
              l2(t4);
            }
            return t4[o2].w;
          }, onFreeze: function(t4) {
            return u2 && h2.NEED && c2(t4) && !r2(t4, o2) && l2(t4), t4;
          } };
        }, function(t3, e2, n2) {
          var o2 = n2(15), i3 = n2(47), r2 = n2(29);
          t3.exports = function(t4) {
            var e3 = o2(t4), n3 = i3.f;
            if (n3)
              for (var s2, a2 = n3(t4), c2 = r2.f, u2 = 0; a2.length > u2; )
                c2.call(t4, s2 = a2[u2++]) && e3.push(s2);
            return e3;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(41), i3 = Math.max, r2 = Math.min;
          t3.exports = function(t4, e3) {
            return (t4 = o2(t4)) < 0 ? i3(t4 + e3, 0) : r2(t4, e3);
          };
        }, function(t3, e2, n2) {
          var o2 = n2(5), i3 = n2(12), r2 = n2(15);
          t3.exports = n2(6) ? Object.defineProperties : function(t4, e3) {
            i3(t4);
            for (var n3, s2 = r2(e3), a2 = s2.length, c2 = 0; a2 > c2; )
              o2.f(t4, n3 = s2[c2++], e3[n3]);
            return t4;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(2).document;
          t3.exports = o2 && o2.documentElement;
        }, function(t3, e2, n2) {
          var o2 = n2(9), i3 = n2(48).f, r2 = {}.toString, s2 = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          t3.exports.f = function(t4) {
            return s2 && "[object Window]" == r2.call(t4) ? function(t5) {
              try {
                return i3(t5);
              } catch (t6) {
                return s2.slice();
              }
            }(t4) : i3(o2(t4));
          };
        }, function(t3, e2, n2) {
          var o2 = n2(1)("unscopables"), i3 = Array.prototype;
          null == i3[o2] && n2(4)(i3, o2, {}), t3.exports = function(t4) {
            i3[o2][t4] = true;
          };
        }, function(t3, e2) {
          t3.exports = function(t4, e3) {
            return { value: e3, done: !!t4 };
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(18), i3 = n2(0), r2 = n2(13), s2 = n2(4), a2 = n2(32), c2 = n2(71), u2 = n2(26), l2 = n2(72), h2 = n2(1)("iterator"), f3 = !([].keys && "next" in [].keys()), p2 = function() {
            return this;
          };
          t3.exports = function(t4, e3, n3, d3, v2, y2, g2) {
            c2(n3, e3, d3);
            var m3, b2, w2, x2 = function(t5) {
              if (!f3 && t5 in P3)
                return P3[t5];
              switch (t5) {
                case "keys":
                case "values":
                  return function() {
                    return new n3(this, t5);
                  };
              }
              return function() {
                return new n3(this, t5);
              };
            }, S3 = e3 + " Iterator", O2 = "values" == v2, k2 = false, P3 = t4.prototype, E2 = P3[h2] || P3["@@iterator"] || v2 && P3[v2], N2 = E2 || x2(v2), j3 = v2 ? O2 ? x2("entries") : N2 : void 0, L2 = "Array" == e3 && P3.entries || E2;
            if (L2 && (w2 = l2(L2.call(new t4()))) !== Object.prototype && w2.next && (u2(w2, S3, true), o2 || "function" == typeof w2[h2] || s2(w2, h2, p2)), O2 && E2 && "values" !== E2.name && (k2 = true, N2 = function() {
              return E2.call(this);
            }), o2 && !g2 || !f3 && !k2 && P3[h2] || s2(P3, h2, N2), a2[e3] = N2, a2[S3] = p2, v2)
              if (m3 = { values: O2 ? N2 : x2("values"), keys: y2 ? N2 : x2("keys"), entries: j3 }, g2)
                for (b2 in m3)
                  b2 in P3 || r2(P3, b2, m3[b2]);
              else
                i3(i3.P + i3.F * (f3 || k2), e3, m3);
            return m3;
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(30), i3 = n2(16), r2 = n2(26), s2 = {};
          n2(4)(s2, n2(1)("iterator"), function() {
            return this;
          }), t3.exports = function(t4, e3, n3) {
            t4.prototype = o2(s2, { next: i3(1, n3) }), r2(t4, e3 + " Iterator");
          };
        }, function(t3, e2, n2) {
          var o2 = n2(8), i3 = n2(19), r2 = n2(27)("IE_PROTO"), s2 = Object.prototype;
          t3.exports = Object.getPrototypeOf || function(t4) {
            return t4 = i3(t4), o2(t4, r2) ? t4[r2] : "function" == typeof t4.constructor && t4 instanceof t4.constructor ? t4.constructor.prototype : t4 instanceof Object ? s2 : null;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(23), i3 = n2(1)("toStringTag"), r2 = "Arguments" == o2(function() {
            return arguments;
          }());
          t3.exports = function(t4) {
            var e3, n3, s2;
            return void 0 === t4 ? "Undefined" : null === t4 ? "Null" : "string" == typeof (n3 = function(t5, e4) {
              try {
                return t5[e4];
              } catch (t6) {
              }
            }(e3 = Object(t4), i3)) ? n3 : r2 ? o2(e3) : "Object" == (s2 = o2(e3)) && "function" == typeof e3.callee ? "Arguments" : s2;
          };
        }, function(t3, e2, n2) {
          var o2 = n2(0), i3 = n2(11), r2 = n2(7);
          t3.exports = function(t4, e3) {
            var n3 = (i3.Object || {})[t4] || Object[t4], s2 = {};
            s2[t4] = e3(n3), o2(o2.S + o2.F * r2(function() {
              n3(1);
            }), "Object", s2);
          };
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(37), i3 = n2(3), r2 = n2(76), s2 = [].slice, a2 = {};
          t3.exports = Function.bind || function(t4) {
            var e3 = o2(this), n3 = s2.call(arguments, 1), c2 = function() {
              var o3 = n3.concat(s2.call(arguments));
              return this instanceof c2 ? function(t5, e4, n4) {
                if (!(e4 in a2)) {
                  for (var o4 = [], i4 = 0; i4 < e4; i4++)
                    o4[i4] = "a[" + i4 + "]";
                  a2[e4] = Function("F,a", "return new F(" + o4.join(",") + ")");
                }
                return a2[e4](t5, n4);
              }(e3, o3.length, o3) : r2(e3, o3, t4);
            };
            return i3(e3.prototype) && (c2.prototype = e3.prototype), c2;
          };
        }, function(t3, e2) {
          t3.exports = function(t4, e3, n2) {
            var o2 = void 0 === n2;
            switch (e3.length) {
              case 0:
                return o2 ? t4() : t4.call(n2);
              case 1:
                return o2 ? t4(e3[0]) : t4.call(n2, e3[0]);
              case 2:
                return o2 ? t4(e3[0], e3[1]) : t4.call(n2, e3[0], e3[1]);
              case 3:
                return o2 ? t4(e3[0], e3[1], e3[2]) : t4.call(n2, e3[0], e3[1], e3[2]);
              case 4:
                return o2 ? t4(e3[0], e3[1], e3[2], e3[3]) : t4.call(n2, e3[0], e3[1], e3[2], e3[3]);
            }
            return t4.apply(n2, e3);
          };
        }, function(t3, e2, n2) {
          "use strict";
          n2(78)("trim", function(t4) {
            return function() {
              return t4(this, 3);
            };
          });
        }, function(t3, e2, n2) {
          var o2 = n2(0), i3 = n2(24), r2 = n2(7), s2 = n2(79), a2 = "[" + s2 + "]", c2 = RegExp("^" + a2 + a2 + "*"), u2 = RegExp(a2 + a2 + "*$"), l2 = function(t4, e3, n3) {
            var i4 = {}, a3 = r2(function() {
              return !!s2[t4]() || "\u200B\x85" != "\u200B\x85"[t4]();
            }), c3 = i4[t4] = a3 ? e3(h2) : s2[t4];
            n3 && (i4[n3] = c3), o2(o2.P + o2.F * a3, "String", i4);
          }, h2 = l2.trim = function(t4, e3) {
            return t4 = String(i3(t4)), 1 & e3 && (t4 = t4.replace(c2, "")), 2 & e3 && (t4 = t4.replace(u2, "")), t4;
          };
          t3.exports = l2;
        }, function(t3, e2) {
          t3.exports = "	\n\v\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
        }, function(t3, e2, n2) {
          "use strict";
          var o2 = n2(0), i3 = n2(46)(false), r2 = [].indexOf, s2 = !!r2 && 1 / [1].indexOf(1, -0) < 0;
          o2(o2.P + o2.F * (s2 || !n2(25)(r2)), "Array", { indexOf: function(t4) {
            return s2 ? r2.apply(this, arguments) || 0 : i3(this, t4, arguments[1]);
          } });
        }, function(t3, e2, n2) {
          var o2 = n2(3), i3 = n2(12), r2 = function(t4, e3) {
            if (i3(t4), !o2(e3) && null !== e3)
              throw TypeError(e3 + ": can't set as prototype!");
          };
          t3.exports = { set: Object.setPrototypeOf || ("__proto__" in {} ? function(t4, e3, o3) {
            try {
              (o3 = n2(22)(Function.call, n2(49).f(Object.prototype, "__proto__").set, 2))(t4, []), e3 = !(t4 instanceof Array);
            } catch (t5) {
              e3 = true;
            }
            return function(t5, n3) {
              return r2(t5, n3), e3 ? t5.__proto__ = n3 : o3(t5, n3), t5;
            };
          }({}, false) : void 0), check: r2 };
        }, function(t3, e2, n2) {
          "use strict";
          n2.r(e2);
          n2(34), n2(20), n2(50), n2(31), n2(51), n2(52), n2(10), n2(53), n2(54);
          var o2 = 0.75, i3 = 10, r2 = true, s2 = true, a2 = true, c2 = false, u2 = "driver-highlighted-element-stage", l2 = '<div id="'.concat("driver-page-overlay", '"></div>'), h2 = '<div id="'.concat(u2, '"></div>');
          n2(33), n2(77);
          function f3(t4) {
            return (f3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
              return typeof t5;
            } : function(t5) {
              return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
            })(t4);
          }
          var p2 = function(t4) {
            var e3 = document.createElement("div");
            return e3.innerHTML = t4.trim(), e3.firstChild;
          }, d3 = function t4(e3, n3) {
            if (arguments.length > 2 && void 0 !== arguments[2] && arguments[2]) {
              for (var o3 = ["", "-webkit-", "-ms-", "moz-", "-o-"], i4 = 0; i4 < o3.length; i4++) {
                var r3 = t4(e3, o3[i4] + n3);
                if (r3)
                  return r3;
              }
              return "";
            }
            var s3 = "";
            return e3.currentStyle ? s3 = e3.currentStyle[n3] : document.defaultView && document.defaultView.getComputedStyle && (s3 = document.defaultView.getComputedStyle(e3, null).getPropertyValue(n3)), s3 && s3.toLowerCase ? s3.toLowerCase() : s3;
          }, v2 = function(t4) {
            return t4 && "object" === f3(t4) && "nodeType" in t4;
          };
          function y2(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          var g2 = function() {
            function t4(e4, n4, o4) {
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4), this.options = e4, this.highlightedElement = null, this.lastHighlightedElement = null, this.hideTimer = null, this.window = n4, this.document = o4, this.removeNode = this.removeNode.bind(this);
            }
            var e3, n3, o3;
            return e3 = t4, (n3 = [{ key: "attachNode", value: function() {
              var t5 = this.document.getElementById("driver-page-overlay");
              t5 || (t5 = p2(l2), document.body.appendChild(t5)), this.node = t5, this.node.style.opacity = "0", this.options.animate || this.node.parentElement && this.node.parentElement.removeChild(this.node);
            } }, { key: "highlight", value: function(t5) {
              t5 && t5.node ? t5.isSame(this.highlightedElement) || (this.window.clearTimeout(this.hideTimer), t5.onHighlightStarted(), this.highlightedElement && !this.highlightedElement.isSame(this.lastHighlightedElement) && this.highlightedElement.onDeselected(), t5.getCalculatedPosition().canHighlight() && (this.lastHighlightedElement = this.highlightedElement, this.highlightedElement = t5, this.show(), this.highlightedElement.onHighlighted())) : console.warn("Invalid element to highlight. Must be an instance of `Element`");
            } }, { key: "show", value: function() {
              var t5 = this;
              this.node && this.node.parentElement || (this.attachNode(), window.setTimeout(function() {
                t5.node.style.opacity = "".concat(t5.options.opacity), t5.node.style.position = "fixed", t5.node.style.left = "0", t5.node.style.top = "0", t5.node.style.bottom = "0", t5.node.style.right = "0";
              }));
            } }, { key: "getHighlightedElement", value: function() {
              return this.highlightedElement;
            } }, { key: "getLastHighlightedElement", value: function() {
              return this.lastHighlightedElement;
            } }, { key: "clear", value: function() {
              var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              if (this.options.onReset && this.options.onReset(this.highlightedElement), this.highlightedElement) {
                this.highlightedElement.onDeselected(true);
              }
              this.highlightedElement = null, this.lastHighlightedElement = null, this.node && (this.window.clearTimeout(this.hideTimer), this.options.animate && !t5 ? (this.node.style.opacity = "0", this.hideTimer = this.window.setTimeout(this.removeNode, 300)) : this.removeNode());
            } }, { key: "removeNode", value: function() {
              this.node && this.node.parentElement && this.node.parentElement.removeChild(this.node);
            } }, { key: "refresh", value: function() {
              this.highlightedElement && (this.highlightedElement.showPopover(), this.highlightedElement.showStage());
            } }]) && y2(e3.prototype, n3), o3 && y2(e3, o3), t4;
          }();
          n2(80);
          function m3(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          var b2 = function() {
            function t4() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = e4.left, o4 = void 0 === n4 ? 0 : n4, i4 = e4.top, r3 = void 0 === i4 ? 0 : i4, s3 = e4.right, a3 = void 0 === s3 ? 0 : s3, c3 = e4.bottom, u3 = void 0 === c3 ? 0 : c3;
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4), this.left = o4, this.right = a3, this.top = r3, this.bottom = u3;
            }
            var e3, n3, o3;
            return e3 = t4, (n3 = [{ key: "canHighlight", value: function() {
              return this.left < this.right && this.top < this.bottom;
            } }]) && m3(e3.prototype, n3), o3 && m3(e3, o3), t4;
          }();
          function w2(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          var x2 = function() {
            function t4() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = e4.node, o4 = e4.options, i4 = e4.popover, r3 = e4.stage, s3 = e4.overlay, a3 = e4.window, c3 = e4.document;
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4), this.node = n4, this.document = c3, this.window = a3, this.options = o4, this.overlay = s3, this.popover = i4, this.stage = r3, this.animationTimeout = null;
            }
            var e3, n3, o3;
            return e3 = t4, (n3 = [{ key: "isInView", value: function() {
              for (var t5 = this.node.offsetTop, e4 = this.node.offsetLeft, n4 = this.node.offsetWidth, o4 = this.node.offsetHeight, i4 = this.node; i4.offsetParent; )
                t5 += (i4 = i4.offsetParent).offsetTop, e4 += i4.offsetLeft;
              return t5 >= this.window.pageYOffset && e4 >= this.window.pageXOffset && t5 + o4 <= this.window.pageYOffset + this.window.innerHeight && e4 + n4 <= this.window.pageXOffset + this.window.innerWidth;
            } }, { key: "scrollManually", value: function() {
              var t5 = this.node.getBoundingClientRect().top + this.window.pageYOffset - this.window.innerHeight / 2;
              this.window.scrollTo(0, t5);
            } }, { key: "bringInView", value: function() {
              if (this.node && !this.isInView())
                if (this.node.scrollIntoView)
                  try {
                    this.node.scrollIntoView(this.options.scrollIntoViewOptions || { behavior: "instant", block: "center" });
                  } catch (t5) {
                    this.scrollManually();
                  }
                else
                  this.scrollManually();
            } }, { key: "getCalculatedPosition", value: function() {
              var t5 = this.document.body, e4 = this.document.documentElement, n4 = this.window, o4 = this.window.pageYOffset || e4.scrollTop || t5.scrollTop, i4 = n4.pageXOffset || e4.scrollLeft || t5.scrollLeft, r3 = this.node.getBoundingClientRect();
              return new b2({ top: r3.top + o4, left: r3.left + i4, right: r3.left + i4 + r3.width, bottom: r3.top + o4 + r3.height });
            } }, { key: "getPopover", value: function() {
              return this.popover;
            } }, { key: "onDeselected", value: function() {
              var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              this.hidePopover(), t5 && this.hideStage(), this.removeHighlightClasses(), this.window.clearTimeout(this.animationTimeout), this.options.onDeselected && this.options.onDeselected(this);
            } }, { key: "isSame", value: function(t5) {
              return !(!t5 || !t5.node) && t5.node === this.node;
            } }, { key: "onHighlightStarted", value: function() {
              this.options.onHighlightStarted && this.options.onHighlightStarted(this);
            } }, { key: "onHighlighted", value: function() {
              this.isInView() || this.bringInView(), this.showPopover(), this.showStage(), this.addHighlightClasses(), this.options.onHighlighted && this.options.onHighlighted(this);
            } }, { key: "removeHighlightClasses", value: function() {
              this.node.classList.remove("driver-highlighted-element"), this.node.classList.remove("driver-position-relative");
              for (var t5 = this.document.querySelectorAll(".".concat("driver-fix-stacking")), e4 = 0; e4 < t5.length; e4++)
                t5[e4].classList.remove("driver-fix-stacking");
            } }, { key: "addHighlightClasses", value: function() {
              this.node.classList.add("driver-highlighted-element"), this.canMakeRelative() && this.node.classList.add("driver-position-relative"), this.fixStackingContext();
            } }, { key: "fixStackingContext", value: function() {
              for (var t5 = this.node.parentNode; t5 && t5.tagName && "body" !== t5.tagName.toLowerCase(); ) {
                var e4 = d3(t5, "z-index"), n4 = parseFloat(d3(t5, "opacity")), o4 = d3(t5, "transform", true), i4 = d3(t5, "transform-style", true), r3 = d3(t5, "transform-box", true), s3 = d3(t5, "filter", true), a3 = d3(t5, "perspective", true);
                (/[0-9]+/.test(e4) || n4 < 1 || o4 && "none" !== o4 || i4 && "flat" !== i4 || r3 && "border-box" !== r3 || s3 && "none" !== s3 || a3 && "none" !== a3) && t5.classList.add("driver-fix-stacking"), t5 = t5.parentNode;
              }
            } }, { key: "canMakeRelative", value: function() {
              var t5 = this.getStyleProperty("position");
              return -1 === ["absolute", "fixed", "relative"].indexOf(t5);
            } }, { key: "getStyleProperty", value: function(t5) {
              return d3(this.node, t5);
            } }, { key: "showStage", value: function() {
              this.stage.show(this.getCalculatedPosition());
            } }, { key: "getNode", value: function() {
              return this.node;
            } }, { key: "hideStage", value: function() {
              this.stage.hide();
            } }, { key: "hidePopover", value: function() {
              this.popover && this.popover.hide();
            } }, { key: "showPopover", value: function() {
              var t5 = this;
              if (this.popover) {
                var e4 = this.getCalculatedPosition(), n4 = 300;
                this.options.animate && this.overlay.lastHighlightedElement || (n4 = 0), this.animationTimeout = this.window.setTimeout(function() {
                  t5.popover.show(e4);
                }, n4);
              }
            } }, { key: "getFullPageSize", value: function() {
              var t5 = this.document.body, e4 = this.document.documentElement;
              return { height: Math.max(t5.scrollHeight, t5.offsetHeight, e4.scrollHeight, e4.offsetHeight), width: Math.max(t5.scrollWidth, t5.offsetWidth, e4.scrollWidth, e4.offsetWidth) };
            } }, { key: "getSize", value: function() {
              return { height: Math.max(this.node.scrollHeight, this.node.offsetHeight), width: Math.max(this.node.scrollWidth, this.node.offsetWidth) };
            } }]) && w2(e3.prototype, n3), o3 && w2(e3, o3), t4;
          }();
          n2(55), n2(56);
          function S3(t4) {
            return (S3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
              return typeof t5;
            } : function(t5) {
              return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
            })(t4);
          }
          function O2(t4, e3, n3) {
            return e3 in t4 ? Object.defineProperty(t4, e3, { value: n3, enumerable: true, configurable: true, writable: true }) : t4[e3] = n3, t4;
          }
          function k2(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          function P3(t4, e3) {
            return !e3 || "object" !== S3(e3) && "function" != typeof e3 ? function(t5) {
              if (void 0 === t5)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return t5;
            }(t4) : e3;
          }
          function E2(t4) {
            return (E2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
              return t5.__proto__ || Object.getPrototypeOf(t5);
            })(t4);
          }
          function N2(t4, e3) {
            return (N2 = Object.setPrototypeOf || function(t5, e4) {
              return t5.__proto__ = e4, t5;
            })(t4, e3);
          }
          var j3 = function(t4) {
            function e3(t5, n4, o4) {
              var i5;
              return function(t6, e4) {
                if (!(t6 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (i5 = P3(this, E2(e3).call(this))).options = function(t6) {
                for (var e4 = 1; e4 < arguments.length; e4++) {
                  var n5 = null != arguments[e4] ? arguments[e4] : {}, o5 = Object.keys(n5);
                  "function" == typeof Object.getOwnPropertySymbols && (o5 = o5.concat(Object.getOwnPropertySymbols(n5).filter(function(t7) {
                    return Object.getOwnPropertyDescriptor(n5, t7).enumerable;
                  }))), o5.forEach(function(e5) {
                    O2(t6, e5, n5[e5]);
                  });
                }
                return t6;
              }({ isFirst: true, isLast: true, totalCount: 1, currentIndex: 0, offset: 0, showButtons: true, closeBtnText: "Close", doneBtnText: "Done", startBtnText: "Next &rarr;", nextBtnText: "Next &rarr;", prevBtnText: "&larr; Previous" }, t5), i5.window = n4, i5.document = o4, i5;
            }
            var n3, o3, i4;
            return function(t5, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t5.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t5, writable: true, configurable: true } }), e4 && N2(t5, e4);
            }(e3, x2), n3 = e3, (o3 = [{ key: "attachNode", value: function() {
              var t5 = this.document.getElementById("driver-popover-item");
              t5 && t5.parentElement.removeChild(t5), t5 = p2(function() {
                var t6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
                return '\n  <div id="'.concat("driver-popover-item", '" class="').concat(t6, '">\n    <div class="').concat("driver-popover-tip", '"></div>\n    <div class="').concat("driver-popover-title", '">Popover Title</div>\n    <div class="').concat("driver-popover-description", '">Popover Description</div>\n    <div class="driver-clearfix ').concat("driver-popover-footer", '">\n      <button class="').concat("driver-close-btn", '">Close</button>\n      <span class="driver-btn-group ').concat("driver-navigation-btns", '">\n        <button class="').concat("driver-prev-btn", '">&larr; Previous</button>\n        <button class="').concat("driver-next-btn", '">Next &rarr;</button>\n      </span>\n    </div>\n  </div>');
              }(this.options.className)), document.body.appendChild(t5), this.node = t5, this.tipNode = t5.querySelector(".".concat("driver-popover-tip")), this.titleNode = t5.querySelector(".".concat("driver-popover-title")), this.descriptionNode = t5.querySelector(".".concat("driver-popover-description")), this.footerNode = t5.querySelector(".".concat("driver-popover-footer")), this.nextBtnNode = t5.querySelector(".".concat("driver-next-btn")), this.prevBtnNode = t5.querySelector(".".concat("driver-prev-btn")), this.closeBtnNode = t5.querySelector(".".concat("driver-close-btn"));
            } }, { key: "getTitleNode", value: function() {
              return this.titleNode;
            } }, { key: "getDescriptionNode", value: function() {
              return this.descriptionNode;
            } }, { key: "hide", value: function() {
              this.node && (this.node.style.display = "none");
            } }, { key: "setInitialState", value: function() {
              this.node.style.display = "block", this.node.style.left = "0", this.node.style.top = "0", this.node.style.bottom = "", this.node.style.right = "", this.node.querySelector(".".concat("driver-popover-tip")).className = "driver-popover-tip";
            } }, { key: "show", value: function(t5) {
              switch (this.attachNode(), this.setInitialState(), this.titleNode.innerHTML = this.options.title, this.descriptionNode.innerHTML = this.options.description || "", this.renderFooter(), this.options.position) {
                case "left":
                case "left-top":
                  this.positionOnLeft(t5);
                  break;
                case "left-center":
                  this.positionOnLeftCenter(t5);
                  break;
                case "left-bottom":
                  this.positionOnLeftBottom(t5);
                  break;
                case "right":
                case "right-top":
                  this.positionOnRight(t5);
                  break;
                case "right-center":
                  this.positionOnRightCenter(t5);
                  break;
                case "right-bottom":
                  this.positionOnRightBottom(t5);
                  break;
                case "top":
                case "top-left":
                  this.positionOnTop(t5);
                  break;
                case "top-center":
                  this.positionOnTopCenter(t5);
                  break;
                case "top-right":
                  this.positionOnTopRight(t5);
                  break;
                case "bottom":
                case "bottom-left":
                  this.positionOnBottom(t5);
                  break;
                case "bottom-center":
                  this.positionOnBottomCenter(t5);
                  break;
                case "bottom-right":
                  this.positionOnBottomRight(t5);
                  break;
                case "mid-center":
                  this.positionOnMidCenter(t5);
                  break;
                case "auto":
                default:
                  this.autoPosition(t5);
              }
              this.bringInView();
            } }, { key: "renderFooter", value: function() {
              this.nextBtnNode.innerHTML = this.options.nextBtnText, this.prevBtnNode.innerHTML = this.options.prevBtnText, this.closeBtnNode.innerHTML = this.options.closeBtnText;
              var t5 = this.options.totalCount && 1 !== this.options.totalCount;
              this.options.showButtons ? (t5 ? (this.nextBtnNode.style.display = "inline-block", this.prevBtnNode.style.display = "inline-block", this.closeBtnNode.classList.remove("driver-close-only-btn")) : (this.nextBtnNode.style.display = "none", this.prevBtnNode.style.display = "none", this.closeBtnNode.classList.add("driver-close-only-btn")), this.footerNode.style.display = "block", this.options.isFirst ? (this.prevBtnNode.classList.add("driver-disabled"), this.nextBtnNode.innerHTML = this.options.startBtnText) : this.prevBtnNode.classList.remove("driver-disabled"), this.options.isLast ? this.nextBtnNode.innerHTML = this.options.doneBtnText : this.nextBtnNode.innerHTML = this.options.nextBtnText) : this.footerNode.style.display = "none";
            } }, { key: "positionOnLeft", value: function(t5) {
              var e4 = this.getSize().width, n4 = this.options.padding + 10;
              this.node.style.left = "".concat(t5.left - e4 - n4, "px"), this.node.style.top = "".concat(t5.top + this.options.offset - this.options.padding, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("right");
            } }, { key: "positionOnLeftBottom", value: function(t5) {
              var e4 = this.getSize(), n4 = e4.width, o4 = this.options.padding + 10;
              this.node.style.left = "".concat(t5.left - n4 - o4, "px"), this.node.style.top = "".concat(t5.bottom + this.options.padding + this.options.offset - e4.height, "px"), this.node.style.bottom = "", this.node.style.right = "", this.tipNode.classList.add("right", "position-bottom");
            } }, { key: "positionOnLeftCenter", value: function(t5) {
              var e4 = this.getSize(), n4 = e4.width, o4 = e4.height / 2, i5 = this.options.padding + 10, r3 = (t5.bottom - t5.top) / 2, s3 = t5.top - o4 + r3 + this.options.offset;
              this.node.style.left = "".concat(t5.left - n4 - i5, "px"), this.node.style.top = "".concat(s3, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("right", "position-center");
            } }, { key: "positionOnRight", value: function(t5) {
              var e4 = this.options.padding + 10;
              this.node.style.left = "".concat(t5.right + e4, "px"), this.node.style.top = "".concat(t5.top + this.options.offset - this.options.padding, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("left");
            } }, { key: "positionOnRightCenter", value: function(t5) {
              var e4 = this.getSize(), n4 = this.options.padding + 10, o4 = e4.height / 2, i5 = (t5.bottom - t5.top) / 2, r3 = t5.top - o4 + i5 + this.options.offset;
              this.node.style.left = "".concat(t5.right + n4, "px"), this.node.style.top = "".concat(r3, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("left", "position-center");
            } }, { key: "positionOnRightBottom", value: function(t5) {
              var e4 = this.options.padding + 10, n4 = this.getSize();
              this.node.style.left = "".concat(t5.right + e4, "px"), this.node.style.top = "".concat(t5.bottom + this.options.padding + this.options.offset - n4.height, "px"), this.node.style.bottom = "", this.node.style.right = "", this.tipNode.classList.add("left", "position-bottom");
            } }, { key: "positionOnTop", value: function(t5) {
              var e4 = this.getSize().height, n4 = this.options.padding + 10;
              this.node.style.top = "".concat(t5.top - e4 - n4, "px"), this.node.style.left = "".concat(t5.left - this.options.padding + this.options.offset, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("bottom");
            } }, { key: "positionOnTopCenter", value: function(t5) {
              var e4 = this.getSize(), n4 = e4.height, o4 = e4.width / 2, i5 = this.options.padding + 10, r3 = this.options.offset + t5.left + (t5.right - t5.left) / 2;
              this.node.style.top = "".concat(t5.top - n4 - i5, "px"), this.node.style.left = "".concat(r3 - o4 - this.options.padding, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("bottom", "position-center");
            } }, { key: "positionOnTopRight", value: function(t5) {
              var e4 = this.getSize(), n4 = e4.height, o4 = this.options.padding + 10;
              this.node.style.top = "".concat(t5.top - n4 - o4, "px"), this.node.style.left = "".concat(t5.right + this.options.padding + this.options.offset - e4.width, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("bottom", "position-right");
            } }, { key: "positionOnBottom", value: function(t5) {
              var e4 = this.options.padding + 10;
              this.node.style.top = "".concat(t5.bottom + e4, "px"), this.node.style.left = "".concat(t5.left - this.options.padding + this.options.offset, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("top");
            } }, { key: "positionOnBottomCenter", value: function(t5) {
              var e4 = this.getSize().width / 2, n4 = this.options.padding + 10, o4 = this.options.offset + t5.left + (t5.right - t5.left) / 2;
              this.node.style.top = "".concat(t5.bottom + n4, "px"), this.node.style.left = "".concat(o4 - e4 - this.options.padding, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("top", "position-center");
            } }, { key: "positionOnBottomRight", value: function(t5) {
              var e4 = this.getSize(), n4 = this.options.padding + 10;
              this.node.style.top = "".concat(t5.bottom + n4, "px"), this.node.style.left = "".concat(t5.right + this.options.padding + this.options.offset - e4.width, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("top", "position-right");
            } }, { key: "positionOnMidCenter", value: function(t5) {
              var e4 = this.getSize(), n4 = e4.height, o4 = e4.width / 2, i5 = n4 / 2, r3 = (t5.bottom - t5.top) / 2, s3 = t5.top - i5 + r3 + this.options.offset, a3 = this.options.offset + t5.left + (t5.right - t5.left) / 2;
              this.node.style.top = "".concat(s3, "px"), this.node.style.left = "".concat(a3 - o4 - this.options.padding, "px"), this.node.style.right = "", this.node.style.bottom = "", this.tipNode.classList.add("mid-center");
            } }, { key: "autoPosition", value: function(t5) {
              var e4 = this.getFullPageSize(), n4 = this.getSize(), o4 = e4.height, i5 = n4.height, r3 = this.options.padding + 10;
              t5.bottom + i5 + r3 >= o4 ? this.positionOnTop(t5) : this.positionOnBottom(t5);
            } }]) && k2(n3.prototype, o3), i4 && k2(n3, i4), e3;
          }();
          function L2(t4) {
            return (L2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
              return typeof t5;
            } : function(t5) {
              return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
            })(t4);
          }
          function T3(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          function C2(t4, e3) {
            return !e3 || "object" !== L2(e3) && "function" != typeof e3 ? function(t5) {
              if (void 0 === t5)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return t5;
            }(t4) : e3;
          }
          function _2(t4) {
            return (_2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
              return t5.__proto__ || Object.getPrototypeOf(t5);
            })(t4);
          }
          function M2(t4, e3) {
            return (M2 = Object.setPrototypeOf || function(t5, e4) {
              return t5.__proto__ = e4, t5;
            })(t4, e3);
          }
          var H2 = function(t4) {
            function e3(t5, n4, o4) {
              var i5;
              return function(t6, e4) {
                if (!(t6 instanceof e4))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e3), (i5 = C2(this, _2(e3).call(this))).options = t5, i5.window = n4, i5.document = o4, i5;
            }
            var n3, o3, i4;
            return function(t5, e4) {
              if ("function" != typeof e4 && null !== e4)
                throw new TypeError("Super expression must either be null or a function");
              t5.prototype = Object.create(e4 && e4.prototype, { constructor: { value: t5, writable: true, configurable: true } }), e4 && M2(t5, e4);
            }(e3, x2), n3 = e3, (o3 = [{ key: "attachNode", value: function() {
              var t5 = this.document.getElementById(u2);
              t5 || (t5 = p2(h2), document.body.appendChild(t5)), this.node = t5, this.options.animate ? this.node.classList.remove("driver-stage-no-animation") : this.node.classList.add("driver-stage-no-animation");
            } }, { key: "hide", value: function() {
              this.node && this.node.parentElement && this.node.parentElement.removeChild(this.node);
            } }, { key: "setInitialStyle", value: function() {
              this.node.style.display = "block", this.node.style.left = "0", this.node.style.top = "0", this.node.style.bottom = "", this.node.style.right = "";
            } }, { key: "show", value: function(t5) {
              this.attachNode(), this.setInitialStyle();
              var e4 = 2 * this.options.padding, n4 = t5.right - t5.left + e4, o4 = t5.bottom - t5.top + e4;
              this.node.style.display = "block", this.node.style.position = "absolute", this.node.style.width = "".concat(n4, "px"), this.node.style.height = "".concat(o4, "px"), this.node.style.top = "".concat(t5.top - e4 / 2, "px"), this.node.style.left = "".concat(t5.left - e4 / 2, "px"), this.node.style.backgroundColor = this.options.stageBackground;
            } }]) && T3(n3.prototype, o3), i4 && T3(n3, i4), e3;
          }();
          function B3(t4) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var n3 = null != arguments[e3] ? arguments[e3] : {}, o3 = Object.keys(n3);
              "function" == typeof Object.getOwnPropertySymbols && (o3 = o3.concat(Object.getOwnPropertySymbols(n3).filter(function(t5) {
                return Object.getOwnPropertyDescriptor(n3, t5).enumerable;
              }))), o3.forEach(function(e4) {
                F3(t4, e4, n3[e4]);
              });
            }
            return t4;
          }
          function F3(t4, e3, n3) {
            return e3 in t4 ? Object.defineProperty(t4, e3, { value: n3, enumerable: true, configurable: true, writable: true }) : t4[e3] = n3, t4;
          }
          function I2(t4, e3) {
            for (var n3 = 0; n3 < e3.length; n3++) {
              var o3 = e3[n3];
              o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(t4, o3.key, o3);
            }
          }
          n2.d(e2, "default", function() {
            return R2;
          });
          var R2 = function() {
            function t4() {
              var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
              !function(t5, e5) {
                if (!(t5 instanceof e5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, t4), this.options = B3({ animate: r2, opacity: o2, padding: i3, scrollIntoViewOptions: null, allowClose: s2, keyboardControl: a2, overlayClickNext: c2, stageBackground: "#ffffff", onHighlightStarted: function() {
                return null;
              }, onHighlighted: function() {
                return null;
              }, onDeselected: function() {
                return null;
              }, onReset: function() {
                return null;
              }, onNext: function() {
                return null;
              }, onPrevious: function() {
                return null;
              } }, e4), this.document = document, this.window = window, this.isActivated = false, this.steps = [], this.currentStep = 0, this.currentMovePrevented = false, this.overlay = new g2(this.options, window, document), this.onResize = this.onResize.bind(this), this.onKeyUp = this.onKeyUp.bind(this), this.onClick = this.onClick.bind(this), this.moveNext = this.moveNext.bind(this), this.movePrevious = this.movePrevious.bind(this), this.preventMove = this.preventMove.bind(this), this.bind();
            }
            var e3, n3, u3;
            return e3 = t4, (n3 = [{ key: "getSteps", value: function() {
              return this.steps;
            } }, { key: "setSteps", value: function(t5) {
              this.steps = t5;
            } }, { key: "bind", value: function() {
              this.window.addEventListener("resize", this.onResize, false), this.window.addEventListener("keyup", this.onKeyUp, false), "ontouchstart" in document.documentElement ? this.window.addEventListener("touchstart", this.onClick, false) : this.window.addEventListener("click", this.onClick, false);
            } }, { key: "onClick", value: function(t5) {
              if (this.isActivated && this.hasHighlightedElement()) {
                t5.stopPropagation();
                var e4 = this.overlay.getHighlightedElement(), n4 = this.document.getElementById("driver-popover-item"), o3 = e4.node.contains(t5.target), i4 = n4 && n4.contains(t5.target);
                if (o3 || i4 || !this.options.overlayClickNext)
                  if (o3 || i4 || !this.options.allowClose) {
                    var r3 = t5.target.classList.contains("driver-next-btn"), s3 = t5.target.classList.contains("driver-prev-btn");
                    t5.target.classList.contains("driver-close-btn") ? this.reset() : r3 ? this.handleNext() : s3 && this.handlePrevious();
                  } else
                    this.reset();
                else
                  this.handleNext();
              }
            } }, { key: "onResize", value: function() {
              this.isActivated && this.refresh();
            } }, { key: "refresh", value: function() {
              this.overlay.refresh();
            } }, { key: "onKeyUp", value: function(t5) {
              if (this.isActivated && this.options.keyboardControl)
                if (27 !== t5.keyCode) {
                  var e4 = this.getHighlightedElement();
                  e4 && e4.popover && (39 === t5.keyCode ? this.handleNext() : 37 === t5.keyCode && this.handlePrevious());
                } else
                  this.reset();
            } }, { key: "movePrevious", value: function() {
              var t5 = this.steps[this.currentStep - 1];
              t5 ? (this.overlay.highlight(t5), this.currentStep -= 1) : this.reset();
            } }, { key: "preventMove", value: function() {
              this.currentMovePrevented = true;
            } }, { key: "handleNext", value: function() {
              this.currentMovePrevented = false;
              var t5 = this.steps[this.currentStep];
              t5 && t5.options && t5.options.onNext && t5.options.onNext(this.overlay.highlightedElement), this.currentMovePrevented || this.moveNext();
            } }, { key: "handlePrevious", value: function() {
              this.currentMovePrevented = false;
              var t5 = this.steps[this.currentStep];
              t5 && t5.options && t5.options.onPrevious && t5.options.onPrevious(this.overlay.highlightedElement), this.currentMovePrevented || this.movePrevious();
            } }, { key: "moveNext", value: function() {
              var t5 = this.steps[this.currentStep + 1];
              t5 ? (this.overlay.highlight(t5), this.currentStep += 1) : this.reset();
            } }, { key: "hasNextStep", value: function() {
              return !!this.steps[this.currentStep + 1];
            } }, { key: "hasPreviousStep", value: function() {
              return !!this.steps[this.currentStep - 1];
            } }, { key: "reset", value: function() {
              var t5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              this.currentStep = 0, this.isActivated = false, this.overlay.clear(t5);
            } }, { key: "hasHighlightedElement", value: function() {
              var t5 = this.overlay.getHighlightedElement();
              return t5 && t5.node;
            } }, { key: "getHighlightedElement", value: function() {
              return this.overlay.getHighlightedElement();
            } }, { key: "getLastHighlightedElement", value: function() {
              return this.overlay.getLastHighlightedElement();
            } }, { key: "defineSteps", value: function(t5) {
              this.steps = [];
              for (var e4 = 0; e4 < t5.length; e4++) {
                var n4 = this.prepareElementFromStep(t5[e4], t5, e4);
                n4 && this.steps.push(n4);
              }
            } }, { key: "prepareElementFromStep", value: function(t5) {
              var e4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = B3({}, this.options), i4 = t5, r3 = "string" != typeof t5 && !v2(t5);
              if (!t5 || r3 && !t5.element)
                throw new Error("Element is required in step ".concat(n4));
              r3 && (i4 = t5.element, o3 = B3({}, this.options, t5));
              var s3 = v2(i4) ? i4 : this.document.querySelector(i4);
              if (!s3)
                return console.warn("Element to highlight ".concat(i4, " not found")), null;
              var a3 = null;
              if (o3.popover && o3.popover.title) {
                var c3 = [this.options.className, o3.popover.className].filter(function(t6) {
                  return t6;
                }).join(" "), u4 = B3({}, o3, o3.popover, { className: c3, totalCount: e4.length, currentIndex: n4, isFirst: 0 === n4, isLast: 0 === e4.length || n4 === e4.length - 1 });
                a3 = new j3(u4, this.window, this.document);
              }
              var l3 = B3({}, o3), h3 = new H2(l3, this.window, this.document);
              return new x2({ node: s3, options: o3, popover: a3, stage: h3, overlay: this.overlay, window: this.window, document: this.document });
            } }, { key: "start", value: function() {
              var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              if (!this.steps || 0 === this.steps.length)
                throw new Error("There are no steps defined to iterate");
              this.isActivated = true, this.currentStep = t5, this.overlay.highlight(this.steps[t5]);
            } }, { key: "highlight", value: function(t5) {
              this.isActivated = true;
              var e4 = this.prepareElementFromStep(t5);
              e4 && this.overlay.highlight(e4);
            } }]) && I2(e3.prototype, n3), u3 && I2(e3, u3), t4;
          }();
        }]).default;
      });
    }
  });

  // frappe/public/js/frappe/provide.js
  if (!window.frappe)
    window.frappe = {};
  frappe.provide = function(namespace) {
    var nsl = namespace.split(".");
    var parent = window;
    for (var i3 = 0; i3 < nsl.length; i3++) {
      var n2 = nsl[i3];
      if (!parent[n2]) {
        parent[n2] = {};
      }
      parent = parent[n2];
    }
    return parent;
  };
  frappe.provide("locals");
  frappe.provide("frappe.flags");
  frappe.provide("frappe.settings");
  frappe.provide("frappe.utils");
  frappe.provide("frappe.ui.form");
  frappe.provide("frappe.modules");
  frappe.provide("frappe.templates");
  frappe.provide("frappe.test_data");
  frappe.provide("frappe.utils");
  frappe.provide("frappe.model");
  frappe.provide("frappe.user");
  frappe.provide("frappe.session");
  frappe.provide("frappe._messages");
  frappe.provide("locals.DocType");
  frappe.provide("frappe.listview_settings");
  frappe.provide("frappe.tour");
  frappe.provide("frappe.listview_parent_route");
  window.NEWLINE = "\n";
  window.TAB = 9;
  window.UP_ARROW = 38;
  window.DOWN_ARROW = 40;
  window.cur_frm = null;

  // frappe/public/js/frappe/translate.js
  frappe._ = function(txt2, replace, context = null) {
    if (!txt2)
      return txt2;
    if (typeof txt2 != "string")
      return txt2;
    let translated_text = "";
    let key2 = txt2;
    if (context) {
      translated_text = frappe._messages[`${key2}:${context}`];
    }
    if (!translated_text) {
      translated_text = frappe._messages[key2] || txt2;
    }
    if (replace && typeof replace === "object") {
      translated_text = $.format(translated_text, replace);
    }
    return translated_text;
  };
  window.__ = frappe._;
  frappe.get_languages = function() {
    if (!frappe.languages) {
      frappe.languages = [];
      $.each(frappe.boot.lang_dict, function(lang, value2) {
        frappe.languages.push({ label: lang, value: value2 });
      });
      frappe.languages = frappe.languages.sort(function(a2, b2) {
        return a2.value < b2.value ? -1 : 1;
      });
    }
    return frappe.languages;
  };

  // frappe/public/js/frappe/class.js
  (function(global2) {
    "use strict";
    var fnTest = /xyz/.test(function() {
      xyz;
    }) ? /\b_super\b/ : /.*/;
    function Class() {
    }
    Class.extend = function(props) {
      var _super = this.prototype;
      var proto = Object.create(_super);
      for (var name2 in props) {
        proto[name2] = typeof props[name2] === "function" && typeof _super[name2] == "function" && fnTest.test(props[name2]) ? function(name3, fn) {
          return function() {
            var tmp = this._super;
            this._super = _super[name3];
            var ret = fn.apply(this, arguments);
            this._super = tmp;
            return ret;
          };
        }(name2, props[name2]) : props[name2];
      }
      var newClass = typeof proto.init === "function" ? proto.hasOwnProperty("init") ? proto.init : function SubClass() {
        _super.init.apply(this, arguments);
      } : function EmptyClass() {
      };
      newClass.prototype = proto;
      proto.constructor = newClass;
      newClass.extend = Class.extend;
      return newClass;
    };
    global2.Class = Class;
  })(window);

  // frappe/public/js/frappe/polyfill.js
  if (!String.prototype.includes) {
    String.prototype.includes = function(search, start) {
      "use strict";
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }
  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, "includes", {
      value: function(searchElement, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }
        var o2 = Object(this);
        var len = o2.length >>> 0;
        if (len === 0) {
          return false;
        }
        var n2 = fromIndex | 0;
        var k2 = Math.max(n2 >= 0 ? n2 : len - Math.abs(n2), 0);
        while (k2 < len) {
          if (o2[k2] === searchElement) {
            return true;
          }
          k2++;
        }
        return false;
      }
    });
  }
  if (typeof String.prototype.trimLeft !== "function") {
    String.prototype.trimLeft = function() {
      return this.replace(/^\s+/, "");
    };
  }
  if (typeof String.prototype.trimRight !== "function") {
    String.prototype.trimRight = function() {
      return this.replace(/\s+$/, "");
    };
  }
  if (typeof Object.assign != "function") {
    Object.defineProperty(Object, "assign", {
      value: function assign(target) {
        "use strict";
        if (target == null) {
          throw new TypeError("Cannot convert undefined or null to object");
        }
        var to2 = Object(target);
        for (var index = 1; index < arguments.length; index++) {
          var nextSource = arguments[index];
          if (nextSource != null) {
            for (var nextKey in nextSource) {
              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                to2[nextKey] = nextSource[nextKey];
              }
            }
          }
        }
        return to2;
      },
      writable: true,
      configurable: true
    });
  }

  // frappe/public/js/frappe/assets.js
  frappe.require = function(items, callback) {
    if (typeof items === "string") {
      items = [items];
    }
    items = items.map((item) => frappe.assets.bundled_asset(item));
    return new Promise((resolve) => {
      frappe.assets.execute(items, () => {
        resolve();
        callback && callback();
      });
    });
  };
  frappe.assets = {
    check: function() {
      if (window._version_number != localStorage.getItem("_version_number")) {
        frappe.assets.clear_local_storage();
        console.log("Cleared App Cache.");
      }
      if (localStorage._last_load) {
        let not_updated_since = new Date() - new Date(localStorage._last_load);
        if (not_updated_since < 5e3 && is_reload() || not_updated_since > 2 * 864e5) {
          frappe.assets.clear_local_storage();
        }
      } else {
        frappe.assets.clear_local_storage();
      }
      frappe.assets.init_local_storage();
    },
    init_local_storage: function() {
      localStorage._last_load = new Date();
      localStorage._version_number = window._version_number;
      if (frappe.boot)
        localStorage.metadata_version = frappe.boot.metadata_version;
    },
    clear_local_storage: function() {
      $.each(
        ["_last_load", "_version_number", "metadata_version", "page_info", "last_visited"],
        function(i3, key3) {
          localStorage.removeItem(key3);
        }
      );
      for (var key2 in localStorage) {
        if (key2.indexOf("desk_assets:") === 0 || key2.indexOf("_page:") === 0 || key2.indexOf("_doctype:") === 0 || key2.indexOf("preferred_breadcrumbs:") === 0) {
          localStorage.removeItem(key2);
        }
      }
      console.log("localStorage cleared");
    },
    executed_: [],
    execute: function(items, callback) {
      var to_fetch = [];
      for (var i3 = 0, l2 = items.length; i3 < l2; i3++) {
        if (!frappe.assets.exists(items[i3])) {
          to_fetch.push(items[i3]);
        }
      }
      if (to_fetch.length) {
        frappe.assets.fetch(to_fetch, function() {
          frappe.assets.eval_assets(items, callback);
        });
      } else {
        frappe.assets.eval_assets(items, callback);
      }
    },
    eval_assets: function(items, callback) {
      for (var i3 = 0, l2 = items.length; i3 < l2; i3++) {
        var path = items[i3];
        if (frappe.assets.executed_.indexOf(path) === -1) {
          frappe.assets.handler[frappe.assets.extn(path)](frappe.assets.get(path), path);
          frappe.assets.executed_.push(path);
        }
      }
      callback && callback();
    },
    exists: function(src) {
      if (frappe.assets.executed_.indexOf(src) !== -1) {
        return true;
      }
      if (frappe.boot.developer_mode) {
        return false;
      }
      if (frappe.assets.get(src)) {
        return true;
      } else {
        return false;
      }
    },
    fetch: function(items, callback) {
      if (items.length === 0) {
        callback();
        return;
      }
      const version_string = frappe.boot.developer_mode || window.dev_server ? Date.now() : window._version_number;
      async function fetch_item(item) {
        let url2 = new URL(item, window.location.origin);
        if (!item.includes(".bundle.") && !url2.searchParams.get("v")) {
          url2.searchParams.append("v", version_string);
        }
        const response = await fetch(url2.toString());
        const body = await response.text();
        frappe.assets.add(item, body);
      }
      frappe.dom.freeze();
      const fetch_promises = items.map(fetch_item);
      Promise.all(fetch_promises).then(() => {
        frappe.dom.unfreeze();
        callback();
      });
    },
    add: function(src, txt2) {
      if ("localStorage" in window) {
        try {
          frappe.assets.set(src, txt2);
        } catch (e2) {
          frappe.assets.clear_local_storage();
          frappe.assets.set(src, txt2);
        }
      }
    },
    get: function(src) {
      return localStorage.getItem("desk_assets:" + src);
    },
    set: function(src, txt2) {
      localStorage.setItem("desk_assets:" + src, txt2);
    },
    extn: function(src) {
      if (src.indexOf("?") != -1) {
        src = src.split("?").slice(-1)[0];
      }
      return src.split(".").slice(-1)[0];
    },
    handler: {
      js: function(txt2, src) {
        frappe.dom.eval(txt2);
      },
      css: function(txt2, src) {
        frappe.dom.set_style(txt2);
      }
    },
    bundled_asset(path, is_rtl = null) {
      if (!path.startsWith("/assets") && path.includes(".bundle.")) {
        if (path.endsWith(".css") && is_rtl) {
          path = `rtl_${path}`;
        }
        path = frappe.boot.assets_json[path] || path;
        return path;
      }
      return path;
    }
  };
  function is_reload() {
    var _a;
    try {
      return (_a = window.performance) == null ? void 0 : _a.getEntriesByType("navigation").map((nav) => nav.type).includes("reload");
    } catch (e2) {
      return true;
    }
  }

  // frappe/public/js/frappe/format.js
  function format(str, args) {
    if (str == void 0)
      return str;
    this.unkeyed_index = 0;
    return str.replace(
      /\{(\w*)\}/g,
      function(match, key2) {
        if (key2 === "") {
          key2 = this.unkeyed_index;
          this.unkeyed_index++;
        }
        if (key2 == +key2) {
          return args[key2] !== void 0 ? args[key2] : match;
        }
      }.bind(this)
    );
  }
  if (jQuery) {
    jQuery.format = format;
  }

  // frappe/public/js/frappe/form/formatters.js
  frappe.provide("frappe.form.formatters");
  frappe.form.link_formatters = {};
  frappe.form.formatters = {
    _right: function(value2, options) {
      if (options && (options.inline || options.only_value)) {
        return value2;
      } else {
        return "<div style='text-align: right'>" + value2 + "</div>";
      }
    },
    _apply_custom_formatter: function(value2, df) {
      if (df) {
        const std_df = frappe.meta.docfield_map[df.parent] && frappe.meta.docfield_map[df.parent][df.fieldname];
        if (std_df && std_df.formatter && typeof std_df.formatter === "function") {
          value2 = std_df.formatter(value2, df);
        }
      }
      return value2;
    },
    Data: function(value2, df) {
      if (df && df.options == "URL") {
        if (!value2)
          return;
        return `<a href="${value2}" title="Open Link" target="_blank">${value2}</a>`;
      }
      value2 = value2 == null ? "" : value2;
      return frappe.form.formatters._apply_custom_formatter(value2, df);
    },
    Autocomplete: function(value2, df) {
      return __(frappe.form.formatters["Data"](value2, df));
    },
    Select: function(value2, df) {
      return __(frappe.form.formatters["Data"](value2, df));
    },
    Float: function(value2, docfield, options, doc2) {
      var precision3 = docfield.precision || cint(frappe.boot.sysdefaults && frappe.boot.sysdefaults.float_precision) || null;
      if (docfield.options && docfield.options.trim()) {
        docfield.precision = precision3;
        return frappe.form.formatters.Currency(value2, docfield, options, doc2);
      } else {
        if (!(options || {}).always_show_decimals && !is_null(value2)) {
          var temp = cstr(value2).split(".");
          if (temp[1] == void 0 || cint(temp[1]) === 0) {
            precision3 = 0;
          }
        }
        value2 = value2 == null || value2 === "" ? "" : value2;
        return frappe.form.formatters._right(format_number(value2, null, precision3), options);
      }
    },
    Int: function(value2, docfield, options) {
      if (cstr(docfield.options).trim() === "File Size") {
        return frappe.form.formatters.FileSize(value2);
      }
      return frappe.form.formatters._right(value2 == null ? "" : cint(value2), options);
    },
    Percent: function(value2, docfield, options) {
      const precision3 = docfield.precision || cint(frappe.boot.sysdefaults && frappe.boot.sysdefaults.float_precision) || 2;
      return frappe.form.formatters._right(flt(value2, precision3) + "%", options);
    },
    Rating: function(value2, docfield) {
      let rating_html = "";
      let number_of_stars = docfield.options || 5;
      value2 = value2 * number_of_stars;
      value2 = Math.round(value2 * 2) / 2;
      Array.from({ length: cint(number_of_stars) }, (_2, i3) => i3 + 1).forEach((i3) => {
        rating_html += `<svg class="icon icon-md" data-rating=${i3} viewBox="0 0 24 24" fill="none">
				<path class="right-half ${i3 <= (value2 || 0) ? "star-click" : ""}" d="M11.9987 3.00011C12.177 3.00011 12.3554 3.09303 12.4471 3.27888L14.8213 8.09112C14.8941 8.23872 15.0349 8.34102 15.1978 8.3647L20.5069 9.13641C20.917 9.19602 21.0807 9.69992 20.7841 9.9892L16.9421 13.7354C16.8243 13.8503 16.7706 14.0157 16.7984 14.1779L17.7053 19.4674C17.7753 19.8759 17.3466 20.1874 16.9798 19.9945L12.2314 17.4973C12.1586 17.459 12.0786 17.4398 11.9987 17.4398V3.00011Z" fill="var(--star-fill)" stroke="var(--star-fill)"/>
				<path class="left-half ${i3 <= (value2 || 0) || i3 - 0.5 == value2 ? "star-click" : ""}" d="M11.9987 3.00011C11.8207 3.00011 11.6428 3.09261 11.5509 3.27762L9.15562 8.09836C9.08253 8.24546 8.94185 8.34728 8.77927 8.37075L3.42887 9.14298C3.01771 9.20233 2.85405 9.70811 3.1525 9.99707L7.01978 13.7414C7.13858 13.8564 7.19283 14.0228 7.16469 14.1857L6.25116 19.4762C6.18071 19.8842 6.6083 20.1961 6.97531 20.0045L11.7672 17.5022C11.8397 17.4643 11.9192 17.4454 11.9987 17.4454V3.00011Z" fill="var(--star-fill)" stroke="var(--star-fill)"/>
			</svg>`;
      });
      return `<div class="rating">
			${rating_html}
		</div>`;
    },
    Currency: function(value2, docfield, options, doc2) {
      var currency = frappe.meta.get_field_currency(docfield, doc2);
      let precision3;
      if (typeof docfield.precision == "number") {
        precision3 = docfield.precision;
      } else {
        precision3 = cint(
          docfield.precision || frappe.boot.sysdefaults.currency_precision || 2
        );
      }
      if (precision3 > 2) {
        var parts2 = cstr(value2).split(".");
        var decimals = parts2.length > 1 ? parts2[1] : "";
        if (decimals.length < 3 || decimals.length < precision3) {
          const fraction = frappe.model.get_value(":Currency", currency, "fraction_units") || 100;
          if (decimals.length < cstr(fraction).length) {
            precision3 = cstr(fraction).length - 1;
          }
        }
      }
      value2 = value2 == null || value2 === "" ? "" : value2;
      value2 = format_currency(value2, currency, precision3);
      if (options && options.only_value) {
        return value2;
      } else {
        return frappe.form.formatters._right(value2, options);
      }
    },
    Check: function(value2) {
      return `<input type="checkbox" disabled
			class="disabled-${value2 ? "selected" : "deselected"}">`;
    },
    Link: function(value2, docfield, options, doc2) {
      var doctype = docfield._options || docfield.options;
      var original_value = value2;
      let link_title = frappe.utils.get_link_title(doctype, value2);
      if (value2 && value2.match && value2.match(/^['"].*['"]$/)) {
        value2.replace(/^.(.*).$/, "$1");
      }
      if (options && (options.for_print || options.only_value)) {
        return link_title || value2;
      }
      if (frappe.form.link_formatters[doctype]) {
        if (doc2 && doctype !== doc2.doctype) {
          value2 = frappe.form.link_formatters[doctype](value2, doc2, docfield);
        }
      }
      if (!value2) {
        return "";
      }
      if (value2[0] == "'" && value2[value2.length - 1] == "'") {
        return value2.substring(1, value2.length - 1);
      }
      if (docfield && docfield.link_onclick) {
        return repl('<a onclick="%(onclick)s" href="#">%(value)s</a>', {
          onclick: docfield.link_onclick.replace(/"/g, "&quot;") + "; return false;",
          value: value2
        });
      } else if (docfield && doctype) {
        if (frappe.model.can_read(doctype)) {
          const a2 = document.createElement("a");
          a2.href = `/app/${encodeURIComponent(
            frappe.router.slug(doctype)
          )}/${encodeURIComponent(original_value)}`;
          a2.dataset.doctype = doctype;
          a2.dataset.name = original_value;
          a2.dataset.value = original_value;
          a2.innerText = __(options && options.label || link_title || value2);
          return a2.outerHTML;
        } else {
          return link_title || value2;
        }
      } else {
        return link_title || value2;
      }
    },
    Date: function(value2) {
      if (!frappe.datetime.str_to_user) {
        return value2;
      }
      if (value2) {
        value2 = frappe.datetime.str_to_user(value2, false, true);
        if (value2 === "Invalid date") {
          value2 = null;
        }
      }
      return value2 || "";
    },
    DateRange: function(value2) {
      if (Array.isArray(value2)) {
        return __("{0} to {1}", [
          frappe.datetime.str_to_user(value2[0]),
          frappe.datetime.str_to_user(value2[1])
        ]);
      } else {
        return value2 || "";
      }
    },
    Datetime: function(value2) {
      if (value2) {
        return moment(frappe.datetime.convert_to_user_tz(value2)).format(
          frappe.boot.sysdefaults.date_format.toUpperCase() + " " + (frappe.boot.sysdefaults.time_format || "HH:mm:ss")
        );
      } else {
        return "";
      }
    },
    Text: function(value2, df) {
      if (value2) {
        var tags = ["<p", "<div", "<br", "<table"];
        var match = false;
        for (var i3 = 0; i3 < tags.length; i3++) {
          if (value2.match(tags[i3])) {
            match = true;
            break;
          }
        }
        if (!match) {
          value2 = frappe.utils.replace_newlines(value2);
        }
      }
      return frappe.form.formatters.Data(value2, df);
    },
    Time: function(value2) {
      if (value2) {
        value2 = frappe.datetime.str_to_user(value2, true);
      }
      return value2 || "";
    },
    Duration: function(value2, docfield) {
      if (value2) {
        let duration_options = frappe.utils.get_duration_options(docfield);
        value2 = frappe.utils.get_formatted_duration(value2, duration_options);
      }
      return value2 || "0s";
    },
    LikedBy: function(value2) {
      var html = "";
      $.each(JSON.parse(value2 || "[]"), function(i3, v2) {
        if (v2)
          html += frappe.avatar(v2);
      });
      return html;
    },
    Tag: function(value2) {
      var html = "";
      $.each((value2 || "").split(","), function(i3, v2) {
        if (v2)
          html += `
				<span
					class="data-pill btn-xs align-center ellipsis"
					style="background-color: var(--control-bg); box-shadow: none; margin-right: 4px;"
					data-field="_user_tags" data-label="${v2}'">
					${v2}
				</span>`;
      });
      return html;
    },
    Comment: function(value2) {
      return value2;
    },
    Assign: function(value2) {
      var html = "";
      $.each(JSON.parse(value2 || "[]"), function(i3, v2) {
        if (v2)
          html += '<span class="label label-warning" 				style="margin-right: 7px;"				data-field="_assign">' + v2 + "</span>";
      });
      return html;
    },
    SmallText: function(value2) {
      return frappe.form.formatters.Text(value2);
    },
    TextEditor: function(value2) {
      let formatted_value2 = frappe.form.formatters.Text(value2);
      try {
        if (!$(formatted_value2).find(".ql-editor").length && !$(formatted_value2).hasClass("ql-editor")) {
          formatted_value2 = `<div class="ql-editor read-mode">${formatted_value2}</div>`;
        }
      } catch (e2) {
        formatted_value2 = `<div class="ql-editor read-mode">${formatted_value2}</div>`;
      }
      return formatted_value2;
    },
    Code: function(value2) {
      return "<pre>" + (value2 == null ? "" : $("<div>").text(value2).html()) + "</pre>";
    },
    WorkflowState: function(value2) {
      var workflow_state = frappe.get_doc("Workflow State", value2);
      if (workflow_state) {
        return repl(
          "<span class='label label-%(style)s' 				data-workflow-state='%(value)s'				style='padding-bottom: 4px; cursor: pointer;'>				<i class='fa fa-small fa-white fa-%(icon)s'></i> %(value)s</span>",
          {
            value: value2,
            style: workflow_state.style.toLowerCase(),
            icon: workflow_state.icon
          }
        );
      } else {
        return "<span class='label'>" + value2 + "</span>";
      }
    },
    Email: function(value2) {
      return $("<div></div>").text(value2).html();
    },
    FileSize: function(value2) {
      value2 = cint(value2);
      if (value2 > 1048576) {
        return (value2 / 1048576).toFixed(2) + "M";
      } else if (value2 > 1024) {
        return (value2 / 1024).toFixed(2) + "K";
      }
      return value2;
    },
    TableMultiSelect: function(rows, df, options) {
      rows = rows || [];
      const meta = frappe.get_meta(df.options);
      const link_field = meta.fields.find((df2) => df2.fieldtype === "Link");
      const formatted_values = rows.map((row) => {
        const value2 = row[link_field.fieldname];
        return `<span class="text-nowrap">
				${frappe.format(value2, link_field, options, row)}
			</span>`;
      });
      return formatted_values.join(", ");
    },
    Color: (value2) => {
      return value2 ? `<div>
			<div class="selected-color" style="background-color: ${value2}"></div>
			<span class="color-value">${value2}</span>
		</div>` : "";
    },
    Icon: (value2) => {
      return value2 ? `<div>
			<div class="selected-icon">${frappe.utils.icon(value2, "md")}</div>
			<span class="icon-value">${value2}</span>
		</div>` : "";
    },
    Attach: format_attachment_url,
    AttachImage: format_attachment_url
  };
  function format_attachment_url(url2) {
    return url2 ? `<a href="${url2}" target="_blank">${url2}</a>` : "";
  }
  frappe.form.get_formatter = function(fieldtype) {
    if (!fieldtype)
      fieldtype = "Data";
    return frappe.form.formatters[fieldtype.replace(/ /g, "")] || frappe.form.formatters.Data;
  };
  frappe.format = function(value2, df, options, doc2) {
    if (!df)
      df = { fieldtype: "Data" };
    if (df.fieldname == "_user_tags")
      df = __spreadProps(__spreadValues({}, df), { fieldtype: "Tag" });
    var fieldtype = df.fieldtype || "Data";
    if (fieldtype === "Dynamic Link") {
      fieldtype = "Link";
      df._options = doc2 ? doc2[df.options] : null;
    }
    var formatter = df.formatter || frappe.form.get_formatter(fieldtype);
    var formatted = formatter(value2, df, options, doc2);
    if (typeof formatted == "string")
      formatted = frappe.dom.remove_script_and_style(formatted);
    return formatted;
  };
  frappe.get_format_helper = function(doc2) {
    var helper = {
      get_formatted: function(fieldname) {
        var df = frappe.meta.get_docfield(doc2.doctype, fieldname);
        if (!df) {
          console.log("fieldname not found: " + fieldname);
        }
        return frappe.format(doc2[fieldname], df, { inline: 1 }, doc2);
      }
    };
    $.extend(helper, doc2);
    return helper;
  };
  frappe.form.link_formatters["User"] = function(value2, doc2, docfield) {
    let full_name = doc2 && (doc2.full_name || docfield && doc2[`${docfield.fieldname}_full_name`]);
    return full_name || value2;
  };

  // frappe/public/js/frappe/dom.js
  frappe.provide("frappe.dom");
  frappe.dom = {
    id_count: 0,
    freeze_count: 0,
    by_id: function(id) {
      return document.getElementById(id);
    },
    get_unique_id: function() {
      const id = "unique-" + frappe.dom.id_count;
      frappe.dom.id_count++;
      return id;
    },
    set_unique_id: function(ele) {
      var $ele = $(ele);
      if ($ele.attr("id")) {
        return $ele.attr("id");
      }
      var id = "unique-" + frappe.dom.id_count;
      $ele.attr("id", id);
      frappe.dom.id_count++;
      return id;
    },
    eval: function(txt2) {
      if (!txt2)
        return;
      var el = document.createElement("script");
      el.appendChild(document.createTextNode(txt2));
      document.getElementsByTagName("head")[0].appendChild(el);
    },
    remove_script_and_style: function(txt2) {
      const evil_tags = ["script", "style", "noscript", "title", "meta", "base", "head"];
      const parser = new DOMParser();
      const doc2 = parser.parseFromString(txt2, "text/html");
      const body = doc2.body;
      let found = !!doc2.head.innerHTML;
      for (const tag of evil_tags) {
        for (const element of body.getElementsByTagName(tag)) {
          found = true;
          element.parentNode.removeChild(element);
        }
      }
      for (const element of body.getElementsByTagName("link")) {
        const relation = element.getAttribute("rel");
        if (relation && relation.toLowerCase().trim() === "stylesheet") {
          found = true;
          element.parentNode.removeChild(element);
        }
      }
      if (found) {
        return body.innerHTML;
      } else {
        return txt2;
      }
    },
    is_element_in_viewport: function(el, tolerance = 0) {
      if (typeof jQuery === "function" && el instanceof jQuery) {
        el = el[0];
      }
      var rect = el.getBoundingClientRect();
      return rect.top + tolerance >= 0 && rect.left + tolerance >= 0 && rect.bottom - tolerance <= $(window).height() && rect.right - tolerance <= $(window).width();
    },
    is_element_in_modal(element) {
      return Boolean($(element).parents(".modal").length);
    },
    set_style: function(txt2, id) {
      if (!txt2)
        return;
      var se2 = document.createElement("style");
      se2.type = "text/css";
      if (id) {
        var element = document.getElementById(id);
        if (element) {
          element.parentNode.removeChild(element);
        }
        se2.id = id;
      }
      if (se2.styleSheet) {
        se2.styleSheet.cssText = txt2;
      } else {
        se2.appendChild(document.createTextNode(txt2));
      }
      document.getElementsByTagName("head")[0].appendChild(se2);
      return se2;
    },
    add: function(parent, newtag, className, cs, innerHTML, onclick) {
      if (parent && parent.substr)
        parent = frappe.dom.by_id(parent);
      var c2 = document.createElement(newtag);
      if (parent)
        parent.appendChild(c2);
      if (className) {
        if (newtag.toLowerCase() == "img")
          c2.src = className;
        else
          c2.className = className;
      }
      if (cs)
        frappe.dom.css(c2, cs);
      if (innerHTML)
        c2.innerHTML = innerHTML;
      if (onclick)
        c2.onclick = onclick;
      return c2;
    },
    css: function(ele, s2) {
      if (ele && s2) {
        $.extend(ele.style, s2);
      }
      return ele;
    },
    activate: function($parent, $child, common_class, active_class = "active") {
      $parent.find(`.${common_class}.${active_class}`).removeClass(active_class);
      $child.addClass(active_class);
    },
    freeze: function(msg, css_class) {
      if (!$("#freeze").length) {
        var freeze = $('<div id="freeze" class="modal-backdrop fade"></div>').on("click", function() {
          if (cur_frm && cur_frm.cur_grid) {
            cur_frm.cur_grid.toggle_view();
            return false;
          }
        }).appendTo("#body");
        freeze.html(
          repl(
            '<div class="freeze-message-container"><div class="freeze-message"><p class="lead">%(msg)s</p></div></div>',
            { msg: msg || "" }
          )
        );
        setTimeout(function() {
          freeze.addClass("in");
        }, 1);
      } else {
        $("#freeze").addClass("in");
      }
      if (css_class) {
        $("#freeze").addClass(css_class);
      }
      frappe.dom.freeze_count++;
    },
    unfreeze: function() {
      if (!frappe.dom.freeze_count)
        return;
      frappe.dom.freeze_count--;
      if (!frappe.dom.freeze_count) {
        var freeze = $("#freeze").removeClass("in").remove();
      }
    },
    save_selection: function() {
      if (window.getSelection) {
        var sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
          var ranges = [];
          for (var i3 = 0, len = sel.rangeCount; i3 < len; ++i3) {
            ranges.push(sel.getRangeAt(i3));
          }
          return ranges;
        }
      } else if (document.selection && document.selection.createRange) {
        return document.selection.createRange();
      }
      return null;
    },
    restore_selection: function(savedSel) {
      if (savedSel) {
        if (window.getSelection) {
          var sel = window.getSelection();
          sel.removeAllRanges();
          for (var i3 = 0, len = savedSel.length; i3 < len; ++i3) {
            sel.addRange(savedSel[i3]);
          }
        } else if (document.selection && savedSel.select) {
          savedSel.select();
        }
      }
    },
    is_touchscreen: function() {
      return "ontouchstart" in window;
    },
    handle_broken_images(container) {
      $(container).find("img").on("error", (e2) => {
        const $img = $(e2.currentTarget);
        $img.addClass("no-image");
      });
    },
    scroll_to_bottom(container) {
      const $container = $(container);
      $container.scrollTop($container[0].scrollHeight);
    },
    file_to_base64(file_obj) {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.readAsDataURL(file_obj);
      });
    },
    scroll_to_section(section_name) {
      setTimeout(() => {
        const section = $(`a:contains("${section_name}")`);
        if (section.length) {
          if (section.parent().hasClass("collapsed")) {
            section.click();
          }
          frappe.ui.scroll(section.parent().parent());
        }
      }, 200);
    },
    pixel_to_inches(pixels) {
      const div = $(
        '<div id="dpi" style="height: 1in; width: 1in; left: 100%; position: fixed; top: 100%;"></div>'
      );
      div.appendTo(document.body);
      const dpi_x = document.getElementById("dpi").offsetWidth;
      const inches = pixels / dpi_x;
      div.remove();
      return inches;
    }
  };
  frappe.ellipsis = function(text, max) {
    if (!max)
      max = 20;
    text = cstr(text);
    if (text.length > max) {
      text = text.substr(0, max) + "...";
    }
    return text;
  };
  frappe.run_serially = function(tasks) {
    var result = Promise.resolve();
    tasks.forEach((task) => {
      if (task) {
        result = result.then ? result.then(task) : Promise.resolve();
      }
    });
    return result;
  };
  frappe.load_image = (src, onload, onerror, preprocess = () => {
  }) => {
    var tester = new Image();
    tester.onload = function() {
      onload(this);
    };
    tester.onerror = onerror;
    preprocess(tester);
    tester.src = src;
  };
  frappe.timeout = (seconds) => {
    return new Promise((resolve) => {
      setTimeout(() => resolve(), seconds * 1e3);
    });
  };
  frappe.scrub = function(text, spacer = "_") {
    return text.replace(/ /g, spacer).toLowerCase();
  };
  frappe.unscrub = function(txt2) {
    return frappe.model.unscrub(txt2);
  };
  frappe.get_data_pill = (label, target_id = null, remove_action = null, image = null) => {
    let data_pill_wrapper = $(`
		<button class="data-pill btn">
			<div class="flex align-center ellipsis">
				${image ? image : ""}
				<span class="pill-label">${label}</span>
			</div>
		</button>
	`);
    if (remove_action) {
      let remove_btn = $(`
			<span class="remove-btn cursor-pointer">
				${frappe.utils.icon("close", "sm")}
			</span>
		`).click(() => {
        remove_action(target_id || label, data_pill_wrapper);
      });
      data_pill_wrapper.append(remove_btn);
    }
    return data_pill_wrapper;
  };
  frappe.get_modal = function(title, content) {
    return $(`<div class="modal fade" style="overflow: auto;" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<div class="fill-width flex title-section">
						<span class="indicator hidden"></span>
						<h4 class="modal-title">${title}</h4>
					</div>
					<div class="modal-actions">
						<button class="btn btn-modal-minimize btn-link hide">
							${frappe.utils.icon("collapse")}
						</button>
						<button class="btn btn-modal-close btn-link" data-dismiss="modal">
							${frappe.utils.icon("close-alt", "sm", "close-alt")}
						</button>
					</div>
				</div>
				<div class="modal-body ui-front">${content}</div>
				<div class="modal-footer hide">
					<div class="custom-actions"></div>
					<div class="standard-actions">
						<button type="button" class="btn btn-secondary btn-sm hide btn-modal-secondary">
						</button>
						<button type="button" class="btn btn-primary btn-sm hide btn-modal-primary">
							${__("Confirm")}
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>`);
  };
  frappe.is_online = function() {
    if (frappe.boot.developer_mode == 1) {
      return true;
    }
    if ("onLine" in navigator) {
      return navigator.onLine;
    }
    return true;
  };
  frappe.create_shadow_element = function(wrapper, html, css, js) {
    let random_id = "custom-block-" + frappe.utils.get_random(5).toLowerCase();
    class CustomBlock2 extends HTMLElement {
      constructor() {
        var _a, _b, _c, _d;
        super();
        let div = document.createElement("div");
        div.innerHTML = frappe.dom.remove_script_and_style(html);
        let link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = frappe.assets.bundled_asset("desk.bundle.css");
        let style = document.createElement("style");
        style.textContent = css;
        let script = document.createElement("script");
        script.textContent = `
				(function() {
					let cname = ${JSON.stringify(random_id)};
					let root_element = document.querySelector(cname).shadowRoot;
					${js}
				})();
			`;
        this.attachShadow({ mode: "open" });
        (_a = this.shadowRoot) == null ? void 0 : _a.appendChild(link);
        (_b = this.shadowRoot) == null ? void 0 : _b.appendChild(div);
        (_c = this.shadowRoot) == null ? void 0 : _c.appendChild(style);
        (_d = this.shadowRoot) == null ? void 0 : _d.appendChild(script);
      }
    }
    if (!customElements.get(random_id)) {
      customElements.define(random_id, CustomBlock2);
    }
    wrapper.innerHTML = `<${random_id}></${random_id}>`;
  };
  $(window).on("online", function() {
    if (document.hidden)
      return;
    frappe.show_alert({
      indicator: "green",
      message: __("You are connected to internet.")
    });
  });
  $(window).on("offline", function() {
    if (document.hidden)
      return;
    frappe.show_alert({
      indicator: "orange",
      message: __("Connection lost. Some features might not work.")
    });
  });

  // frappe/public/js/frappe/form/section.js
  var Section = class {
    constructor(parent, df, card_layout, layout) {
      this.layout = layout;
      this.card_layout = card_layout;
      this.parent = parent;
      this.df = df || {};
      this.columns = [];
      this.fields_list = [];
      this.fields_dict = {};
      this.make();
      if (this.df.label && this.df.collapsible && localStorage.getItem(df.css_class + "-closed")) {
        this.collapse();
      }
      this.row = {
        wrapper: this.wrapper
      };
      this.refresh();
    }
    make() {
      let make_card = this.card_layout;
      this.wrapper = $(`<div class="row
				${this.df.is_dashboard_section ? "form-dashboard-section" : "form-section"}
				${make_card ? "card-section" : ""}" data-fieldname="${this.df.fieldname}">
			`).appendTo(this.parent);
      if (this.df) {
        if (this.df.label) {
          this.make_head();
        }
        if (this.df.description) {
          this.description_wrapper = $(
            `<div class="col-sm-12 form-section-description">
						${__(this.df.description)}
					</div>`
          );
          this.wrapper.append(this.description_wrapper);
        }
        if (this.df.css_class) {
          this.wrapper.addClass(this.df.css_class);
        }
        if (this.df.hide_border) {
          this.wrapper.toggleClass("hide-border", true);
        }
      }
      this.body = $('<div class="section-body">').appendTo(this.wrapper);
      if (this.df.body_html) {
        this.body.append(this.df.body_html);
      }
    }
    make_head() {
      this.head = $(`
			<div class="section-head">
				${__(this.df.label)}
				<span class="ml-2 collapse-indicator mb-1"></span>
			</div>
		`);
      this.head.appendTo(this.wrapper);
      this.indicator = this.head.find(".collapse-indicator");
      this.indicator.hide();
      if (this.df.collapsible) {
        this.collapse_link = this.head.on("click", () => {
          this.collapse();
        });
        this.set_icon();
        this.indicator.show();
      }
    }
    replace_field(fieldname, fieldobj) {
      var _a;
      if ((_a = this.fields_dict[fieldname]) == null ? void 0 : _a.df) {
        const olfldobj = this.fields_dict[fieldname];
        const idx = this.fields_list.findIndex((e2) => e2 == olfldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        fieldobj.section = this;
      }
    }
    add_field(fieldobj) {
      this.fields_list.push(fieldobj);
      this.fields_dict[fieldobj.df.fieldname] = fieldobj;
      fieldobj.section = this;
    }
    refresh(hide) {
      if (!this.df)
        return;
      hide = hide || this.df.hidden || this.df.hidden_due_to_dependency;
      this.wrapper.toggleClass("hide-control", !!hide);
    }
    collapse(hide) {
      if (!(this.head && this.body)) {
        return;
      }
      if (hide === void 0) {
        hide = !this.body.hasClass("hide");
      }
      this.body.toggleClass("hide", hide);
      this.head && this.head.toggleClass("collapsed", hide);
      this.set_icon(hide);
      this.fields_list.forEach((f3) => f3.on_section_collapse && f3.on_section_collapse(hide));
      if (this.df.css_class)
        localStorage.setItem(this.df.css_class + "-closed", hide ? "1" : "");
    }
    set_icon(hide) {
      let indicator_icon = hide ? "es-line-down" : "es-line-up";
      this.indicator && this.indicator.html(frappe.utils.icon(indicator_icon, "sm", "mb-1"));
    }
    is_collapsed() {
      return this.body.hasClass("hide");
    }
    has_missing_mandatory() {
      let missing_mandatory = false;
      for (let j3 = 0, l2 = this.fields_list.length; j3 < l2; j3++) {
        const section_df = this.fields_list[j3].df;
        if (section_df.reqd && this.layout.doc[section_df.fieldname] == null) {
          missing_mandatory = true;
          break;
        }
      }
      return missing_mandatory;
    }
    hide() {
      this.on_section_toggle(false);
    }
    show() {
      this.on_section_toggle(true);
    }
    on_section_toggle(show) {
      this.wrapper.toggleClass("hide-control", !show);
    }
  };

  // frappe/public/js/frappe/form/tab.js
  var Tab = class {
    constructor(layout, df, frm, tab_link_container, tabs_content) {
      this.layout = layout;
      this.df = df || {};
      this.frm = frm;
      this.doctype = this.frm.doctype;
      this.label = this.df && this.df.label;
      this.tab_link_container = tab_link_container;
      this.tabs_content = tabs_content;
      this.make();
      this.setup_listeners();
      this.refresh();
    }
    make() {
      const id = `${frappe.scrub(this.doctype, "-")}-${this.df.fieldname}`;
      this.tab_link = $(`
			<li class="nav-item">
				<a class="nav-link ${this.df.active ? "active" : ""}" id="${id}-tab"
					data-toggle="tab"
					data-fieldname="${this.df.fieldname}"
					href="#${id}"
					role="tab"
					aria-controls="${this.label}">
						${__(this.label)}
				</a>
			</li>
		`).appendTo(this.tab_link_container);
      this.wrapper = $(`<div class="tab-pane fade show ${this.df.active ? "active" : ""}"
			id="${id}" role="tabpanel" aria-labelledby="${id}-tab">`).appendTo(this.tabs_content);
    }
    refresh() {
      if (!this.df)
        return;
      let hide = this.df.hidden || this.df.hidden_due_to_dependency;
      if (!hide && this.frm && !this.frm.get_perm(this.df.permlevel || 0, "read")) {
        hide = true;
      }
      if (!hide) {
        hide = true;
        if (this.wrapper.find(
          ".form-section:not(.hide-control, .empty-section), .form-dashboard-section:not(.hide-control, .empty-section)"
        ).length) {
          hide = false;
        }
      }
      this.toggle(!hide);
    }
    toggle(show) {
      this.tab_link.toggleClass("hide", !show);
      this.wrapper.toggleClass("hide", !show);
      this.tab_link.toggleClass("show", show);
      this.wrapper.toggleClass("show", show);
      this.hidden = !show;
    }
    show() {
      this.tab_link.show();
    }
    hide() {
      this.tab_link.hide();
    }
    add_field(fieldobj) {
      fieldobj.tab = this;
    }
    replace_field(fieldobj) {
      fieldobj.tab = this;
    }
    set_active() {
      var _a, _b;
      this.tab_link.find(".nav-link").tab("show");
      this.wrapper.addClass("show");
      (_b = (_a = this.frm) == null ? void 0 : _a.set_active_tab) == null ? void 0 : _b.call(_a, this);
    }
    is_active() {
      return this.wrapper.hasClass("active");
    }
    is_hidden() {
      return this.wrapper.hasClass("hide") && this.tab_link.hasClass("hide");
    }
    setup_listeners() {
      this.tab_link.find(".nav-link").on("shown.bs.tab", () => {
        var _a, _b;
        (_b = this == null ? void 0 : (_a = this.frm).set_active_tab) == null ? void 0 : _b.call(_a, this);
      });
    }
  };

  // frappe/public/js/frappe/form/column.js
  var Column = class {
    constructor(section, df) {
      if (!df)
        df = {};
      this.df = df;
      this.section = section;
      this.section.columns.push(this);
      this.make();
      this.resize_all_columns();
    }
    make() {
      this.wrapper = $(`
			<div class="form-column" data-fieldname="${this.df.fieldname}">
				<form>
				</form>
			</div>
		`).appendTo(this.section.body);
      this.form = this.wrapper.find("form").on("submit", () => false);
      if (this.df.description) {
        $(`
				<p class="col-sm-12 form-column-description">
					${__(this.df.description)}
				</p>
			`).prependTo(this.wrapper);
      }
      if (this.df.label) {
        $(`
				<label class="column-label">
					${__(this.df.label)}
				</label>
			`).prependTo(this.wrapper);
      }
    }
    resize_all_columns() {
      let columns = this.section.wrapper.find(".form-column").length;
      let colspan = cint(12 / columns);
      if (columns == 5) {
        colspan = 20;
      }
      this.section.wrapper.find(".form-column").removeClass().addClass("form-column").addClass("col-sm-" + colspan);
    }
    add_field() {
    }
    refresh() {
      this.section.refresh();
    }
  };

  // frappe/public/js/frappe/form/layout.js
  frappe.ui.form.Layout = class Layout {
    constructor(opts) {
      this.views = {};
      this.pages = [];
      this.tabs = [];
      this.sections = [];
      this.page_breaks = [];
      this.sections_dict = {};
      this.fields_list = [];
      this.fields_dict = {};
      this.section_count = 0;
      this.column_count = 0;
      $.extend(this, opts);
    }
    make() {
      if (!this.parent && this.body) {
        this.parent = this.body;
      }
      this.wrapper = $('<div class="form-layout">').appendTo(this.parent);
      this.message = $('<div class="form-message hidden"></div>').appendTo(this.wrapper);
      this.page = $('<div class="form-page"></div>').appendTo(this.wrapper);
      if (!this.fields) {
        this.fields = this.get_doctype_fields();
      }
      if (this.is_tabbed_layout()) {
        this.setup_tabbed_layout();
      }
      this.setup_tab_events();
      this.frm && this.setup_tooltip_events();
      this.render();
    }
    setup_tabbed_layout() {
      $(`
			<div class="form-tabs-list">
				<ul class="nav form-tabs" id="form-tabs" role="tablist"></ul>
			</div>
		`).appendTo(this.page);
      this.tab_link_container = this.page.find(".form-tabs");
      this.tabs_content = $(`<div class="form-tab-content tab-content"></div>`).appendTo(
        this.page
      );
      this.setup_events();
    }
    get_doctype_fields() {
      let fields = [this.get_new_name_field()];
      if (this.doctype_layout) {
        fields = fields.concat(this.get_fields_from_layout());
      } else {
        fields = fields.concat(
          frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype])
        );
      }
      return fields;
    }
    get_new_name_field() {
      return {
        parent: this.frm.doctype,
        fieldtype: "Data",
        fieldname: "__newname",
        reqd: 1,
        hidden: 1,
        label: __("Name"),
        get_status: function(field) {
          if (field.frm && field.frm.is_new() && field.frm.meta.autoname && ["prompt", "name"].includes(field.frm.meta.autoname.toLowerCase())) {
            return "Write";
          }
          return "None";
        }
      };
    }
    get_fields_from_layout() {
      const fields = [];
      for (let f3 of this.doctype_layout.fields) {
        const docfield = copy_dict(frappe.meta.docfield_map[this.doctype][f3.fieldname]);
        docfield.label = f3.label;
        fields.push(docfield);
      }
      return fields;
    }
    show_message(html, color) {
      if (this.message_color) {
        this.message.removeClass(this.message_color);
      }
      let close_message = $(`<div class="close-message">${frappe.utils.icon("close")}</div>`);
      this.message_color = color && ["yellow", "blue", "red", "green", "orange"].includes(color) ? color : "blue";
      if (html) {
        if (html.substr(0, 1) !== "<") {
          html = "<div>" + html + "</div>";
        }
        this.message.removeClass("hidden").addClass(this.message_color);
        $(html).appendTo(this.message);
        close_message.appendTo(this.message);
        close_message.on("click", () => this.message.empty().addClass("hidden"));
      } else {
        this.message.empty().addClass("hidden");
      }
    }
    render(new_fields) {
      let fields = new_fields || this.fields;
      this.section = null;
      this.column = null;
      if (this.no_opening_section() && !this.is_tabbed_layout()) {
        this.fields.unshift({ fieldtype: "Section Break" });
      }
      if (this.is_tabbed_layout()) {
        let default_tab = {
          label: __("Details"),
          fieldtype: "Tab Break",
          fieldname: "__details"
        };
        let first_field_visible = this.fields.find((element) => element.hidden == false);
        let first_tab = (first_field_visible == null ? void 0 : first_field_visible.fieldtype) === "Tab Break" ? first_field_visible : null;
        if (!first_tab) {
          this.fields.splice(0, 0, default_tab);
        } else {
          let newname_field = this.fields.find((df) => df.fieldname === "__newname");
          if (newname_field && newname_field.get_status(this) === "Write") {
            this.fields.splice(0, 1);
            this.fields.splice(1, 0, newname_field);
          }
        }
      }
      fields.forEach((df) => {
        switch (df.fieldtype) {
          case "Fold":
            this.make_page(df);
            break;
          case "Page Break":
            this.make_page_break();
            this.make_section(df);
            break;
          case "Section Break":
            this.make_section(df);
            break;
          case "Column Break":
            this.make_column(df);
            break;
          case "Tab Break":
            this.make_tab(df);
            break;
          default:
            this.make_field(df);
        }
      });
    }
    no_opening_section() {
      return this.fields[0] && this.fields[0].fieldtype != "Section Break" || !this.fields.length;
    }
    no_opening_tab() {
      return this.fields[1] && this.fields[1].fieldtype != "Tab Break" || !this.fields.length;
    }
    is_tabbed_layout() {
      return this.fields.find((f3) => f3.fieldtype === "Tab Break");
    }
    replace_field(fieldname, df, render) {
      var _a;
      df.fieldname = fieldname;
      if (this.fields_dict[fieldname] && this.fields_dict[fieldname].df) {
        const prev_fieldobj = this.fields_dict[fieldname];
        const fieldobj = this.init_field(df, prev_fieldobj.parent, render);
        prev_fieldobj.$wrapper.replaceWith(fieldobj.$wrapper);
        const idx = this.fields_list.findIndex((e2) => e2 == prev_fieldobj);
        this.fields_list.splice(idx, 1, fieldobj);
        this.fields_dict[fieldname] = fieldobj;
        this.sections.forEach((section) => section.replace_field(fieldname, fieldobj));
        (_a = prev_fieldobj.tab) == null ? void 0 : _a.replace_field(fieldobj);
        this.refresh_fields([df]);
      }
    }
    make_field(df, colspan, render) {
      !this.section && this.make_section();
      !this.column && this.make_column();
      const parent = this.column.form.get(0);
      const fieldobj = this.init_field(df, parent, render);
      this.fields_list.push(fieldobj);
      this.fields_dict[df.fieldname] = fieldobj;
      this.section.add_field(fieldobj);
      this.column.add_field(fieldobj);
      if (this.current_tab) {
        this.current_tab.add_field(fieldobj);
      }
    }
    init_field(df, parent, render = false) {
      const fieldobj = frappe.ui.form.make_control({
        df,
        doctype: this.doctype,
        parent,
        frm: this.frm,
        render_input: render,
        doc: this.doc,
        layout: this
      });
      fieldobj.layout = this;
      return fieldobj;
    }
    make_page_break() {
      this.page = $('<div class="form-page page-break"></div>').appendTo(this.wrapper);
    }
    make_page(df) {
      let me2 = this;
      let head = $(`
			<div class="form-clickable-section text-center">
				<a class="btn-fold h6 text-muted">
					${__("Show more details")}
				</a>
			</div>
		`).appendTo(this.wrapper);
      this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);
      this.fold_btn = head.find(".btn-fold").on("click", function() {
        let page = $(this).parent().next();
        if (page.hasClass("hide")) {
          $(this).removeClass("btn-fold").html(__("Hide details"));
          page.removeClass("hide");
          frappe.utils.scroll_to($(this), true, 30);
          me2.folded = false;
        } else {
          $(this).addClass("btn-fold").html(__("Show more details"));
          page.addClass("hide");
          me2.folded = true;
        }
      });
      this.section = null;
      this.folded = true;
    }
    unfold() {
      this.fold_btn.trigger("click");
    }
    make_section(df = {}) {
      this.section_count++;
      if (!df.fieldname) {
        df.fieldname = `__section_${this.section_count}`;
        df.fieldtype = "Section Break";
      }
      this.section = new Section(
        this.current_tab ? this.current_tab.wrapper : this.page,
        df,
        this.card_layout,
        this
      );
      this.sections.push(this.section);
      this.sections_dict[df.fieldname] = this.section;
      if (df) {
        this.fields_dict[df.fieldname] = this.section;
        this.fields_list.push(this.section);
      }
      this.column = null;
    }
    make_column(df = {}) {
      this.column_count++;
      if (!df.fieldname) {
        df.fieldname = `__column_${this.section_count}`;
        df.fieldtype = "Column Break";
      }
      this.column = new Column(this.section, df);
      if (df && df.fieldname) {
        this.fields_list.push(this.column);
      }
    }
    make_tab(df) {
      this.section = null;
      let tab = new Tab(this, df, this.frm, this.tab_link_container, this.tabs_content);
      this.current_tab = tab;
      this.make_section({ fieldtype: "Section Break" });
      this.tabs.push(tab);
      return tab;
    }
    refresh(doc2) {
      if (doc2)
        this.doc = doc2;
      if (this.frm) {
        this.wrapper.find(".empty-form-alert").remove();
      }
      this.attach_doc_and_docfields(true);
      if (this.frm && this.frm.wrapper) {
        $(this.frm.wrapper).trigger("refresh-fields");
      }
      this.refresh_dependency();
      this.refresh_sections();
      if (this.frm) {
        this.refresh_section_collapse();
      }
      if (document.activeElement) {
        if (document.activeElement.tagName == "INPUT" && this.is_numeric_field_active()) {
          document.activeElement.select();
        }
      }
    }
    is_numeric_field_active() {
      const control = $(document.activeElement).closest(".frappe-control");
      const fieldtype = (control.data() || {}).fieldtype;
      return frappe.model.numeric_fieldtypes.includes(fieldtype);
    }
    refresh_sections() {
      this.wrapper.find(".form-section:not(.hide-control)").each(function() {
        const section = $(this).removeClass("empty-section visible-section");
        if (section.find(".frappe-control:not(.hide-control)").length) {
          section.addClass("visible-section");
        } else if (section.parent().hasClass("tab-pane") || section.parent().hasClass("form-page")) {
          section.addClass("empty-section");
        }
      });
      this.is_tabbed_layout() && this.refresh_tabs();
    }
    refresh_tabs() {
      for (let tab of this.tabs) {
        tab.refresh();
      }
      const visible_tabs = this.tabs.filter((tab) => !tab.hidden);
      if (visible_tabs && visible_tabs.length == 1) {
        visible_tabs[0].tab_link.toggleClass("hide show");
      }
      this.set_tab_as_active();
    }
    select_tab(label_or_fieldname) {
      var _a;
      for (let tab of this.tabs) {
        if (tab.label.toLowerCase() === label_or_fieldname.toLowerCase() || ((_a = tab.df.fieldname) == null ? void 0 : _a.toLowerCase()) === label_or_fieldname.toLowerCase()) {
          tab.set_active();
          return;
        }
      }
    }
    set_tab_as_active() {
      var _a, _b;
      let frm_active_tab = (_b = this == null ? void 0 : (_a = this.frm).get_active_tab) == null ? void 0 : _b.call(_a);
      if (frm_active_tab) {
        frm_active_tab.set_active();
      } else if (this.tabs.length) {
        let first_visible_tab = this.tabs.find((tab) => !tab.is_hidden());
        first_visible_tab && first_visible_tab.set_active();
      }
    }
    refresh_fields(fields) {
      let fieldnames = fields.map((field) => {
        if (field.fieldname)
          return field.fieldname;
      });
      this.fields_list.map((fieldobj) => {
        if (fieldnames.includes(fieldobj.df.fieldname)) {
          fieldobj.refresh();
          if (fieldobj.df["default"]) {
            fieldobj.set_input(fieldobj.df["default"]);
          }
        }
      });
    }
    add_fields(fields) {
      this.render(fields);
      this.refresh_fields(fields);
    }
    refresh_section_collapse() {
      if (!(this.sections && this.sections.length))
        return;
      for (let i3 = 0; i3 < this.sections.length; i3++) {
        let section = this.sections[i3];
        let df = section.df;
        if (df && df.collapsible) {
          let collapse = true;
          if (df.collapsible_depends_on) {
            collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
          }
          if (collapse && section.has_missing_mandatory()) {
            collapse = false;
          }
          section.collapse(collapse);
        }
      }
    }
    attach_doc_and_docfields(refresh) {
      let me2 = this;
      for (let i3 = 0, l2 = this.fields_list.length; i3 < l2; i3++) {
        let fieldobj = this.fields_list[i3];
        if (me2.doc) {
          fieldobj.doc = me2.doc;
          fieldobj.doctype = me2.doc.doctype;
          fieldobj.docname = me2.doc.name;
          fieldobj.df = frappe.meta.get_docfield(me2.doc.doctype, fieldobj.df.fieldname, me2.doc.name) || fieldobj.df;
        }
        refresh && fieldobj.df && fieldobj.refresh && fieldobj.refresh();
      }
    }
    refresh_section_count() {
      this.wrapper.find(".section-count-label:visible").each(function(i3) {
        $(this).html(i3 + 1);
      });
    }
    setup_events() {
      let last_scroll = 0;
      let tabs_list = $(".form-tabs-list");
      let tabs_content = this.tabs_content[0];
      if (!tabs_list.length)
        return;
      $(window).scroll(
        frappe.utils.throttle(() => {
          let current_scroll = document.documentElement.scrollTop;
          if (current_scroll > 0 && last_scroll <= current_scroll) {
            tabs_list.removeClass("form-tabs-sticky-down");
            tabs_list.addClass("form-tabs-sticky-up");
          } else {
            tabs_list.removeClass("form-tabs-sticky-up");
            tabs_list.addClass("form-tabs-sticky-down");
          }
          last_scroll = current_scroll;
        }, 500)
      );
      this.tab_link_container.off("click").on("click", ".nav-link", (e2) => {
        e2.preventDefault();
        e2.stopImmediatePropagation();
        $(e2.currentTarget).tab("show");
        if (tabs_content.getBoundingClientRect().top < 100) {
          tabs_content.scrollIntoView();
          setTimeout(() => {
            $(".page-head").css("top", "-15px");
            $(".form-tabs-list").removeClass("form-tabs-sticky-down");
            $(".form-tabs-list").addClass("form-tabs-sticky-up");
          }, 3);
        }
      });
    }
    setup_tab_events() {
      this.wrapper.on("keydown", (ev) => {
        if (ev.which == 9) {
          let current = $(ev.target);
          let doctype = current.attr("data-doctype");
          let fieldname = current.attr("data-fieldname");
          if (doctype) {
            return this.handle_tab(doctype, fieldname, ev.shiftKey);
          }
        }
      });
    }
    setup_tooltip_events() {
      $(document).on("keydown", (e2) => {
        if (e2.altKey) {
          this.wrapper.addClass("show-tooltip");
        }
      });
      $(document).on("keyup", (e2) => {
        if (!e2.altKey) {
          this.wrapper.removeClass("show-tooltip");
        }
      });
      this.frm.page && frappe.ui.keys.add_shortcut({
        shortcut: "alt+hover",
        page: this.frm.page,
        description: __("Show Fieldname (click to copy on clipboard)")
      });
    }
    handle_tab(doctype, fieldname, shift) {
      let grid_row = null, prev2 = null, fields = this.fields_list, focused = false;
      if (doctype != this.doctype) {
        grid_row = this.get_open_grid_row();
        if (!grid_row || !grid_row.layout) {
          return;
        }
        fields = grid_row.layout.fields_list;
      }
      for (let i3 = 0, len = fields.length; i3 < len; i3++) {
        if (fields[i3].df.fieldname == fieldname) {
          if (shift) {
            if (prev2) {
              this.set_focus(prev2);
            } else {
              $(this.primary_button).focus();
            }
            break;
          }
          if (i3 < len - 1) {
            focused = this.focus_on_next_field(i3, fields);
          }
          if (focused) {
            break;
          }
        }
        if (this.is_visible(fields[i3]))
          prev2 = fields[i3];
      }
      if (!focused) {
        if (grid_row) {
          if (grid_row.doc.idx == grid_row.grid.grid_rows.length) {
            grid_row.toggle_view(false, function() {
              grid_row.grid.frm.layout.handle_tab(
                grid_row.grid.df.parent,
                grid_row.grid.df.fieldname
              );
            });
          } else {
            grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
          }
        } else if (!shift) {
          $(this.primary_button).focus();
        }
      }
      return false;
    }
    focus_on_next_field(start_idx, fields) {
      for (let i3 = start_idx + 1, len = fields.length; i3 < len; i3++) {
        let field = fields[i3];
        if (this.is_visible(field)) {
          if (field.df.fieldtype === "Table") {
            if (!(field.grid.grid_rows && field.grid.grid_rows.length)) {
              field.grid.add_new_row();
            }
            field.grid.grid_rows[0].show_form();
            return true;
          } else if (!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
            this.set_focus(field);
            return true;
          }
        }
      }
    }
    is_visible(field) {
      return field.disp_status === "Write" && field.df && "hidden" in field.df && !field.df.hidden;
    }
    set_focus(field) {
      if (field.tab) {
        field.tab.set_active();
      }
      if (field.df.fieldtype == "Table") {
        if (!field.grid.grid_rows.length) {
          field.grid.add_new_row(1);
        } else {
          field.grid.grid_rows[0].toggle_view(true);
        }
      } else if (field.editor) {
        field.editor.set_focus();
      } else if (field.$input) {
        field.$input.focus();
      }
    }
    get_open_grid_row() {
      return $(".grid-row-open").data("grid_row");
    }
    refresh_dependency() {
      let has_dep = false;
      const fields = this.fields_list.concat(this.tabs);
      for (let fkey in fields) {
        let f3 = fields[fkey];
        if (f3.df.depends_on || f3.df.mandatory_depends_on || f3.df.read_only_depends_on) {
          has_dep = true;
          break;
        }
      }
      if (!has_dep)
        return;
      for (let i3 = fields.length - 1; i3 >= 0; i3--) {
        let f3 = fields[i3];
        f3.guardian_has_value = true;
        if (f3.df.depends_on) {
          f3.guardian_has_value = this.evaluate_depends_on_value(f3.df.depends_on);
          if (f3.guardian_has_value) {
            if (f3.df.hidden_due_to_dependency) {
              f3.df.hidden_due_to_dependency = false;
              f3.refresh();
            }
          } else {
            if (!f3.df.hidden_due_to_dependency) {
              f3.df.hidden_due_to_dependency = true;
              f3.refresh();
            }
          }
        }
        if (f3.df.mandatory_depends_on) {
          this.set_dependant_property(f3.df.mandatory_depends_on, f3.df.fieldname, "reqd");
        }
        if (f3.df.read_only_depends_on) {
          this.set_dependant_property(
            f3.df.read_only_depends_on,
            f3.df.fieldname,
            "read_only"
          );
        }
      }
      this.refresh_section_count();
    }
    set_dependant_property(condition, fieldname, property) {
      let set_property = this.evaluate_depends_on_value(condition);
      let value2 = set_property ? 1 : 0;
      let form_obj;
      if (this.frm) {
        form_obj = this.frm;
      } else if (this.is_dialog || this.doctype === "Web Form") {
        form_obj = this;
      }
      if (form_obj) {
        if (this.doc && this.doc.parent && this.doc.parentfield) {
          form_obj.setting_dependency = true;
          form_obj.set_df_property(
            this.doc.parentfield,
            property,
            value2,
            this.doc.parent,
            fieldname,
            this.doc.name
          );
          form_obj.setting_dependency = false;
          this.fields_dict[fieldname] && this.fields_dict[fieldname].refresh();
        } else {
          form_obj.set_df_property(fieldname, property, value2);
        }
      }
    }
    evaluate_depends_on_value(expression) {
      let out = null;
      let doc2 = this.doc;
      if (!doc2 && this.get_values) {
        doc2 = this.get_values(true);
      }
      if (!doc2) {
        return;
      }
      let parent = this.frm ? this.frm.doc : this.doc || null;
      if (typeof expression === "boolean") {
        out = expression;
      } else if (typeof expression === "function") {
        out = expression(doc2);
      } else if (expression.substr(0, 5) == "eval:") {
        try {
          out = frappe.utils.eval(expression.substr(5), { doc: doc2, parent });
          if (parent && parent.istable && expression.includes("is_submittable")) {
            out = true;
          }
        } catch (e2) {
          frappe.throw(__('Invalid "depends_on" expression'));
        }
      } else if (expression.substr(0, 3) == "fn:" && this.frm) {
        out = this.frm.script_manager.trigger(
          expression.substr(3),
          this.doctype,
          this.docname
        );
      } else {
        var value2 = doc2[expression];
        if ($.isArray(value2)) {
          out = !!value2.length;
        } else {
          out = !!value2;
        }
      }
      return out;
    }
  };

  // frappe/public/js/frappe/ui/field_group.js
  frappe.provide("frappe.ui");
  frappe.ui.FieldGroup = class FieldGroup extends frappe.ui.form.Layout {
    constructor(opts) {
      super(opts);
      this.dirty = false;
      $.each(this.fields || [], function(i3, f3) {
        if (!f3.fieldname && f3.label) {
          f3.fieldname = f3.label.replace(/ /g, "_").toLowerCase();
        }
      });
      if (this.values) {
        this.set_values(this.values);
      }
    }
    make() {
      var me2 = this;
      if (this.fields) {
        super.make();
        this.refresh();
        $.each(this.fields_list, function(i3, field) {
          if (field.df["default"]) {
            let def_value = field.df["default"];
            if (def_value == "Today" && field.df["fieldtype"] == "Date") {
              def_value = frappe.datetime.get_today();
            }
            field.set_input(def_value);
            me2.refresh_dependency();
          }
        });
        if (!this.no_submit_on_enter) {
          this.catch_enter_as_submit();
        }
        $(this.wrapper).find("input, select").on("change awesomplete-selectcomplete", () => {
          this.dirty = true;
          frappe.run_serially([
            () => frappe.timeout(0.1),
            () => me2.refresh_dependency()
          ]);
        });
      }
    }
    focus_on_first_input() {
      if (this.no_focus)
        return;
      $.each(this.fields_list, function(i3, f3) {
        if (!in_list(["Date", "Datetime", "Time", "Check"], f3.df.fieldtype) && f3.set_focus) {
          f3.set_focus();
          return false;
        }
      });
    }
    catch_enter_as_submit() {
      var me2 = this;
      $(this.body).find('input[type="text"], input[type="password"], select').keypress(function(e2) {
        if (e2.which == 13) {
          if (me2.has_primary_action) {
            e2.preventDefault();
            me2.get_primary_btn().trigger("click");
          }
        }
      });
    }
    get_input(fieldname) {
      var field = this.fields_dict[fieldname];
      return $(field.txt ? field.txt : field.input);
    }
    get_field(fieldname) {
      return this.fields_dict[fieldname];
    }
    get_values(ignore_errors, check_invalid) {
      var ret = {};
      var errors = [];
      let invalid = [];
      for (var key2 in this.fields_dict) {
        var f3 = this.fields_dict[key2];
        if (f3.get_value) {
          var v2 = f3.get_value();
          if (f3.df.reqd && is_null(typeof v2 === "string" ? strip_html(v2) : v2))
            errors.push(__(f3.df.label));
          if (f3.df.reqd && f3.df.fieldtype === "Text Editor" && is_null(strip_html(cstr(v2))))
            errors.push(__(f3.df.label));
          if (!is_null(v2))
            ret[f3.df.fieldname] = v2;
        }
        if (this.is_dialog && f3.df.reqd && !f3.value) {
          f3.refresh_input();
        }
        if (f3.df.invalid) {
          invalid.push(__(f3.df.label));
        }
      }
      if (errors.length && !ignore_errors) {
        frappe.msgprint({
          title: __("Missing Values Required"),
          message: __("Following fields have missing values:") + "<br><br><ul><li>" + errors.join("<li>") + "</ul>",
          indicator: "orange"
        });
        return null;
      }
      if (invalid.length && check_invalid) {
        frappe.msgprint({
          title: __("Inavlid Values"),
          message: __("Following fields have invalid values:") + "<br><br><ul><li>" + invalid.join("<li>") + "</ul>",
          indicator: "orange"
        });
        return null;
      }
      return ret;
    }
    get_value(key2) {
      var f3 = this.fields_dict[key2];
      return f3 && (f3.get_value ? f3.get_value() : null);
    }
    set_value(key2, val2) {
      return new Promise((resolve) => {
        var f3 = this.fields_dict[key2];
        if (f3) {
          f3.set_value(val2).then(() => {
            var _a;
            (_a = f3.set_input) == null ? void 0 : _a.call(f3, val2);
            this.refresh_dependency();
            resolve();
          });
        } else {
          resolve();
        }
      });
    }
    has_field(fieldname) {
      return !!this.fields_dict[fieldname];
    }
    set_input(key2, val2) {
      return this.set_value(key2, val2);
    }
    set_values(dict) {
      let promises = [];
      for (var key2 in dict) {
        if (this.fields_dict[key2]) {
          promises.push(this.set_value(key2, dict[key2]));
        }
      }
      return Promise.all(promises);
    }
    clear() {
      for (var key2 in this.fields_dict) {
        var f3 = this.fields_dict[key2];
        if (f3 && f3.set_input) {
          f3.set_input(f3.df["default"] || "");
        }
      }
    }
    set_df_property(fieldname, prop, value2) {
      if (!fieldname) {
        return;
      }
      const field = this.get_field(fieldname);
      field.df[prop] = value2;
      field.refresh();
    }
  };

  // frappe/public/js/frappe/ui/dialog.js
  frappe.provide("frappe.ui");
  window.cur_dialog = null;
  frappe.ui.open_dialogs = [];
  frappe.ui.Dialog = class Dialog extends frappe.ui.FieldGroup {
    constructor(opts) {
      super();
      this.display = false;
      this.is_dialog = true;
      $.extend(this, { animate: true, size: null }, opts);
      this.make();
    }
    make() {
      this.$wrapper = frappe.get_modal("", "");
      if (this.static) {
        this.$wrapper.modal({
          backdrop: "static",
          keyboard: false
        });
        this.get_close_btn().hide();
      }
      if (!this.size)
        this.set_modal_size();
      this.wrapper = this.$wrapper.find(".modal-dialog").get(0);
      if (this.size == "small")
        $(this.wrapper).addClass("modal-sm");
      else if (this.size == "large")
        $(this.wrapper).addClass("modal-lg");
      else if (this.size == "extra-large")
        $(this.wrapper).addClass("modal-xl");
      this.make_head();
      this.modal_body = this.$wrapper.find(".modal-body");
      this.$body = $("<div></div>").appendTo(this.modal_body);
      this.body = this.$body.get(0);
      this.$message = $('<div class="hide modal-message"></div>').appendTo(this.modal_body);
      this.header = this.$wrapper.find(".modal-header");
      this.footer = this.$wrapper.find(".modal-footer");
      this.standard_actions = this.footer.find(".standard-actions");
      this.custom_actions = this.footer.find(".custom-actions");
      this.set_indicator();
      super.make();
      this.refresh_section_collapse();
      this.action = this.action || { primary: {}, secondary: {} };
      if (this.primary_action || this.action.primary && this.action.primary.onsubmit) {
        this.set_primary_action(
          this.primary_action_label || this.action.primary.label || __("Submit", null, "Primary action in dialog"),
          this.primary_action || this.action.primary.onsubmit
        );
      }
      if (this.secondary_action) {
        this.set_secondary_action(this.secondary_action);
      }
      if (this.secondary_action_label || this.action.secondary && this.action.secondary.label) {
        this.set_secondary_action_label(
          this.secondary_action_label || this.action.secondary.label
        );
      }
      if (this.minimizable) {
        this.header.find(".title-section").click(() => this.is_minimized && this.toggle_minimize());
        this.get_minimize_btn().removeClass("hide").on("click", () => this.toggle_minimize());
      }
      var me2 = this;
      this.$wrapper.on("hide.bs.modal", function() {
        var _a;
        me2.display = false;
        me2.is_minimized = false;
        me2.hide_scrollbar(false);
        (_a = frappe.ui.form.get_open_grid_form()) == null ? void 0 : _a.hide_form();
        if (frappe.ui.open_dialogs[frappe.ui.open_dialogs.length - 1] === me2) {
          frappe.ui.open_dialogs.pop();
          if (frappe.ui.open_dialogs.length) {
            window.cur_dialog = frappe.ui.open_dialogs[frappe.ui.open_dialogs.length - 1];
          } else {
            window.cur_dialog = null;
          }
        }
        me2.onhide && me2.onhide();
        me2.on_hide && me2.on_hide();
      }).on("shown.bs.modal", function() {
        me2.display = true;
        window.cur_dialog = me2;
        frappe.ui.open_dialogs.push(me2);
        me2.focus_on_first_input();
        me2.hide_scrollbar(true);
        me2.on_page_show && me2.on_page_show();
        $(document).trigger("frappe.ui.Dialog:shown");
        $(document).off("focusin.modal");
      }).on("scroll", function() {
        var $input = $("input:focus");
        if ($input.length && ["Date", "Datetime", "Time"].includes($input.attr("data-fieldtype"))) {
          $input.blur();
        }
      });
    }
    set_modal_size() {
      if (!this.fields) {
        this.size = "";
        return;
      }
      let col_brk = 0;
      let cur_col_brk = 0;
      this.fields.forEach((field) => {
        if (field.fieldtype == "Column Break") {
          cur_col_brk++;
          if (cur_col_brk > col_brk) {
            col_brk = cur_col_brk;
          }
        } else if (field.fieldtype == "Section Break") {
          cur_col_brk = 0;
        }
      });
      this.size = col_brk >= 4 ? "extra-large" : col_brk >= 2 ? "large" : "";
    }
    get_primary_btn() {
      return this.standard_actions.find(".btn-primary");
    }
    get_minimize_btn() {
      return this.$wrapper.find(".modal-header .btn-modal-minimize");
    }
    set_message(text) {
      this.$message.removeClass("hide");
      this.$body.addClass("hide");
      this.$message.text(text);
    }
    clear_message() {
      this.$message.addClass("hide");
      this.$body.removeClass("hide");
    }
    clear() {
      super.clear();
      this.clear_message();
    }
    set_primary_action(label, click) {
      this.footer.removeClass("hide");
      this.has_primary_action = true;
      var me2 = this;
      return this.get_primary_btn().removeClass("hide").html(label).off("click").on("click", function() {
        me2.primary_action_fulfilled = true;
        var values = me2.get_values();
        if (!values)
          return;
        click && click.apply(me2, [values]);
      });
    }
    set_secondary_action(click) {
      this.footer.removeClass("hide");
      return this.get_secondary_btn().removeClass("hide").off("click").on("click", click);
    }
    set_secondary_action_label(label) {
      this.get_secondary_btn().removeClass("hide").html(label);
    }
    disable_primary_action() {
      this.get_primary_btn().addClass("disabled");
    }
    enable_primary_action() {
      this.get_primary_btn().removeClass("disabled");
    }
    make_head() {
      this.set_title(this.title);
    }
    set_title(t3) {
      this.$wrapper.find(".modal-title").html(t3);
    }
    set_indicator() {
      if (this.indicator) {
        this.header.find(".indicator").removeClass().addClass("indicator " + this.indicator);
      }
    }
    show() {
      if (this.animate) {
        this.$wrapper.addClass("fade");
      } else {
        this.$wrapper.removeClass("fade");
      }
      this.$wrapper.modal("show");
      this.$wrapper.removeClass("modal-minimize");
      if (this.minimizable && this.is_minimized) {
        $(".modal-backdrop").toggle();
        this.is_minimized = false;
      }
      this.clear_message();
      this.primary_action_fulfilled = false;
      this.is_visible = true;
      return this;
    }
    hide() {
      this.$wrapper.modal("hide");
      this.is_visible = false;
    }
    get_close_btn() {
      return this.$wrapper.find(".btn-modal-close");
    }
    get_secondary_btn() {
      return this.standard_actions.find(".btn-modal-secondary");
    }
    no_cancel() {
      this.get_close_btn().toggle(false);
    }
    cancel() {
      this.get_close_btn().trigger("click");
    }
    toggle_minimize() {
      $(".modal-backdrop").toggle();
      let modal = this.$wrapper.closest(".modal").toggleClass("modal-minimize");
      modal.attr("tabindex") ? modal.removeAttr("tabindex") : modal.attr("tabindex", -1);
      this.is_minimized = !this.is_minimized;
      const icon = this.is_minimized ? "expand" : "collapse";
      this.get_minimize_btn().html(frappe.utils.icon(icon));
      this.on_minimize_toggle && this.on_minimize_toggle(this.is_minimized);
      this.header.find(".modal-title").toggleClass("cursor-pointer");
      this.hide_scrollbar(!this.is_minimized);
    }
    hide_scrollbar(bool) {
      $("body").css("overflow", bool ? "hidden" : "auto");
    }
    add_custom_action(label, action, css_class = null) {
      this.footer.removeClass("hide");
      let action_button = $(`
			<button class="btn btn-secondary btn-sm ${css_class || ""}">
				${label}
			</button>
		`);
      this.custom_actions.append(action_button);
      action && action_button.click(action);
    }
  };
  frappe.ui.hide_open_dialog = () => {
    if (window.cur_dialog) {
      if (!cur_dialog.minimizable) {
        cur_dialog.hide();
      } else if (!cur_dialog.is_minimized) {
        cur_dialog.toggle_minimize();
      }
    }
  };

  // frappe/public/js/frappe/ui/messages.js
  frappe.provide("frappe.messages");
  frappe.messages.waiting = function(parent, msg) {
    return $(frappe.messages.get_waiting_message(msg)).appendTo(parent);
  };
  frappe.messages.get_waiting_message = function(msg) {
    return repl(
      '<div class="msg-box" style="width: 63%; margin: 30px auto;">		<p class="text-center">%(msg)s</p></div>',
      { msg }
    );
  };
  frappe.throw = function(msg) {
    if (typeof msg === "string") {
      msg = { message: msg, title: __("Error") };
    }
    if (!msg.indicator)
      msg.indicator = "red";
    frappe.msgprint(msg);
    throw new Error(msg.message);
  };
  frappe.confirm = function(message, confirm_action, reject_action) {
    var d3 = new frappe.ui.Dialog({
      title: __("Confirm", null, "Title of confirmation dialog"),
      primary_action_label: __("Yes", null, "Approve confirmation dialog"),
      primary_action: () => {
        confirm_action && confirm_action();
        d3.hide();
      },
      secondary_action_label: __("No", null, "Dismiss confirmation dialog"),
      secondary_action: () => d3.hide()
    });
    d3.$body.append(`<p class="frappe-confirm-message">${message}</p>`);
    d3.show();
    d3.confirm_dialog = true;
    if (reject_action) {
      d3.onhide = () => {
        if (!d3.primary_action_fulfilled) {
          reject_action();
        }
      };
    }
    return d3;
  };
  frappe.warn = function(title, message_html, proceed_action, primary_label, is_minimizable) {
    const d3 = new frappe.ui.Dialog({
      title,
      indicator: "red",
      primary_action_label: primary_label,
      primary_action: () => {
        if (proceed_action)
          proceed_action();
        d3.hide();
      },
      secondary_action_label: __("Cancel", null, "Secondary button in warning dialog"),
      secondary_action: () => d3.hide(),
      minimizable: is_minimizable
    });
    d3.$body.append(`<div class="frappe-confirm-message">${message_html}</div>`);
    d3.standard_actions.find(".btn-primary").removeClass("btn-primary").addClass("btn-danger");
    d3.show();
    return d3;
  };
  frappe.prompt = function(fields, callback, title, primary_label) {
    if (typeof fields === "string") {
      fields = [
        {
          label: fields,
          fieldname: "value",
          fieldtype: "Data",
          reqd: 1
        }
      ];
    }
    if (!$.isArray(fields))
      fields = [fields];
    var d3 = new frappe.ui.Dialog({
      fields,
      title: title || __("Enter Value", null, "Title of prompt dialog")
    });
    d3.set_primary_action(
      primary_label || __("Submit", null, "Primary action of prompt dialog"),
      function() {
        var values = d3.get_values();
        if (!values) {
          return;
        }
        d3.hide();
        callback(values);
      }
    );
    d3.show();
    return d3;
  };
  frappe.msgprint = function(msg, title, is_minimizable) {
    if (!msg)
      return;
    let data;
    if ($.isPlainObject(msg)) {
      data = msg;
    } else {
      if (typeof msg === "string" && msg.substr(0, 1) === "{") {
        data = JSON.parse(msg);
      } else {
        data = { message: msg, title };
      }
    }
    if (!data.indicator) {
      data.indicator = "blue";
    }
    if (data.as_list) {
      const list_rows = data.message.map((m3) => `<li>${m3}</li>`).join("");
      data.message = `<ul style="padding-left: 20px">${list_rows}</ul>`;
    }
    if (data.as_table) {
      const rows = data.message.map((row) => {
        const cols = row.map((col) => `<td>${col}</td>`).join("");
        return `<tr>${cols}</tr>`;
      }).join("");
      data.message = `<table class="table table-bordered" style="margin: 0;">${rows}</table>`;
    }
    if (data.message instanceof Array) {
      let messages = data.message;
      const exceptions = messages.map((m3) => {
        if (typeof m3 == "string") {
          return JSON.parse(m3);
        } else {
          return m3;
        }
      }).filter((m3) => m3.raise_exception);
      if (exceptions.length) {
        messages = exceptions;
      }
      messages.forEach(function(m3) {
        frappe.msgprint(m3);
      });
      return;
    }
    if (data.alert || data.toast) {
      frappe.show_alert(data);
      return;
    }
    if (!frappe.msg_dialog) {
      frappe.msg_dialog = new frappe.ui.Dialog({
        title: __("Message"),
        onhide: function() {
          if (frappe.msg_dialog.custom_onhide) {
            frappe.msg_dialog.custom_onhide();
          }
          frappe.msg_dialog.msg_area.empty();
        },
        minimizable: data.is_minimizable || is_minimizable
      });
      frappe.msg_dialog.msg_area = $('<div class="msgprint">').appendTo(frappe.msg_dialog.body);
      frappe.msg_dialog.clear = function() {
        frappe.msg_dialog.msg_area.empty();
      };
      frappe.msg_dialog.indicator = frappe.msg_dialog.header.find(".indicator");
    }
    if (data.primary_action) {
      if (data.primary_action.server_action && typeof data.primary_action.server_action === "string") {
        data.primary_action.action = () => {
          frappe.call({
            method: data.primary_action.server_action,
            args: {
              args: data.primary_action.args
            },
            callback() {
              if (data.primary_action.hide_on_success) {
                frappe.hide_msgprint();
              }
            }
          });
        };
      }
      if (data.primary_action.client_action && typeof data.primary_action.client_action === "string") {
        let parts2 = data.primary_action.client_action.split(".");
        let obj = window;
        for (let part of parts2) {
          obj = obj[part];
        }
        data.primary_action.action = () => {
          if (typeof obj === "function") {
            obj(data.primary_action.args);
          }
        };
      }
      frappe.msg_dialog.set_primary_action(
        __(data.primary_action.label || data.primary_action_label || "Done"),
        data.primary_action.action
      );
    } else {
      if (frappe.msg_dialog.has_primary_action) {
        frappe.msg_dialog.get_primary_btn().addClass("hide");
        frappe.msg_dialog.has_primary_action = false;
      }
    }
    if (data.secondary_action) {
      frappe.msg_dialog.set_secondary_action(data.secondary_action.action);
      frappe.msg_dialog.set_secondary_action_label(__(data.secondary_action.label || "Close"));
    }
    if (data.message == null) {
      data.message = "";
    }
    if (data.message.search(/<br>|<p>|<li>/) == -1) {
      msg = frappe.utils.replace_newlines(data.message);
    }
    var msg_exists = false;
    if (data.clear) {
      frappe.msg_dialog.msg_area.empty();
    } else {
      msg_exists = frappe.msg_dialog.msg_area.html();
    }
    if (data.title || !msg_exists) {
      frappe.msg_dialog.set_title(
        data.title || __("Message", null, "Default title of the message dialog")
      );
    }
    if (data.indicator) {
      frappe.msg_dialog.indicator.removeClass().addClass("indicator " + data.indicator);
    } else {
      frappe.msg_dialog.indicator.removeClass().addClass("hidden");
    }
    if (data.wide) {
      if (frappe.msg_dialog.wrapper.classList.contains("msgprint-dialog")) {
        frappe.msg_dialog.wrapper.classList.remove("msgprint-dialog");
      }
    } else {
      frappe.msg_dialog.wrapper.classList.add("msgprint-dialog");
    }
    if (msg_exists) {
      frappe.msg_dialog.msg_area.append("<hr>");
    }
    frappe.msg_dialog.msg_area.append(data.message);
    frappe.msg_dialog.$wrapper.css("z-index", 2e3);
    frappe.msg_dialog.show();
    return frappe.msg_dialog;
  };
  window.msgprint = frappe.msgprint;
  frappe.hide_msgprint = function(instant) {
    if (frappe.msg_dialog && frappe.msg_dialog.msg_area) {
      frappe.msg_dialog.msg_area.empty();
    }
    if (frappe.msg_dialog && frappe.msg_dialog.$wrapper.is(":visible")) {
      if (instant) {
        frappe.msg_dialog.$wrapper.removeClass("fade");
      }
      frappe.msg_dialog.hide();
      if (instant) {
        frappe.msg_dialog.$wrapper.addClass("fade");
      }
    }
  };
  frappe.update_msgprint = function(html) {
    if (!frappe.msg_dialog || frappe.msg_dialog && !frappe.msg_dialog.$wrapper.is(":visible")) {
      frappe.msgprint(html);
    } else {
      frappe.msg_dialog.msg_area.html(html);
    }
  };
  frappe.verify_password = function(callback) {
    frappe.prompt(
      {
        fieldname: "password",
        label: __("Enter your password"),
        fieldtype: "Password",
        reqd: 1
      },
      function(data) {
        frappe.call({
          method: "frappe.core.doctype.user.user.verify_password",
          args: {
            password: data.password
          },
          callback: function(r2) {
            if (!r2.exc) {
              callback();
            }
          }
        });
      },
      __("Verify Password"),
      __("Verify")
    );
  };
  frappe.show_progress = (title, count, total = 100, description, hide_on_completion = false) => {
    let dialog;
    if (frappe.cur_progress && frappe.cur_progress.title === title && frappe.cur_progress.is_visible) {
      dialog = frappe.cur_progress;
    } else {
      dialog = new frappe.ui.Dialog({
        title
      });
      dialog.progress = $(`<div>
			<div class="progress">
				<div class="progress-bar"></div>
			</div>
			<p class="description text-muted small"></p>
		</div`).appendTo(dialog.body);
      dialog.progress_bar = dialog.progress.css({ "margin-top": "10px" }).find(".progress-bar");
      dialog.$wrapper.removeClass("fade");
      dialog.show();
      frappe.cur_progress = dialog;
    }
    if (description) {
      dialog.progress.find(".description").text(description);
    }
    dialog.percent = cint(flt(count) * 100 / total);
    dialog.progress_bar.css({ width: dialog.percent + "%" });
    if (hide_on_completion && dialog.percent === 100) {
      setTimeout(frappe.hide_progress, 500);
    }
    frappe.cur_progress.$wrapper.css("z-index", 2e3);
    return dialog;
  };
  frappe.hide_progress = function() {
    if (frappe.cur_progress) {
      frappe.cur_progress.hide();
      frappe.cur_progress = null;
    }
  };
  frappe.show_alert = frappe.toast = function(message, seconds = 7, actions = {}) {
    let indicator_icon_map = {
      orange: "solid-warning",
      yellow: "solid-warning",
      blue: "solid-info",
      green: "solid-success",
      red: "solid-error"
    };
    if (typeof message === "string") {
      message = {
        message
      };
    }
    if (!$("#dialog-container").length) {
      $('<div id="dialog-container"><div id="alert-container"></div></div>').appendTo("body");
    }
    let icon;
    if (message.indicator) {
      icon = indicator_icon_map[message.indicator.toLowerCase()] || "solid-" + message.indicator;
    } else {
      icon = "solid-info";
    }
    const indicator = message.indicator || "blue";
    const div = $(`
		<div class="alert desk-alert ${indicator}" role="alert">
			<div class="alert-message-container">
				<div class="alert-title-container">
					<div>${frappe.utils.icon(icon, "lg")}</div>
					<div class="alert-message">${message.message}</div>
				</div>
				<div class="alert-subtitle">${message.subtitle || ""}</div>
			</div>
			<div class="alert-body" style="display: none"></div>
			<a class="close">${frappe.utils.icon("close-alt")}</a>
		</div>
	`);
    div.hide().appendTo("#alert-container").show();
    if (message.body) {
      div.find(".alert-body").show().html(message.body);
    }
    div.find(".close, button").click(function() {
      div.addClass("out");
      setTimeout(() => div.remove(), 800);
      return false;
    });
    Object.keys(actions).map((key2) => {
      div.find(`[data-action=${key2}]`).on("click", actions[key2]);
    });
    if (seconds > 2) {
      seconds = seconds - 0.8;
    }
    setTimeout(() => {
      div.addClass("out");
      setTimeout(() => div.remove(), 800);
      return false;
    }, seconds * 1e3);
    return div;
  };

  // frappe/public/js/frappe/ui/alt_keyboard_shortcuts.js
  frappe.provide("frappe.ui.keys");
  var shortcut_groups = /* @__PURE__ */ new WeakMap();
  var shortcut_group_list = [];
  frappe.ui.keys.shortcut_groups = shortcut_groups;
  frappe.ui.keys.get_shortcut_group = (parent) => {
    if (!shortcut_groups.has(parent)) {
      shortcut_groups.set(parent, new frappe.ui.keys.AltShortcutGroup());
    }
    return shortcut_groups.get(parent);
  };
  var listener_added = false;
  var $current_dropdown = null;
  var $body = $(document.body);
  frappe.ui.keys.bind_shortcut_group_event = () => {
    if (listener_added)
      return;
    listener_added = true;
    function highlight_alt_shortcuts() {
      if ($current_dropdown) {
        $current_dropdown.addClass("alt-pressed");
        $body.removeClass("alt-pressed");
      } else {
        $body.addClass("alt-pressed");
        $current_dropdown && $current_dropdown.removeClass("alt-pressed");
      }
    }
    function unhighlight_alt_shortcuts() {
      $current_dropdown && $current_dropdown.removeClass("alt-pressed");
      $body.removeClass("alt-pressed");
    }
    $(document).on("keydown", (e2) => {
      let key2 = (frappe.ui.keys.key_map[e2.which] || "").toLowerCase();
      if (key2 === "alt") {
        highlight_alt_shortcuts();
      }
      if (e2.shiftKey || e2.ctrlKey || e2.metaKey) {
        return;
      }
      if (key2 && e2.altKey) {
        let shortcut = get_shortcut_for_key(key2);
        if (shortcut) {
          e2.preventDefault();
          shortcut.$target[0].click();
        }
        highlight_alt_shortcuts();
      }
    });
    $(document).on("keyup", (e2) => {
      if (e2.key === "Alt") {
        unhighlight_alt_shortcuts();
      }
    });
    $(document).on("mousemove", () => {
      unhighlight_alt_shortcuts();
    });
  };
  function get_shortcut_for_key(key2) {
    let shortcuts = shortcut_group_list.filter((shortcut_group) => key2 in shortcut_group.shortcuts_dict).map((shortcut_group) => shortcut_group.shortcuts_dict[key2]).filter((shortcut2) => shortcut2.$target.is(":visible"));
    let shortcut = null;
    if ($current_dropdown && $current_dropdown.is(".open")) {
      shortcut = shortcuts.find(
        (shortcut2) => $.contains($current_dropdown[0], shortcut2.$target[0])
      );
    }
    if (shortcut)
      return shortcut;
    shortcut = shortcuts.find(
      (shortcut2) => $.contains(window.cur_page.page.page.wrapper[0], shortcut2.$target[0])
    );
    return shortcut;
  }
  frappe.ui.keys.AltShortcutGroup = class AltShortcutGroup {
    constructor() {
      this.shortcuts_dict = {};
      $current_dropdown = null;
      this.bind_events();
      frappe.ui.keys.bind_shortcut_group_event();
      shortcut_group_list.push(this);
    }
    bind_events() {
      $(document).on("show.bs.dropdown", (e2) => {
        $current_dropdown && $current_dropdown.removeClass("alt-pressed");
        let $target = $(e2.target);
        if ($target.is(".dropdown, .btn-group")) {
          $current_dropdown = $target;
        }
      });
      $(document).on("hide.bs.dropdown", () => {
        $current_dropdown && $current_dropdown.removeClass("alt-pressed");
        $current_dropdown = null;
      });
    }
    add($target, $text_el) {
      if (!$text_el) {
        $text_el = $target;
      }
      let text_content = $text_el.text().trim();
      let letters = text_content.split("");
      let shortcut_letter = letters.find((letter) => {
        letter = letter.toLowerCase();
        let is_valid_char = letter >= "a" && letter <= "z";
        return !this.is_taken(letter) && is_valid_char;
      });
      if (!shortcut_letter) {
        $text_el.attr("data-label", encodeURIComponent(text_content));
        return;
      }
      for (let key2 in this.shortcuts_dict) {
        let shortcut2 = this.shortcuts_dict[key2];
        if (shortcut2.text === text_content) {
          shortcut2.$target = $target;
          shortcut2.$text_el = $text_el;
          this.underline_text(shortcut2);
          return;
        }
      }
      let shortcut = {
        $target,
        $text_el,
        letter: shortcut_letter,
        text: text_content
      };
      this.shortcuts_dict[shortcut_letter.toLowerCase()] = shortcut;
      this.underline_text(shortcut);
    }
    underline_text(shortcut) {
      shortcut.$text_el.attr("data-label", encodeURIComponent(shortcut.text));
      let underline_el_found = false;
      let text_html = shortcut.text.split("").map((letter) => {
        if (letter === shortcut.letter && !underline_el_found) {
          letter = `<span class="alt-underline">${letter}</span>`;
          underline_el_found = true;
        }
        return letter;
      }).join("");
      text_html = `<span>${text_html}</span>`;
      let original_text_html = shortcut.$text_el.html();
      text_html = original_text_html.replace(shortcut.text.trim(), text_html.trim());
      shortcut.$text_el.html(text_html);
    }
    is_taken(letter) {
      let is_in_global_shortcut = frappe.ui.keys.standard_shortcuts.filter((s2) => !s2.page).some((s2) => s2.shortcut === `alt+${letter}`);
      return letter in this.shortcuts_dict || is_in_global_shortcut;
    }
  };

  // frappe/public/js/frappe/ui/keyboard.js
  frappe.provide("frappe.ui.keys.handlers");
  frappe.ui.keys.setup = function() {
    $(window).on("keydown", function(e2) {
      var key2 = frappe.ui.keys.get_key(e2);
      if (frappe.ui.keys.handlers[key2]) {
        var out = null;
        for (var i3 = 0, l2 = frappe.ui.keys.handlers[key2].length; i3 < l2; i3++) {
          var handler = frappe.ui.keys.handlers[key2][i3];
          var _out = handler.apply(this, [e2]);
          if (_out === false) {
            out = _out;
          }
        }
        return out;
      }
    });
  };
  var standard_shortcuts = [];
  frappe.ui.keys.standard_shortcuts = standard_shortcuts;
  frappe.ui.keys.add_shortcut = ({
    shortcut,
    action,
    description,
    page,
    target,
    condition,
    ignore_inputs = false
  } = {}) => {
    if (target instanceof jQuery) {
      let $target = target;
      action = () => {
        $target[0].click();
      };
    }
    if (!condition) {
      condition = () => true;
    }
    let handler = (e2) => {
      let $focused_element = $(document.activeElement);
      let is_input_focused = $focused_element.is(
        "input, select, textarea, [contenteditable=true]"
      );
      if (is_input_focused && !ignore_inputs)
        return;
      if (!condition())
        return;
      if (action && (!page || page.wrapper.is(":visible"))) {
        let prevent_default = action(e2);
        if (prevent_default || prevent_default === void 0) {
          e2.preventDefault();
        }
      }
    };
    handler.page = page;
    frappe.ui.keys.off(shortcut, page);
    frappe.ui.keys.on(shortcut, handler);
    let existing_shortcut_index = standard_shortcuts.findIndex((s2) => s2.shortcut === shortcut);
    let new_shortcut = { shortcut, action, description, page, condition };
    if (existing_shortcut_index === -1) {
      standard_shortcuts.push(new_shortcut);
    } else {
      standard_shortcuts[existing_shortcut_index] = new_shortcut;
    }
  };
  frappe.ui.keys.show_keyboard_shortcut_dialog = () => {
    if (frappe.ui.keys.is_dialog_shown)
      return;
    let global_shortcuts = standard_shortcuts.filter((shortcut) => !shortcut.page);
    let current_page_shortcuts = standard_shortcuts.filter(
      (shortcut) => shortcut.page && shortcut.page === window.cur_page.page.page
    );
    let grid_shortcuts = standard_shortcuts.filter(
      (shortcut) => shortcut.page && shortcut.page === window.cur_page.page.frm
    );
    function generate_shortcuts_html(shortcuts, heading) {
      if (!shortcuts.length) {
        return "";
      }
      let html = shortcuts.filter((s2) => s2.condition ? s2.condition() : true).filter((s2) => !!s2.description).map((shortcut) => {
        let shortcut_label = shortcut.shortcut.split("+").map(frappe.utils.to_title_case).join("+");
        if (frappe.utils.is_mac()) {
          shortcut_label = shortcut_label.replace("Ctrl", "\u2318");
        }
        return `<tr>
					<td width="40%"><kbd>${shortcut_label}</kbd></td>
					<td width="60%">${shortcut.description || ""}</td>
				</tr>`;
      }).join("");
      if (!html)
        return "";
      html = `<h5 style="margin: 0;">${heading}</h5>
			<table style="margin-top: 10px;" class="table table-bordered">
				${html}
			</table>`;
      return html;
    }
    let global_shortcuts_html = generate_shortcuts_html(global_shortcuts, __("Global Shortcuts"));
    let current_page_shortcuts_html = generate_shortcuts_html(
      current_page_shortcuts,
      __("Page Shortcuts")
    );
    let grid_shortcuts_html = generate_shortcuts_html(grid_shortcuts, __("Grid Shortcuts"));
    let dialog = new frappe.ui.Dialog({
      title: __("Keyboard Shortcuts"),
      on_hide() {
        frappe.ui.keys.is_dialog_shown = false;
      }
    });
    dialog.$body.append(global_shortcuts_html);
    dialog.$body.append(current_page_shortcuts_html);
    dialog.$body.append(grid_shortcuts_html);
    dialog.$body.append(`
		<div class="text-muted">
			${__("Press Alt Key to trigger additional shortcuts in Menu and Sidebar")}
		</div>
	`);
    dialog.show();
    frappe.ui.keys.is_dialog_shown = true;
  };
  frappe.ui.keys.get_key = function(e2) {
    var keycode = e2.keyCode || e2.which;
    var key2 = frappe.ui.keys.key_map[keycode] || String.fromCharCode(keycode);
    if (e2.ctrlKey || e2.metaKey) {
      key2 = "ctrl+" + key2;
    }
    if (e2.shiftKey) {
      key2 = "shift+" + key2;
    }
    if (e2.altKey) {
      key2 = "alt+" + key2;
    }
    if (e2.altKey && e2.ctrlKey) {
      return key2.toLowerCase();
    }
    return key2.toLowerCase();
  };
  frappe.ui.keys.on = function(key2, handler) {
    if (!frappe.ui.keys.handlers[key2]) {
      frappe.ui.keys.handlers[key2] = [];
    }
    frappe.ui.keys.handlers[key2].push(handler);
  };
  frappe.ui.keys.off = function(key2, page) {
    let handlers = frappe.ui.keys.handlers[key2];
    if (!handlers || handlers.length === 0)
      return;
    frappe.ui.keys.handlers[key2] = handlers.filter((h2) => {
      if (!page)
        return false;
      return h2.page !== page;
    });
  };
  frappe.ui.keys.add_shortcut({
    shortcut: "ctrl+s",
    action: function(e2) {
      frappe.app.trigger_primary_action();
      e2.preventDefault();
      return false;
    },
    description: __("Trigger Primary Action"),
    ignore_inputs: true
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "ctrl+g",
    action: function(e2) {
      $("#navbar-search").focus();
      e2.preventDefault();
      return false;
    },
    description: __("Open Awesomebar")
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "ctrl+h",
    action: function(e2) {
      e2.preventDefault();
      $(".navbar-home img").click();
    },
    description: __("Navigate Home")
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "alt+s",
    action: function(e2) {
      e2.preventDefault();
      $(".dropdown-navbar-user a").eq(0).click();
    },
    description: __("Open Settings")
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "shift+/",
    action: function() {
      frappe.ui.keys.show_keyboard_shortcut_dialog();
    },
    description: __("Show Keyboard Shortcuts")
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "alt+h",
    action: function(e2) {
      e2.preventDefault();
      $(".dropdown-help a").eq(0).click();
    },
    description: __("Open Help")
  });
  frappe.ui.keys.on("escape", function(e2) {
    handle_escape_key();
  });
  frappe.ui.keys.on("esc", function(e2) {
    handle_escape_key();
  });
  frappe.ui.keys.on("enter", function(e2) {
    if (window.cur_dialog && cur_dialog.confirm_dialog) {
      cur_dialog.get_primary_btn().trigger("click");
    }
  });
  frappe.ui.keys.on("ctrl+down", function(e2) {
    var grid_row = frappe.ui.form.get_open_grid_form();
    grid_row && grid_row.toggle_view(false, function() {
      grid_row.open_next();
    });
  });
  frappe.ui.keys.on("ctrl+up", function(e2) {
    var grid_row = frappe.ui.form.get_open_grid_form();
    grid_row && grid_row.toggle_view(false, function() {
      grid_row.open_prev();
    });
  });
  frappe.ui.keys.add_shortcut({
    shortcut: "shift+ctrl+r",
    action: function() {
      frappe.ui.toolbar.clear_cache();
    },
    description: __("Clear Cache and Reload")
  });
  frappe.ui.keys.key_map = {
    8: "backspace",
    9: "tab",
    13: "enter",
    16: "shift",
    17: "ctrl",
    91: "meta",
    18: "alt",
    27: "escape",
    37: "left",
    39: "right",
    38: "up",
    40: "down",
    32: "space",
    112: "f1",
    113: "f2",
    114: "f3",
    115: "f4",
    116: "f5",
    191: "/",
    188: "<",
    190: ">"
  };
  "abcdefghijklmnopqrstuvwxyz".split("").forEach((letter, i3) => {
    frappe.ui.keys.key_map[65 + i3] = letter;
  });
  frappe.ui.keyCode = {
    ESCAPE: 27,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    ENTER: 13,
    TAB: 9,
    SPACE: 32,
    BACKSPACE: 8
  };
  function handle_escape_key() {
    var _a;
    close_grid_and_dialog();
    (_a = document.activeElement) == null ? void 0 : _a.blur();
  }
  function close_grid_and_dialog() {
    var open_row = $(".grid-row-open");
    if (open_row.length) {
      var grid_row = open_row.data("grid_row");
      grid_row.toggle_view(false);
      return false;
    }
    if (cur_dialog && !cur_dialog.no_cancel_flag && !cur_dialog.static) {
      cur_dialog.cancel();
      return false;
    }
  }

  // frappe/public/js/frappe/ui/colors.js
  frappe.provide("frappe.ui");
  frappe.ui.color = {
    get: function(color_name, shade) {
      if (color_name && shade)
        return this.get_color_shade(color_name, shade);
      if (color_name)
        return this.get_color_shade(color_name, "default");
      return frappe.ui.color_map;
    },
    get_color: function(color_name) {
      const color_names = Object.keys(frappe.ui.color_map);
      if (color_names.includes(color_name)) {
        return frappe.ui.color_map[color_name];
      } else {
        console.warn(`'color_name' can be one of ${color_names} and not ${color_name}`);
      }
    },
    get_color_map() {
      const colors = [
        "red",
        "green",
        "blue",
        "dark-green",
        "yellow",
        "gray",
        "purple",
        "pink",
        "orange"
      ];
      const shades = ["100", "300", "500", "700"];
      const style = getComputedStyle(document.body);
      let color_map = {};
      colors.forEach((color) => {
        color_map[color] = shades.map(
          (shade) => style.getPropertyValue(`--${color}-${shade}`).trim()
        );
      });
      return color_map;
    },
    get_color_shade: function(color_name, shade) {
      const shades = {
        default: 2,
        light: 1,
        "extra-light": 0,
        dark: 3
      };
      if (Object.keys(shades).includes(shade)) {
        const color = this.get_color(color_name);
        return color ? color[shades[shade]] : color_name;
      } else {
        console.warn(`'shade' can be one of ${Object.keys(shades)} and not ${shade}`);
      }
    },
    all: function() {
      return Object.values(frappe.ui.color_map).reduce((acc, curr) => acc.concat(curr), []);
    },
    names: function() {
      return Object.keys(frappe.ui.color_map);
    },
    is_standard: function(color_name) {
      if (!color_name)
        return false;
      if (color_name.startsWith("#")) {
        return this.all().includes(color_name);
      }
      return this.names().includes(color_name);
    },
    get_color_name: function(hex) {
      for (const key2 in frappe.ui.color_map) {
        const colors = frappe.ui.color_map[key2];
        if (colors.includes(hex))
          return key2;
      }
    },
    get_contrast_color: function(hex) {
      if (!this.validate_hex(hex)) {
        return;
      }
      if (!this.is_standard(hex)) {
        const brightness = this.brightness(hex);
        if (brightness < 128) {
          return this.lighten(hex, 0.5);
        }
        return this.lighten(hex, -0.5);
      }
      const color_name = this.get_color_name(hex);
      const colors = this.get_color(color_name);
      const shade_value = colors.indexOf(hex);
      if (shade_value <= 1) {
        return this.get(color_name, "dark");
      }
      return this.get(color_name, "extra-light");
    },
    validate_hex: function(hex) {
      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
    },
    lighten(color, percent) {
      var f3 = parseInt(color.slice(1), 16), t3 = percent < 0 ? 0 : 255, p2 = percent < 0 ? percent * -1 : percent, R2 = f3 >> 16, G3 = f3 >> 8 & 255, B3 = f3 & 255;
      return "#" + (16777216 + (Math.round((t3 - R2) * p2) + R2) * 65536 + (Math.round((t3 - G3) * p2) + G3) * 256 + (Math.round((t3 - B3) * p2) + B3)).toString(16).slice(1);
    },
    hex_to_rgb(hex) {
      if (hex.startsWith("#")) {
        hex = hex.substring(1);
      }
      const r2 = parseInt(hex.substring(0, 2), 16);
      const g2 = parseInt(hex.substring(2, 4), 16);
      const b2 = parseInt(hex.substring(4, 6), 16);
      return { r: r2, g: g2, b: b2 };
    },
    brightness(hex) {
      const rgb = this.hex_to_rgb(hex);
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    }
  };
  frappe.ui.color_map = frappe.ui.color.get_color_map();

  // frappe/public/js/frappe/ui/sidebar.js
  frappe.provide("frappe.ui");
  frappe.ui.Sidebar = class Sidebar {
    constructor({ wrapper, css_class }) {
      this.wrapper = wrapper;
      this.css_class = css_class;
      this.items = {};
      this.make_dom();
    }
    make_dom() {
      this.wrapper.html(`
			<div class="${this.css_class} overlay-sidebar hidden-xs hidden-sm">
			</div>
		`);
      this.$sidebar = this.wrapper.find("." + this.css_class);
    }
    add_item(item, section, h6 = false) {
      let $section, $li_item;
      if (!section && this.wrapper.find(".sidebar-menu").length === 0) {
        $section = this.get_section();
      } else {
        $section = this.get_section(section);
      }
      if (item instanceof jQuery) {
        $li_item = $(`<li>`);
        item.appendTo($li_item);
      } else {
        const className = h6 ? "h6" : "";
        const html = `<li class=${className}>
				<a ${item.href ? `href="${item.href}"` : ""}>${item.label}</a>
			</li>`;
        $li_item = $(html).click(() => item.on_click && item.on_click());
      }
      $section.append($li_item);
      if (item.name) {
        this.items[item.name] = $li_item;
      }
    }
    remove_item(name2) {
      if (this.items[name2]) {
        this.items[name2].remove();
      }
    }
    get_section(section_heading = "") {
      let $section = $(this.wrapper.find(`[data-section-heading="${section_heading}"]`));
      if ($section.length) {
        return $section;
      }
      const $section_heading = section_heading ? `<li class="h6">${section_heading}</li>` : "";
      $section = $(`
			<ul class="list-unstyled sidebar-menu" data-section-heading="${section_heading || "default"}">
				${$section_heading}
			</ul>
		`);
      this.$sidebar.append($section);
      return $section;
    }
  };

  // frappe/public/js/frappe/ui/link_preview.js
  frappe.ui.LinkPreview = class {
    constructor() {
      this.popovers_list = [];
      this.LINK_CLASSES = 'a[data-doctype], input[data-fieldtype="Link"], .popover';
      this.popover_timeout = null;
      this.setup_events();
    }
    setup_events() {
      $(document.body).on("mouseover", this.LINK_CLASSES, (e2) => {
        this.link_hovered = true;
        this.element = $(e2.currentTarget);
        this.is_link = this.element.get(0).tagName.toLowerCase() === "a";
        if (!this.element.parents().find(".popover").length) {
          this.identify_doc();
          this.popover = this.element.data("bs.popover");
          if (this.name && this.doctype) {
            this.setup_popover_control(e2);
          }
        }
      });
      this.handle_popover_hide();
    }
    identify_doc() {
      if (this.is_link) {
        this.doctype = this.element.attr("data-doctype");
        this.name = frappe.utils.unescape_html(this.element.attr("data-name"));
        this.href = this.element.attr("href");
      } else {
        this.href = this.element.parents(".control-input-wrapper").find(".control-value a").attr("href");
        this.doctype = this.element.attr("data-target");
        this.name = this.element.val();
      }
    }
    setup_popover_control(e2) {
      if (!(frappe.boot.link_preview_doctypes || []).includes(this.doctype)) {
        return;
      }
      this.element.on("change", () => {
        this.new_popover = true;
      });
      if (!this.popover || this.new_popover) {
        this.data_timeout = setTimeout(() => {
          this.create_popover(e2);
        }, 100);
      } else {
        this.popover_timeout = setTimeout(() => {
          if (this.element.is(":focus")) {
            return;
          }
          this.show_popover(e2);
        }, 1e3);
      }
    }
    create_popover(e2) {
      this.new_popover = false;
      if (this.element.is(":focus")) {
        return;
      }
      this.get_preview_data().then((preview_data) => {
        if (preview_data) {
          if (this.popover_timeout) {
            clearTimeout(this.popover_timeout);
          }
          this.popover_timeout = setTimeout(() => {
            if (this.popover && this.popover.options) {
              let new_content = this.get_popover_html(preview_data);
              this.popover.options.content = new_content;
            } else {
              this.init_preview_popover(preview_data);
            }
            this.show_popover(e2);
          }, 1e3);
        }
      });
    }
    show_popover(e2) {
      this.default_timeout = setTimeout(() => {
        this.clear_all_popovers();
      }, 1e4);
      if (!this.is_link) {
        var left = e2.pageX;
        this.element.popover("show");
        var width = $(".popover").width();
        $(".control-field-popover").css("left", left - width / 2 + "px");
      } else {
        this.element.popover("show");
      }
    }
    handle_popover_hide() {
      $(document).on("mouseout", this.LINK_CLASSES, () => {
        if (!$(".popover:hover").length) {
          this.link_hovered = false;
        }
        if (!this.link_hovered) {
          if (this.data_timeout) {
            clearTimeout(this.data_timeout);
          }
          if (this.popover_timeout) {
            clearTimeout(this.popover_timeout);
          }
          if (this.default_timeout) {
            clearTimeout(this.default_timeout);
          }
          this.clear_all_popovers();
        }
      });
      frappe.router.on("change", () => {
        this.clear_all_popovers();
      });
    }
    clear_all_popovers() {
      this.popovers_list.forEach(($el) => $el.hide());
    }
    get_preview_data() {
      return frappe.xcall("frappe.desk.link_preview.get_preview_data", {
        doctype: this.doctype,
        docname: this.name
      });
    }
    init_preview_popover(preview_data) {
      let popover_content = this.get_popover_html(preview_data);
      this.element.popover({
        container: "body",
        template: `
				<div class="link-preview-popover popover">
					<div class="arrow"></div>
					<div class="popover-body popover-content">
					</div>
				</div>
			`,
        html: true,
        sanitizeFn: (content) => content,
        content: popover_content,
        trigger: "manual",
        placement: "top"
      });
      const $popover = $(this.element.data("bs.popover").tip);
      $popover.toggleClass("control-field-popover", this.is_link);
      this.popovers_list.push(this.element.data("bs.popover"));
    }
    get_popover_html(preview_data) {
      if (!this.href) {
        this.href = window.location.href;
      }
      if (this.href && this.href.includes(" ")) {
        this.href = this.href.replace(new RegExp(" ", "g"), "%20");
      }
      const div = document.createElement("div");
      div.innerHTML = `
			<div class="preview-popover-header">
				<div class="preview-header">
					${this.get_image_html(preview_data)}
					<div class="preview-name">
						<a></a>
					</div>
					<div class="text-muted preview-title">${this.get_id_html(preview_data)}</div>
				</div>
			</div>
			<hr>
			<div class="popover-body">
				${this.get_content_html(preview_data)}
			</div>
		`;
      const a2 = div.querySelector(".preview-name > a");
      a2.href = this.href;
      a2.innerText = __(preview_data.preview_title);
      return div.innerHTML;
    }
    get_id_html(preview_data) {
      if (preview_data.preview_title !== preview_data.name) {
        const a2 = document.createElement("a");
        a2.href = this.href;
        a2.className = "text-muted";
        a2.innerText = preview_data.name;
        return a2.outerHTML;
      }
      return "";
    }
    get_image_html(preview_data) {
      let avatar_html = frappe.get_avatar(
        "avatar-medium",
        preview_data.preview_title,
        preview_data.preview_image
      );
      return `<div class="preview-image">
			${avatar_html}
		</div>`;
    }
    get_content_html(preview_data) {
      let content_html = "";
      Object.keys(preview_data).forEach((key2) => {
        if (!["preview_image", "preview_title", "name"].includes(key2)) {
          let value2 = frappe.ellipsis(preview_data[key2], 280);
          let label = key2;
          content_html += `
					<div class="preview-field">
						<div class="preview-label text-muted">${__(label)}</div>
						<div class="preview-value">${value2}</div>
					</div>
				`;
        }
      });
      return `<div class="preview-table">${content_html}</div>`;
    }
  };

  // frappe/public/js/frappe/request.js
  frappe.provide("frappe.request");
  frappe.provide("frappe.request.error_handlers");
  frappe.request.url = "/";
  frappe.request.ajax_count = 0;
  frappe.request.waiting_for_ajax = [];
  frappe.request.logs = {};
  frappe.xcall = function(method, params) {
    return new Promise((resolve, reject) => {
      frappe.call({
        method,
        args: params,
        callback: (r2) => {
          resolve(r2.message);
        },
        error: (r2) => {
          reject(r2 == null ? void 0 : r2.message);
        }
      });
    });
  };
  frappe.call = function(opts) {
    if (!frappe.is_online()) {
      frappe.show_alert(
        {
          indicator: "orange",
          message: __("Connection Lost"),
          subtitle: __("You are not connected to Internet. Retry after sometime.")
        },
        3
      );
      opts.always && opts.always();
      return $.ajax();
    }
    if (typeof arguments[0] === "string") {
      opts = {
        method: arguments[0],
        args: arguments[1],
        callback: arguments[2],
        headers: arguments[3]
      };
    }
    if (opts.quiet) {
      opts.no_spinner = true;
    }
    var args = $.extend({}, opts.args);
    if (args.freeze) {
      opts.freeze = opts.freeze || args.freeze;
      opts.freeze_message = opts.freeze_message || args.freeze_message;
    }
    if (opts.module && opts.page) {
      args.cmd = opts.module + ".page." + opts.page + "." + opts.page + "." + opts.method;
    } else if (opts.doc) {
      $.extend(args, {
        cmd: "run_doc_method",
        docs: frappe.get_doc(opts.doc.doctype, opts.doc.name),
        method: opts.method,
        args: opts.args
      });
    } else if (opts.method) {
      args.cmd = opts.method;
    }
    var callback = function(data, response_text) {
      if (data.task_id) {
        frappe.realtime.subscribe(data.task_id, opts);
        if (opts.queued) {
          opts.queued(data);
        }
      } else if (opts.callback) {
        return opts.callback(data, response_text);
      }
    };
    let url2 = opts.url;
    if (!url2) {
      let prefix = "/api/method/";
      if (opts.api_version) {
        prefix = `/api/${opts.api_version}/method/`;
      }
      url2 = prefix + args.cmd;
      if (window.cordova) {
        let host = frappe.request.url;
        host = host.slice(0, host.length - 1);
        url2 = host + url2;
      }
      delete args.cmd;
    }
    if (opts.debounce && frappe.request.is_fresh(args, opts.debounce)) {
      return Promise.resolve();
    }
    return frappe.request.call({
      type: opts.type || "POST",
      args,
      success: callback,
      error: opts.error,
      always: opts.always,
      btn: opts.btn,
      freeze: opts.freeze,
      freeze_message: opts.freeze_message,
      headers: opts.headers || {},
      error_handlers: opts.error_handlers || {},
      async: opts.async,
      silent: opts.silent,
      api_version: opts.api_version,
      url: url2
    });
  };
  frappe.request.call = function(opts) {
    frappe.request.prepare(opts);
    var statusCode = {
      200: function(data, xhr) {
        opts.success_callback && opts.success_callback(data, xhr.responseText);
      },
      401: function(xhr) {
        if (frappe.app.session_expired_dialog && frappe.app.session_expired_dialog.display) {
          frappe.app.redirect_to_login();
        } else {
          frappe.app.handle_session_expired();
        }
        opts.error_callback && opts.error_callback();
      },
      404: function(xhr) {
        frappe.msgprint({
          title: __("Not found"),
          indicator: "red",
          message: __("The resource you are looking for is not available")
        });
        opts.error_callback && opts.error_callback();
      },
      403: function(xhr) {
        if (frappe.session.user === "Guest" && frappe.session.logged_in_user !== "Guest") {
          frappe.app.handle_session_expired();
        } else if (xhr.responseJSON && xhr.responseJSON._error_message) {
          frappe.msgprint({
            title: __("Not permitted"),
            indicator: "red",
            message: xhr.responseJSON._error_message
          });
          xhr.responseJSON._server_messages = null;
        } else if (xhr.responseJSON && xhr.responseJSON._server_messages) {
          var _server_messages = JSON.parse(xhr.responseJSON._server_messages);
          if (_server_messages.indexOf(__("Not permitted")) !== -1) {
            return;
          }
        } else {
          frappe.msgprint({
            title: __("Not permitted"),
            indicator: "red",
            message: __(
              "You do not have enough permissions to access this resource. Please contact your manager to get access."
            )
          });
        }
        opts.error_callback && opts.error_callback();
      },
      508: function(xhr) {
        frappe.utils.play_sound("error");
        frappe.msgprint({
          title: __("Please try again"),
          indicator: "red",
          message: __(
            "Another transaction is blocking this one. Please try again in a few seconds."
          )
        });
        opts.error_callback && opts.error_callback();
      },
      413: function(data, xhr) {
        frappe.msgprint({
          indicator: "red",
          title: __("File too big"),
          message: __("File size exceeded the maximum allowed size of {0} MB", [
            (frappe.boot.max_file_size || 5242880) / 1048576
          ])
        });
        opts.error_callback && opts.error_callback();
      },
      417: function(xhr) {
        var r2 = xhr.responseJSON;
        if (!r2) {
          try {
            r2 = JSON.parse(xhr.responseText);
          } catch (e2) {
            r2 = xhr.responseText;
          }
        }
        opts.error_callback && opts.error_callback(r2);
      },
      501: function(data, xhr) {
        if (typeof data === "string")
          data = JSON.parse(data);
        opts.error_callback && opts.error_callback(data, xhr.responseText);
      },
      500: function(xhr) {
        frappe.utils.play_sound("error");
        try {
          opts.error_callback && opts.error_callback();
          frappe.request.report_error(xhr, opts);
        } catch (e2) {
          frappe.request.report_error(xhr, opts);
        }
      },
      504: function(xhr) {
        frappe.msgprint(__("Request Timed Out"));
        opts.error_callback && opts.error_callback();
      },
      502: function(xhr) {
        frappe.msgprint(__("Internal Server Error"));
        opts.error_callback && opts.error_callback();
      }
    };
    var exception_handlers = {
      QueryTimeoutError: function() {
        frappe.utils.play_sound("error");
        frappe.msgprint({
          title: __("Request Timeout"),
          indicator: "red",
          message: __("Server was too busy to process this request. Please try again.")
        });
      },
      QueryDeadlockError: function() {
        frappe.utils.play_sound("error");
        frappe.msgprint({
          title: __("Deadlock Occurred"),
          indicator: "red",
          message: __("Server was too busy to process this request. Please try again.")
        });
      }
    };
    var ajax_args = {
      url: opts.url || frappe.request.url,
      data: opts.args,
      type: opts.type,
      dataType: opts.dataType || "json",
      async: opts.async,
      headers: Object.assign(
        {
          "X-Frappe-CSRF-Token": frappe.csrf_token,
          Accept: "application/json",
          "X-Frappe-CMD": opts.args && opts.args.cmd || "" || ""
        },
        opts.headers
      ),
      cache: false
    };
    if (opts.args && opts.args.doctype) {
      ajax_args.headers["X-Frappe-Doctype"] = encodeURIComponent(opts.args.doctype);
    }
    frappe.last_request = ajax_args.data;
    return $.ajax(ajax_args).done(function(data, textStatus, xhr) {
      try {
        if (typeof data === "string")
          data = JSON.parse(data);
        if (data.docs || data.docinfo) {
          frappe.model.sync(data);
        }
        if (data.__messages) {
          $.extend(frappe._messages, data.__messages);
        }
        if (data._link_titles) {
          if (!frappe._link_titles) {
            frappe._link_titles = {};
          }
          $.extend(frappe._link_titles, data._link_titles);
        }
        var status_code_handler = statusCode[xhr.statusCode().status];
        if (status_code_handler) {
          status_code_handler(data, xhr);
        }
      } catch (e2) {
        console.log("Unable to handle success response", data);
        console.error(e2);
      }
    }).always(function(data, textStatus, xhr) {
      try {
        if (typeof data === "string") {
          data = JSON.parse(data);
        }
        if (data.responseText) {
          var xhr = data;
          data = JSON.parse(data.responseText);
        }
      } catch (e2) {
        data = null;
      }
      frappe.request.cleanup(opts, data);
      if (opts.always) {
        opts.always(data);
      }
    }).fail(function(xhr, textStatus) {
      try {
        if (xhr.getResponseHeader("content-type") == "application/json" && xhr.responseText) {
          var data;
          try {
            data = JSON.parse(xhr.responseText);
          } catch (e2) {
            console.log("Unable to parse reponse text");
            console.log(xhr.responseText);
            console.log(e2);
          }
          if (data && data.exception) {
            var exception = data.exception.split(".").at(-1).split(":").at(0);
            var exception_handler = exception_handlers[exception];
            if (exception_handler) {
              exception_handler(data);
              return;
            }
          }
        }
        var status_code_handler = statusCode[xhr.statusCode().status];
        if (status_code_handler) {
          status_code_handler(xhr);
          return;
        }
        opts.error_callback && opts.error_callback(xhr);
      } catch (e2) {
        console.log("Unable to handle failed response");
        console.error(e2);
      }
    });
  };
  frappe.request.is_fresh = function(args, threshold) {
    if (!frappe.request.logs[args.cmd]) {
      frappe.request.logs[args.cmd] = [];
    }
    for (let past_request of frappe.request.logs[args.cmd]) {
      if (new Date() - past_request.timestamp < threshold && frappe.utils.deep_equal(args, past_request.args)) {
        console.log("throttled");
        return true;
      }
    }
    frappe.request.logs[args.cmd].push({ args, timestamp: new Date() });
    return false;
  };
  frappe.request.prepare = function(opts) {
    $("body").attr("data-ajax-state", "triggered");
    if (opts.btn)
      $(opts.btn).prop("disabled", true);
    if (opts.freeze)
      frappe.dom.freeze(opts.freeze_message);
    for (var key2 in opts.args) {
      if (opts.args[key2] && ($.isPlainObject(opts.args[key2]) || $.isArray(opts.args[key2]))) {
        opts.args[key2] = JSON.stringify(opts.args[key2]);
      }
    }
    if (!opts.args.cmd && !opts.url) {
      console.log(opts);
      throw "Incomplete Request";
    }
    opts.success_callback = opts.success;
    opts.error_callback = opts.error;
    delete opts.success;
    delete opts.error;
  };
  frappe.request.cleanup = function(opts, r2) {
    if (opts.btn) {
      $(opts.btn).prop("disabled", false);
    }
    $("body").attr("data-ajax-state", "complete");
    if (opts.freeze)
      frappe.dom.unfreeze();
    if (r2) {
      if (r2.session_expired || frappe.session.user === "Guest" && frappe.session.logged_in_user !== "Guest") {
        frappe.app.handle_session_expired();
        return;
      }
      let global_handlers = frappe.request.error_handlers[r2.exc_type] || [];
      let request_handler = opts.error_handlers ? opts.error_handlers[r2.exc_type] : null;
      let handlers = [].concat(global_handlers, request_handler).filter(Boolean);
      if (r2.exc_type) {
        handlers.forEach((handler) => {
          handler(r2);
        });
      }
      let messages;
      if (opts.api_version == "v2") {
        messages = r2.messages;
      } else if (r2._server_messages) {
        messages = JSON.parse(r2._server_messages);
      }
      if (messages && !opts.silent) {
        if (handlers.length === 0) {
          frappe.hide_msgprint();
          frappe.msgprint(messages);
        }
      }
      if (r2.exc) {
        r2.exc = JSON.parse(r2.exc);
        if (r2.exc instanceof Array) {
          r2.exc.forEach((exc) => {
            if (exc) {
              console.error(exc);
            }
          });
        } else {
          console.error(r2.exc);
        }
      }
      if (r2._debug_messages) {
        if (opts.args) {
          console.log("======== arguments ========");
          console.log(opts.args);
          console.log("========");
        }
        $.each(JSON.parse(r2._debug_messages), function(i3, v2) {
          console.log(v2);
        });
        console.log("======== response ========");
        delete r2._debug_messages;
        console.log(r2);
        console.log("========");
      }
    }
    frappe.last_response = r2;
  };
  frappe.after_server_call = () => {
    if (frappe.request.ajax_count) {
      return new Promise((resolve) => {
        frappe.request.waiting_for_ajax.push(() => {
          resolve();
        });
      });
    } else {
      return null;
    }
  };
  frappe.after_ajax = function(fn) {
    return new Promise((resolve) => {
      if (frappe.request.ajax_count) {
        frappe.request.waiting_for_ajax.push(() => {
          if (fn)
            return resolve(fn());
          resolve();
        });
      } else {
        if (fn)
          return resolve(fn());
        resolve();
      }
    });
  };
  frappe.request.report_error = function(xhr, request_opts) {
    var data = JSON.parse(xhr.responseText);
    var exc;
    if (data.exc) {
      try {
        exc = (JSON.parse(data.exc) || []).join("\n");
      } catch (e2) {
        exc = data.exc;
      }
      delete data.exc;
    } else {
      exc = "";
    }
    const copy_markdown_to_clipboard = () => {
      const code_block = (snippet) => "```\n" + snippet + "\n```";
      let request_data = Object.assign({}, request_opts);
      request_data.request_id = xhr.getResponseHeader("X-Frappe-Request-Id");
      const traceback_info = [
        "### App Versions",
        code_block(JSON.stringify(frappe.boot.versions, null, "	")),
        "### Route",
        code_block(frappe.get_route_str()),
        "### Traceback",
        code_block(exc),
        "### Request Data",
        code_block(JSON.stringify(request_data, null, "	")),
        "### Response Data",
        code_block(JSON.stringify(data, null, "	"))
      ].join("\n");
      frappe.utils.copy_to_clipboard(traceback_info);
    };
    var show_communication = function() {
      var error_report_message = [
        "<h5>Please type some additional information that could help us reproduce this issue:</h5>",
        '<div style="min-height: 100px; border: 1px solid #bbb; 				border-radius: 5px; padding: 15px; margin-bottom: 15px;"></div>',
        "<hr>",
        "<h5>App Versions</h5>",
        "<pre>" + JSON.stringify(frappe.boot.versions, null, "	") + "</pre>",
        "<h5>Route</h5>",
        "<pre>" + frappe.get_route_str() + "</pre>",
        "<hr>",
        "<h5>Error Report</h5>",
        "<pre>" + exc + "</pre>",
        "<hr>",
        "<h5>Request Data</h5>",
        "<pre>" + JSON.stringify(request_opts, null, "	") + "</pre>",
        "<hr>",
        "<h5>Response JSON</h5>",
        "<pre>" + JSON.stringify(data, null, "	") + "</pre>"
      ].join("\n");
      var communication_composer = new frappe.views.CommunicationComposer({
        subject: "Error Report [" + frappe.datetime.nowdate() + "]",
        recipients: error_report_email,
        message: error_report_message,
        doc: {
          doctype: "User",
          name: frappe.session.user
        }
      });
      communication_composer.dialog.$wrapper.css(
        "z-index",
        cint(frappe.msg_dialog.$wrapper.css("z-index")) + 1
      );
    };
    if (exc) {
      var error_report_email = frappe.boot.error_report_email;
      request_opts = frappe.request.cleanup_request_opts(request_opts);
      if (!frappe.error_dialog) {
        frappe.error_dialog = new frappe.ui.Dialog({
          title: __("Server Error")
        });
        if (error_report_email) {
          frappe.error_dialog.set_primary_action(__("Report"), () => {
            show_communication();
            frappe.error_dialog.hide();
          });
        } else {
          frappe.error_dialog.set_primary_action(__("Copy error to clipboard"), () => {
            copy_markdown_to_clipboard();
            frappe.error_dialog.hide();
          });
        }
        frappe.error_dialog.wrapper.classList.add("msgprint-dialog");
      }
      let parts2 = strip(exc).split("\n");
      let dialog_html = parts2[parts2.length - 1];
      if (data._exc_source) {
        dialog_html += "<br>";
        dialog_html += `Possible source of error: ${data._exc_source.bold()} `;
      }
      frappe.error_dialog.$body.html(dialog_html);
      frappe.error_dialog.show();
    }
  };
  frappe.request.cleanup_request_opts = function(request_opts) {
    var doc2 = (request_opts.args || {}).doc;
    if (doc2) {
      doc2 = JSON.parse(doc2);
      $.each(Object.keys(doc2), function(i3, key2) {
        if (key2.indexOf("password") !== -1 && doc2[key2]) {
          doc2[key2] = "*****";
        }
      });
      request_opts.args.doc = JSON.stringify(doc2);
    }
    return request_opts;
  };
  frappe.request.on_error = function(error_type, handler) {
    frappe.request.error_handlers[error_type] = frappe.request.error_handlers[error_type] || [];
    frappe.request.error_handlers[error_type].push(handler);
  };
  $(document).ajaxSend(function() {
    frappe.request.ajax_count++;
  });
  $(document).ajaxComplete(function() {
    frappe.request.ajax_count--;
    if (!frappe.request.ajax_count) {
      $.each(frappe.request.waiting_for_ajax || [], function(i3, fn) {
        fn();
      });
      frappe.request.waiting_for_ajax = [];
    }
  });

  // node_modules/engine.io-parser/build/esm/commons.js
  var PACKET_TYPES = /* @__PURE__ */ Object.create(null);
  PACKET_TYPES["open"] = "0";
  PACKET_TYPES["close"] = "1";
  PACKET_TYPES["ping"] = "2";
  PACKET_TYPES["pong"] = "3";
  PACKET_TYPES["message"] = "4";
  PACKET_TYPES["upgrade"] = "5";
  PACKET_TYPES["noop"] = "6";
  var PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
  Object.keys(PACKET_TYPES).forEach((key2) => {
    PACKET_TYPES_REVERSE[PACKET_TYPES[key2]] = key2;
  });
  var ERROR_PACKET = { type: "error", data: "parser error" };

  // node_modules/engine.io-parser/build/esm/encodePacket.browser.js
  var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
  var withNativeArrayBuffer = typeof ArrayBuffer === "function";
  var isView = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
  };
  var encodePacket = ({ type, data }, supportsBinary, callback) => {
    if (withNativeBlob && data instanceof Blob) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(data, callback);
      }
    } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
      if (supportsBinary) {
        return callback(data);
      } else {
        return encodeBlobAsBase64(new Blob([data]), callback);
      }
    }
    return callback(PACKET_TYPES[type] + (data || ""));
  };
  var encodeBlobAsBase64 = (data, callback) => {
    const fileReader = new FileReader();
    fileReader.onload = function() {
      const content = fileReader.result.split(",")[1];
      callback("b" + (content || ""));
    };
    return fileReader.readAsDataURL(data);
  };
  function toArray(data) {
    if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return new Uint8Array(data);
    } else {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
  }
  var TEXT_ENCODER;
  function encodePacketToBinary(packet, callback) {
    if (withNativeBlob && packet.data instanceof Blob) {
      return packet.data.arrayBuffer().then(toArray).then(callback);
    } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {
      return callback(toArray(packet.data));
    }
    encodePacket(packet, false, (encoded) => {
      if (!TEXT_ENCODER) {
        TEXT_ENCODER = new TextEncoder();
      }
      callback(TEXT_ENCODER.encode(encoded));
    });
  }

  // node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
  for (let i3 = 0; i3 < chars.length; i3++) {
    lookup[chars.charCodeAt(i3)] = i3;
  }
  var decode = (base64) => {
    let bufferLength = base64.length * 0.75, len = base64.length, i3, p2 = 0, encoded1, encoded2, encoded3, encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
    for (i3 = 0; i3 < len; i3 += 4) {
      encoded1 = lookup[base64.charCodeAt(i3)];
      encoded2 = lookup[base64.charCodeAt(i3 + 1)];
      encoded3 = lookup[base64.charCodeAt(i3 + 2)];
      encoded4 = lookup[base64.charCodeAt(i3 + 3)];
      bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  };

  // node_modules/engine.io-parser/build/esm/decodePacket.browser.js
  var withNativeArrayBuffer2 = typeof ArrayBuffer === "function";
  var decodePacket = (encodedPacket, binaryType) => {
    if (typeof encodedPacket !== "string") {
      return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
      };
    }
    const type = encodedPacket.charAt(0);
    if (type === "b") {
      return {
        type: "message",
        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
      };
    }
    const packetType = PACKET_TYPES_REVERSE[type];
    if (!packetType) {
      return ERROR_PACKET;
    }
    return encodedPacket.length > 1 ? {
      type: PACKET_TYPES_REVERSE[type],
      data: encodedPacket.substring(1)
    } : {
      type: PACKET_TYPES_REVERSE[type]
    };
  };
  var decodeBase64Packet = (data, binaryType) => {
    if (withNativeArrayBuffer2) {
      const decoded = decode(data);
      return mapBinary(decoded, binaryType);
    } else {
      return { base64: true, data };
    }
  };
  var mapBinary = (data, binaryType) => {
    switch (binaryType) {
      case "blob":
        if (data instanceof Blob) {
          return data;
        } else {
          return new Blob([data]);
        }
      case "arraybuffer":
      default:
        if (data instanceof ArrayBuffer) {
          return data;
        } else {
          return data.buffer;
        }
    }
  };

  // node_modules/engine.io-parser/build/esm/index.js
  var SEPARATOR = String.fromCharCode(30);
  var encodePayload = (packets, callback) => {
    const length2 = packets.length;
    const encodedPackets = new Array(length2);
    let count = 0;
    packets.forEach((packet, i3) => {
      encodePacket(packet, false, (encodedPacket) => {
        encodedPackets[i3] = encodedPacket;
        if (++count === length2) {
          callback(encodedPackets.join(SEPARATOR));
        }
      });
    });
  };
  var decodePayload = (encodedPayload, binaryType) => {
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for (let i3 = 0; i3 < encodedPackets.length; i3++) {
      const decodedPacket = decodePacket(encodedPackets[i3], binaryType);
      packets.push(decodedPacket);
      if (decodedPacket.type === "error") {
        break;
      }
    }
    return packets;
  };
  var TEXT_DECODER;
  function decodePacketFromBinary(data, isBinary2, binaryType) {
    if (!TEXT_DECODER) {
      TEXT_DECODER = new TextDecoder();
    }
    const isPlainBinary = isBinary2 || data[0] < 48 || data[0] > 54;
    return decodePacket(isPlainBinary ? data : TEXT_DECODER.decode(data), binaryType);
  }
  var protocol = 4;

  // node_modules/@socket.io/component-emitter/index.mjs
  function Emitter(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key2 in Emitter.prototype) {
      obj[key2] = Emitter.prototype[key2];
    }
    return obj;
  }
  Emitter.prototype.on = Emitter.prototype.addEventListener = function(event2, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event2] = this._callbacks["$" + event2] || []).push(fn);
    return this;
  };
  Emitter.prototype.once = function(event2, fn) {
    function on2() {
      this.off(event2, on2);
      fn.apply(this, arguments);
    }
    on2.fn = fn;
    this.on(event2, on2);
    return this;
  };
  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event2, fn) {
    this._callbacks = this._callbacks || {};
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event2];
    if (!callbacks)
      return this;
    if (1 == arguments.length) {
      delete this._callbacks["$" + event2];
      return this;
    }
    var cb;
    for (var i3 = 0; i3 < callbacks.length; i3++) {
      cb = callbacks[i3];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i3, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event2];
    }
    return this;
  };
  Emitter.prototype.emit = function(event2) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event2];
    for (var i3 = 1; i3 < arguments.length; i3++) {
      args[i3 - 1] = arguments[i3];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i3 = 0, len = callbacks.length; i3 < len; ++i3) {
        callbacks[i3].apply(this, args);
      }
    }
    return this;
  };
  Emitter.prototype.emitReserved = Emitter.prototype.emit;
  Emitter.prototype.listeners = function(event2) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event2] || [];
  };
  Emitter.prototype.hasListeners = function(event2) {
    return !!this.listeners(event2).length;
  };

  // node_modules/engine.io-client/build/esm/globalThis.browser.js
  var globalThisShim = (() => {
    if (typeof self !== "undefined") {
      return self;
    } else if (typeof window !== "undefined") {
      return window;
    } else {
      return Function("return this")();
    }
  })();

  // node_modules/engine.io-client/build/esm/util.js
  function pick(obj, ...attr) {
    return attr.reduce((acc, k2) => {
      if (obj.hasOwnProperty(k2)) {
        acc[k2] = obj[k2];
      }
      return acc;
    }, {});
  }
  var NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
  var NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
  function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
    } else {
      obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
      obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
    }
  }
  var BASE64_OVERHEAD = 1.33;
  function byteLength(obj) {
    if (typeof obj === "string") {
      return utf8Length(obj);
    }
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
  }
  function utf8Length(str) {
    let c2 = 0, length2 = 0;
    for (let i3 = 0, l2 = str.length; i3 < l2; i3++) {
      c2 = str.charCodeAt(i3);
      if (c2 < 128) {
        length2 += 1;
      } else if (c2 < 2048) {
        length2 += 2;
      } else if (c2 < 55296 || c2 >= 57344) {
        length2 += 3;
      } else {
        i3++;
        length2 += 4;
      }
    }
    return length2;
  }

  // node_modules/engine.io-client/build/esm/contrib/parseqs.js
  function encode(obj) {
    let str = "";
    for (let i3 in obj) {
      if (obj.hasOwnProperty(i3)) {
        if (str.length)
          str += "&";
        str += encodeURIComponent(i3) + "=" + encodeURIComponent(obj[i3]);
      }
    }
    return str;
  }
  function decode2(qs) {
    let qry = {};
    let pairs = qs.split("&");
    for (let i3 = 0, l2 = pairs.length; i3 < l2; i3++) {
      let pair = pairs[i3].split("=");
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  }

  // node_modules/engine.io-client/build/esm/transport.js
  var TransportError = class extends Error {
    constructor(reason, description, context) {
      super(reason);
      this.description = description;
      this.context = context;
      this.type = "TransportError";
    }
  };
  var Transport = class extends Emitter {
    constructor(opts) {
      super();
      this.writable = false;
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.query = opts.query;
      this.socket = opts.socket;
    }
    onError(reason, description, context) {
      super.emitReserved("error", new TransportError(reason, description, context));
      return this;
    }
    open() {
      this.readyState = "opening";
      this.doOpen();
      return this;
    }
    close() {
      if (this.readyState === "opening" || this.readyState === "open") {
        this.doClose();
        this.onClose();
      }
      return this;
    }
    send(packets) {
      if (this.readyState === "open") {
        this.write(packets);
      } else {
      }
    }
    onOpen() {
      this.readyState = "open";
      this.writable = true;
      super.emitReserved("open");
    }
    onData(data) {
      const packet = decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
    }
    onPacket(packet) {
      super.emitReserved("packet", packet);
    }
    onClose(details) {
      this.readyState = "closed";
      super.emitReserved("close", details);
    }
    pause(onPause) {
    }
    createUri(schema, query = {}) {
      return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
    }
    _hostname() {
      const hostname = this.opts.hostname;
      return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
    }
    _port() {
      if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
        return ":" + this.opts.port;
      } else {
        return "";
      }
    }
    _query(query) {
      const encodedQuery = encode(query);
      return encodedQuery.length ? "?" + encodedQuery : "";
    }
  };

  // node_modules/engine.io-client/build/esm/contrib/yeast.js
  var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split("");
  var length = 64;
  var map = {};
  var seed = 0;
  var i = 0;
  var prev;
  function encode2(num) {
    let encoded = "";
    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);
    return encoded;
  }
  function yeast() {
    const now = encode2(+new Date());
    if (now !== prev)
      return seed = 0, prev = now;
    return now + "." + encode2(seed++);
  }
  for (; i < length; i++)
    map[alphabet[i]] = i;

  // node_modules/engine.io-client/build/esm/contrib/has-cors.js
  var value = false;
  try {
    value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
  } catch (err) {
  }
  var hasCORS = value;

  // node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js
  function XHR(opts) {
    const xdomain = opts.xdomain;
    try {
      if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e2) {
    }
    if (!xdomain) {
      try {
        return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
      } catch (e2) {
      }
    }
  }
  function createCookieJar() {
  }

  // node_modules/engine.io-client/build/esm/transports/polling.js
  function empty() {
  }
  var hasXHR2 = function() {
    const xhr = new XHR({
      xdomain: false
    });
    return null != xhr.responseType;
  }();
  var Polling = class extends Transport {
    constructor(opts) {
      super(opts);
      this.polling = false;
      if (typeof location !== "undefined") {
        const isSSL = "https:" === location.protocol;
        let port = location.port;
        if (!port) {
          port = isSSL ? "443" : "80";
        }
        this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
      }
      const forceBase64 = opts && opts.forceBase64;
      this.supportsBinary = hasXHR2 && !forceBase64;
      if (this.opts.withCredentials) {
        this.cookieJar = createCookieJar();
      }
    }
    get name() {
      return "polling";
    }
    doOpen() {
      this.poll();
    }
    pause(onPause) {
      this.readyState = "pausing";
      const pause = () => {
        this.readyState = "paused";
        onPause();
      };
      if (this.polling || !this.writable) {
        let total = 0;
        if (this.polling) {
          total++;
          this.once("pollComplete", function() {
            --total || pause();
          });
        }
        if (!this.writable) {
          total++;
          this.once("drain", function() {
            --total || pause();
          });
        }
      } else {
        pause();
      }
    }
    poll() {
      this.polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    onData(data) {
      const callback = (packet) => {
        if ("opening" === this.readyState && packet.type === "open") {
          this.onOpen();
        }
        if ("close" === packet.type) {
          this.onClose({ description: "transport closed by the server" });
          return false;
        }
        this.onPacket(packet);
      };
      decodePayload(data, this.socket.binaryType).forEach(callback);
      if ("closed" !== this.readyState) {
        this.polling = false;
        this.emitReserved("pollComplete");
        if ("open" === this.readyState) {
          this.poll();
        } else {
        }
      }
    }
    doClose() {
      const close = () => {
        this.write([{ type: "close" }]);
      };
      if ("open" === this.readyState) {
        close();
      } else {
        this.once("open", close);
      }
    }
    write(packets) {
      this.writable = false;
      encodePayload(packets, (data) => {
        this.doWrite(data, () => {
          this.writable = true;
          this.emitReserved("drain");
        });
      });
    }
    uri() {
      const schema = this.opts.secure ? "https" : "http";
      const query = this.query || {};
      if (false !== this.opts.timestampRequests) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    }
    request(opts = {}) {
      Object.assign(opts, { xd: this.xd, cookieJar: this.cookieJar }, this.opts);
      return new Request(this.uri(), opts);
    }
    doWrite(data, fn) {
      const req = this.request({
        method: "POST",
        data
      });
      req.on("success", fn);
      req.on("error", (xhrStatus, context) => {
        this.onError("xhr post error", xhrStatus, context);
      });
    }
    doPoll() {
      const req = this.request();
      req.on("data", this.onData.bind(this));
      req.on("error", (xhrStatus, context) => {
        this.onError("xhr poll error", xhrStatus, context);
      });
      this.pollXhr = req;
    }
  };
  var Request = class extends Emitter {
    constructor(uri, opts) {
      super();
      installTimerFunctions(this, opts);
      this.opts = opts;
      this.method = opts.method || "GET";
      this.uri = uri;
      this.data = void 0 !== opts.data ? opts.data : null;
      this.create();
    }
    create() {
      var _a;
      const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
      opts.xdomain = !!this.opts.xd;
      const xhr = this.xhr = new XHR(opts);
      try {
        xhr.open(this.method, this.uri, true);
        try {
          if (this.opts.extraHeaders) {
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
            for (let i3 in this.opts.extraHeaders) {
              if (this.opts.extraHeaders.hasOwnProperty(i3)) {
                xhr.setRequestHeader(i3, this.opts.extraHeaders[i3]);
              }
            }
          }
        } catch (e2) {
        }
        if ("POST" === this.method) {
          try {
            xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (e2) {
          }
        }
        try {
          xhr.setRequestHeader("Accept", "*/*");
        } catch (e2) {
        }
        (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
        if ("withCredentials" in xhr) {
          xhr.withCredentials = this.opts.withCredentials;
        }
        if (this.opts.requestTimeout) {
          xhr.timeout = this.opts.requestTimeout;
        }
        xhr.onreadystatechange = () => {
          var _a2;
          if (xhr.readyState === 3) {
            (_a2 = this.opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(xhr);
          }
          if (4 !== xhr.readyState)
            return;
          if (200 === xhr.status || 1223 === xhr.status) {
            this.onLoad();
          } else {
            this.setTimeoutFn(() => {
              this.onError(typeof xhr.status === "number" ? xhr.status : 0);
            }, 0);
          }
        };
        xhr.send(this.data);
      } catch (e2) {
        this.setTimeoutFn(() => {
          this.onError(e2);
        }, 0);
        return;
      }
      if (typeof document !== "undefined") {
        this.index = Request.requestsCount++;
        Request.requests[this.index] = this;
      }
    }
    onError(err) {
      this.emitReserved("error", err, this.xhr);
      this.cleanup(true);
    }
    cleanup(fromError) {
      if ("undefined" === typeof this.xhr || null === this.xhr) {
        return;
      }
      this.xhr.onreadystatechange = empty;
      if (fromError) {
        try {
          this.xhr.abort();
        } catch (e2) {
        }
      }
      if (typeof document !== "undefined") {
        delete Request.requests[this.index];
      }
      this.xhr = null;
    }
    onLoad() {
      const data = this.xhr.responseText;
      if (data !== null) {
        this.emitReserved("data", data);
        this.emitReserved("success");
        this.cleanup();
      }
    }
    abort() {
      this.cleanup();
    }
  };
  Request.requestsCount = 0;
  Request.requests = {};
  if (typeof document !== "undefined") {
    if (typeof attachEvent === "function") {
      attachEvent("onunload", unloadHandler);
    } else if (typeof addEventListener === "function") {
      const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }
  function unloadHandler() {
    for (let i3 in Request.requests) {
      if (Request.requests.hasOwnProperty(i3)) {
        Request.requests[i3].abort();
      }
    }
  }

  // node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js
  var nextTick = (() => {
    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) {
      return (cb) => Promise.resolve().then(cb);
    } else {
      return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
    }
  })();
  var WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
  var usingBrowserWebSocket = true;
  var defaultBinaryType = "arraybuffer";

  // node_modules/engine.io-client/build/esm/transports/websocket.js
  var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
  var WS = class extends Transport {
    constructor(opts) {
      super(opts);
      this.supportsBinary = !opts.forceBase64;
    }
    get name() {
      return "websocket";
    }
    doOpen() {
      if (!this.check()) {
        return;
      }
      const uri = this.uri();
      const protocols = this.opts.protocols;
      const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
      if (this.opts.extraHeaders) {
        opts.headers = this.opts.extraHeaders;
      }
      try {
        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
      } catch (err) {
        return this.emitReserved("error", err);
      }
      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
      this.addEventListeners();
    }
    addEventListeners() {
      this.ws.onopen = () => {
        if (this.opts.autoUnref) {
          this.ws._socket.unref();
        }
        this.onOpen();
      };
      this.ws.onclose = (closeEvent) => this.onClose({
        description: "websocket connection closed",
        context: closeEvent
      });
      this.ws.onmessage = (ev) => this.onData(ev.data);
      this.ws.onerror = (e2) => this.onError("websocket error", e2);
    }
    write(packets) {
      this.writable = false;
      for (let i3 = 0; i3 < packets.length; i3++) {
        const packet = packets[i3];
        const lastPacket = i3 === packets.length - 1;
        encodePacket(packet, this.supportsBinary, (data) => {
          const opts = {};
          if (!usingBrowserWebSocket) {
            if (packet.options) {
              opts.compress = packet.options.compress;
            }
            if (this.opts.perMessageDeflate) {
              const len = "string" === typeof data ? Buffer.byteLength(data) : data.length;
              if (len < this.opts.perMessageDeflate.threshold) {
                opts.compress = false;
              }
            }
          }
          try {
            if (usingBrowserWebSocket) {
              this.ws.send(data);
            } else {
              this.ws.send(data, opts);
            }
          } catch (e2) {
          }
          if (lastPacket) {
            nextTick(() => {
              this.writable = true;
              this.emitReserved("drain");
            }, this.setTimeoutFn);
          }
        });
      }
    }
    doClose() {
      if (typeof this.ws !== "undefined") {
        this.ws.close();
        this.ws = null;
      }
    }
    uri() {
      const schema = this.opts.secure ? "wss" : "ws";
      const query = this.query || {};
      if (this.opts.timestampRequests) {
        query[this.opts.timestampParam] = yeast();
      }
      if (!this.supportsBinary) {
        query.b64 = 1;
      }
      return this.createUri(schema, query);
    }
    check() {
      return !!WebSocket;
    }
  };

  // node_modules/engine.io-client/build/esm/transports/webtransport.js
  function shouldIncludeBinaryHeader(packet, encoded) {
    return packet.type === "message" && typeof packet.data !== "string" && encoded[0] >= 48 && encoded[0] <= 54;
  }
  var WT = class extends Transport {
    get name() {
      return "webtransport";
    }
    doOpen() {
      if (typeof WebTransport !== "function") {
        return;
      }
      this.transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
      this.transport.closed.then(() => {
        this.onClose();
      }).catch((err) => {
        this.onError("webtransport error", err);
      });
      this.transport.ready.then(() => {
        this.transport.createBidirectionalStream().then((stream) => {
          const reader = stream.readable.getReader();
          this.writer = stream.writable.getWriter();
          let binaryFlag;
          const read2 = () => {
            reader.read().then(({ done, value: value2 }) => {
              if (done) {
                return;
              }
              if (!binaryFlag && value2.byteLength === 1 && value2[0] === 54) {
                binaryFlag = true;
              } else {
                this.onPacket(decodePacketFromBinary(value2, binaryFlag, "arraybuffer"));
                binaryFlag = false;
              }
              read2();
            }).catch((err) => {
            });
          };
          read2();
          const handshake = this.query.sid ? `0{"sid":"${this.query.sid}"}` : "0";
          this.writer.write(new TextEncoder().encode(handshake)).then(() => this.onOpen());
        });
      });
    }
    write(packets) {
      this.writable = false;
      for (let i3 = 0; i3 < packets.length; i3++) {
        const packet = packets[i3];
        const lastPacket = i3 === packets.length - 1;
        encodePacketToBinary(packet, (data) => {
          if (shouldIncludeBinaryHeader(packet, data)) {
            this.writer.write(Uint8Array.of(54));
          }
          this.writer.write(data).then(() => {
            if (lastPacket) {
              nextTick(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        });
      }
    }
    doClose() {
      var _a;
      (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();
    }
  };

  // node_modules/engine.io-client/build/esm/transports/index.js
  var transports = {
    websocket: WS,
    webtransport: WT,
    polling: Polling
  };

  // node_modules/engine.io-client/build/esm/contrib/parseuri.js
  var re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
  var parts = [
    "source",
    "protocol",
    "authority",
    "userInfo",
    "user",
    "password",
    "host",
    "port",
    "relative",
    "path",
    "directory",
    "file",
    "query",
    "anchor"
  ];
  function parse(str) {
    const src = str, b2 = str.indexOf("["), e2 = str.indexOf("]");
    if (b2 != -1 && e2 != -1) {
      str = str.substring(0, b2) + str.substring(b2, e2).replace(/:/g, ";") + str.substring(e2, str.length);
    }
    let m3 = re.exec(str || ""), uri = {}, i3 = 14;
    while (i3--) {
      uri[parts[i3]] = m3[i3] || "";
    }
    if (b2 != -1 && e2 != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
      uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
      uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri["path"]);
    uri.queryKey = queryKey(uri, uri["query"]);
    return uri;
  }
  function pathNames(obj, path) {
    const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
    if (path.slice(0, 1) == "/" || path.length === 0) {
      names.splice(0, 1);
    }
    if (path.slice(-1) == "/") {
      names.splice(names.length - 1, 1);
    }
    return names;
  }
  function queryKey(uri, query) {
    const data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $22) {
      if ($1) {
        data[$1] = $22;
      }
    });
    return data;
  }

  // node_modules/engine.io-client/build/esm/socket.js
  var Socket = class extends Emitter {
    constructor(uri, opts = {}) {
      super();
      this.writeBuffer = [];
      if (uri && "object" === typeof uri) {
        opts = uri;
        uri = null;
      }
      if (uri) {
        uri = parse(uri);
        opts.hostname = uri.host;
        opts.secure = uri.protocol === "https" || uri.protocol === "wss";
        opts.port = uri.port;
        if (uri.query)
          opts.query = uri.query;
      } else if (opts.host) {
        opts.hostname = parse(opts.host).host;
      }
      installTimerFunctions(this, opts);
      this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
      if (opts.hostname && !opts.port) {
        opts.port = this.secure ? "443" : "80";
      }
      this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
      this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
      this.transports = opts.transports || [
        "polling",
        "websocket",
        "webtransport"
      ];
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.opts = Object.assign({
        path: "/engine.io",
        agent: false,
        withCredentials: false,
        upgrade: true,
        timestampParam: "t",
        rememberUpgrade: false,
        addTrailingSlash: true,
        rejectUnauthorized: true,
        perMessageDeflate: {
          threshold: 1024
        },
        transportOptions: {},
        closeOnBeforeunload: false
      }, opts);
      this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
      if (typeof this.opts.query === "string") {
        this.opts.query = decode2(this.opts.query);
      }
      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null;
      this.pingTimeoutTimer = null;
      if (typeof addEventListener === "function") {
        if (this.opts.closeOnBeforeunload) {
          this.beforeunloadEventListener = () => {
            if (this.transport) {
              this.transport.removeAllListeners();
              this.transport.close();
            }
          };
          addEventListener("beforeunload", this.beforeunloadEventListener, false);
        }
        if (this.hostname !== "localhost") {
          this.offlineEventListener = () => {
            this.onClose("transport close", {
              description: "network connection lost"
            });
          };
          addEventListener("offline", this.offlineEventListener, false);
        }
      }
      this.open();
    }
    createTransport(name2) {
      const query = Object.assign({}, this.opts.query);
      query.EIO = protocol;
      query.transport = name2;
      if (this.id)
        query.sid = this.id;
      const opts = Object.assign({}, this.opts, {
        query,
        socket: this,
        hostname: this.hostname,
        secure: this.secure,
        port: this.port
      }, this.opts.transportOptions[name2]);
      return new transports[name2](opts);
    }
    open() {
      let transport;
      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
        transport = "websocket";
      } else if (0 === this.transports.length) {
        this.setTimeoutFn(() => {
          this.emitReserved("error", "No transports available");
        }, 0);
        return;
      } else {
        transport = this.transports[0];
      }
      this.readyState = "opening";
      try {
        transport = this.createTransport(transport);
      } catch (e2) {
        this.transports.shift();
        this.open();
        return;
      }
      transport.open();
      this.setTransport(transport);
    }
    setTransport(transport) {
      if (this.transport) {
        this.transport.removeAllListeners();
      }
      this.transport = transport;
      transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
    }
    probe(name2) {
      let transport = this.createTransport(name2);
      let failed = false;
      Socket.priorWebsocketSuccess = false;
      const onTransportOpen = () => {
        if (failed)
          return;
        transport.send([{ type: "ping", data: "probe" }]);
        transport.once("packet", (msg) => {
          if (failed)
            return;
          if ("pong" === msg.type && "probe" === msg.data) {
            this.upgrading = true;
            this.emitReserved("upgrading", transport);
            if (!transport)
              return;
            Socket.priorWebsocketSuccess = "websocket" === transport.name;
            this.transport.pause(() => {
              if (failed)
                return;
              if ("closed" === this.readyState)
                return;
              cleanup();
              this.setTransport(transport);
              transport.send([{ type: "upgrade" }]);
              this.emitReserved("upgrade", transport);
              transport = null;
              this.upgrading = false;
              this.flush();
            });
          } else {
            const err = new Error("probe error");
            err.transport = transport.name;
            this.emitReserved("upgradeError", err);
          }
        });
      };
      function freezeTransport() {
        if (failed)
          return;
        failed = true;
        cleanup();
        transport.close();
        transport = null;
      }
      const onerror = (err) => {
        const error = new Error("probe error: " + err);
        error.transport = transport.name;
        freezeTransport();
        this.emitReserved("upgradeError", error);
      };
      function onTransportClose() {
        onerror("transport closed");
      }
      function onclose() {
        onerror("socket closed");
      }
      function onupgrade(to2) {
        if (transport && to2.name !== transport.name) {
          freezeTransport();
        }
      }
      const cleanup = () => {
        transport.removeListener("open", onTransportOpen);
        transport.removeListener("error", onerror);
        transport.removeListener("close", onTransportClose);
        this.off("close", onclose);
        this.off("upgrading", onupgrade);
      };
      transport.once("open", onTransportOpen);
      transport.once("error", onerror);
      transport.once("close", onTransportClose);
      this.once("close", onclose);
      this.once("upgrading", onupgrade);
      if (this.upgrades.indexOf("webtransport") !== -1 && name2 !== "webtransport") {
        this.setTimeoutFn(() => {
          if (!failed) {
            transport.open();
          }
        }, 200);
      } else {
        transport.open();
      }
    }
    onOpen() {
      this.readyState = "open";
      Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
      this.emitReserved("open");
      this.flush();
      if ("open" === this.readyState && this.opts.upgrade) {
        let i3 = 0;
        const l2 = this.upgrades.length;
        for (; i3 < l2; i3++) {
          this.probe(this.upgrades[i3]);
        }
      }
    }
    onPacket(packet) {
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        this.emitReserved("packet", packet);
        this.emitReserved("heartbeat");
        switch (packet.type) {
          case "open":
            this.onHandshake(JSON.parse(packet.data));
            break;
          case "ping":
            this.resetPingTimeout();
            this.sendPacket("pong");
            this.emitReserved("ping");
            this.emitReserved("pong");
            break;
          case "error":
            const err = new Error("server error");
            err.code = packet.data;
            this.onError(err);
            break;
          case "message":
            this.emitReserved("data", packet.data);
            this.emitReserved("message", packet.data);
            break;
        }
      } else {
      }
    }
    onHandshake(data) {
      this.emitReserved("handshake", data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.maxPayload = data.maxPayload;
      this.onOpen();
      if ("closed" === this.readyState)
        return;
      this.resetPingTimeout();
    }
    resetPingTimeout() {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.pingTimeoutTimer = this.setTimeoutFn(() => {
        this.onClose("ping timeout");
      }, this.pingInterval + this.pingTimeout);
      if (this.opts.autoUnref) {
        this.pingTimeoutTimer.unref();
      }
    }
    onDrain() {
      this.writeBuffer.splice(0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (0 === this.writeBuffer.length) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    flush() {
      if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        const packets = this.getWritablePackets();
        this.transport.send(packets);
        this.prevBufferLen = packets.length;
        this.emitReserved("flush");
      }
    }
    getWritablePackets() {
      const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
      if (!shouldCheckPayloadSize) {
        return this.writeBuffer;
      }
      let payloadSize = 1;
      for (let i3 = 0; i3 < this.writeBuffer.length; i3++) {
        const data = this.writeBuffer[i3].data;
        if (data) {
          payloadSize += byteLength(data);
        }
        if (i3 > 0 && payloadSize > this.maxPayload) {
          return this.writeBuffer.slice(0, i3);
        }
        payloadSize += 2;
      }
      return this.writeBuffer;
    }
    write(msg, options, fn) {
      this.sendPacket("message", msg, options, fn);
      return this;
    }
    send(msg, options, fn) {
      this.sendPacket("message", msg, options, fn);
      return this;
    }
    sendPacket(type, data, options, fn) {
      if ("function" === typeof data) {
        fn = data;
        data = void 0;
      }
      if ("function" === typeof options) {
        fn = options;
        options = null;
      }
      if ("closing" === this.readyState || "closed" === this.readyState) {
        return;
      }
      options = options || {};
      options.compress = false !== options.compress;
      const packet = {
        type,
        data,
        options
      };
      this.emitReserved("packetCreate", packet);
      this.writeBuffer.push(packet);
      if (fn)
        this.once("flush", fn);
      this.flush();
    }
    close() {
      const close = () => {
        this.onClose("forced close");
        this.transport.close();
      };
      const cleanupAndClose = () => {
        this.off("upgrade", cleanupAndClose);
        this.off("upgradeError", cleanupAndClose);
        close();
      };
      const waitForUpgrade = () => {
        this.once("upgrade", cleanupAndClose);
        this.once("upgradeError", cleanupAndClose);
      };
      if ("opening" === this.readyState || "open" === this.readyState) {
        this.readyState = "closing";
        if (this.writeBuffer.length) {
          this.once("drain", () => {
            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }
      return this;
    }
    onError(err) {
      Socket.priorWebsocketSuccess = false;
      this.emitReserved("error", err);
      this.onClose("transport error", err);
    }
    onClose(reason, description) {
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.transport.removeAllListeners("close");
        this.transport.close();
        this.transport.removeAllListeners();
        if (typeof removeEventListener === "function") {
          removeEventListener("beforeunload", this.beforeunloadEventListener, false);
          removeEventListener("offline", this.offlineEventListener, false);
        }
        this.readyState = "closed";
        this.id = null;
        this.emitReserved("close", reason, description);
        this.writeBuffer = [];
        this.prevBufferLen = 0;
      }
    }
    filterUpgrades(upgrades) {
      const filteredUpgrades = [];
      let i3 = 0;
      const j3 = upgrades.length;
      for (; i3 < j3; i3++) {
        if (~this.transports.indexOf(upgrades[i3]))
          filteredUpgrades.push(upgrades[i3]);
      }
      return filteredUpgrades;
    }
  };
  Socket.protocol = protocol;

  // node_modules/engine.io-client/build/esm/index.js
  var protocol2 = Socket.protocol;

  // node_modules/socket.io-client/build/esm/url.js
  function url(uri, path = "", loc) {
    let obj = uri;
    loc = loc || typeof location !== "undefined" && location;
    if (null == uri)
      uri = loc.protocol + "//" + loc.host;
    if (typeof uri === "string") {
      if ("/" === uri.charAt(0)) {
        if ("/" === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }
      if (!/^(https?|wss?):\/\//.test(uri)) {
        if ("undefined" !== typeof loc) {
          uri = loc.protocol + "//" + uri;
        } else {
          uri = "https://" + uri;
        }
      }
      obj = parse(uri);
    }
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = "80";
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = "443";
      }
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    Decoder: () => Decoder,
    Encoder: () => Encoder,
    PacketType: () => PacketType,
    protocol: () => protocol3
  });

  // node_modules/socket.io-parser/build/esm/is-binary.js
  var withNativeArrayBuffer3 = typeof ArrayBuffer === "function";
  var isView2 = (obj) => {
    return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
  };
  var toString = Object.prototype.toString;
  var withNativeBlob2 = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
  var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
  function isBinary(obj) {
    return withNativeArrayBuffer3 && (obj instanceof ArrayBuffer || isView2(obj)) || withNativeBlob2 && obj instanceof Blob || withNativeFile && obj instanceof File;
  }
  function hasBinary(obj, toJSON) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    if (Array.isArray(obj)) {
      for (let i3 = 0, l2 = obj.length; i3 < l2; i3++) {
        if (hasBinary(obj[i3])) {
          return true;
        }
      }
      return false;
    }
    if (isBinary(obj)) {
      return true;
    }
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }
    for (const key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2) && hasBinary(obj[key2])) {
        return true;
      }
    }
    return false;
  }

  // node_modules/socket.io-parser/build/esm/binary.js
  function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length;
    return { packet: pack, buffers };
  }
  function _deconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (isBinary(data)) {
      const placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (Array.isArray(data)) {
      const newData = new Array(data.length);
      for (let i3 = 0; i3 < data.length; i3++) {
        newData[i3] = _deconstructPacket(data[i3], buffers);
      }
      return newData;
    } else if (typeof data === "object" && !(data instanceof Date)) {
      const newData = {};
      for (const key2 in data) {
        if (Object.prototype.hasOwnProperty.call(data, key2)) {
          newData[key2] = _deconstructPacket(data[key2], buffers);
        }
      }
      return newData;
    }
    return data;
  }
  function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    delete packet.attachments;
    return packet;
  }
  function _reconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (data && data._placeholder === true) {
      const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
      if (isIndexValid) {
        return buffers[data.num];
      } else {
        throw new Error("illegal attachments");
      }
    } else if (Array.isArray(data)) {
      for (let i3 = 0; i3 < data.length; i3++) {
        data[i3] = _reconstructPacket(data[i3], buffers);
      }
    } else if (typeof data === "object") {
      for (const key2 in data) {
        if (Object.prototype.hasOwnProperty.call(data, key2)) {
          data[key2] = _reconstructPacket(data[key2], buffers);
        }
      }
    }
    return data;
  }

  // node_modules/socket.io-parser/build/esm/index.js
  var RESERVED_EVENTS = [
    "connect",
    "connect_error",
    "disconnect",
    "disconnecting",
    "newListener",
    "removeListener"
  ];
  var protocol3 = 5;
  var PacketType;
  (function(PacketType2) {
    PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
    PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
    PacketType2[PacketType2["ACK"] = 3] = "ACK";
    PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
  })(PacketType || (PacketType = {}));
  var Encoder = class {
    constructor(replacer) {
      this.replacer = replacer;
    }
    encode(obj) {
      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
        if (hasBinary(obj)) {
          return this.encodeAsBinary({
            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
            nsp: obj.nsp,
            data: obj.data,
            id: obj.id
          });
        }
      }
      return [this.encodeAsString(obj)];
    }
    encodeAsString(obj) {
      let str = "" + obj.type;
      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
        str += obj.attachments + "-";
      }
      if (obj.nsp && "/" !== obj.nsp) {
        str += obj.nsp + ",";
      }
      if (null != obj.id) {
        str += obj.id;
      }
      if (null != obj.data) {
        str += JSON.stringify(obj.data, this.replacer);
      }
      return str;
    }
    encodeAsBinary(obj) {
      const deconstruction = deconstructPacket(obj);
      const pack = this.encodeAsString(deconstruction.packet);
      const buffers = deconstruction.buffers;
      buffers.unshift(pack);
      return buffers;
    }
  };
  function isObject(value2) {
    return Object.prototype.toString.call(value2) === "[object Object]";
  }
  var Decoder = class extends Emitter {
    constructor(reviver) {
      super();
      this.reviver = reviver;
    }
    add(obj) {
      let packet;
      if (typeof obj === "string") {
        if (this.reconstructor) {
          throw new Error("got plaintext data when reconstructing a packet");
        }
        packet = this.decodeString(obj);
        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
          this.reconstructor = new BinaryReconstructor(packet);
          if (packet.attachments === 0) {
            super.emitReserved("decoded", packet);
          }
        } else {
          super.emitReserved("decoded", packet);
        }
      } else if (isBinary(obj) || obj.base64) {
        if (!this.reconstructor) {
          throw new Error("got binary data when not reconstructing a packet");
        } else {
          packet = this.reconstructor.takeBinaryData(obj);
          if (packet) {
            this.reconstructor = null;
            super.emitReserved("decoded", packet);
          }
        }
      } else {
        throw new Error("Unknown type: " + obj);
      }
    }
    decodeString(str) {
      let i3 = 0;
      const p2 = {
        type: Number(str.charAt(0))
      };
      if (PacketType[p2.type] === void 0) {
        throw new Error("unknown packet type " + p2.type);
      }
      if (p2.type === PacketType.BINARY_EVENT || p2.type === PacketType.BINARY_ACK) {
        const start = i3 + 1;
        while (str.charAt(++i3) !== "-" && i3 != str.length) {
        }
        const buf = str.substring(start, i3);
        if (buf != Number(buf) || str.charAt(i3) !== "-") {
          throw new Error("Illegal attachments");
        }
        p2.attachments = Number(buf);
      }
      if ("/" === str.charAt(i3 + 1)) {
        const start = i3 + 1;
        while (++i3) {
          const c2 = str.charAt(i3);
          if ("," === c2)
            break;
          if (i3 === str.length)
            break;
        }
        p2.nsp = str.substring(start, i3);
      } else {
        p2.nsp = "/";
      }
      const next = str.charAt(i3 + 1);
      if ("" !== next && Number(next) == next) {
        const start = i3 + 1;
        while (++i3) {
          const c2 = str.charAt(i3);
          if (null == c2 || Number(c2) != c2) {
            --i3;
            break;
          }
          if (i3 === str.length)
            break;
        }
        p2.id = Number(str.substring(start, i3 + 1));
      }
      if (str.charAt(++i3)) {
        const payload = this.tryParse(str.substr(i3));
        if (Decoder.isPayloadValid(p2.type, payload)) {
          p2.data = payload;
        } else {
          throw new Error("invalid payload");
        }
      }
      return p2;
    }
    tryParse(str) {
      try {
        return JSON.parse(str, this.reviver);
      } catch (e2) {
        return false;
      }
    }
    static isPayloadValid(type, payload) {
      switch (type) {
        case PacketType.CONNECT:
          return isObject(payload);
        case PacketType.DISCONNECT:
          return payload === void 0;
        case PacketType.CONNECT_ERROR:
          return typeof payload === "string" || isObject(payload);
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS.indexOf(payload[0]) === -1);
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          return Array.isArray(payload);
      }
    }
    destroy() {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
        this.reconstructor = null;
      }
    }
  };
  var BinaryReconstructor = class {
    constructor(packet) {
      this.packet = packet;
      this.buffers = [];
      this.reconPack = packet;
    }
    takeBinaryData(binData) {
      this.buffers.push(binData);
      if (this.buffers.length === this.reconPack.attachments) {
        const packet = reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }
      return null;
    }
    finishedReconstruction() {
      this.reconPack = null;
      this.buffers = [];
    }
  };

  // node_modules/socket.io-client/build/esm/on.js
  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
      obj.off(ev, fn);
    };
  }

  // node_modules/socket.io-client/build/esm/socket.js
  var RESERVED_EVENTS2 = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    newListener: 1,
    removeListener: 1
  });
  var Socket2 = class extends Emitter {
    constructor(io2, nsp, opts) {
      super();
      this.connected = false;
      this.recovered = false;
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this._queue = [];
      this._queueSeq = 0;
      this.ids = 0;
      this.acks = {};
      this.flags = {};
      this.io = io2;
      this.nsp = nsp;
      if (opts && opts.auth) {
        this.auth = opts.auth;
      }
      this._opts = Object.assign({}, opts);
      if (this.io._autoConnect)
        this.open();
    }
    get disconnected() {
      return !this.connected;
    }
    subEvents() {
      if (this.subs)
        return;
      const io2 = this.io;
      this.subs = [
        on(io2, "open", this.onopen.bind(this)),
        on(io2, "packet", this.onpacket.bind(this)),
        on(io2, "error", this.onerror.bind(this)),
        on(io2, "close", this.onclose.bind(this))
      ];
    }
    get active() {
      return !!this.subs;
    }
    connect() {
      if (this.connected)
        return this;
      this.subEvents();
      if (!this.io["_reconnecting"])
        this.io.open();
      if ("open" === this.io._readyState)
        this.onopen();
      return this;
    }
    open() {
      return this.connect();
    }
    send(...args) {
      args.unshift("message");
      this.emit.apply(this, args);
      return this;
    }
    emit(ev, ...args) {
      if (RESERVED_EVENTS2.hasOwnProperty(ev)) {
        throw new Error('"' + ev.toString() + '" is a reserved event name');
      }
      args.unshift(ev);
      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
        this._addToQueue(args);
        return this;
      }
      const packet = {
        type: PacketType.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = this.flags.compress !== false;
      if ("function" === typeof args[args.length - 1]) {
        const id = this.ids++;
        const ack = args.pop();
        this._registerAckCallback(id, ack);
        packet.id = id;
      }
      const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
      const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
      if (discardPacket) {
      } else if (this.connected) {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }
      this.flags = {};
      return this;
    }
    _registerAckCallback(id, ack) {
      var _a;
      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
      if (timeout === void 0) {
        this.acks[id] = ack;
        return;
      }
      const timer = this.io.setTimeoutFn(() => {
        delete this.acks[id];
        for (let i3 = 0; i3 < this.sendBuffer.length; i3++) {
          if (this.sendBuffer[i3].id === id) {
            this.sendBuffer.splice(i3, 1);
          }
        }
        ack.call(this, new Error("operation has timed out"));
      }, timeout);
      this.acks[id] = (...args) => {
        this.io.clearTimeoutFn(timer);
        ack.apply(this, [null, ...args]);
      };
    }
    emitWithAck(ev, ...args) {
      const withErr = this.flags.timeout !== void 0 || this._opts.ackTimeout !== void 0;
      return new Promise((resolve, reject) => {
        args.push((arg1, arg2) => {
          if (withErr) {
            return arg1 ? reject(arg1) : resolve(arg2);
          } else {
            return resolve(arg1);
          }
        });
        this.emit(ev, ...args);
      });
    }
    _addToQueue(args) {
      let ack;
      if (typeof args[args.length - 1] === "function") {
        ack = args.pop();
      }
      const packet = {
        id: this._queueSeq++,
        tryCount: 0,
        pending: false,
        args,
        flags: Object.assign({ fromQueue: true }, this.flags)
      };
      args.push((err, ...responseArgs) => {
        if (packet !== this._queue[0]) {
          return;
        }
        const hasError = err !== null;
        if (hasError) {
          if (packet.tryCount > this._opts.retries) {
            this._queue.shift();
            if (ack) {
              ack(err);
            }
          }
        } else {
          this._queue.shift();
          if (ack) {
            ack(null, ...responseArgs);
          }
        }
        packet.pending = false;
        return this._drainQueue();
      });
      this._queue.push(packet);
      this._drainQueue();
    }
    _drainQueue(force = false) {
      if (!this.connected || this._queue.length === 0) {
        return;
      }
      const packet = this._queue[0];
      if (packet.pending && !force) {
        return;
      }
      packet.pending = true;
      packet.tryCount++;
      this.flags = packet.flags;
      this.emit.apply(this, packet.args);
    }
    packet(packet) {
      packet.nsp = this.nsp;
      this.io._packet(packet);
    }
    onopen() {
      if (typeof this.auth == "function") {
        this.auth((data) => {
          this._sendConnectPacket(data);
        });
      } else {
        this._sendConnectPacket(this.auth);
      }
    }
    _sendConnectPacket(data) {
      this.packet({
        type: PacketType.CONNECT,
        data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
      });
    }
    onerror(err) {
      if (!this.connected) {
        this.emitReserved("connect_error", err);
      }
    }
    onclose(reason, description) {
      this.connected = false;
      delete this.id;
      this.emitReserved("disconnect", reason, description);
    }
    onpacket(packet) {
      const sameNamespace = packet.nsp === this.nsp;
      if (!sameNamespace)
        return;
      switch (packet.type) {
        case PacketType.CONNECT:
          if (packet.data && packet.data.sid) {
            this.onconnect(packet.data.sid, packet.data.pid);
          } else {
            this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
          }
          break;
        case PacketType.EVENT:
        case PacketType.BINARY_EVENT:
          this.onevent(packet);
          break;
        case PacketType.ACK:
        case PacketType.BINARY_ACK:
          this.onack(packet);
          break;
        case PacketType.DISCONNECT:
          this.ondisconnect();
          break;
        case PacketType.CONNECT_ERROR:
          this.destroy();
          const err = new Error(packet.data.message);
          err.data = packet.data.data;
          this.emitReserved("connect_error", err);
          break;
      }
    }
    onevent(packet) {
      const args = packet.data || [];
      if (null != packet.id) {
        args.push(this.ack(packet.id));
      }
      if (this.connected) {
        this.emitEvent(args);
      } else {
        this.receiveBuffer.push(Object.freeze(args));
      }
    }
    emitEvent(args) {
      if (this._anyListeners && this._anyListeners.length) {
        const listeners = this._anyListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, args);
        }
      }
      super.emit.apply(this, args);
      if (this._pid && args.length && typeof args[args.length - 1] === "string") {
        this._lastOffset = args[args.length - 1];
      }
    }
    ack(id) {
      const self2 = this;
      let sent = false;
      return function(...args) {
        if (sent)
          return;
        sent = true;
        self2.packet({
          type: PacketType.ACK,
          id,
          data: args
        });
      };
    }
    onack(packet) {
      const ack = this.acks[packet.id];
      if ("function" === typeof ack) {
        ack.apply(this, packet.data);
        delete this.acks[packet.id];
      } else {
      }
    }
    onconnect(id, pid) {
      this.id = id;
      this.recovered = pid && this._pid === pid;
      this._pid = pid;
      this.connected = true;
      this.emitBuffered();
      this.emitReserved("connect");
      this._drainQueue(true);
    }
    emitBuffered() {
      this.receiveBuffer.forEach((args) => this.emitEvent(args));
      this.receiveBuffer = [];
      this.sendBuffer.forEach((packet) => {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      });
      this.sendBuffer = [];
    }
    ondisconnect() {
      this.destroy();
      this.onclose("io server disconnect");
    }
    destroy() {
      if (this.subs) {
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs = void 0;
      }
      this.io["_destroy"](this);
    }
    disconnect() {
      if (this.connected) {
        this.packet({ type: PacketType.DISCONNECT });
      }
      this.destroy();
      if (this.connected) {
        this.onclose("io client disconnect");
      }
      return this;
    }
    close() {
      return this.disconnect();
    }
    compress(compress) {
      this.flags.compress = compress;
      return this;
    }
    get volatile() {
      this.flags.volatile = true;
      return this;
    }
    timeout(timeout) {
      this.flags.timeout = timeout;
      return this;
    }
    onAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.push(listener);
      return this;
    }
    prependAny(listener) {
      this._anyListeners = this._anyListeners || [];
      this._anyListeners.unshift(listener);
      return this;
    }
    offAny(listener) {
      if (!this._anyListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyListeners;
        for (let i3 = 0; i3 < listeners.length; i3++) {
          if (listener === listeners[i3]) {
            listeners.splice(i3, 1);
            return this;
          }
        }
      } else {
        this._anyListeners = [];
      }
      return this;
    }
    listenersAny() {
      return this._anyListeners || [];
    }
    onAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.push(listener);
      return this;
    }
    prependAnyOutgoing(listener) {
      this._anyOutgoingListeners = this._anyOutgoingListeners || [];
      this._anyOutgoingListeners.unshift(listener);
      return this;
    }
    offAnyOutgoing(listener) {
      if (!this._anyOutgoingListeners) {
        return this;
      }
      if (listener) {
        const listeners = this._anyOutgoingListeners;
        for (let i3 = 0; i3 < listeners.length; i3++) {
          if (listener === listeners[i3]) {
            listeners.splice(i3, 1);
            return this;
          }
        }
      } else {
        this._anyOutgoingListeners = [];
      }
      return this;
    }
    listenersAnyOutgoing() {
      return this._anyOutgoingListeners || [];
    }
    notifyOutgoingListeners(packet) {
      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
        const listeners = this._anyOutgoingListeners.slice();
        for (const listener of listeners) {
          listener.apply(this, packet.data);
        }
      }
    }
  };

  // node_modules/socket.io-client/build/esm/contrib/backo2.js
  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 1e4;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }
  Backoff.prototype.duration = function() {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var rand = Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }
    return Math.min(ms, this.max) | 0;
  };
  Backoff.prototype.reset = function() {
    this.attempts = 0;
  };
  Backoff.prototype.setMin = function(min) {
    this.ms = min;
  };
  Backoff.prototype.setMax = function(max) {
    this.max = max;
  };
  Backoff.prototype.setJitter = function(jitter) {
    this.jitter = jitter;
  };

  // node_modules/socket.io-client/build/esm/manager.js
  var Manager = class extends Emitter {
    constructor(uri, opts) {
      var _a;
      super();
      this.nsps = {};
      this.subs = [];
      if (uri && "object" === typeof uri) {
        opts = uri;
        uri = void 0;
      }
      opts = opts || {};
      opts.path = opts.path || "/socket.io";
      this.opts = opts;
      installTimerFunctions(this, opts);
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1e3);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
      this._readyState = "closed";
      this.uri = uri;
      const _parser = opts.parser || esm_exports;
      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this._autoConnect = opts.autoConnect !== false;
      if (this._autoConnect)
        this.open();
    }
    reconnection(v2) {
      if (!arguments.length)
        return this._reconnection;
      this._reconnection = !!v2;
      return this;
    }
    reconnectionAttempts(v2) {
      if (v2 === void 0)
        return this._reconnectionAttempts;
      this._reconnectionAttempts = v2;
      return this;
    }
    reconnectionDelay(v2) {
      var _a;
      if (v2 === void 0)
        return this._reconnectionDelay;
      this._reconnectionDelay = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v2);
      return this;
    }
    randomizationFactor(v2) {
      var _a;
      if (v2 === void 0)
        return this._randomizationFactor;
      this._randomizationFactor = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v2);
      return this;
    }
    reconnectionDelayMax(v2) {
      var _a;
      if (v2 === void 0)
        return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v2;
      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v2);
      return this;
    }
    timeout(v2) {
      if (!arguments.length)
        return this._timeout;
      this._timeout = v2;
      return this;
    }
    maybeReconnectOnOpen() {
      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
        this.reconnect();
      }
    }
    open(fn) {
      if (~this._readyState.indexOf("open"))
        return this;
      this.engine = new Socket(this.uri, this.opts);
      const socket = this.engine;
      const self2 = this;
      this._readyState = "opening";
      this.skipReconnect = false;
      const openSubDestroy = on(socket, "open", function() {
        self2.onopen();
        fn && fn();
      });
      const onError = (err) => {
        this.cleanup();
        this._readyState = "closed";
        this.emitReserved("error", err);
        if (fn) {
          fn(err);
        } else {
          this.maybeReconnectOnOpen();
        }
      };
      const errorSub = on(socket, "error", onError);
      if (false !== this._timeout) {
        const timeout = this._timeout;
        const timer = this.setTimeoutFn(() => {
          openSubDestroy();
          onError(new Error("timeout"));
          socket.close();
        }, timeout);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(() => {
          this.clearTimeoutFn(timer);
        });
      }
      this.subs.push(openSubDestroy);
      this.subs.push(errorSub);
      return this;
    }
    connect(fn) {
      return this.open(fn);
    }
    onopen() {
      this.cleanup();
      this._readyState = "open";
      this.emitReserved("open");
      const socket = this.engine;
      this.subs.push(on(socket, "ping", this.onping.bind(this)), on(socket, "data", this.ondata.bind(this)), on(socket, "error", this.onerror.bind(this)), on(socket, "close", this.onclose.bind(this)), on(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    onping() {
      this.emitReserved("ping");
    }
    ondata(data) {
      try {
        this.decoder.add(data);
      } catch (e2) {
        this.onclose("parse error", e2);
      }
    }
    ondecoded(packet) {
      nextTick(() => {
        this.emitReserved("packet", packet);
      }, this.setTimeoutFn);
    }
    onerror(err) {
      this.emitReserved("error", err);
    }
    socket(nsp, opts) {
      let socket = this.nsps[nsp];
      if (!socket) {
        socket = new Socket2(this, nsp, opts);
        this.nsps[nsp] = socket;
      } else if (this._autoConnect && !socket.active) {
        socket.connect();
      }
      return socket;
    }
    _destroy(socket) {
      const nsps = Object.keys(this.nsps);
      for (const nsp of nsps) {
        const socket2 = this.nsps[nsp];
        if (socket2.active) {
          return;
        }
      }
      this._close();
    }
    _packet(packet) {
      const encodedPackets = this.encoder.encode(packet);
      for (let i3 = 0; i3 < encodedPackets.length; i3++) {
        this.engine.write(encodedPackets[i3], packet.options);
      }
    }
    cleanup() {
      this.subs.forEach((subDestroy) => subDestroy());
      this.subs.length = 0;
      this.decoder.destroy();
    }
    _close() {
      this.skipReconnect = true;
      this._reconnecting = false;
      this.onclose("forced close");
      if (this.engine)
        this.engine.close();
    }
    disconnect() {
      return this._close();
    }
    onclose(reason, description) {
      this.cleanup();
      this.backoff.reset();
      this._readyState = "closed";
      this.emitReserved("close", reason, description);
      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    }
    reconnect() {
      if (this._reconnecting || this.skipReconnect)
        return this;
      const self2 = this;
      if (this.backoff.attempts >= this._reconnectionAttempts) {
        this.backoff.reset();
        this.emitReserved("reconnect_failed");
        this._reconnecting = false;
      } else {
        const delay = this.backoff.duration();
        this._reconnecting = true;
        const timer = this.setTimeoutFn(() => {
          if (self2.skipReconnect)
            return;
          this.emitReserved("reconnect_attempt", self2.backoff.attempts);
          if (self2.skipReconnect)
            return;
          self2.open((err) => {
            if (err) {
              self2._reconnecting = false;
              self2.reconnect();
              this.emitReserved("reconnect_error", err);
            } else {
              self2.onreconnect();
            }
          });
        }, delay);
        if (this.opts.autoUnref) {
          timer.unref();
        }
        this.subs.push(() => {
          this.clearTimeoutFn(timer);
        });
      }
    }
    onreconnect() {
      const attempt = this.backoff.attempts;
      this._reconnecting = false;
      this.backoff.reset();
      this.emitReserved("reconnect", attempt);
    }
  };

  // node_modules/socket.io-client/build/esm/index.js
  var cache = {};
  function lookup2(uri, opts) {
    if (typeof uri === "object") {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    const parsed = url(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path = parsed.path;
    const sameNamespace = cache[id] && path in cache[id]["nsps"];
    const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
    let io2;
    if (newConnection) {
      io2 = new Manager(source, opts);
    } else {
      if (!cache[id]) {
        cache[id] = new Manager(source, opts);
      }
      io2 = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.queryKey;
    }
    return io2.socket(parsed.path, opts);
  }
  Object.assign(lookup2, {
    Manager,
    Socket: Socket2,
    io: lookup2,
    connect: lookup2
  });

  // frappe/public/js/frappe/socketio_client.js
  frappe.provide("frappe.realtime");
  var RealTimeClient = class {
    constructor() {
      this.open_tasks = {};
      this.open_docs = /* @__PURE__ */ new Set();
    }
    on(event2, callback) {
      if (this.socket) {
        this.connect();
        this.socket.on(event2, callback);
      }
    }
    off(event2, callback) {
      if (this.socket) {
        this.socket.off(event2, callback);
      }
    }
    connect() {
      if (this.lazy_connect) {
        this.socket.connect();
        this.lazy_connect = false;
      }
    }
    emit(event2, ...args) {
      this.connect();
      this.socket.emit(event2, ...args);
    }
    init(port = 9e3, lazy_connect = false) {
      if (frappe.boot.disable_async) {
        return;
      }
      if (this.socket) {
        return;
      }
      this.lazy_connect = lazy_connect;
      let me2 = this;
      if (window.location.protocol == "https:") {
        this.socket = lookup2(this.get_host(port), {
          secure: true,
          withCredentials: true,
          reconnectionAttempts: 3,
          autoConnect: !lazy_connect
        });
      } else if (window.location.protocol == "http:") {
        this.socket = lookup2(this.get_host(port), {
          withCredentials: true,
          reconnectionAttempts: 3,
          autoConnect: !lazy_connect
        });
      }
      if (!this.socket) {
        console.log("Unable to connect to " + this.get_host(port));
        return;
      }
      this.socket.on("msgprint", function(message) {
        frappe.msgprint(message);
      });
      this.socket.on("progress", function(data) {
        if (data.progress) {
          data.percent = flt(data.progress[0]) / data.progress[1] * 100;
        }
        if (data.percent) {
          frappe.show_progress(
            data.title || __("Progress"),
            data.percent,
            100,
            data.description,
            true
          );
        }
      });
      this.setup_listeners();
      $(document).on("form-load form-rename", function(e2, frm) {
        if (!frm.doc || frm.is_new()) {
          return;
        }
        me2.doc_subscribe(frm.doctype, frm.docname);
      });
      $(document).on("form-refresh", function(e2, frm) {
        if (!frm.doc || frm.is_new()) {
          return;
        }
        me2.doc_open(frm.doctype, frm.docname);
      });
      $(document).on("form-unload", function(e2, frm) {
        if (!frm.doc || frm.is_new()) {
          return;
        }
        me2.doc_close(frm.doctype, frm.docname);
      });
    }
    get_host(port = 3e3) {
      let host = window.location.origin;
      if (window.dev_server) {
        let parts2 = host.split(":");
        port = frappe.boot.socketio_port || port.toString() || "3000";
        if (parts2.length > 2) {
          host = parts2[0] + ":" + parts2[1];
        }
        host = host + ":" + port;
      }
      return host + `/${frappe.boot.sitename}`;
    }
    subscribe(task_id, opts) {
      this.emit("task_subscribe", task_id);
      this.emit("progress_subscribe", task_id);
      this.open_tasks[task_id] = opts;
    }
    task_subscribe(task_id) {
      this.emit("task_subscribe", task_id);
    }
    task_unsubscribe(task_id) {
      this.emit("task_unsubscribe", task_id);
    }
    doctype_subscribe(doctype) {
      this.emit("doctype_subscribe", doctype);
    }
    doctype_unsubscribe(doctype) {
      this.emit("doctype_unsubscribe", doctype);
    }
    doc_subscribe(doctype, docname) {
      if (frappe.flags.doc_subscribe) {
        console.log("throttled");
        return;
      }
      if (this.open_docs.has(`${doctype}:${docname}`)) {
        return;
      }
      frappe.flags.doc_subscribe = true;
      setTimeout(function() {
        frappe.flags.doc_subscribe = false;
      }, 1e3);
      this.emit("doc_subscribe", doctype, docname);
      this.open_docs.add(`${doctype}:${docname}`);
    }
    doc_unsubscribe(doctype, docname) {
      this.emit("doc_unsubscribe", doctype, docname);
      return this.open_docs.delete(`${doctype}:${docname}`);
    }
    doc_open(doctype, docname) {
      this.emit("doc_open", doctype, docname);
    }
    doc_close(doctype, docname) {
      this.emit("doc_close", doctype, docname);
    }
    setup_listeners() {
      this.socket.on("task_status_change", function(data) {
        this.process_response(data, data.status.toLowerCase());
      });
      this.socket.on("task_progress", function(data) {
        this.process_response(data, "progress");
      });
    }
    process_response(data, method) {
      if (!data) {
        return;
      }
      let opts = this.open_tasks[data.task_id];
      if (opts[method]) {
        opts[method](data);
      }
      if (method === "success") {
        if (opts.callback)
          opts.callback(data);
      }
      frappe.request.cleanup(opts, data);
      if (opts.always) {
        opts.always(data);
      }
      if (data.status_code && data.status_code > 400 && opts.error) {
        opts.error(data);
      }
    }
    publish(event2, message) {
      if (this.socket) {
        this.emit(event2, message);
      }
    }
  };
  frappe.realtime = new RealTimeClient();
  frappe.socketio = frappe.realtime;

  // frappe/public/js/frappe/utils/utils.js
  var import_fast_deep_equal = __toESM(require_fast_deep_equal());

  // frappe/public/js/frappe/utils/number_systems.js
  var number_systems_default = {
    default: [
      {
        divisor: 1e12,
        symbol: __("T", null, "Number system")
      },
      {
        divisor: 1e9,
        symbol: __("B", null, "Number system")
      },
      {
        divisor: 1e6,
        symbol: __("M", null, "Number system")
      },
      {
        divisor: 1e3,
        symbol: __("K", null, "Number system")
      }
    ],
    indian: [
      {
        divisor: 1e7,
        symbol: __("Cr", null, "Number system")
      },
      {
        divisor: 1e5,
        symbol: __("L", null, "Number system")
      },
      {
        divisor: 1e3,
        symbol: __("K", null, "Number system")
      }
    ]
  };

  // frappe/public/js/frappe/utils/utils.js
  var import_cloneDeepWith = __toESM(require_cloneDeepWith());
  frappe.provide("frappe.utils");
  if (!Array.prototype.uniqBy) {
    Object.defineProperty(Array.prototype, "uniqBy", {
      value: function(key2) {
        var seen = {};
        return this.filter(function(item) {
          var k2 = key2(item);
          return k2 in seen ? false : seen[k2] = true;
        });
      }
    });
    Object.defineProperty(Array.prototype, "move", {
      value: function(from, to2) {
        this.splice(to2, 0, this.splice(from, 1)[0]);
      }
    });
  }
  Object.defineProperty(Object.prototype, "setDefault", {
    value: function(key2, default_value) {
      if (!(key2 in this))
        this[key2] = default_value;
      return this[key2];
    },
    writable: true
  });
  String.prototype.plural = function(revert) {
    const plural = {
      "(quiz)$": "$1zes",
      "^(ox)$": "$1en",
      "([m|l])ouse$": "$1ice",
      "(matr|vert|ind)ix|ex$": "$1ices",
      "(x|ch|ss|sh)$": "$1es",
      "([^aeiouy]|qu)y$": "$1ies",
      "(hive)$": "$1s",
      "(?:([^f])fe|([lr])f)$": "$1$2ves",
      "(shea|lea|loa|thie)f$": "$1ves",
      sis$: "ses",
      "([ti])um$": "$1a",
      "(tomat|potat|ech|her|vet)o$": "$1oes",
      "(bu)s$": "$1ses",
      "(alias)$": "$1es",
      "(octop)us$": "$1i",
      "(ax|test)is$": "$1es",
      "(us)$": "$1es",
      "([^s]+)$": "$1s"
    };
    const singular = {
      "(quiz)zes$": "$1",
      "(matr)ices$": "$1ix",
      "(vert|ind)ices$": "$1ex",
      "^(ox)en$": "$1",
      "(alias)es$": "$1",
      "(octop|vir)i$": "$1us",
      "(cris|ax|test)es$": "$1is",
      "(shoe)s$": "$1",
      "(o)es$": "$1",
      "(bus)es$": "$1",
      "([m|l])ice$": "$1ouse",
      "(x|ch|ss|sh)es$": "$1",
      "(m)ovies$": "$1ovie",
      "(s)eries$": "$1eries",
      "([^aeiouy]|qu)ies$": "$1y",
      "([lr])ves$": "$1f",
      "(tive)s$": "$1",
      "(hive)s$": "$1",
      "(li|wi|kni)ves$": "$1fe",
      "(shea|loa|lea|thie)ves$": "$1f",
      "(^analy)ses$": "$1sis",
      "((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$": "$1$2sis",
      "([ti])a$": "$1um",
      "(n)ews$": "$1ews",
      "(h|bl)ouses$": "$1ouse",
      "(corpse)s$": "$1",
      "(us)es$": "$1",
      s$: ""
    };
    const irregular = {
      move: "moves",
      foot: "feet",
      goose: "geese",
      sex: "sexes",
      child: "children",
      man: "men",
      tooth: "teeth",
      person: "people"
    };
    const uncountable = [
      "sheep",
      "fish",
      "deer",
      "moose",
      "series",
      "species",
      "money",
      "rice",
      "information",
      "equipment"
    ];
    if (uncountable.indexOf(this.toLowerCase()) >= 0)
      return this;
    let word;
    let pattern;
    let replace;
    for (word in irregular) {
      if (revert) {
        pattern = new RegExp(irregular[word] + "$", "i");
        replace = word;
      } else {
        pattern = new RegExp(word + "$", "i");
        replace = irregular[word];
      }
      if (pattern.test(this))
        return this.replace(pattern, replace);
    }
    let array;
    if (revert)
      array = singular;
    else
      array = plural;
    let reg;
    for (reg in array) {
      pattern = new RegExp(reg, "i");
      if (pattern.test(this))
        return this.replace(pattern, array[reg]);
    }
    return this;
  };
  Object.assign(frappe.utils, {
    get_random: function(len) {
      var text = "";
      var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      for (var i3 = 0; i3 < len; i3++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
      return text;
    },
    get_file_link: function(filename) {
      filename = cstr(filename);
      if (frappe.utils.is_url(filename)) {
        return filename;
      } else if (filename.indexOf("/") === -1) {
        return "files/" + filename;
      } else {
        return filename;
      }
    },
    replace_newlines(t3) {
      return t3 ? t3.replace(/\n/g, "<br>") : "";
    },
    is_html: function(txt2) {
      if (!txt2)
        return false;
      if (txt2.indexOf("<br>") == -1 && txt2.indexOf("<p") == -1 && txt2.indexOf("<img") == -1 && txt2.indexOf("<div") == -1 && !txt2.includes("<span")) {
        return false;
      }
      return true;
    },
    is_mac: function() {
      return window.navigator.platform === "MacIntel";
    },
    is_xs: function() {
      return $(document).width() < 768;
    },
    is_sm: function() {
      return $(document).width() < 991 && $(document).width() >= 768;
    },
    is_md: function() {
      return $(document).width() < 1199 && $(document).width() >= 991;
    },
    is_json: function(str) {
      try {
        JSON.parse(str);
      } catch (e2) {
        return false;
      }
      return true;
    },
    parse_json: function(str) {
      let parsed_json = "";
      try {
        parsed_json = JSON.parse(str);
      } catch (e2) {
        return str;
      }
      return parsed_json;
    },
    strip_whitespace: function(html) {
      return (html || "").replace(/<p>\s*<\/p>/g, "").replace(/<br>(\s*<br>\s*)+/g, "<br><br>");
    },
    encode_tags: function(html) {
      var tagsToReplace = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;"
      };
      function replaceTag(tag) {
        return tagsToReplace[tag] || tag;
      }
      return html.replace(/[&<>]/g, replaceTag);
    },
    strip_original_content: function(txt2) {
      var out = [], part = [], newline = txt2.indexOf("<br>") === -1 ? "\n" : "<br>";
      $.each(txt2.split(newline), function(i3, t3) {
        var tt3 = strip(t3);
        if (tt3 && (tt3.substr(0, 1) === ">" || tt3.substr(0, 4) === "&gt;")) {
          part.push(t3);
        } else {
          out = out.concat(part);
          out.push(t3);
          part = [];
        }
      });
      return out.join(newline);
    },
    escape_html: function(txt2) {
      if (!txt2)
        return "";
      let escape_html_mapping = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#x60;",
        "=": "&#x3D;"
      };
      return String(txt2).replace(/[&<>"'`=]/g, (char) => escape_html_mapping[char] || char);
    },
    unescape_html: function(txt2) {
      let unescape_html_mapping = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'",
        "&#x60;": "`",
        "&#x3D;": "="
      };
      return String(txt2).replace(
        /&amp;|&lt;|&gt;|&quot;|&#39;|&#x60;|&#x3D;/g,
        (char) => unescape_html_mapping[char] || char
      );
    },
    html2text: function(html) {
      const parser = new DOMParser();
      const dom = parser.parseFromString(html, "text/html");
      return dom.body.textContent;
    },
    is_url: function(txt2) {
      return txt2.toLowerCase().substr(0, 7) == "http://" || txt2.toLowerCase().substr(0, 8) == "https://";
    },
    to_title_case: function(string, with_space = false) {
      let titlecased_string = string.toLowerCase().replace(/(?:^|[\s-/])\w/g, function(match) {
        return match.toUpperCase();
      });
      let replace_with = with_space ? " " : "";
      return titlecased_string.replace(/-|_/g, replace_with);
    },
    toggle_blockquote: function(txt2) {
      if (!txt2)
        return txt2;
      var content = $("<div></div>").html(txt2);
      content.find("blockquote").parent("blockquote").addClass("hidden").before(
        '<p><a class="text-muted btn btn-default toggle-blockquote" style="padding: 2px 7px 0px; line-height: 1;"> 					\u2022 \u2022 \u2022 				</a></p>'
      );
      return content.html();
    },
    scroll_to: function(element, animate = true, additional_offset, element_to_be_scrolled, callback, highlight_element = false) {
      if (frappe.flags.disable_auto_scroll)
        return;
      element_to_be_scrolled = element_to_be_scrolled || $("html, body");
      let scroll_top = 0;
      if (element) {
        scroll_top = typeof element == "number" ? element - cint(additional_offset) : this.get_scroll_position(element, additional_offset);
      }
      if (scroll_top < 0) {
        scroll_top = 0;
      }
      const highlight = () => {
        if (highlight_element) {
          $(element).addClass("highlight");
          document.addEventListener(
            "click",
            function() {
              $(element).removeClass("highlight");
            },
            { once: true }
          );
        }
      };
      if (scroll_top == element_to_be_scrolled.scrollTop()) {
        return highlight();
      }
      if (animate) {
        element_to_be_scrolled.animate({
          scrollTop: scroll_top
        }).promise().then(() => {
          highlight();
          callback && callback();
        });
      } else {
        element_to_be_scrolled.scrollTop(scroll_top);
      }
    },
    get_scroll_position: function(element, additional_offset) {
      let header_offset = $(".navbar").height() + $(".page-head:visible").height() || $(".navbar").height();
      return $(element).offset().top - header_offset - cint(additional_offset);
    },
    filter_dict: function(dict, filters2) {
      var ret = [];
      if (typeof filters2 == "string") {
        return [dict[filters2]];
      }
      $.each(dict, function(i3, d3) {
        for (var key2 in filters2) {
          if ($.isArray(filters2[key2])) {
            if (filters2[key2][0] == "in") {
              if (filters2[key2][1].indexOf(d3[key2]) == -1)
                return;
            } else if (filters2[key2][0] == "not in") {
              if (filters2[key2][1].indexOf(d3[key2]) != -1)
                return;
            } else if (filters2[key2][0] == "<") {
              if (!(d3[key2] < filters2[key2]))
                return;
            } else if (filters2[key2][0] == "<=") {
              if (!(d3[key2] <= filters2[key2]))
                return;
            } else if (filters2[key2][0] == ">") {
              if (!(d3[key2] > filters2[key2]))
                return;
            } else if (filters2[key2][0] == ">=") {
              if (!(d3[key2] >= filters2[key2]))
                return;
            }
          } else {
            if (d3[key2] != filters2[key2])
              return;
          }
        }
        ret.push(d3);
      });
      return ret;
    },
    comma_or: function(list) {
      return frappe.utils.comma_sep(list, " " + __("or") + " ");
    },
    comma_and: function(list) {
      return frappe.utils.comma_sep(list, " " + __("and") + " ");
    },
    comma_sep: function(list, sep) {
      if (list instanceof Array) {
        if (list.length == 0) {
          return "";
        } else if (list.length == 1) {
          return list[0];
        } else {
          return list.slice(0, list.length - 1).join(", ") + sep + list.slice(-1)[0];
        }
      } else {
        return list;
      }
    },
    set_footnote: function(footnote_area, wrapper, txt2) {
      if (!footnote_area) {
        footnote_area = $('<div class="text-muted footnote-area level">').appendTo(wrapper);
      }
      if (txt2) {
        footnote_area.html(txt2);
      } else {
        footnote_area.remove();
        footnote_area = null;
      }
      return footnote_area;
    },
    get_args_dict_from_url: function(txt2) {
      var args = {};
      $.each(decodeURIComponent(txt2).split("&"), function(i3, arg) {
        arg = arg.split("=");
        args[arg[0]] = arg[1];
      });
      return args;
    },
    get_url_from_dict: function(args) {
      return $.map(args, function(val2, key2) {
        if (val2 !== null)
          return encodeURIComponent(key2) + "=" + encodeURIComponent(val2);
        else
          return null;
      }).join("&") || "";
    },
    validate_type: function(val2, type) {
      var regExp;
      switch (type) {
        case "phone":
          regExp = /^([0-9 +_\-,.*#()]){1,20}$/;
          break;
        case "name":
          regExp = /^[\w][\w'-]*([ \w][\w'-]+)*$/;
          break;
        case "number":
          regExp = /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/;
          break;
        case "digits":
          regExp = /^\d+$/;
          break;
        case "alphanum":
          regExp = /^\w+$/;
          break;
        case "email":
          regExp = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          break;
        case "url":
          regExp = /^((([A-Za-z0-9.+-]+:(?:\/\/)?)(?:[-;:&=\+\,\w]@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)$/i;
          break;
        case "dateIso":
          regExp = /^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])$/;
          break;
        default:
          return false;
      }
      return "" !== val2 ? regExp.test(val2) : false;
    },
    guess_style: function(text, default_style, _colour) {
      var style = default_style || "default";
      var colour = "gray";
      if (text) {
        if (has_words(["Pending", "Review", "Medium", "Not Approved"], text)) {
          style = "warning";
          colour = "orange";
        } else if (has_words(["Open", "Urgent", "High", "Failed", "Rejected", "Error"], text)) {
          style = "danger";
          colour = "red";
        } else if (has_words(
          [
            "Closed",
            "Finished",
            "Converted",
            "Completed",
            "Complete",
            "Confirmed",
            "Approved",
            "Yes",
            "Active",
            "Available",
            "Paid",
            "Success"
          ],
          text
        )) {
          style = "success";
          colour = "green";
        } else if (has_words(["Submitted"], text)) {
          style = "info";
          colour = "blue";
        }
      }
      return _colour ? colour : style;
    },
    guess_colour: function(text) {
      return frappe.utils.guess_style(text, null, true);
    },
    get_indicator_color: function(state) {
      return frappe.db.get_list("Workflow State", { filters: { name: state }, fields: ["name", "style"] }).then((res) => {
        const state2 = res[0];
        if (!state2.style) {
          return frappe.utils.guess_colour(state2.name);
        }
        const style = state2.style;
        const colour_map = {
          Success: "green",
          Warning: "orange",
          Danger: "red",
          Primary: "blue"
        };
        return colour_map[style];
      });
    },
    sort: function(list, key2, compare_type, reverse) {
      if (!list || list.length < 2)
        return list || [];
      var sort_fn = {
        string: function(a2, b2) {
          return cstr(a2[key2]).localeCompare(cstr(b2[key2]));
        },
        number: function(a2, b2) {
          return flt(a2[key2]) - flt(b2[key2]);
        }
      };
      if (!compare_type)
        compare_type = typeof list[0][key2] === "string" ? "string" : "number";
      list.sort(sort_fn[compare_type]);
      if (reverse) {
        list.reverse();
      }
      return list;
    },
    unique: function(list) {
      var dict = {}, arr = [];
      for (var i3 = 0, l2 = list.length; i3 < l2; i3++) {
        if (!(list[i3] in dict)) {
          dict[list[i3]] = null;
          arr.push(list[i3]);
        }
      }
      return arr;
    },
    remove_nulls: function(list) {
      var new_list = [];
      for (var i3 = 0, l2 = list.length; i3 < l2; i3++) {
        if (!is_null(list[i3])) {
          new_list.push(list[i3]);
        }
      }
      return new_list;
    },
    all: function(lst) {
      for (var i3 = 0, l2 = lst.length; i3 < l2; i3++) {
        if (!lst[i3]) {
          return false;
        }
      }
      return true;
    },
    dict: function(keys, values) {
      var out = [];
      $.each(values, function(row_idx, row) {
        var new_row = {};
        $.each(keys, function(key_idx, key2) {
          new_row[key2] = row[key_idx];
        });
        out.push(new_row);
      });
      return out;
    },
    sum: function(list) {
      return list.reduce(function(previous_value, current_value) {
        return flt(previous_value) + flt(current_value);
      }, 0);
    },
    arrays_equal: function(arr1, arr2) {
      if (!arr1 || !arr2) {
        return false;
      }
      if (arr1.length != arr2.length) {
        return false;
      }
      for (var i3 = 0; i3 < arr1.length; i3++) {
        if ($.isArray(arr1[i3])) {
          if (!frappe.utils.arrays_equal(arr1[i3], arr2[i3])) {
            return false;
          }
        } else if (arr1[i3] !== arr2[i3]) {
          return false;
        }
      }
      return true;
    },
    intersection: function(a2, b2) {
      var ai2 = 0, bi = 0;
      var result = new Array();
      a2 = [].concat(a2).sort();
      b2 = [].concat(b2).sort();
      while (ai2 < a2.length && bi < b2.length) {
        if (a2[ai2] < b2[bi]) {
          ai2++;
        } else if (a2[ai2] > b2[bi]) {
          bi++;
        } else {
          result.push(a2[ai2]);
          ai2++;
          bi++;
        }
      }
      return result;
    },
    resize_image: function(reader, callback, max_width, max_height) {
      var tempImg = new Image();
      if (!max_width)
        max_width = 600;
      if (!max_height)
        max_height = 400;
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > max_width) {
            tempH *= max_width / tempW;
            tempW = max_width;
          }
        } else {
          if (tempH > max_height) {
            tempW *= max_height / tempH;
            tempH = max_height;
          }
        }
        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/jpeg");
        setTimeout(function() {
          callback(dataURL);
        }, 10);
      };
    },
    csv_to_array: function(strData, strDelimiter) {
      strDelimiter = strDelimiter || ",";
      var objPattern = new RegExp(
        "(\\" + strDelimiter + '|\\r?\\n|\\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\' + strDelimiter + "\\r\\n]*))",
        "gi"
      );
      var arrData = [[]];
      var arrMatches = null;
      while (arrMatches = objPattern.exec(strData)) {
        var strMatchedDelimiter = arrMatches[1];
        if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {
          arrData.push([]);
        }
        var strMatchedValue;
        if (arrMatches[2]) {
          strMatchedValue = arrMatches[2].replace(new RegExp('""', "g"), '"');
        } else {
          strMatchedValue = arrMatches[3];
        }
        arrData[arrData.length - 1].push(strMatchedValue);
      }
      return arrData;
    },
    warn_page_name_change: function() {
      frappe.msgprint(__("Note: Changing the Page Name will break previous URL to this page."));
    },
    set_title: function(title) {
      frappe._original_title = title;
      if (frappe._title_prefix) {
        title = frappe._title_prefix + " " + title.replace(/<[^>]*>/g, "");
      }
      document.title = title;
      const sub_path = frappe.router.get_sub_path();
      frappe.route_titles[sub_path] = title;
    },
    set_title_prefix: function(prefix) {
      frappe._title_prefix = prefix;
      frappe.utils.set_title(frappe._original_title);
    },
    is_image_file: function(filename) {
      if (!filename)
        return false;
      filename = filename.split("?")[0];
      return /\.(gif|jpg|jpeg|tiff|png|svg)$/i.test(filename);
    },
    is_video_file: function(filename) {
      if (!filename)
        return false;
      filename = filename.split("?")[0];
      return /\.(mov|mp4|mkv|webm)$/i.test(filename);
    },
    play_sound: function(name2) {
      try {
        if (frappe.boot.user.mute_sounds) {
          return;
        }
        var audio = $("#sound-" + name2)[0];
        audio.volume = audio.getAttribute("volume");
        audio.play();
      } catch (e2) {
        console.log("Cannot play sound", name2, e2);
      }
    },
    split_emails: function(txt2) {
      var email_list = [];
      if (!txt2) {
        return email_list;
      }
      txt2.split(/[,\n](?=(?:[^"]|"[^"]*")*$)/g).forEach(function(email) {
        email = email.trim();
        if (email) {
          email_list.push(email);
        }
      });
      return email_list;
    },
    supportsES6: function() {
      try {
        new Function("(a = 0) => a");
        return true;
      } catch (err) {
        return false;
      }
    }(),
    throttle: function(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options)
        options = {};
      let later = function() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout)
          context = args = null;
      };
      return function() {
        var now = Date.now();
        if (!previous && options.leading === false)
          previous = now;
        let remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout)
            context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    },
    debounce: function(func, wait, immediate) {
      var timeout;
      return function() {
        var context = this, args = arguments;
        var later = function() {
          timeout = null;
          if (!immediate)
            func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow)
          func.apply(context, args);
      };
    },
    get_form_link: function(doctype, name2, html = false, display_text = null, query_params_obj = null) {
      display_text = display_text || name2;
      name2 = encodeURIComponent(name2);
      let route = `/app/${encodeURIComponent(doctype.toLowerCase().replace(/ /g, "-"))}/${name2}`;
      if (query_params_obj) {
        route += frappe.utils.make_query_string(query_params_obj);
      }
      if (html) {
        return `<a href="${route}">${display_text}</a>`;
      }
      return route;
    },
    get_route_label(route_str) {
      let route = route_str.split("/");
      if (route[2] === "Report" || route[0] === "query-report") {
        return __("{0} Report", [route[3] || route[1]]);
      }
      if (route[0] === "List") {
        return __("{0} List", [route[1]]);
      }
      if (route[0] === "modules") {
        return __("{0} Modules", [route[1]]);
      }
      if (route[0] === "dashboard") {
        return __("{0} Dashboard", [route[1]]);
      }
      return __(frappe.utils.to_title_case(route[0], true));
    },
    report_column_total: function(values, column, type) {
      if (column.column.disable_total) {
        return "";
      } else if (values.length > 0) {
        if (column.column.fieldtype == "Percent" || type === "mean") {
          return values.reduce((a2, b2) => flt(a2) + flt(b2)) / values.length;
        } else if (column.column.fieldtype == "Int") {
          return values.reduce((a2, b2) => cint(a2) + cint(b2));
        } else if (frappe.model.is_numeric_field(column.column.fieldtype)) {
          return values.reduce((a2, b2) => flt(a2) + flt(b2));
        } else {
          return null;
        }
      } else {
        return null;
      }
    },
    setup_search($wrapper, el_class, text_class, data_attr) {
      const $search_input = $wrapper.find('[data-element="search"]').show();
      $search_input.focus().val("");
      const $elements = $wrapper.find(el_class).show();
      $search_input.off("keyup").on("keyup", () => {
        let text_filter = $search_input.val().toLowerCase();
        text_filter = text_filter.replace(/^\s+|\s+$/g, "");
        for (let i3 = 0; i3 < $elements.length; i3++) {
          const text_element = $elements.eq(i3).find(text_class);
          const text = text_element.text().toLowerCase();
          let name2 = "";
          if (data_attr && text_element.attr(data_attr)) {
            name2 = text_element.attr(data_attr).toLowerCase();
          }
          if (text.includes(text_filter) || name2.includes(text_filter)) {
            $elements.eq(i3).css("display", "");
          } else {
            $elements.eq(i3).css("display", "none");
          }
        }
      });
    },
    setup_timer(start, end, $element) {
      const increment = end > start;
      let counter = start;
      let interval = setInterval(() => {
        increment ? counter++ : counter--;
        if (increment ? counter > end : counter < end) {
          clearInterval(interval);
          return;
        }
        $element.text(counter);
      }, 1e3);
    },
    deep_equal(a2, b2) {
      return (0, import_fast_deep_equal.default)(a2, b2);
    },
    deep_clone(obj, customizer) {
      return (0, import_cloneDeepWith.default)(obj, customizer);
    },
    file_name_ellipsis(filename, length2) {
      let first_part_length = length2 * 2 / 3;
      let last_part_length = length2 - first_part_length;
      let parts2 = filename.split(".");
      let extn = parts2.pop();
      let name2 = parts2.join("");
      let first_part = name2.slice(0, first_part_length);
      let last_part = name2.slice(-last_part_length);
      if (name2.length > length2) {
        return `${first_part}...${last_part}.${extn}`;
      } else {
        return filename;
      }
    },
    get_decoded_string(dataURI) {
      let parts2 = dataURI.split(",");
      const encoded_data = parts2[1];
      let decoded = atob(encoded_data);
      try {
        const escaped = escape(decoded);
        decoded = decodeURIComponent(escaped);
      } catch (e2) {
      }
      return decoded;
    },
    copy_to_clipboard(string) {
      const show_success_alert = () => {
        frappe.show_alert({
          indicator: "green",
          message: __("Copied to clipboard.")
        });
      };
      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(string).then(show_success_alert);
      } else {
        let input = $("<textarea>");
        $("body").append(input);
        input.val(string).select();
        document.execCommand("copy");
        show_success_alert();
        input.remove();
      }
    },
    is_rtl(lang = null) {
      return ["ar", "he", "fa", "ps"].includes(lang || frappe.boot.lang);
    },
    bind_actions_with_object($el, object) {
      $($el).off("click.class_actions");
      $($el).on("click.class_actions", "[data-action]", (e2) => {
        let $target = $(e2.currentTarget);
        let action = $target.data("action");
        let method = object[action];
        method ? object[action](e2, $target) : null;
      });
      return $el;
    },
    eval(code, context = {}) {
      let variable_names = Object.keys(context);
      let variables = Object.values(context);
      code = `let out = ${code}; return out`;
      try {
        let expression_function = new Function(...variable_names, code);
        return expression_function(...variables);
      } catch (error) {
        console.log("Error evaluating the following expression:");
        console.error(code);
        throw error;
      }
    },
    get_browser() {
      let ua = navigator.userAgent;
      let tem;
      let M2 = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
      if (/trident/i.test(M2[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return { name: "IE", version: tem[1] || "" };
      }
      if (M2[1] === "Chrome") {
        tem = ua.match(/\bOPR|Edge\/(\d+)/);
        if (tem != null) {
          return { name: "Opera", version: tem[1] };
        }
      }
      M2 = M2[2] ? [M2[1], M2[2]] : [navigator.appName, navigator.appVersion, "-?"];
      if ((tem = ua.match(/version\/(\d+)/i)) != null) {
        M2.splice(1, 1, tem[1]);
      }
      return {
        name: M2[0],
        version: M2[1]
      };
    },
    get_formatted_duration(value2, duration_options = null) {
      let duration = "";
      if (!duration_options) {
        duration_options = {
          hide_days: 0,
          hide_seconds: 0
        };
      }
      if (value2) {
        let total_duration = frappe.utils.seconds_to_duration(value2, duration_options);
        if (total_duration.days) {
          duration += total_duration.days + __("d", null, "Days (Field: Duration)");
        }
        if (total_duration.hours) {
          duration += duration.length ? " " : "";
          duration += total_duration.hours + __("h", null, "Hours (Field: Duration)");
        }
        if (total_duration.minutes) {
          duration += duration.length ? " " : "";
          duration += total_duration.minutes + __("m", null, "Minutes (Field: Duration)");
        }
        if (total_duration.seconds) {
          duration += duration.length ? " " : "";
          duration += total_duration.seconds + __("s", null, "Seconds (Field: Duration)");
        }
      }
      return duration;
    },
    seconds_to_duration(seconds, duration_options) {
      const round = seconds > 0 ? Math.floor : Math.ceil;
      const total_duration = {
        days: round(seconds / 86400),
        hours: round(seconds % 86400 / 3600),
        minutes: round(seconds % 3600 / 60),
        seconds: round(seconds % 60)
      };
      if (duration_options && duration_options.hide_days) {
        total_duration.hours = round(seconds / 3600);
        total_duration.days = 0;
      }
      return total_duration;
    },
    duration_to_seconds(days = 0, hours = 0, minutes = 0, seconds = 0) {
      let value2 = 0;
      if (days) {
        value2 += days * 24 * 60 * 60;
      }
      if (hours) {
        value2 += hours * 60 * 60;
      }
      if (minutes) {
        value2 += minutes * 60;
      }
      if (seconds) {
        value2 += seconds;
      }
      return value2;
    },
    get_duration_options: function(docfield) {
      return {
        hide_days: docfield.hide_days,
        hide_seconds: docfield.hide_seconds
      };
    },
    get_number_system: function(country) {
      if (["Bangladesh", "India", "Myanmar", "Pakistan"].includes(country)) {
        return number_systems_default.indian;
      } else {
        return number_systems_default.default;
      }
    },
    map_defaults: {
      center: [19.08, 72.8961],
      zoom: 13,
      tiles: "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
      options: {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      },
      image_path: "/assets/frappe/images/leaflet/"
    },
    icon(icon_name, size = "sm", icon_class = "", icon_style = "", svg_class = "") {
      let size_class = "";
      let is_espresso = icon_name.startsWith("es-");
      icon_name = is_espresso ? `${"#" + icon_name}` : `${"#icon-" + icon_name}`;
      if (typeof size == "object") {
        icon_style += ` width: ${size.width}; height: ${size.height}`;
      } else {
        size_class = `icon-${size}`;
      }
      return `<svg class="${is_espresso ? icon_name.startsWith("es-solid") ? "es-icon es-solid" : "es-icon es-line" : "icon"} ${svg_class} ${size_class}" style="${icon_style}">
			<use class="${icon_class}" href="${icon_name}"></use>
		</svg>`;
    },
    flag(country_code) {
      return `<img
		src="https://flagcdn.com/${country_code}.svg"
		width="20" height="15">`;
    },
    make_chart(wrapper, custom_options = {}) {
      let chart_args = {
        type: "bar",
        colors: ["light-blue"],
        axisOptions: {
          xIsSeries: 1,
          shortenYAxisNumbers: 1,
          xAxisMode: "tick",
          numberFormatter: frappe.utils.format_chart_axis_number
        }
      };
      for (let key2 in custom_options) {
        if (typeof chart_args[key2] === "object" && typeof custom_options[key2] === "object") {
          chart_args[key2] = Object.assign(chart_args[key2], custom_options[key2]);
        } else {
          chart_args[key2] = custom_options[key2];
        }
      }
      return new frappe.Chart(wrapper, chart_args);
    },
    format_chart_axis_number(label, country) {
      const default_country = frappe.sys_defaults.country;
      return frappe.utils.shorten_number(label, country || default_country, 3);
    },
    generate_route(item) {
      const type = item.type.toLowerCase();
      if (type === "doctype") {
        item.doctype = item.name;
      }
      let route = "";
      if (!item.route) {
        if (item.link) {
          route = strip(item.link, "#");
        } else if (type === "doctype") {
          let doctype_slug = frappe.router.slug(item.doctype);
          if (frappe.model.is_single(item.doctype)) {
            route = doctype_slug;
          } else {
            switch (item.doc_view) {
              case "List":
                if (item.filters) {
                  frappe.route_options = item.filters;
                }
                route = `${doctype_slug}/view/list`;
                break;
              case "Tree":
                route = `${doctype_slug}/view/tree`;
                break;
              case "Report Builder":
                route = `${doctype_slug}/view/report`;
                break;
              case "Dashboard":
                route = `${doctype_slug}/view/dashboard`;
                break;
              case "New":
                route = `${doctype_slug}/new`;
                break;
              case "Calendar":
                route = `${doctype_slug}/view/calendar/default`;
                break;
              case "Kanban":
                route = `${doctype_slug}/view/kanban`;
                if (item.kanban_board) {
                  route += `/${item.kanban_board}`;
                }
                break;
              default:
                route = doctype_slug;
            }
          }
        } else if (type === "report") {
          if (item.is_query_report) {
            route = "query-report/" + item.name;
          } else if (!item.doctype) {
            route = "/report/" + item.name;
          } else {
            route = frappe.router.slug(item.doctype) + "/view/report/" + item.name;
          }
        } else if (type === "page") {
          route = item.name;
        } else if (type === "dashboard") {
          route = `dashboard-view/${item.name}`;
        }
      } else {
        route = item.route;
      }
      if (item.route_options) {
        route += "?" + $.map(item.route_options, function(value2, key2) {
          return encodeURIComponent(key2) + "=" + encodeURIComponent(value2);
        }).join("&");
      }
      return `/app/${route}`;
    },
    shorten_number: function(number, country, min_length = 4, max_no_of_decimals = 2) {
      const len = String(number).match(/\d/g).length;
      if (len < min_length)
        return number.toString();
      const number_system = this.get_number_system(country);
      let x2 = Math.abs(Math.round(number));
      for (const map2 of number_system) {
        if (x2 >= map2.divisor) {
          let result = number / map2.divisor;
          const no_of_decimals = this.get_number_of_decimals(result);
          result = no_of_decimals > max_no_of_decimals ? result.toFixed(max_no_of_decimals) : result;
          return result + " " + map2.symbol;
        }
      }
      return number.toFixed(max_no_of_decimals);
    },
    get_number_of_decimals: function(number) {
      if (Math.floor(number) === number)
        return 0;
      return number.toString().split(".")[1].length || 0;
    },
    build_summary_item(summary) {
      if (summary.type == "separator") {
        return $(`<div class="summary-separator">
				<div class="summary-value ${summary.color ? summary.color.toLowerCase() : "text-muted"}">${summary.value}</div>
			</div>`);
      }
      let df = { fieldtype: summary.datatype };
      let doc2 = null;
      if (summary.datatype == "Currency") {
        df.options = "currency";
        doc2 = { currency: summary.currency };
      }
      let value2 = frappe.format(summary.value, df, { only_value: true }, doc2);
      let color = summary.indicator ? summary.indicator.toLowerCase() : summary.color ? summary.color.toLowerCase() : "";
      return $(`<div class="summary-item">
			<span class="summary-label">${__(summary.label)}</span>
			<div class="summary-value ${color}">${value2}</div>
		</div>`);
    },
    print(doctype, docname, print_format, letterhead, lang_code) {
      let w2 = window.open(
        frappe.urllib.get_full_url(
          "/printview?doctype=" + encodeURIComponent(doctype) + "&name=" + encodeURIComponent(docname) + "&trigger_print=1&format=" + encodeURIComponent(print_format) + "&no_letterhead=" + (letterhead ? "0" : "1") + "&letterhead=" + encodeURIComponent(letterhead) + (lang_code ? "&_lang=" + lang_code : "")
        )
      );
      if (!w2) {
        frappe.msgprint(__("Please enable pop-ups"));
        return;
      }
    },
    get_clipboard_data(clipboard_paste_event) {
      let e2 = clipboard_paste_event;
      let clipboard_data = e2.clipboardData || window.clipboardData || e2.originalEvent.clipboardData;
      return clipboard_data.getData("Text");
    },
    add_custom_button(html, action, class_name = "", title = "", btn_type, wrapper, prepend) {
      if (!btn_type)
        btn_type = "btn-secondary";
      let button = $(
        `<button class="btn ${btn_type} btn-xs ${class_name}" title="${title}">${html}</button>`
      );
      button.click((event2) => {
        event2.stopPropagation();
        action && action(event2);
      });
      !prepend && button.appendTo(wrapper);
      prepend && wrapper.prepend(button);
    },
    add_select_group_button(wrapper, actions, btn_type, icon = "", prepend) {
      let selected_action = actions[0];
      let $select_group_button = $(`
			<div class="btn-group select-group-btn">
				<button type="button" class="btn ${btn_type} btn-sm selected-button">
					<span class="left-icon">${icon && frappe.utils.icon(icon, "xs")}</span>
					<span class="label">${selected_action.label}</span>
				</button>

				<button type="button" class="btn ${btn_type} btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown">
					${frappe.utils.icon("down", "xs")}
				</button>

				<ul class="dropdown-menu dropdown-menu-right" role="menu"></ul>
			</div>
		`);
      actions.forEach((action) => {
        $(`<li>
				<a class="dropdown-item flex">
					<div class="tick-icon mr-2">${frappe.utils.icon("check", "xs")}</div>
					<div>
						<div class="item-label">${action.label}</div>
						<div class="item-description text-muted small">${action.description || ""}</div>
					</div>
				</a>
			</li>`).appendTo($select_group_button.find(".dropdown-menu")).click((e2) => {
          selected_action = action;
          $select_group_button.find(".selected-button .label").text(action.label);
          $(e2.currentTarget).find(".tick-icon").addClass("selected");
          $(e2.currentTarget).siblings().find(".tick-icon").removeClass("selected");
        });
      });
      $select_group_button.find(".dropdown-menu li:first-child .tick-icon").addClass("selected");
      $select_group_button.find(".selected-button").click((event2) => {
        event2.stopPropagation();
        selected_action.action && selected_action.action(event2);
      });
      !prepend && $select_group_button.appendTo(wrapper);
      prepend && wrapper.prepend($select_group_button);
      return $select_group_button;
    },
    sleep(time) {
      return new Promise((resolve) => setTimeout(resolve, time));
    },
    parse_array(array) {
      if (array && array.length !== 0) {
        return array;
      }
      return void 0;
    },
    range(start, end) {
      if (!end) {
        end = start;
        start = 0;
      }
      let arr = [];
      for (let i3 = start; i3 < end; i3++) {
        arr.push(i3);
      }
      return arr;
    },
    get_link_title(doctype, name2) {
      if (!doctype || !name2 || !frappe._link_titles) {
        return;
      }
      return frappe._link_titles[doctype + "::" + name2];
    },
    add_link_title(doctype, name2, value2) {
      if (!doctype || !name2) {
        return;
      }
      if (!frappe._link_titles) {
        frappe._link_titles = {};
      }
      frappe._link_titles[doctype + "::" + name2] = value2;
    },
    fetch_link_title(doctype, name2) {
      try {
        return frappe.xcall("frappe.desk.search.get_link_title", {
          doctype,
          docname: name2
        }).then((title) => {
          frappe.utils.add_link_title(doctype, name2, title);
          return title;
        });
      } catch (error) {
        console.log("Error while fetching link title.");
        console.log(error);
        return Promise.resolve(name2);
      }
    },
    only_allow_num_decimal(input) {
      input.on("input", (e2) => {
        let self2 = $(e2.target);
        self2.val(self2.val().replace(/[^0-9.]/g, ""));
        if ((e2.which != 46 || self2.val().indexOf(".") != -1) && (e2.which < 48 || e2.which > 57)) {
          e2.preventDefault();
        }
      });
    },
    string_to_boolean(string) {
      switch (string.toLowerCase().trim()) {
        case "t":
        case "true":
        case "y":
        case "yes":
        case "1":
          return true;
        case "f":
        case "false":
        case "n":
        case "no":
        case "0":
        case null:
          return false;
        default:
          return string;
      }
    },
    get_filter_as_json(filters2) {
      let filter = null;
      if (filters2.length) {
        filter = {};
        filters2.forEach((arr) => {
          filter[arr[1]] = [arr[2], arr[3]];
        });
        filter = JSON.stringify(filter);
      }
      return filter;
    },
    process_filter_expression(filter) {
      return new Function(`return ${filter}`)();
    },
    get_filter_from_json(filter_json, doctype) {
      if (filter_json) {
        if (!filter_json.length) {
          return [];
        }
        const filters_json = this.process_filter_expression(filter_json);
        if (!doctype) {
          if (Array.isArray(filters_json)) {
            let filter = {};
            filters_json.forEach((arr) => {
              filter[arr[1]] = [arr[2], arr[3]];
            });
            return filter || [];
          }
          return filters_json || [];
        }
        if (Array.isArray(filters_json)) {
          return filters_json;
        }
        return Object.keys(filters_json).map((filter) => {
          let val2 = filters_json[filter];
          return [doctype, filter, val2[0], val2[1], false];
        });
      }
    },
    load_video_player() {
      return frappe.require("video_player.bundle.js");
    },
    is_current_user(user) {
      return user === frappe.session.user;
    },
    debug: {
      watch_property(obj, prop, callback = console.trace) {
        if (!frappe.boot.developer_mode) {
          return;
        }
        console.warn("Adding property watcher, make sure to remove it after debugging.");
        const private_prop = "$_" + prop + "_$";
        obj[private_prop] = obj[prop];
        Object.defineProperty(obj, prop, {
          get: function() {
            return obj[private_prop];
          },
          set: function(value2) {
            callback();
            obj[private_prop] = value2;
          }
        });
      }
    },
    generate_tracking_url() {
      frappe.prompt(
        [
          {
            fieldname: "url",
            label: __("Web Page URL"),
            fieldtype: "Data",
            options: "URL",
            reqd: 1,
            default: localStorage.getItem("tracker_url:url")
          },
          {
            fieldname: "source",
            label: __("Source"),
            fieldtype: "Data",
            default: localStorage.getItem("tracker_url:source")
          },
          {
            fieldname: "campaign",
            label: __("Campaign"),
            fieldtype: "Link",
            ignore_link_validation: 1,
            options: "Marketing Campaign",
            default: localStorage.getItem("tracker_url:campaign")
          },
          {
            fieldname: "medium",
            label: __("Medium"),
            fieldtype: "Data",
            default: localStorage.getItem("tracker_url:medium")
          }
        ],
        function(data) {
          let url2 = data.url;
          localStorage.setItem("tracker_url:url", data.url);
          if (data.source) {
            url2 += "?source=" + data.source;
            localStorage.setItem("tracker_url:source", data.source);
          }
          if (data.campaign) {
            url2 += "&campaign=" + data.campaign;
            localStorage.setItem("tracker_url:campaign", data.campaign);
          }
          if (data.medium) {
            url2 += "&medium=" + data.medium.toLowerCase();
            localStorage.setItem("tracker_url:medium", data.medium);
          }
          frappe.utils.copy_to_clipboard(url2);
          frappe.msgprint(
            __("Tracking URL generated and copied to clipboard") + `: <br><a href="${url2}">${url2.bold()}</a>`,
            __("Here's your tracking URL")
          );
        },
        __("Generate Tracking URL")
      );
    }
  });

  // frappe/public/js/frappe/event_emitter.js
  frappe.provide("frappe.utils");
  var EventEmitterMixin = {
    init() {
      this.jq = jQuery({});
    },
    trigger(evt, data) {
      !this.jq && this.init();
      this.jq.trigger(evt, data);
    },
    once(evt, handler) {
      !this.jq && this.init();
      this.jq.one(evt, (e2, data) => handler(data));
    },
    on(evt, handler) {
      !this.jq && this.init();
      this.jq.bind(evt, (e2, data) => handler(data));
    },
    off(evt, handler) {
      !this.jq && this.init();
      this.jq.unbind(evt, (e2, data) => handler(data));
    }
  };
  frappe.utils.make_event_emitter = function(object) {
    Object.assign(object, EventEmitterMixin);
    return object;
  };

  // frappe/public/js/frappe/router.js
  frappe.provide("frappe.views");
  frappe.re_route = { "#login": "" };
  frappe.route_titles = {};
  frappe.route_flags = {};
  frappe.route_history = [];
  frappe.view_factory = {};
  frappe.view_factories = [];
  frappe.route_options = null;
  frappe.open_in_new_tab = false;
  frappe.route_hooks = {};
  $(window).on("hashchange", function(e2) {
    if (window.location.hash && !frappe.router.is_app_route(e2.currentTarget.pathname)) {
      let sub_path = frappe.router.get_sub_path(window.location.hash);
      frappe.router.push_state(sub_path);
      return false;
    }
  });
  window.addEventListener("popstate", (e2) => {
    frappe.router.route();
    e2.preventDefault();
    return false;
  });
  $("body").on("click", "a", function(e2) {
    const target_element = e2.currentTarget;
    const href = target_element.getAttribute("href");
    const is_on_same_host = target_element.hostname === window.location.hostname;
    const override = (route) => {
      e2.preventDefault();
      frappe.set_route(route);
      return false;
    };
    if (!is_on_same_host || target_element.getAttribute("onclick") || e2.ctrlKey || e2.metaKey || href === "#") {
      return;
    }
    if (href && href.startsWith("#")) {
      return override(target_element.hash);
    }
    if (frappe.router.is_app_route(target_element.pathname)) {
      if (target_element.search) {
        frappe.route_options = {};
        let params = new URLSearchParams(target_element.search);
        for (const [key2, value2] of params) {
          frappe.route_options[key2] = value2;
        }
      }
      if (target_element.hash) {
        frappe.route_hash = target_element.hash;
      }
      return override(target_element.pathname);
    }
  });
  frappe.router = {
    current_route: null,
    routes: {},
    factory_views: ["form", "list", "report", "tree", "print", "dashboard"],
    list_views: [
      "list",
      "kanban",
      "report",
      "calendar",
      "tree",
      "gantt",
      "dashboard",
      "image",
      "inbox",
      "map"
    ],
    list_views_route: {
      list: "List",
      kanban: "Kanban",
      report: "Report",
      calendar: "Calendar",
      tree: "Tree",
      gantt: "Gantt",
      dashboard: "Dashboard",
      image: "Image",
      inbox: "Inbox",
      file: "Home",
      map: "Map"
    },
    layout_mapped: {},
    is_app_route(path) {
      if (path.substr(0, 1) === "/")
        path = path.substr(1);
      path = path.split("/");
      if (path[0]) {
        return path[0] === "app";
      }
    },
    setup() {
      for (let doctype of frappe.boot.user.can_read) {
        this.routes[this.slug(doctype)] = { doctype };
      }
      if (frappe.boot.doctype_layouts) {
        for (let doctype_layout of frappe.boot.doctype_layouts) {
          this.routes[this.slug(doctype_layout.name)] = {
            doctype: doctype_layout.document_type,
            doctype_layout: doctype_layout.name
          };
        }
      }
    },
    async route() {
      if (!frappe.app)
        return;
      let sub_path = this.get_sub_path();
      if (frappe.boot.setup_complete) {
        !frappe.re_route["setup-wizard"] && (frappe.re_route["setup-wizard"] = "app");
      } else if (!sub_path.startsWith("setup-wizard")) {
        frappe.re_route["setup-wizard"] && delete frappe.re_route["setup-wizard"];
        frappe.set_route(["setup-wizard"]);
      }
      if (this.re_route(sub_path))
        return;
      this.current_sub_path = sub_path;
      this.current_route = await this.parse();
      this.set_history(sub_path);
      this.render();
      this.set_title(sub_path);
      this.trigger("change");
    },
    async parse(route) {
      route = this.get_sub_path_string(route).split("/");
      if (!route)
        return [];
      route = $.map(route, this.decode_component);
      this.set_route_options_from_url();
      return await this.convert_to_standard_route(route);
    },
    async convert_to_standard_route(route) {
      let private_workspace = route[1] && `${route[1]}-${frappe.user.name.toLowerCase()}`;
      if (frappe.workspaces[route[0]]) {
        route = ["Workspaces", frappe.workspaces[route[0]].title];
      } else if (route[0] == "private") {
        if (!frappe.workspaces[private_workspace] && localStorage.new_workspace) {
          let new_workspace = JSON.parse(localStorage.new_workspace);
          if (frappe.router.slug(new_workspace.title) === route[1]) {
            frappe.workspaces[private_workspace] = new_workspace;
          }
        }
        if (!frappe.workspaces[private_workspace]) {
          frappe.msgprint(__("Workspace <b>{0}</b> does not exist", [route[1]]));
          return ["Workspaces"];
        }
        route = ["Workspaces", "private", frappe.workspaces[private_workspace].title];
      } else if (this.routes[route[0]]) {
        route = await this.set_doctype_route(route);
      }
      return route;
    },
    doctype_route_exist(route) {
      route = this.get_sub_path_string(route).split("/");
      return this.routes[route[0]];
    },
    set_doctype_route(route) {
      let doctype_route = this.routes[route[0]];
      return frappe.model.with_doctype(doctype_route.doctype).then(() => {
        let meta = frappe.get_meta(doctype_route.doctype);
        if (route[1] && route[1] === "view" && route[2]) {
          route = this.get_standard_route_for_list(
            route,
            doctype_route,
            meta.force_re_route_to_default_view && meta.default_view ? meta.default_view : null
          );
        } else if (route[1] && route[1] !== "view") {
          let docname = route[1];
          if (route.length > 2) {
            docname = route.slice(1).join("/");
          }
          route = ["Form", doctype_route.doctype, docname];
        } else if (frappe.model.is_single(doctype_route.doctype)) {
          route = ["Form", doctype_route.doctype, doctype_route.doctype];
        } else if (meta.default_view) {
          route = [
            "List",
            doctype_route.doctype,
            this.list_views_route[meta.default_view.toLowerCase()]
          ];
        } else {
          route = ["List", doctype_route.doctype, "List"];
        }
        this.doctype_layout = doctype_route.doctype_layout;
        return route;
      });
    },
    get_standard_route_for_list(route, doctype_route, default_view) {
      let standard_route;
      let _route = default_view || route[2] || "";
      if (_route.toLowerCase() === "tree") {
        standard_route = ["Tree", doctype_route.doctype];
      } else {
        let new_route = this.list_views_route[_route.toLowerCase()];
        let re_route = route[2].toLowerCase() !== new_route.toLowerCase();
        if (re_route) {
          frappe.route_flags.replace_route = true;
          route[2] = _route.toLowerCase();
          this.set_route(route);
        }
        standard_route = [
          "List",
          doctype_route.doctype,
          this.list_views_route[_route.toLowerCase()]
        ];
        if (route[3])
          standard_route.push(...route.slice(3, route.length));
      }
      return standard_route;
    },
    set_history() {
      frappe.route_history.push(this.current_route);
      frappe.ui.hide_open_dialog();
    },
    render() {
      if (this.current_route[0]) {
        this.render_page();
      } else {
        frappe.views.pageview.show("");
      }
    },
    render_page() {
      const route = this.current_route;
      const factory = frappe.utils.to_title_case(route[0]);
      if (route[1] && frappe.views[factory + "Factory"]) {
        route[0] = factory;
        if (!frappe.view_factory[factory]) {
          frappe.view_factory[factory] = new frappe.views[factory + "Factory"]();
        }
        frappe.view_factory[factory].show();
      } else {
        const route_name = frappe.utils.xss_sanitise(route[0]);
        if (frappe.views.pageview) {
          frappe.views.pageview.show(route_name);
        }
      }
    },
    re_route(sub_path) {
      if (frappe.re_route[sub_path] !== void 0) {
        const re_route_val = this.get_sub_path(frappe.re_route[sub_path]);
        if (re_route_val === this.current_sub_path) {
          window.history.back();
        } else {
          frappe.set_route(re_route_val);
        }
        return true;
      }
    },
    set_title(sub_path) {
      if (frappe.route_titles[sub_path]) {
        frappe.utils.set_title(frappe.route_titles[sub_path]);
      }
    },
    set_route() {
      let route = Array.from(arguments);
      return new Promise((resolve) => {
        route = this.get_route_from_arguments(route);
        route = this.convert_from_standard_route(route);
        let sub_path = this.make_url(route);
        sub_path += frappe.route_hash || "";
        frappe.route_hash = null;
        if (frappe.open_in_new_tab) {
          localStorage["route_options"] = JSON.stringify(frappe.route_options);
          window.open(sub_path, "_blank");
          frappe.open_in_new_tab = false;
        } else {
          this.push_state(sub_path);
        }
        setTimeout(() => {
          frappe.after_ajax && frappe.after_ajax(() => {
            resolve();
          });
        }, 100);
      }).finally(() => frappe.route_flags = {});
    },
    get_route_from_arguments(route) {
      if (route.length === 1 && $.isArray(route[0])) {
        route = route[0];
      }
      if (route.length === 1 && route[0] && route[0].includes("/")) {
        route = $.map(route[0].split("/"), this.decode_component);
      }
      if (route && route[0] == "") {
        route.shift();
      }
      if (route && ["desk", "app"].includes(route[0])) {
        route.shift();
      }
      return route;
    },
    convert_from_standard_route(route) {
      const view = route[0] ? route[0].toLowerCase() : "";
      let new_route = route;
      if (view === "list") {
        if (route[2] && route[2] !== "list" && !$.isPlainObject(route[2])) {
          new_route = [this.slug(route[1]), "view", route[2].toLowerCase()];
          if (route[3])
            new_route.push(...route.slice(3, route.length));
        } else {
          if ($.isPlainObject(route[2])) {
            frappe.route_options = route[2];
          }
          new_route = [this.slug(route[1])];
        }
      } else if (view === "form") {
        new_route = [this.slug(route[1])];
        if (route[2]) {
          new_route.push(route[2]);
        }
      } else if (view === "tree") {
        new_route = [this.slug(route[1]), "view", "tree"];
      }
      return new_route;
    },
    slug_parts(route) {
      if (route[0] && this.factory_views.includes(route[0].toLowerCase())) {
        route[0] = route[0].toLowerCase();
        route[1] = this.slug(route[1]);
      }
      return route;
    },
    make_url(params) {
      let path_string = $.map(params, function(a2) {
        if ($.isPlainObject(a2)) {
          frappe.route_options = a2;
          return null;
        } else {
          return encodeURIComponent(String(a2));
        }
      }).join("/");
      let private_home = frappe.workspaces[`home-${frappe.user.name.toLowerCase()}`];
      let workspace_name = private_home || frappe.workspaces["home"] ? "home" : "";
      let is_private = !!private_home;
      let first_workspace = Object.keys(frappe.workspaces)[0];
      if (!workspace_name && first_workspace) {
        workspace_name = frappe.workspaces[first_workspace].title;
        is_private = !frappe.workspaces[first_workspace].public;
      }
      let default_page = (is_private ? "private/" : "") + frappe.router.slug(workspace_name);
      return "/app/" + (path_string || default_page);
    },
    push_state(url2) {
      if (window.location.pathname !== url2) {
        const method = frappe.route_flags.replace_route ? "replaceState" : "pushState";
        history[method](null, null, url2);
        this.route();
      }
    },
    get_sub_path_string(route) {
      if (!route) {
        route = window.location.pathname;
        if (route.includes("app#")) {
          route = window.location.hash;
        }
      }
      return this.strip_prefix(route);
    },
    strip_prefix(route) {
      if (route.substr(0, 1) == "/")
        route = route.substr(1);
      if (route.startsWith("app/"))
        route = route.substr(4);
      if (route == "app")
        route = route.substr(4);
      if (route.substr(0, 1) == "/")
        route = route.substr(1);
      if (route.substr(0, 1) == "#")
        route = route.substr(1);
      if (route.substr(0, 1) == "!")
        route = route.substr(1);
      return route;
    },
    get_sub_path(route) {
      var sub_path = this.get_sub_path_string(route);
      route = $.map(sub_path.split("/"), this.decode_component).join("/");
      return route;
    },
    set_route_options_from_url() {
      let query_string = window.location.search;
      if (!frappe.route_options) {
        frappe.route_options = {};
      }
      if (localStorage.getItem("route_options")) {
        frappe.route_options = JSON.parse(localStorage.getItem("route_options"));
        localStorage.removeItem("route_options");
      }
      let params = new URLSearchParams(query_string);
      for (const [key2, value2] of params) {
        frappe.route_options[key2] = value2;
      }
    },
    decode_component(r2) {
      try {
        return decodeURIComponent(r2);
      } catch (e2) {
        if (e2 instanceof URIError) {
          return r2;
        } else {
          throw e2;
        }
      }
    },
    slug(name2) {
      return name2.toLowerCase().replace(/ /g, "-");
    }
  };
  frappe.get_route = () => frappe.router.current_route;
  frappe.get_route_str = () => frappe.router.current_route.join("/");
  frappe.set_route = function() {
    return frappe.router.set_route.apply(frappe.router, arguments);
  };
  frappe.get_prev_route = function() {
    if (frappe.route_history && frappe.route_history.length > 1) {
      return frappe.route_history[frappe.route_history.length - 2];
    } else {
      return [];
    }
  };
  frappe.set_re_route = function() {
    var tmp = frappe.router.get_sub_path();
    frappe.set_route.apply(null, arguments);
    frappe.re_route[tmp] = frappe.router.get_sub_path();
  };
  frappe.has_route_options = function() {
    return Boolean(Object.keys(frappe.route_options || {}).length);
  };
  frappe.utils.make_event_emitter(frappe.router);

  // frappe/public/js/frappe/router_history.js
  frappe.route_history_queue = [];
  var routes_to_skip = ["Form", "social", "setup-wizard", "recorder"];
  var save_routes = frappe.utils.debounce(() => {
    if (frappe.session.user === "Guest")
      return;
    const routes = frappe.route_history_queue;
    if (!routes.length)
      return;
    frappe.route_history_queue = [];
    frappe.xcall("frappe.desk.doctype.route_history.route_history.deferred_insert", {
      routes
    }).catch(() => {
      frappe.route_history_queue.concat(routes);
    });
  }, 1e4);
  frappe.router.on("change", () => {
    const route = frappe.get_route();
    if (is_route_useful(route)) {
      frappe.route_history_queue.push({
        creation: frappe.datetime.now_datetime(),
        route: frappe.get_route_str()
      });
      save_routes();
    }
  });
  function is_route_useful(route) {
    if (!route[1]) {
      return false;
    } else if (route[0] === "List" && !route[2] || routes_to_skip.includes(route[0])) {
      return false;
    } else {
      return true;
    }
  }

  // frappe/public/js/frappe/defaults.js
  frappe.defaults = {
    get_user_default: function(key2) {
      let defaults = frappe.boot.user.defaults;
      let d3 = defaults[key2];
      if (!d3 && frappe.defaults.is_a_user_permission_key(key2)) {
        d3 = defaults[frappe.model.scrub(key2)];
        let user_default = this.get_user_permission_default(key2, defaults);
        if (user_default)
          d3 = user_default;
      }
      if ($.isArray(d3))
        d3 = d3[0];
      if (!frappe.defaults.in_user_permission(key2, d3)) {
        return;
      }
      return d3;
    },
    get_user_permission_default: function(key2, defaults) {
      let permissions = this.get_user_permissions();
      let user_default = null;
      if (permissions[key2]) {
        permissions[key2].forEach((item) => {
          if (defaults[key2] == item.doc) {
            user_default = item.doc;
          }
        });
        permissions[key2].forEach((item) => {
          if (item.is_default) {
            user_default = item.doc;
          }
        });
      }
      return user_default;
    },
    get_user_defaults: function(key2) {
      var defaults = frappe.boot.user.defaults;
      var d3 = defaults[key2];
      if (frappe.defaults.is_a_user_permission_key(key2)) {
        if (d3 && $.isArray(d3) && d3.length === 1) {
          d3 = d3[0];
        } else {
          d3 = defaults[key2] || defaults[frappe.model.scrub(key2)];
        }
      }
      if (!$.isArray(d3))
        d3 = [d3];
      d3.filter((item) => {
        if (frappe.defaults.in_user_permission(key2, item)) {
          return item;
        }
      });
      return d3;
    },
    get_global_default: function(key2) {
      var d3 = frappe.sys_defaults[key2];
      if ($.isArray(d3))
        d3 = d3[0];
      return d3;
    },
    get_global_defaults: function(key2) {
      var d3 = frappe.sys_defaults[key2];
      if (!$.isArray(d3))
        d3 = [d3];
      return d3;
    },
    set_user_default_local: function(key2, value2) {
      frappe.boot.user.defaults[key2] = value2;
    },
    get_default: function(key2) {
      var defaults = frappe.boot.user.defaults;
      var value2 = defaults[key2];
      if (frappe.defaults.is_a_user_permission_key(key2)) {
        if (value2 && $.isArray(value2) && value2.length === 1) {
          value2 = value2[0];
        } else {
          value2 = defaults[frappe.model.scrub(key2)];
        }
      }
      if (!frappe.defaults.in_user_permission(key2, value2)) {
        return;
      }
      if (value2) {
        try {
          return JSON.parse(value2);
        } catch (e2) {
          return value2;
        }
      }
    },
    is_a_user_permission_key: function(key2) {
      return key2.indexOf(":") === -1 && key2 !== frappe.model.scrub(key2);
    },
    in_user_permission: function(key2, value2) {
      let user_permission = this.get_user_permissions()[frappe.model.unscrub(key2)];
      if (user_permission && user_permission.length) {
        return user_permission.some((perm) => {
          return perm.doc === value2;
        });
      } else {
        return true;
      }
    },
    get_user_permissions: function() {
      return this._user_permissions || {};
    },
    update_user_permissions: function() {
      const method = "frappe.core.doctype.user_permission.user_permission.get_user_permissions";
      frappe.call(method).then((r2) => {
        if (r2.message) {
          this._user_permissions = Object.assign({}, r2.message);
        }
      });
    },
    load_user_permission_from_boot: function() {
      if (frappe.boot.user.user_permissions) {
        this._user_permissions = Object.assign({}, frappe.boot.user.user_permissions);
      } else {
        frappe.defaults.update_user_permissions();
      }
    }
  };

  // frappe/public/js/frappe/roles_editor.js
  frappe.RoleEditor = class {
    constructor(wrapper, frm, disable) {
      this.frm = frm;
      this.wrapper = wrapper;
      this.disable = disable;
      let user_roles = this.frm.doc.roles.map((a2) => a2.role);
      this.multicheck = frappe.ui.form.make_control({
        parent: wrapper,
        df: {
          fieldname: "roles",
          fieldtype: "MultiCheck",
          select_all: true,
          columns: "15rem",
          get_data: () => {
            return frappe.xcall("frappe.core.doctype.user.user.get_all_roles").then((roles) => {
              return roles.map((role) => {
                return {
                  label: __(role),
                  value: role,
                  checked: user_roles.includes(role)
                };
              });
            });
          },
          on_change: () => {
            this.set_roles_in_table();
            this.frm.dirty();
          }
        },
        render_input: true
      });
      let original_func = this.multicheck.make_checkboxes;
      this.multicheck.make_checkboxes = () => {
        original_func.call(this.multicheck);
        this.multicheck.$wrapper.find(".label-area").click((e2) => {
          let role = $(e2.target).data("unit");
          role && this.show_permissions(role);
          e2.preventDefault();
        });
      };
    }
    set_enable_disable() {
      $(this.wrapper).find('input[type="checkbox"]').attr("disabled", this.disable ? true : false);
    }
    show_permissions(role) {
      if (!this.perm_dialog) {
        this.make_perm_dialog();
      }
      $(this.perm_dialog.body).empty();
      return frappe.xcall("frappe.core.doctype.user.user.get_perm_info", { role }).then((permissions) => {
        const $body2 = $(this.perm_dialog.body);
        if (!permissions.length) {
          $body2.append(`<div class="text-muted text-center padding">
						${__("{0} role does not have permission on any doctype", [__(role)])}
					</div>`);
        } else {
          $body2.append(`
						<table class="user-perm">
							<thead>
								<tr>
									<th> ${__("Document Type")} </th>
									<th> ${__("Level")} </th>
									${frappe.perm.rights.map((p2) => `<th> ${__(frappe.unscrub(p2))}</th>`).join("")}
								</tr>
							</thead>
							<tbody></tbody>
						</table>
					`);
          permissions.forEach((perm) => {
            $body2.find("tbody").append(`
							<tr>
								<td>${__(perm.parent)}</td>
								<td>${perm.permlevel}</td>
								${frappe.perm.rights.map(
              (p2) => `<td class="text-muted bold">${perm[p2] ? frappe.utils.icon("check", "xs") : "-"}</td>`
            ).join("")}
							</tr>
						`);
          });
        }
        this.perm_dialog.set_title(__(role));
        this.perm_dialog.show();
      });
    }
    make_perm_dialog() {
      this.perm_dialog = new frappe.ui.Dialog({
        title: __("Role Permissions")
      });
      this.perm_dialog.$wrapper.find(".modal-dialog").css("width", "auto").css("max-width", "1200px");
      this.perm_dialog.$wrapper.find(".modal-body").css("overflow", "overlay");
    }
    show() {
      this.reset();
      this.set_enable_disable();
    }
    reset() {
      let user_roles = (this.frm.doc.roles || []).map((a2) => a2.role);
      this.multicheck.selected_options = user_roles;
      this.multicheck.refresh_input();
    }
    set_roles_in_table() {
      let roles = this.frm.doc.roles || [];
      let checked_options = this.multicheck.get_checked_options();
      roles.map((role_doc) => {
        if (!checked_options.includes(role_doc.role)) {
          frappe.model.clear_doc(role_doc.doctype, role_doc.name);
        }
      });
      checked_options.map((role) => {
        if (!roles.find((d3) => d3.role === role)) {
          let role_doc = frappe.model.add_child(this.frm.doc, "Has Role", "roles");
          role_doc.role = role;
        }
      });
    }
    get_roles() {
      return {
        checked_roles: this.multicheck.get_checked_options(),
        unchecked_roles: this.multicheck.get_unchecked_options()
      };
    }
  };

  // frappe/public/js/frappe/module_editor.js
  frappe.ModuleEditor = class ModuleEditor {
    constructor(frm, wrapper) {
      this.frm = frm;
      this.wrapper = wrapper;
      const block_modules = this.frm.doc.block_modules.map((row) => row.module);
      this.multicheck = frappe.ui.form.make_control({
        parent: wrapper,
        df: {
          fieldname: "block_modules",
          fieldtype: "MultiCheck",
          select_all: true,
          columns: "15rem",
          get_data: () => {
            return this.frm.doc.__onload.all_modules.map((module2) => {
              return {
                label: __(module2),
                value: module2,
                checked: !block_modules.includes(module2)
              };
            });
          },
          on_change: () => {
            this.set_modules_in_table();
            this.frm.dirty();
          }
        },
        render_input: true
      });
    }
    show() {
      const block_modules = this.frm.doc.block_modules.map((row) => row.module);
      const all_modules = this.frm.doc.__onload.all_modules;
      this.multicheck.selected_options = all_modules.filter((m3) => !block_modules.includes(m3));
      this.multicheck.refresh_input();
    }
    set_modules_in_table() {
      let block_modules = this.frm.doc.block_modules || [];
      let unchecked_options = this.multicheck.get_unchecked_options();
      block_modules.map((module_doc) => {
        if (!unchecked_options.includes(module_doc.module)) {
          frappe.model.clear_doc(module_doc.doctype, module_doc.name);
        }
      });
      unchecked_options.map((module2) => {
        if (!block_modules.find((d3) => d3.module === module2)) {
          let module_doc = frappe.model.add_child(
            this.frm.doc,
            "Block Module",
            "block_modules"
          );
          module_doc.module = module2;
        }
      });
    }
  };

  // frappe/public/js/frappe/microtemplate.js
  frappe.template = { compiled: {}, debug: {} };
  frappe.template.compile = function(str, name2) {
    var key2 = name2 || str;
    if (!frappe.template.compiled[key2]) {
      let replacer2 = function(match, p1, p2, offset, string) {
        var i3 = frappe.utils.get_random(3);
        var len = frappe.utils.get_random(3);
        return "{% for (var " + i3 + "=0, " + len + "=" + p2 + ".length; " + i3 + "<" + len + "; " + i3 + "++) { var " + p1 + " = " + p2 + "[" + i3 + "]; " + p1 + "._index = " + i3 + "; %}";
      };
      var replacer = replacer2;
      if (str.indexOf("'") !== -1) {
        str.replace(/'/g, "\\'");
      }
      str = str.replace(/{{/g, "{%=").replace(/}}/g, "%}");
      str = str.replace(/{%\s?if\s?\s?not\s?([^\(][^%{]+)\s?%}/g, "{% if (! $1) { %}");
      str = str.replace(/{%\s?if\s?([^\(][^%{]+)\s?%}/g, "{% if ($1) { %}");
      str = str.replace(/{%\s?for\s([a-z._]+)\sin\s([a-z._]+)\s?%}/g, replacer2);
      str = str.replace(/{%\s?endif\s?%}/g, "{% }; %}");
      str = str.replace(/{%\s?else\s?%}/g, "{% } else { %}");
      str = str.replace(/{%\s?endfor\s?%}/g, "{% }; %}");
      var fn_str = "var _p=[],print=function(){_p.push.apply(_p,arguments)};with(obj){\n_p.push('" + str.replace(/[\r\t\n]/g, " ").split("{%").join("	").replace(/((^|%})[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%}/g, "',$1,'").split("	").join("');\n").split("%}").join("\n_p.push('").split("\r").join("\\'") + "');}return _p.join('');";
      frappe.template.debug[name2] = fn_str;
      try {
        frappe.template.compiled[key2] = new Function("obj", fn_str);
      } catch (e2) {
        console.log("Error in Template:");
        console.log(fn_str);
        if (e2.lineNumber) {
          console.log("Error in Line " + e2.lineNumber + ", Col " + e2.columnNumber + ":");
          console.log(fn_str.split("\n")[e2.lineNumber - 1]);
        }
      }
    }
    return frappe.template.compiled[key2];
  };
  frappe.render = function(str, data, name2) {
    return frappe.template.compile(str, name2)(data);
  };
  frappe.render_template = function(name2, data) {
    let template;
    if (name2.indexOf(" ") !== -1) {
      template = name2;
    } else {
      template = frappe.templates[name2];
    }
    if (data === void 0) {
      data = {};
    }
    if (!template) {
      frappe.throw(`Template <b>${name2}</b> not found.`);
    }
    return frappe.render(template, data, name2);
  };
  frappe.render_grid = function(opts) {
    if (opts.grid) {
      opts.columns = opts.grid.getColumns();
      opts.data = opts.grid.getData().getItems();
    }
    if (opts.print_settings && opts.print_settings.orientation && opts.print_settings.orientation.toLowerCase() === "landscape") {
      opts.landscape = true;
    }
    if (opts.landscape == null) {
      if (opts.columns && opts.columns.length > 10) {
        opts.landscape = true;
      } else {
        opts.landscape = false;
      }
    }
    if (!opts.content) {
      opts.content = frappe.render_template(opts.template || "print_grid", opts);
    }
    opts.base_url = frappe.urllib.get_base_url();
    opts.print_css = frappe.boot.print_css;
    opts.lang = opts.lang || frappe.boot.lang, opts.layout_direction = opts.layout_direction || frappe.utils.is_rtl() ? "rtl" : "ltr";
    var html = frappe.render_template("print_template", opts);
    var w2 = window.open();
    if (!w2) {
      frappe.msgprint(__("Please enable pop-ups in your browser"));
    }
    w2.document.write(html);
    w2.document.close();
  }, frappe.render_tree = function(opts) {
    opts.base_url = frappe.urllib.get_base_url();
    opts.landscape = false;
    opts.print_css = frappe.boot.print_css;
    opts.print_format_css_path = frappe.assets.bundled_asset("print_format.bundle.css");
    var tree = frappe.render_template("print_tree", opts);
    var w2 = window.open();
    if (!w2) {
      frappe.msgprint(__("Please enable pop-ups in your browser"));
    }
    w2.document.write(tree);
    w2.document.close();
  };
  frappe.render_pdf = function(html, opts = {}) {
    var formData = new FormData();
    formData.append("html", html);
    if (opts.orientation) {
      formData.append("orientation", opts.orientation);
    }
    var blob = new Blob([], { type: "text/xml" });
    formData.append("blob", blob);
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "/api/method/frappe.utils.print_format.report_to_pdf");
    xhr.setRequestHeader("X-Frappe-CSRF-Token", frappe.csrf_token);
    xhr.responseType = "arraybuffer";
    xhr.onload = function(success) {
      if (this.status === 200) {
        var blob2 = new Blob([success.currentTarget.response], { type: "application/pdf" });
        var objectUrl = URL.createObjectURL(blob2);
        let hidden_a_tag = document.createElement("a");
        document.body.appendChild(hidden_a_tag);
        hidden_a_tag.style = "display: none";
        hidden_a_tag.href = objectUrl;
        hidden_a_tag.download = opts.report_name || "report.pdf";
        hidden_a_tag.click();
        window.URL.revokeObjectURL(objectUrl);
      }
    };
    xhr.send(formData);
  };

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/page.html
  frappe.templates["page"] = `<div class="page-head flex">
	<div class="container">
		<div class="row flex align-center page-head-content justify-between">
			<div class="col-md-4 col-sm-6 col-xs-7 page-title">
				<!-- <div class="title-image hide hidden-md hidden-lg"></div> -->
				<!-- title -->
				<span class="sidebar-toggle-btn">
					<svg class="es-icon icon-md sidebar-toggle-placeholder">
						<use href="#es-line-align-justify"></use>
					</svg>
					<span class="sidebar-toggle-icon">
						<svg class="es-icon icon-md">
							<use href="#es-line-sidebar-collapse">
							</use>
						</svg>
					</span>
				</span>
				<div class="flex fill-width title-area">
					<div>
						<div class="flex">
							<h3 class="ellipsis title-text"></h3>
							<span class="indicator-pill whitespace-nowrap"></span>
						</div>
						<div class="ellipsis sub-heading hide text-muted"></div>
					</div>
					<button class="btn btn-default more-button hide">
						<svg class="icon icon-sm">
							<use href="#icon-dot-horizontal">
							</use>
						</svg>
					</button>
				</div>
			</div>
			<div class="flex col page-actions justify-content-end">
				<!-- buttons -->
				<div class="custom-actions hide hidden-xs hidden-md"></div>
				<div class="standard-actions flex">
					<span class="page-icon-group hide hidden-xs hidden-sm"></span>
					<div class="menu-btn-group hide">
						<button type="button" class="btn btn-default icon-btn" data-toggle="dropdown" aria-expanded="false">
							<span>
								<span class="menu-btn-group-label">
									<svg class="icon icon-sm">
										<use href="#icon-dot-horizontal">
										</use>
									</svg>
								</span>
							</span>
						</button>
						<ul class="dropdown-menu dropdown-menu-right" role="menu"></ul>
					</div>
					<button class="btn btn-secondary btn-default btn-sm hide"></button>
					<div class="actions-btn-group hide">
						<button type="button" class="btn btn-primary btn-sm" data-toggle="dropdown" aria-expanded="false">
							<span>
								<span class="hidden-xs actions-btn-group-label">{%= __("Actions") %}</span>
								<svg class="icon icon-xs">
									<use href="#icon-select">
									</use>
								</svg>
							</span>
						</button>
						<ul class="dropdown-menu dropdown-menu-right" role="menu">
						</ul>
					</div>
					<button class="btn btn-primary btn-sm hide primary-action"></button>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="container page-body">
	<div class="page-toolbar hide">
		<div class="container">
		</div>
	</div>
	<div class="page-wrapper">
		<div class="page-content">
			<div class="workflow-button-area btn-group pull-right hide"></div>
			<div class="clearfix"></div>
		</div>
	</div>
</div>
`;

  // frappe/public/js/frappe/ui/page.js
  frappe.ui.make_app_page = function(opts) {
    opts.parent.page = new frappe.ui.Page(opts);
    return opts.parent.page;
  };
  frappe.ui.pages = {};
  frappe.ui.Page = class Page {
    constructor(opts) {
      $.extend(this, opts);
      this.set_document_title = true;
      this.buttons = {};
      this.fields_dict = {};
      this.views = {};
      this.make();
      frappe.ui.pages[frappe.get_route_str()] = this;
    }
    make() {
      this.wrapper = $(this.parent);
      this.add_main_section();
      this.setup_scroll_handler();
      this.setup_sidebar_toggle();
    }
    setup_scroll_handler() {
      let last_scroll = 0;
      $(window).scroll(
        frappe.utils.throttle(() => {
          $(".page-head").toggleClass("drop-shadow", !!document.documentElement.scrollTop);
          let current_scroll = document.documentElement.scrollTop;
          if (current_scroll > 0 && last_scroll <= current_scroll) {
            $(".page-head").css("top", "-15px");
          } else {
            $(".page-head").css("top", "var(--navbar-height)");
          }
          last_scroll = current_scroll;
        }, 500)
      );
    }
    get_empty_state(title, message, primary_action) {
      return $(`<div class="page-card-container">
  			<div class="page-card">
  				<div class="page-card-head">
  					<span class="indicator blue">
  						${title}</span>
  				</div>
  				<p>${message}</p>
  				<div>
  					<button class="btn btn-primary btn-sm">${primary_action}</button>
  				</div>
  			</div>
  		</div>`);
    }
    load_lib(callback) {
      frappe.require(this.required_libs, callback);
    }
    add_main_section() {
      $(frappe.render_template("page", {})).appendTo(this.wrapper);
      if (this.single_column) {
        this.add_view(
          "main",
          '<div class="row layout-main">					<div class="col-md-12 layout-main-section-wrapper">						<div class="layout-main-section"></div>						<div class="layout-footer hide"></div>					</div>				</div>'
        );
      } else {
        this.add_view(
          "main",
          `
				<div class="row layout-main">
					<div class="col-lg-2 layout-side-section"></div>
					<div class="col layout-main-section-wrapper">
						<div class="layout-main-section"></div>
						<div class="layout-footer hide"></div>
					</div>
				</div>
			`
        );
      }
      this.setup_page();
    }
    setup_page() {
      this.$title_area = this.wrapper.find(".title-area");
      this.$sub_title_area = this.wrapper.find("h6");
      if (this.title)
        this.set_title(this.title);
      if (this.icon)
        this.get_main_icon(this.icon);
      this.body = this.main = this.wrapper.find(".layout-main-section");
      this.container = this.wrapper.find(".page-body");
      this.sidebar = this.wrapper.find(".layout-side-section");
      this.footer = this.wrapper.find(".layout-footer");
      this.indicator = this.wrapper.find(".indicator-pill");
      this.page_actions = this.wrapper.find(".page-actions");
      this.btn_primary = this.page_actions.find(".primary-action");
      this.btn_secondary = this.page_actions.find(".btn-secondary");
      this.menu = this.page_actions.find(".menu-btn-group .dropdown-menu");
      this.menu_btn_group = this.page_actions.find(".menu-btn-group");
      this.actions = this.page_actions.find(".actions-btn-group .dropdown-menu");
      this.actions_btn_group = this.page_actions.find(".actions-btn-group");
      this.standard_actions = this.page_actions.find(".standard-actions");
      this.custom_actions = this.page_actions.find(".custom-actions");
      this.page_form = $('<div class="page-form row hide"></div>').prependTo(this.main);
      this.inner_toolbar = this.custom_actions;
      this.icon_group = this.page_actions.find(".page-icon-group");
      if (this.make_page) {
        this.make_page();
      }
      this.card_layout && this.main.addClass("frappe-card");
      let menu_btn = this.menu_btn_group.find("button");
      menu_btn.attr("title", __("Menu")).tooltip({ delay: { show: 600, hide: 100 } });
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(menu_btn, menu_btn.find(".menu-btn-group-label"));
      let action_btn = this.actions_btn_group.find("button");
      frappe.ui.keys.get_shortcut_group(this.page_actions[0]).add(action_btn, action_btn.find(".actions-btn-group-label"));
    }
    setup_sidebar_toggle() {
      let sidebar_toggle = $(".page-head").find(".sidebar-toggle-btn");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      if (this.disable_sidebar_toggle || !sidebar_wrapper.length) {
        sidebar_toggle.remove();
      } else {
        sidebar_toggle.attr("title", __("Toggle Sidebar")).tooltip({
          delay: { show: 600, hide: 100 },
          trigger: "hover"
        });
        sidebar_toggle.click(() => {
          if (frappe.utils.is_xs() || frappe.utils.is_sm()) {
            this.setup_overlay_sidebar();
          } else {
            sidebar_wrapper.toggle();
          }
          $(document.body).trigger("toggleSidebar");
          this.update_sidebar_icon();
        });
      }
    }
    setup_overlay_sidebar() {
      this.sidebar.find(".close-sidebar").remove();
      let overlay_sidebar = this.sidebar.find(".overlay-sidebar").addClass("opened");
      $('<div class="close-sidebar">').hide().appendTo(this.sidebar).fadeIn();
      let scroll_container = $("html").css("overflow-y", "hidden");
      this.sidebar.find(".close-sidebar").on("click", (e2) => this.close_sidebar(e2));
      this.sidebar.on("click", "button:not(.dropdown-toggle)", (e2) => this.close_sidebar(e2));
      this.close_sidebar = () => {
        scroll_container.css("overflow-y", "");
        this.sidebar.find("div.close-sidebar").fadeOut(() => {
          overlay_sidebar.removeClass("opened").find(".dropdown-toggle").removeClass("text-muted");
        });
      };
    }
    update_sidebar_icon() {
      let sidebar_toggle = $(".page-head").find(".sidebar-toggle-btn");
      let sidebar_toggle_icon = sidebar_toggle.find(".sidebar-toggle-icon");
      let sidebar_wrapper = this.wrapper.find(".layout-side-section");
      let is_sidebar_visible = $(sidebar_wrapper).is(":visible");
      sidebar_toggle_icon.html(
        frappe.utils.icon(
          is_sidebar_visible ? "es-line-sidebar-collapse" : "es-line-sidebar-expand",
          "md"
        )
      );
    }
    set_indicator(label, color) {
      this.clear_indicator().removeClass("hide").html(`<span>${label}</span>`).addClass(color);
    }
    add_action_icon(icon, click, css_class = "", tooltip_label) {
      const button = $(`
			<button class="text-muted btn btn-default ${css_class} icon-btn">
				${frappe.utils.icon(icon)}
			</button>
		`);
      if (!tooltip_label) {
        if (icon.startsWith("es-")) {
          icon = icon.replace("es-line-", "");
          icon = icon.replace("es-solid-", "");
          icon = icon.replace("es-small-", "");
        }
        tooltip_label = frappe.unscrub(icon);
      }
      button.appendTo(this.icon_group.removeClass("hide"));
      button.click(click);
      button.attr("title", __(tooltip_label)).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      return button;
    }
    clear_indicator() {
      return this.indicator.removeClass().addClass("indicator-pill no-indicator-dot whitespace-nowrap hide");
    }
    get_icon_label(icon, label) {
      let icon_name = icon;
      let size = "xs";
      if (typeof icon === "object") {
        icon_name = icon.icon;
        size = icon.size || "xs";
      }
      return `${icon ? frappe.utils.icon(icon_name, size) : ""} <span class="hidden-xs"> ${__(
        label
      )} </span>`;
    }
    set_action(btn, opts) {
      let me2 = this;
      if (opts.icon) {
        opts.iconHTML = this.get_icon_label(opts.icon, opts.label);
      }
      this.clear_action_of(btn);
      btn.removeClass("hide").prop("disabled", false).html(opts.iconHTML || opts.label).attr("data-label", opts.label).on("click", function() {
        let response = opts.click.apply(this, [btn]);
        me2.btn_disable_enable(btn, response);
      });
      if (opts.working_label) {
        btn.attr("data-working-label", opts.working_label);
      }
      let text_span = btn.find("span");
      frappe.ui.keys.get_shortcut_group(this).add(btn, text_span.length ? text_span : btn);
    }
    set_primary_action(label, click, icon, working_label) {
      this.set_action(this.btn_primary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_primary;
    }
    set_secondary_action(label, click, icon, working_label) {
      this.set_action(this.btn_secondary, {
        label,
        click,
        icon,
        working_label
      });
      return this.btn_secondary;
    }
    clear_action_of(btn) {
      btn.addClass("hide").unbind("click").removeAttr("data-working-label");
    }
    clear_primary_action() {
      this.clear_action_of(this.btn_primary);
    }
    clear_secondary_action() {
      this.clear_action_of(this.btn_secondary);
    }
    clear_actions() {
      this.clear_primary_action();
      this.clear_secondary_action();
    }
    clear_custom_actions() {
      this.custom_actions.addClass("hide").empty();
    }
    clear_icons() {
      this.icon_group.addClass("hide").empty();
    }
    add_menu_item(label, click, standard, shortcut, show_parent) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.menu,
        shortcut,
        show_parent
      });
    }
    add_custom_menu_item(parent, label, click, standard, shortcut, icon = null) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent,
        shortcut,
        icon
      });
    }
    clear_menu() {
      this.clear_btn_group(this.menu);
    }
    show_menu() {
      this.menu_btn_group.removeClass("hide");
    }
    hide_menu() {
      this.menu_btn_group.addClass("hide");
    }
    show_icon_group() {
      this.icon_group.removeClass("hide");
    }
    hide_icon_group() {
      this.icon_group.addClass("hide");
    }
    show_actions_menu() {
      this.actions_btn_group.removeClass("hide");
    }
    hide_actions_menu() {
      this.actions_btn_group.addClass("hide");
    }
    add_action_item(label, click, standard) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        parent: this.actions
      });
    }
    add_actions_menu_item(label, click, standard, shortcut) {
      return this.add_dropdown_item({
        label,
        click,
        standard,
        shortcut,
        parent: this.actions,
        show_parent: false
      });
    }
    clear_actions_menu() {
      this.clear_btn_group(this.actions);
    }
    add_dropdown_item({
      label,
      click,
      standard,
      parent,
      shortcut,
      show_parent = true,
      icon = null
    }) {
      if (show_parent) {
        parent.parent().removeClass("hide hidden-xl");
      }
      let $link = this.is_in_group_button_dropdown(parent, "li > a.grey-link > span", label);
      if ($link)
        return $link;
      let $li;
      let $icon = ``;
      if (icon) {
        $icon = `<span class="menu-item-icon">${frappe.utils.icon(icon)}</span>`;
      }
      if (shortcut) {
        let shortcut_obj = this.prepare_shortcut_obj(shortcut, click, label);
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
						<kbd class="pull-right">
							<span>${shortcut_obj.shortcut_label}</span>
						</kbd>
					</a>
				</li>
			`);
        frappe.ui.keys.add_shortcut(shortcut_obj);
      } else {
        $li = $(`
				<li>
					<a class="grey-link dropdown-item" href="#" onClick="return false;">
						${$icon}
						<span class="menu-item-label">${label}</span>
					</a>
				</li>
			`);
      }
      $link = $li.find("a").on("click", (e2) => {
        if (e2.ctrlKey || e2.metaKey) {
          frappe.open_in_new_tab = true;
        }
        return click();
      });
      if (standard) {
        $li.appendTo(parent);
      } else {
        this.divider = parent.find(".dropdown-divider");
        if (!this.divider.length) {
          this.divider = $('<li class="dropdown-divider user-action"></li>').prependTo(
            parent
          );
        }
        $li.addClass("user-action").insertBefore(this.divider);
      }
      frappe.ui.keys.get_shortcut_group(parent.get(0)).add($link, $link.find(".menu-item-label"));
      return $link;
    }
    prepare_shortcut_obj(shortcut, click, label) {
      let shortcut_obj;
      if (typeof shortcut === "string") {
        shortcut_obj = { shortcut };
      } else {
        shortcut_obj = shortcut;
      }
      if (frappe.utils.is_mac()) {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut.replace("Ctrl", "\u2318");
      } else {
        shortcut_obj.shortcut_label = shortcut_obj.shortcut;
      }
      shortcut_obj.shortcut = shortcut_obj.shortcut.toLowerCase();
      if (!shortcut_obj.action) {
        shortcut_obj.action = click;
      }
      if (!shortcut_obj.description) {
        shortcut_obj.description = label;
      }
      shortcut_obj.page = this;
      return shortcut_obj;
    }
    is_in_group_button_dropdown(parent, selector, label) {
      if (!selector)
        selector = "li";
      if (!label || !parent)
        return false;
      const item_selector = `${selector}[data-label="${encodeURIComponent(label)}"]`;
      const existing_items = $(parent).find(item_selector);
      return (existing_items == null ? void 0 : existing_items.length) > 0 && existing_items;
    }
    clear_btn_group(parent) {
      parent.empty();
      parent.parent().addClass("hide");
    }
    add_divider() {
      return $('<li class="dropdown-divider"></li>').appendTo(this.menu);
    }
    get_or_add_inner_group_button(label) {
      var $group = this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
      if (!$group.length) {
        $group = $(
          `<div class="inner-group-button" data-label="${encodeURIComponent(label)}">
					<button type="button" class="btn btn-default ellipsis" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						${label}
						${frappe.utils.icon("select", "xs")}
					</button>
					<div role="menu" class="dropdown-menu"></div>
				</div>`
        ).appendTo(this.inner_toolbar);
      }
      return $group;
    }
    get_inner_group_button(label) {
      return this.inner_toolbar.find(
        `.inner-group-button[data-label="${encodeURIComponent(label)}"]`
      );
    }
    set_inner_btn_group_as_primary(label) {
      this.get_or_add_inner_group_button(label).find("button").removeClass("btn-default").addClass("btn-primary");
    }
    btn_disable_enable(btn, response) {
      if (response && response.then) {
        btn.prop("disabled", true);
        response.then(() => {
          btn.prop("disabled", false);
        });
      } else if (response && response.always) {
        btn.prop("disabled", true);
        response.always(() => {
          btn.prop("disabled", false);
        });
      }
    }
    add_inner_button(label, action, group, type = "default") {
      var me2 = this;
      let _action = function() {
        let btn = $(this);
        let response = action();
        me2.btn_disable_enable(btn, response);
      };
      let menu_item_label = group ? `${group} > ${label}` : label;
      let menu_item = this.add_menu_item(menu_item_label, _action, false, false, false);
      menu_item.parent().addClass("hidden-xl");
      if (this.menu_btn_group.hasClass("hide")) {
        this.menu_btn_group.removeClass("hide").addClass("hidden-xl");
      }
      if (group) {
        var $group = this.get_or_add_inner_group_button(group);
        $(this.inner_toolbar).removeClass("hide");
        if (!this.is_in_group_button_dropdown($group.find(".dropdown-menu"), "a", label)) {
          return $(
            `<a class="dropdown-item" href="#" onclick="return false;" data-label="${encodeURIComponent(
              label
            )}">${label}</a>`
          ).on("click", _action).appendTo($group.find(".dropdown-menu"));
        }
      } else {
        let button = this.inner_toolbar.find(
          `button[data-label="${encodeURIComponent(label)}"]`
        );
        if (button.length == 0) {
          button = $(`<button data-label="${encodeURIComponent(
            label
          )}" class="btn btn-${type} ellipsis">
					${__(label)}
				</button>`);
          button.on("click", _action);
          button.appendTo(this.inner_toolbar.removeClass("hide"));
        }
        return button;
      }
    }
    remove_inner_button(label, group) {
      if (typeof label === "string") {
        label = [label];
      }
      label = label.map((l2) => __(l2));
      if (group) {
        var $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`).remove();
        }
        if ($group.find(".dropdown-item").length === 0)
          $group.remove();
      } else {
        this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`).remove();
      }
    }
    change_inner_button_type(label, group, type) {
      let btn;
      if (group) {
        var $group = this.get_inner_group_button(__(group));
        if ($group.length) {
          btn = $group.find(`.dropdown-item[data-label="${encodeURIComponent(label)}"]`);
        }
      } else {
        btn = this.inner_toolbar.find(`button[data-label="${encodeURIComponent(label)}"]`);
      }
      if (btn) {
        btn.removeClass().addClass(`btn btn-${type} ellipsis`);
      }
    }
    add_inner_message(message) {
      let $message = $(`<span class='inner-page-message text-muted small'>${message}</div>`);
      this.inner_toolbar.find(".inner-page-message").remove();
      this.inner_toolbar.removeClass("hide").prepend($message);
      return $message;
    }
    clear_inner_toolbar() {
      this.inner_toolbar.empty().addClass("hide");
    }
    add_sidebar_item(label, action, insert_after, prepend) {
      var parent = this.sidebar.find(".sidebar-menu.standard-actions");
      var li2 = $("<li>");
      var link = $("<a>").html(label).on("click", action).appendTo(li2);
      if (insert_after) {
        li2.insertAfter(parent.find(insert_after));
      } else {
        if (prepend) {
          li2.prependTo(parent);
        } else {
          li2.appendTo(parent);
        }
      }
      return link;
    }
    clear_user_actions() {
      this.menu.find(".user-action").remove();
    }
    get_title_area() {
      return this.$title_area;
    }
    set_title(title, icon = null, strip2 = true, tab_title = "") {
      if (!title)
        title = "";
      if (strip2) {
        title = strip_html(title);
      }
      this.title = title;
      frappe.utils.set_title(tab_title || title);
      if (icon) {
        title = `${frappe.utils.icon(icon)} ${title}`;
      }
      let title_wrapper = this.$title_area.find(".title-text");
      title_wrapper.html(title);
      title_wrapper.attr("title", this.title);
    }
    set_title_sub(txt2) {
      this.$sub_title_area.html(txt2).toggleClass("hide", !!!txt2);
    }
    get_main_icon(icon) {
      return this.$title_area.find(".title-icon").html('<i class="' + icon + ' fa-fw"></i> ').toggle(true);
    }
    add_help_button(txt2) {
    }
    add_button(label, click, opts) {
      if (!opts)
        opts = {};
      let button = $(`<button
			class="btn ${opts.btn_class || "btn-default"} ${opts.btn_size || "btn-sm"} ellipsis">
				${opts.icon ? frappe.utils.icon(opts.icon) : ""}
				${label}
		</button>`);
      let menu_item = this.add_menu_item(label, click, false);
      menu_item.parent().addClass("hidden-xl");
      button.appendTo(this.custom_actions);
      button.on("click", click);
      this.custom_actions.removeClass("hide");
      return button;
    }
    add_custom_button_group(label, icon, parent) {
      let dropdown_label = `<span class="hidden-xs">
			<span class="custom-btn-group-label">${__(label)}</span>
			${frappe.utils.icon("select", "xs")}
		</span>`;
      if (icon) {
        dropdown_label = `<span class="hidden-xs">
				${frappe.utils.icon(icon)}
				<span class="custom-btn-group-label">${__(label)}</span>
				${frappe.utils.icon("select", "xs")}
			</span>
			<span class="visible-xs">
				${frappe.utils.icon(icon)}
			</span>`;
      }
      let custom_btn_group = $(`
			<div class="custom-btn-group">
				<button type="button" class="btn btn-default btn-sm ellipsis" data-toggle="dropdown" aria-expanded="false">
					${dropdown_label}
				</button>
				<ul class="dropdown-menu" role="menu"></ul>
			</div>
		`);
      if (!parent)
        parent = this.custom_actions;
      parent.removeClass("hide").append(custom_btn_group);
      return custom_btn_group.find(".dropdown-menu");
    }
    add_dropdown_button(parent, label, click, icon) {
      frappe.ui.toolbar.add_dropdown_button(parent, label, click, icon);
    }
    add_label(label) {
      this.show_form();
      return $("<label class='col-md-1 page-only-label'>" + label + " </label>").appendTo(
        this.page_form
      );
    }
    add_select(label, options) {
      var field = this.add_field({ label, fieldtype: "Select" });
      return field.$wrapper.find("select").empty().add_options(options);
    }
    add_data(label) {
      var field = this.add_field({ label, fieldtype: "Data" });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_date(label, date) {
      var field = this.add_field({ label, fieldtype: "Date", default: date });
      return field.$wrapper.find("input").attr("placeholder", label);
    }
    add_check(label) {
      return $("<div class='checkbox'><label><input type='checkbox'>" + label + "</label></div>").appendTo(this.page_form).find("input");
    }
    add_break() {
      this.page_form.append('<div class="clearfix invisible-xs"></div>');
    }
    add_field(df, parent) {
      this.show_form();
      if (!df.placeholder) {
        df.placeholder = df.label;
      }
      df.input_class = "input-xs";
      var f3 = frappe.ui.form.make_control({
        df,
        parent: parent || this.page_form,
        only_input: df.fieldtype == "Check" ? false : true
      });
      f3.refresh();
      $(f3.wrapper).addClass("col-md-2").attr("title", __(df.label)).tooltip({
        delay: { show: 600, hide: 100 },
        trigger: "hover"
      });
      if (df.fieldtype == "HTML") {
        return;
      }
      if (!f3.$input)
        f3.make_input();
      f3.$input.attr("placeholder", __(df.label));
      if (df.fieldtype === "Check") {
        $(f3.wrapper).find(":first-child").removeClass("col-md-offset-4 col-md-8");
      }
      if (df.fieldtype == "Button") {
        $(f3.wrapper).find(".page-control-label").html("&nbsp;");
        f3.$input.addClass("btn-xs").css({ width: "100%", "margin-top": "-1px" });
      }
      if (df["default"])
        f3.set_input(df["default"]);
      this.fields_dict[df.fieldname || df.label] = f3;
      return f3;
    }
    clear_fields() {
      this.page_form.empty();
    }
    show_form() {
      this.page_form.removeClass("hide");
    }
    hide_form() {
      this.page_form.addClass("hide");
    }
    get_form_values() {
      var values = {};
      for (let fieldname in this.fields_dict) {
        let field = this.fields_dict[fieldname];
        values[fieldname] = field.get_value();
      }
      return values;
    }
    add_view(name2, html) {
      let element = html;
      if (typeof html === "string") {
        element = $(html);
      }
      this.views[name2] = element.appendTo($(this.wrapper).find(".page-content"));
      if (!this.current_view) {
        this.current_view = this.views[name2];
      } else {
        this.views[name2].toggle(false);
      }
      return this.views[name2];
    }
    set_view(name2) {
      if (this.current_view_name === name2)
        return;
      this.current_view && this.current_view.toggle(false);
      this.current_view = this.views[name2];
      this.previous_view_name = this.current_view_name;
      this.current_view_name = name2;
      this.views[name2].toggle(true);
      this.wrapper.trigger("view-change");
    }
  };

  // frappe/public/js/frappe/ui/slides.js
  frappe.provide("frappe.ui");
  frappe.ui.Slide = class Slide {
    constructor(slide = null) {
      $.extend(this, slide);
      this.setup();
    }
    setup() {
      this.$wrapper = $('<div class="slide-wrapper hidden"></div>').attr({ "data-slide-id": this.id, "data-slide-name": this.name }).appendTo(this.parent);
    }
    make() {
      if (this.before_load)
        this.before_load(this);
      this.$body = $(`<div class="slide-body">
			<div class="content text-center">
				<h1 class="title slide-title">${__(this.title)}</h1>
			</div>
			<div class="form-wrapper">
				<div class="form"></div>
				<div class="add-more text-center" style="margin-top: 5px;">
					<button class="form-more-btn hide btn btn-default btn-xs">
						<span>Add More</span>
					</button>
				</div>
			</div>
		</div>`).appendTo(this.$wrapper);
      this.$content = this.$body.find(".content");
      this.$form = this.$body.find(".form");
      this.$primary_btn = this.slides_footer.find(".primary");
      this.$form_wrapper = this.$body.find(".form-wrapper");
      if (this.image_src)
        this.$content.append($(`<img src="${this.image_src}" style="margin: 20px;">`));
      if (this.help)
        this.$content.append($(`<p class="slide-help">${__(this.help)}</p>`));
      this.reqd_fields = [];
      this.refresh();
      this.made = true;
    }
    refresh() {
      this.render_parent_dots();
      if (!this.done) {
        this.setup_form();
      } else {
        this.setup_done_state();
      }
    }
    setup_form() {
      this.form = new frappe.ui.FieldGroup({
        fields: this.get_atomic_fields(),
        body: this.$form[0],
        no_submit_on_enter: true
      });
      this.form.make();
      if (this.add_more)
        this.bind_more_button();
      this.set_reqd_fields();
      if (this.onload)
        this.onload(this);
      this.set_reqd_fields();
    }
    setup_done_state() {
    }
    get_atomic_fields() {
      var fields = JSON.parse(JSON.stringify(this.fields));
      if (this.add_more) {
        this.count = 1;
        fields = fields.map((field, i3) => {
          if (field.fieldname) {
            field.fieldname += "_1";
          }
          if (i3 === 1 && this.mandatory_entry) {
            field.reqd = 1;
          }
          if (!field.static) {
            if (field.label)
              field.label;
          }
          return field;
        });
      }
      return fields;
    }
    set_reqd_fields() {
      var dict = this.form.fields_dict;
      this.reqd_fields = [];
      Object.keys(dict).map((key2) => {
        if (dict[key2].df.reqd) {
          this.reqd_fields.push(dict[key2]);
        }
      });
    }
    set_values(ignore_errors) {
      this.values = this.form.get_values(ignore_errors, true);
      if (this.values === null) {
        return false;
      }
      if (this.validate && !this.validate()) {
        return false;
      }
      return true;
    }
    bind_more_button() {
      this.$more = this.$body.find(".form-more-btn");
      this.$more.removeClass("hide").on("click", () => {
        this.count++;
        var fields = JSON.parse(JSON.stringify(this.fields));
        this.form.add_fields(
          fields.map((field) => {
            if (field.fieldname)
              field.fieldname += "_" + this.count;
            if (!field.static) {
              if (field.label)
                field.label;
            }
            field.reqd = 0;
            return field;
          })
        );
        if (this.count === this.max_count) {
          this.$more.addClass("hide");
        }
      });
    }
    resetup_primary_button() {
      this.unbind_primary_action();
      this.bind_fields_to_action_btn();
      this.reset_action_button_state();
      this.bind_primary_action();
    }
    bind_fields_to_action_btn() {
      var me2 = this;
      this.reqd_fields.map((field) => {
        field.$wrapper.on("change input click", () => {
          me2.reset_action_button_state();
        });
        field.$wrapper.on("keydown", "input", (e2) => {
          if (e2.key == "Enter") {
            me2.reset_action_button_state();
          }
        });
      });
    }
    reset_action_button_state() {
      var empty_fields = this.reqd_fields.filter((field) => {
        return !field.get_value();
      });
      if (empty_fields.length) {
        this.slides_footer.find(".action").addClass("disabled");
      } else {
        this.slides_footer.find(".action").removeClass("disabled");
      }
    }
    unbind_primary_action() {
      this.slides_footer.find(".primary").off();
    }
    bind_primary_action() {
      this.slides_footer.find(".primary").on("click.primary_action", () => {
        this.primary_action();
      });
    }
    is_last_slide() {
      if (this.id === this.parent[0].children.length - 1) {
        return true;
      }
      return false;
    }
    before_show() {
    }
    show_slide() {
      this.$wrapper.removeClass("hidden");
      this.before_show();
      this.resetup_primary_button();
      if (!this.done) {
        this.$body.find(".form-control").first().focus();
        this.$primary_btn.show();
      } else {
        this.$primary_btn.hide();
      }
    }
    hide_slide() {
      this.$wrapper.addClass("hidden");
    }
    get_input(fieldname) {
      return this.form.get_input(fieldname);
    }
    get_field(fieldname) {
      return this.form.get_field(fieldname);
    }
    get_value(fieldname) {
      return this.form.get_value(fieldname);
    }
    destroy() {
      this.$body.remove();
    }
    primary_action() {
    }
  };
  frappe.ui.Slides = class Slides {
    constructor({
      parent = null,
      slides = [],
      slide_class = null,
      unidirectional = 0,
      done_state = 0,
      before_load = null,
      on_update = null
    }) {
      this.parent = parent;
      this.slides = slides;
      this.slide_class = slide_class;
      this.unidirectional = unidirectional;
      this.done_state = done_state;
      this.before_load = before_load;
      this.on_update = on_update;
      this.page_name = "setup-wizard";
      this.slide_dict = {};
      this.made_slide_ids = [];
      this.values = {};
      this.make();
    }
    make() {
      this.$slide_progress = $(`<div>`).addClass(`slides-progress text-center text-extra-muted`).appendTo(this.parent);
      this.container = $("<div>").addClass("slides-wrapper").attr({ tabindex: -1 }).appendTo(this.parent);
      this.$body = $(`<div>`).addClass(`slide-container`).appendTo(this.container);
      this.$footer = $(`<div>`).addClass(`slide-footer`).appendTo(this.container);
      this.render_progress_dots();
      this.make_prev_next_complete_buttons();
      if (this.before_load)
        this.before_load(this.$footer);
      this.setup();
      this.show_slide(0);
    }
    setup() {
      this.slides.map((slide, id) => {
        if (!this.slide_dict[id]) {
          this.slide_dict[id] = new this.slide_class(
            $.extend(this.slides[id], {
              parent: this.$body,
              slides_footer: this.$footer,
              render_parent_dots: this.render_progress_dots.bind(this),
              id
            })
          );
          if (!this.unidirectional) {
            this.slide_dict[id].make();
          }
        } else {
          if (this.made_slide_ids.includes(id + "")) {
            this.slide_dict[id].done = false;
            this.slide_dict[id].destroy();
            this.slide_dict[id].make();
          }
        }
      });
    }
    refresh(id) {
      this.render_progress_dots();
      this.make_prev_next_complete_buttons();
      this.show_hide_prev_next(id);
      this.$body.find(".form-control").first().focus();
    }
    render_progress_dots() {
      this.$slide_progress.empty();
      if (this.slides.length <= 1)
        return;
      this.slides.map((slide, id) => {
        let $dot = $(`<div class="slide-step">
				<div class="slide-step-indicator"></div>
				<div class="slide-step-complete">${frappe.utils.icon("tick", "xs")}</div>
			</div>`).attr({ "data-step-id": id });
        if (this.done_state && (this.slide_dict[id] && this.slide_dict[id].done || slide.done)) {
          $dot.addClass("step-success");
        }
        if (this.unidirectional && id === this.current_id) {
          $dot.addClass("active");
        }
        this.$slide_progress.append($dot);
      });
      this.completed = 0;
      this.slides.map((slide, i3) => {
        if (this.slide_dict[i3]) {
          if (this.slide_dict[i3].done)
            this.completed++;
        } else {
          if (slide.done)
            this.completed++;
        }
      });
      if (this.on_update)
        this.on_update(this.completed, this.slides.length);
      if (!this.unidirectional)
        this.bind_progress_dots();
    }
    make_prev_next_complete_buttons() {
      this.$footer.empty();
      $(`<div class="row">
			<div class="col-sm-4 text-left prev-div">
				<button class="prev-btn btn btn-secondary btn-sm" tabindex="0">${__(
        "Previous",
        null,
        "Go to previous slide"
      )}</button>
			</div>
			<div class="col-sm-8 text-right next-div">
				<button class="complete-btn btn btn-sm primary">${__(
        "Complete Setup",
        null,
        "Finish the setup wizard"
      )}</button>
				<button class="next-btn btn btn-default btn-sm" tabindex="0">${__(
        "Next",
        null,
        "Go to next slide"
      )}</button>
			</div>
		</div>`).appendTo(this.$footer);
      this.$prev_btn = this.$footer.find(".prev-btn").attr("tabIndex", 0).on("click", () => this.show_slide(this.current_id - 1));
      this.$next_btn = this.$footer.find(".next-btn").attr("tabIndex", 0).on("click", () => {
        if (this.done_state) {
          if (this.slide)
            this.slide.done = true;
          if (this.current_slide)
            this.current_slide.done = true;
        }
        if (!this.unidirectional || this.unidirectional && this.current_slide.set_values()) {
          this.show_slide(this.current_id + 1);
        }
      });
      this.$complete_btn = this.$footer.find(".complete-btn").attr("tabIndex", 0);
    }
    bind_progress_dots() {
      var me2 = this;
      this.$slide_progress.find(".fa-circle").addClass("link").on("click", function() {
        let id = $(this).attr("data-step-id");
        me2.show_slide(id);
      });
    }
    before_show_slide() {
      return true;
    }
    show_slide(id) {
      id = cint(id);
      if (!this.before_show_slide() || this.current_slide && this.current_id === id) {
        return;
      }
      this.update_values();
      if (this.current_slide)
        this.current_slide.hide_slide();
      if (this.unidirectional && !this.slide_dict[id].made) {
        this.slide_dict[id].make();
      }
      this.current_id = id;
      this.current_slide = this.slide_dict[id];
      this.current_slide.show_slide();
      this.refresh(id);
    }
    destroy_slide(id) {
      if (this.slide_dict[id])
        this.slide_dict[id].destroy();
      this.slide_dict[id] = null;
    }
    on_update(completed, total) {
    }
    show_hide_prev_next(id) {
      id === 0 ? this.$prev_btn.hide() : this.$prev_btn.show();
      id + 1 === this.slides.length ? this.$next_btn.hide() : this.$next_btn.show();
    }
    get_values() {
      var values = {};
      $.each(this.slide_dict, function(id, slide) {
        if (slide.values) {
          $.extend(values, slide.values);
        }
      });
      return values;
    }
    update_values() {
      this.values = $.extend(this.values, this.get_values());
    }
  };

  // frappe/public/js/frappe/ui/find.js
  frappe.find = {
    page_primary_action: () => {
      return $(".page-actions:visible .btn-primary");
    },
    field: (fieldname, value2) => {
      return new Promise((resolve) => {
        let input = $(`[data-fieldname="${fieldname}"] :input`);
        if (value2) {
          input.val(value2).trigger("change");
          frappe.after_ajax(() => {
            resolve(input);
          });
        } else {
          resolve(input);
        }
      });
    }
  };

  // frappe/public/js/frappe/ui/iconbar.js
  frappe.ui.IconBar = class IconBar {
    constructor(parent, n_groups) {
      this.parent = parent;
      this.buttons = {};
      this.make(n_groups);
    }
    make(n_groups) {
      this.$wrapper = $('<div class="iconbar-wrapper hide"></div>').appendTo(this.parent);
      for (var i3 = 0; i3 < n_groups; i3++) {
        this.get_group(i3 + 1);
      }
    }
    get_group(group) {
      var $ul = this.$wrapper.find(".iconbar-" + group + " ul");
      if (!$ul.length)
        $ul = $('<div class="iconbar iconbar-' + group + ' hide"><ul></ul></div>').appendTo(this.$wrapper).find("ul");
      return $ul;
    }
    add_btn(group, icon, label, click) {
      var $ul = this.get_group(group);
      var $li = $('<li><i class="' + icon + '"></i></li>').appendTo($ul).on("click", function() {
        click.apply(this);
        return false;
      });
      $li.find("i").attr("title", label).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      this.$wrapper.find(".iconbar-" + group).removeClass("hide");
      this.show();
      return $li;
    }
    hide(group) {
      if (group) {
        this.$wrapper.find(".iconbar-" + group).addClass("hide");
        this.check_if_all_hidden();
      } else {
        this.$wrapper.addClass("hide").trigger("hidden");
      }
    }
    show(group) {
      if (group) {
        this.$wrapper.find(".iconbar-" + group).removeClass("hide");
        this.show();
      } else {
        if (this.$wrapper.hasClass("hide"))
          this.$wrapper.removeClass("hide").trigger("shown");
      }
    }
    clear(group) {
      var me2 = this;
      this.$wrapper.find(".iconbar-" + group).addClass("hide").find("ul").empty();
      this.check_if_all_hidden();
    }
    check_if_all_hidden() {
      if (!this.$wrapper.find(".iconbar:visible").length) {
        this.hide();
      }
    }
  };

  // frappe/public/js/frappe/form/link_selector.js
  frappe.ui.form.LinkSelector = class LinkSelector {
    constructor(opts) {
      $.extend(this, opts);
      var me2 = this;
      if (this.doctype != "[Select]") {
        frappe.model.with_doctype(this.doctype, function(r2) {
          me2.make();
        });
      } else {
        this.make();
      }
    }
    make() {
      var me2 = this;
      this.start = 0;
      this.page_length = 10;
      this.dialog = new frappe.ui.Dialog({
        title: __("Select {0}", [this.doctype == "[Select]" ? __("value") : __(this.doctype)]),
        fields: [
          {
            fieldtype: "Data",
            fieldname: "txt",
            label: __("Beginning with"),
            description: __("You can use wildcard %")
          },
          {
            fieldtype: "HTML",
            fieldname: "results"
          },
          {
            fieldtype: "Button",
            fieldname: "more",
            label: __("More"),
            click: () => {
              me2.start += me2.page_length;
              me2.search();
            }
          }
        ],
        primary_action_label: __("Search"),
        primary_action: function() {
          me2.start = 0;
          me2.search();
        }
      });
      if (this.txt)
        this.dialog.fields_dict.txt.set_input(this.txt);
      this.dialog.get_input("txt").on("keypress", function(e2) {
        if (e2.which === 13) {
          me2.start = 0;
          me2.search();
        }
      });
      this.dialog.show();
      this.search();
    }
    search() {
      var args = {
        txt: this.dialog.fields_dict.txt.get_value(),
        searchfield: "name",
        start: this.start,
        page_length: this.page_length
      };
      var me2 = this;
      if (this.target.set_custom_query) {
        this.target.set_custom_query(args);
      }
      if (this.target.is_grid && this.target.fieldinfo[this.fieldname] && this.target.fieldinfo[this.fieldname].get_query) {
        $.extend(args, this.target.fieldinfo[this.fieldname].get_query(cur_frm.doc));
      }
      frappe.link_search(
        this.doctype,
        args,
        function(results) {
          var parent = me2.dialog.fields_dict.results.$wrapper;
          if (args.start === 0) {
            parent.empty();
          }
          if (results.length) {
            for (const v2 of results) {
              var row = $(
                repl(
                  '<div class="row link-select-row">						<div class="col-xs-4">							<b><a href="#">%(name)s</a></b></div>						<div class="col-xs-8">							<span class="text-muted">%(values)s</span></div>						</div>',
                  {
                    name: v2[0],
                    values: v2.splice(1).join(", ")
                  }
                )
              ).appendTo(parent);
              row.find("a").attr("data-value", v2[0]).click(function() {
                var value2 = $(this).attr("data-value");
                if (me2.target.is_grid) {
                  me2.set_in_grid(value2).then(() => me2.search());
                } else {
                  if (me2.target.doctype)
                    me2.target.parse_validate_and_set_in_model(value2);
                  else {
                    me2.target.set_input(value2);
                    me2.target.$input.trigger("change");
                  }
                  me2.dialog.hide();
                }
                return false;
              });
            }
          } else {
            $(
              '<p><br><span class="text-muted">' + __("No Results") + "</span>" + (frappe.model.can_create(me2.doctype) ? '<br><br><a class="new-doc btn btn-default btn-sm">' + __("Create a new {0}", [__(me2.doctype)]) + "</a>" : "") + "</p>"
            ).appendTo(parent).find(".new-doc").click(function() {
              frappe.new_doc(me2.doctype);
            });
          }
          var more_btn = me2.dialog.fields_dict.more.$wrapper;
          if (results.length < me2.page_length) {
            more_btn.hide();
          } else {
            more_btn.show();
          }
        },
        this.dialog.get_primary_btn()
      );
    }
    set_in_grid(value2) {
      return new Promise((resolve) => {
        if (this.qty_fieldname) {
          frappe.prompt(
            {
              fieldname: "qty",
              fieldtype: "Float",
              label: "Qty",
              default: 1,
              reqd: 1
            },
            (data) => {
              let updated = (this.target.frm.doc[this.target.df.fieldname] || []).some(
                (d3) => {
                  if (d3[this.fieldname] === value2) {
                    frappe.model.set_value(d3.doctype, d3.name, this.qty_fieldname, data.qty).then(() => {
                      frappe.show_alert(
                        __("Added {0} ({1})", [
                          value2,
                          d3[this.qty_fieldname]
                        ])
                      );
                      resolve();
                    });
                    return true;
                  }
                }
              );
              if (!updated) {
                let d3 = null;
                frappe.run_serially([
                  () => d3 = this.target.add_new_row(),
                  () => frappe.timeout(0.1),
                  () => {
                    let args = {};
                    args[this.fieldname] = value2;
                    args[this.qty_fieldname] = data.qty;
                    return frappe.model.set_value(d3.doctype, d3.name, args);
                  },
                  () => frappe.show_alert(__("Added {0} ({1})", [value2, data.qty])),
                  () => resolve()
                ]);
              }
            },
            __("Set Quantity"),
            __("Set Quantity")
          );
        } else if (this.dynamic_link_field) {
          let d3 = this.target.add_new_row();
          frappe.model.set_value(
            d3.doctype,
            d3.name,
            this.dynamic_link_field,
            this.dynamic_link_reference
          );
          frappe.model.set_value(d3.doctype, d3.name, this.fieldname, value2).then(() => {
            frappe.show_alert(__("{0} {1} added", [this.dynamic_link_reference, value2]));
            resolve();
          });
        } else {
          let d3 = this.target.add_new_row();
          frappe.model.set_value(d3.doctype, d3.name, this.fieldname, value2).then(() => {
            frappe.show_alert(__("{0} added", [value2]));
            resolve();
          });
        }
      });
    }
  };
  frappe.link_search = function(doctype, args, callback, btn) {
    if (!args) {
      args = {
        txt: ""
      };
    }
    args.doctype = doctype;
    if (!args.searchfield) {
      args.searchfield = "name";
    }
    frappe.call({
      method: "frappe.desk.search.search_widget",
      type: "GET",
      args,
      callback: function(r2) {
        callback && callback(r2.message);
      },
      btn
    });
  };

  // frappe/public/js/frappe/form/multi_select_dialog.js
  frappe.ui.form.MultiSelectDialog = class MultiSelectDialog {
    constructor(opts) {
      Object.assign(this, opts);
      this.for_select = this.doctype == "[Select]";
      if (!this.for_select) {
        frappe.model.with_doctype(this.doctype, () => this.init());
      } else {
        this.init();
      }
    }
    init() {
      this.page_length = 20;
      this.child_page_length = 20;
      this.fields = this.get_fields();
      this.make();
    }
    get_fields() {
      const primary_fields = this.get_primary_filters();
      const result_fields = this.get_result_fields();
      const data_fields = this.get_data_fields();
      const child_selection_fields = this.get_child_selection_fields();
      return [...primary_fields, ...result_fields, ...data_fields, ...child_selection_fields];
    }
    get_result_fields() {
      const show_next_page = () => {
        this.page_length += 20;
        this.get_results();
      };
      return [
        {
          fieldtype: "HTML",
          fieldname: "results_area"
        },
        {
          fieldtype: "Button",
          fieldname: "more_btn",
          label: __("More"),
          click: show_next_page.bind(this)
        }
      ];
    }
    get_data_fields() {
      if (this.data_fields && this.data_fields.length) {
        return [{ fieldtype: "Section Break" }, ...this.data_fields];
      } else {
        return [];
      }
    }
    get_child_selection_fields() {
      const fields = [];
      if (this.allow_child_item_selection && this.child_fieldname) {
        const show_more_child_results = () => {
          this.child_page_length += 20;
          this.show_child_results();
        };
        fields.push({ fieldtype: "HTML", fieldname: "child_selection_area" });
        fields.push({
          fieldtype: "Button",
          fieldname: "more_child_btn",
          hidden: 1,
          label: __("More"),
          click: show_more_child_results.bind(this)
        });
      }
      return fields;
    }
    make() {
      let doctype_plural = __(this.doctype).plural();
      let title = __("Select {0}", [this.for_select ? __("value") : doctype_plural]);
      this.dialog = new frappe.ui.Dialog({
        title,
        fields: this.fields,
        size: this.size,
        primary_action_label: this.primary_action_label || __("Get Items"),
        secondary_action_label: __("Make {0}", [__(this.doctype)]),
        primary_action: () => {
          let filters_data = this.get_custom_filters();
          const data_values = cur_dialog.get_values();
          const filtered_children = this.get_selected_child_names();
          const selected_documents = [
            ...this.get_checked_values(),
            ...this.get_parent_name_of_selected_children()
          ];
          this.action(selected_documents, __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.args), data_values), filters_data), {
            filtered_children
          }));
        },
        secondary_action: this.make_new_document.bind(this)
      });
      if (this.add_filters_group) {
        this.make_filter_area();
      }
      this.args = {};
      this.setup_results();
      this.bind_events();
      this.get_results();
      this.dialog.show();
    }
    make_new_document(e2) {
      if (e2) {
        this.set_route_options();
        frappe.new_doc(this.doctype, true);
      }
    }
    set_route_options() {
      frappe.route_options = {};
      if (Array.isArray(this.setters)) {
        for (let df of this.setters) {
          frappe.route_options[df.fieldname] = this.dialog.fields_dict[df.fieldname].get_value() || void 0;
        }
      } else {
        Object.keys(this.setters).forEach((setter) => {
          frappe.route_options[setter] = this.dialog.fields_dict[setter].get_value() || void 0;
        });
      }
    }
    setup_results() {
      this.$parent = $(this.dialog.body);
      this.$wrapper = this.dialog.fields_dict.results_area.$wrapper.append(`<div class="results my-3"
			style="border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;"></div>`);
      this.$results = this.$wrapper.find(".results");
      this.$results.append(this.make_list_row());
    }
    show_child_results() {
      this.get_child_result().then((r2) => {
        this.child_results = r2.message || [];
        this.render_child_datatable();
        this.$wrapper.addClass("hidden");
        this.$child_wrapper.removeClass("hidden");
        this.dialog.fields_dict.more_btn.$wrapper.hide();
      });
    }
    is_child_selection_enabled() {
      var _a;
      return (_a = this.dialog.fields_dict["allow_child_item_selection"]) == null ? void 0 : _a.get_value();
    }
    toggle_child_selection() {
      if (this.is_child_selection_enabled()) {
        this.show_child_results();
      } else {
        this.child_results = [];
        this.get_results();
        this.$wrapper.removeClass("hidden");
        this.$child_wrapper.addClass("hidden");
      }
    }
    render_child_datatable() {
      if (!this.child_datatable) {
        this.setup_child_datatable();
      } else {
        setTimeout(() => {
          this.child_datatable.rowmanager.checkMap = [];
          this.child_datatable.refresh(this.get_child_datatable_rows());
          this.$child_wrapper.find(".dt-scrollable").css("height", "300px");
          this.$child_wrapper.find(".dt-scrollable").css("overflow-y", "scroll");
        }, 500);
      }
    }
    get_child_datatable_columns() {
      const parent = this.doctype;
      return [parent, ...this.child_columns].map((d3) => ({
        name: frappe.unscrub(d3),
        editable: false
      }));
    }
    get_child_datatable_rows() {
      if (this.child_results.length > this.child_page_length) {
        this.dialog.fields_dict.more_child_btn.toggle(true);
      } else {
        this.dialog.fields_dict.more_child_btn.toggle(false);
      }
      return this.child_results.slice(0, this.child_page_length).map((d3) => Object.values(d3).slice(1));
    }
    setup_child_datatable() {
      const header_columns = this.get_child_datatable_columns();
      const rows = this.get_child_datatable_rows();
      this.$child_wrapper = this.dialog.fields_dict.child_selection_area.$wrapper;
      this.$child_wrapper.addClass("my-3");
      this.child_datatable = new frappe.DataTable(this.$child_wrapper.get(0), {
        columns: header_columns,
        data: rows,
        layout: "fluid",
        inlineFilters: true,
        serialNoColumn: false,
        checkboxColumn: true,
        cellHeight: 35,
        noDataMessage: __("No Data"),
        disableReorderColumn: true
      });
      this.$child_wrapper.find(".dt-scrollable").css("height", "300px");
    }
    get_primary_filters() {
      let fields = [];
      let columns = new Array(3);
      columns[0] = [
        {
          fieldtype: "Data",
          label: __("Name"),
          fieldname: "search_term"
        }
      ];
      columns[1] = [];
      columns[2] = [];
      if ($.isArray(this.setters)) {
        this.setters.forEach((setter, index) => {
          columns[(index + 1) % 3].push(setter);
        });
      } else {
        Object.keys(this.setters).forEach((setter, index) => {
          let df_prop = frappe.meta.docfield_map[this.doctype][setter];
          columns[(index + 1) % 3].push({
            fieldtype: df_prop.fieldtype,
            label: df_prop.label,
            fieldname: setter,
            options: df_prop.options,
            default: this.setters[setter]
          });
        });
      }
      if (Object.seal) {
        Object.seal(columns);
      }
      if (this.allow_child_item_selection) {
        this.child_doctype = frappe.meta.get_docfield(
          this.doctype,
          this.child_fieldname
        ).options;
        columns[0].push({
          fieldtype: "Check",
          label: __("Select {0}", [this.child_doctype]),
          fieldname: "allow_child_item_selection",
          onchange: this.toggle_child_selection.bind(this)
        });
      }
      fields = [
        ...columns[0],
        { fieldtype: "Column Break" },
        ...columns[1],
        { fieldtype: "Column Break" },
        ...columns[2],
        { fieldtype: "Section Break", fieldname: "primary_filters_sb" }
      ];
      if (this.add_filters_group) {
        fields.push({
          fieldtype: "HTML",
          fieldname: "filter_area"
        });
      }
      return fields;
    }
    make_filter_area() {
      this.filter_group = new frappe.ui.FilterGroup({
        parent: this.dialog.get_field("filter_area").$wrapper,
        doctype: this.doctype,
        on_change: () => {
          if (this.is_child_selection_enabled()) {
            this.show_child_results();
          } else {
            this.get_results();
          }
        }
      });
      this.filter_group.wrapper.find(".apply-filters").hide();
    }
    get_custom_filters() {
      if (this.add_filters_group && this.filter_group) {
        return this.filter_group.get_filters().reduce((acc, filter) => {
          return Object.assign(acc, {
            [filter[1]]: [filter[2], filter[3]]
          });
        }, {});
      } else {
        return {};
      }
    }
    bind_events() {
      let me2 = this;
      this.$results.on("click", ".list-item-container", function(e2) {
        if (!$(e2.target).is(":checkbox") && !$(e2.target).is("a")) {
          $(this).find(":checkbox").trigger("click");
        }
      });
      this.$results.on("click", ".list-item--head :checkbox", (e2) => {
        this.$results.find(".list-item-container .list-row-check").prop("checked", $(e2.target).is(":checked"));
      });
      this.$parent.find(".input-with-feedback").on("change", () => {
        frappe.flags.auto_scroll = false;
        if (this.is_child_selection_enabled()) {
          this.show_child_results();
        } else {
          this.get_results();
        }
      });
      this.$parent.find('[data-fieldtype="Data"]').on("input", () => {
        var $this = $(this);
        clearTimeout($this.data("timeout"));
        $this.data(
          "timeout",
          setTimeout(function() {
            frappe.flags.auto_scroll = false;
            if (me2.is_child_selection_enabled()) {
              me2.show_child_results();
            } else {
              me2.empty_list();
              me2.get_results();
            }
          }, 300)
        );
      });
    }
    get_parent_name_of_selected_children() {
      if (!this.child_datatable || !this.child_datatable.datamanager.rows.length)
        return [];
      let parent_names = this.child_datatable.rowmanager.checkMap.reduce(
        (parent_names2, checked, index) => {
          if (checked == 1) {
            const parent_name = this.child_results[index].parent;
            if (!parent_names2.includes(parent_name)) {
              parent_names2.push(parent_name);
            }
          }
          return parent_names2;
        },
        []
      );
      return parent_names;
    }
    get_selected_child_names() {
      if (!this.child_datatable || !this.child_datatable.datamanager.rows.length)
        return [];
      let checked_names = this.child_datatable.rowmanager.checkMap.reduce(
        (checked_names2, checked, index) => {
          if (checked == 1) {
            const child_row_name = this.child_results[index].name;
            checked_names2.push(child_row_name);
          }
          return checked_names2;
        },
        []
      );
      return checked_names;
    }
    get_checked_values() {
      return this.$results.find(".list-item-container").map(function() {
        if ($(this).find(".list-row-check:checkbox:checked").length > 0) {
          return $(this).attr("data-item-name");
        }
      }).get();
    }
    get_checked_items() {
      let checked_values = this.get_checked_values();
      return this.results.filter((res) => checked_values.includes(res.name));
    }
    get_datatable_columns() {
      if (this.get_query && this.get_query().query && this.columns)
        return this.columns;
      if (Array.isArray(this.setters))
        return ["name", ...this.setters.map((df) => df.fieldname)];
      return ["name", ...Object.keys(this.setters)];
    }
    make_list_row(result = {}) {
      var me2 = this;
      let head = Object.keys(result).length === 0;
      let contents = ``;
      this.get_datatable_columns().forEach(function(column) {
        contents += `<div class="list-item__content ellipsis">
				${head ? `<span class="ellipsis text-muted" title="${__(
          frappe.model.unscrub(column)
        )}">${__(frappe.model.unscrub(column))}</span>` : column !== "name" ? `<span class="ellipsis result-row" title="${__(
          result[column] || ""
        )}">${__(result[column] || "")}</span>` : `<a href="${"/app/" + frappe.router.slug(me2.doctype) + "/" + result[column] || ""}" class="list-id ellipsis" title="${__(result[column] || "")}">
							${__(result[column] || "")}</a>`}
			</div>`;
      });
      let $row = $(`<div class="list-item">
			<div class="list-item__content" style="flex: 0 0 10px;">
				<input type="checkbox" class="list-row-check" data-item-name="${result.name}" ${result.checked ? "checked" : ""}>
			</div>
			${contents}
		</div>`);
      head ? $row.addClass("list-item--head") : $row = $(
        `<div class="list-item-container" data-item-name="${result.name}"></div>`
      ).append($row);
      return $row;
    }
    render_result_list(results, more = 0, empty2 = true) {
      var me2 = this;
      var more_btn = me2.dialog.fields_dict.more_btn.$wrapper;
      if (!frappe.flags.auto_scroll && empty2) {
        this.empty_list();
      }
      more_btn.hide();
      $(".modal-dialog .list-item--head").css("z-index", 1);
      if (results.length === 0)
        return;
      if (more)
        more_btn.show();
      let checked = this.get_checked_values();
      results.filter((result) => !checked.includes(result.name)).forEach((result) => {
        me2.$results.append(me2.make_list_row(result));
      });
      this.$results.find(".list-item--head").css("z-index", 1);
      if (frappe.flags.auto_scroll) {
        this.$results.animate({ scrollTop: me2.$results.prop("scrollHeight") }, 500);
      }
    }
    empty_list() {
      let checked = this.get_checked_items().map((item) => {
        return __spreadProps(__spreadValues({}, item), {
          checked: true
        });
      });
      this.$results.find(".list-item-container").remove();
      this.render_result_list(checked, 0, false);
    }
    get_filters_from_setters() {
      let me2 = this;
      let filters2 = (this.get_query ? this.get_query().filters : {}) || {};
      let filter_fields = [];
      if ($.isArray(this.setters)) {
        for (let df of this.setters) {
          filters2[df.fieldname] = me2.dialog.fields_dict[df.fieldname].get_value() || void 0;
          me2.args[df.fieldname] = filters2[df.fieldname];
          filter_fields.push(df.fieldname);
        }
      } else {
        Object.keys(this.setters).forEach(function(setter) {
          var value2 = me2.dialog.fields_dict[setter].get_value();
          if (me2.dialog.fields_dict[setter].df.fieldtype == "Data" && value2) {
            filters2[setter] = ["like", "%" + value2 + "%"];
          } else {
            filters2[setter] = value2 || void 0;
            me2.args[setter] = filters2[setter];
            filter_fields.push(setter);
          }
        });
      }
      return [filters2, filter_fields];
    }
    get_args_for_search() {
      let [filters2, filter_fields] = this.get_filters_from_setters();
      let custom_filters = this.get_custom_filters();
      Object.assign(filters2, custom_filters);
      return {
        doctype: this.doctype,
        txt: this.dialog.fields_dict["search_term"].get_value(),
        filters: filters2,
        filter_fields,
        page_length: this.page_length + 5,
        query: this.get_query ? this.get_query().query : "",
        as_dict: 1
      };
    }
    async perform_search(args) {
      const res = await frappe.call({
        type: "GET",
        method: "frappe.desk.search.search_widget",
        no_spinner: true,
        args
      });
      const more = res.message.length && res.message.length > this.page_length ? 1 : 0;
      return [res.message, more];
    }
    async get_results() {
      const args = this.get_args_for_search();
      let [results, more] = await this.perform_search(args);
      if (more) {
        results = results.splice(0, this.page_length);
      }
      this.results = [];
      if (results.length) {
        results.forEach((result) => {
          result.checked = 0;
          this.results.push(result);
        });
      }
      this.render_result_list(this.results, more);
    }
    async get_filtered_parents_for_child_search() {
      const parent_search_args = this.get_args_for_search();
      parent_search_args.filter_fields = ["name"];
      const [results, _2] = await this.perform_search(parent_search_args);
      let parent_names = [];
      if (results.length) {
        parent_names = results.map((v2) => v2.name);
      }
      return parent_names;
    }
    async add_parent_filters(filters2) {
      const parent_names = await this.get_filtered_parents_for_child_search();
      if (parent_names.length) {
        filters2.push(["parent", "in", parent_names]);
      }
    }
    add_custom_child_filters(filters2) {
      if (this.add_filters_group && this.filter_group) {
        this.filter_group.get_filters().forEach((filter) => {
          if (filter[0] == this.child_doctype) {
            filters2.push([filter[1], filter[2], filter[3]]);
          }
        });
      }
    }
    async get_child_result() {
      let filters2 = [["parentfield", "=", this.child_fieldname]];
      await this.add_parent_filters(filters2);
      this.add_custom_child_filters(filters2);
      return frappe.call({
        method: "frappe.client.get_list",
        args: {
          doctype: this.child_doctype,
          filters: filters2,
          fields: ["name", "parent", ...this.child_columns],
          parent: this.doctype,
          limit_page_length: this.child_page_length + 5,
          order_by: "parent"
        }
      });
    }
  };

  // frappe/public/js/frappe/ui/capture.js
  frappe._.get_data_uri = (element) => {
    const width = element.videoWidth;
    const height = element.videoHeight;
    const $canvas = $("<canvas/>");
    $canvas[0].width = width;
    $canvas[0].height = height;
    const context = $canvas[0].getContext("2d");
    context.drawImage(element, 0, 0, width, height);
    return $canvas[0].toDataURL("image/png");
  };
  function get_file_input() {
    let input = document.createElement("input");
    input.setAttribute("type", "file");
    input.setAttribute("accept", "image/*");
    input.setAttribute("multiple", "");
    return input;
  }
  function read(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }
  frappe.ui.Capture = class {
    constructor(options = {}) {
      this.options = frappe.ui.Capture.OPTIONS;
      this.set_options(options);
      this.facing_mode = "environment";
      this.images = [];
    }
    set_options(options) {
      this.options = __spreadValues(__spreadValues({}, frappe.ui.Capture.OPTIONS), options);
      return this;
    }
    show() {
      this.build_dialog();
      if (cint(frappe.boot.sysdefaults.force_web_capture_mode_for_uploads)) {
        this.show_for_desktop();
      } else if (frappe.is_mobile()) {
        this.show_for_mobile();
      } else {
        this.show_for_desktop();
      }
    }
    build_dialog() {
      let me2 = this;
      me2.dialog = new frappe.ui.Dialog({
        title: this.options.title,
        animate: this.options.animate,
        fields: [
          {
            fieldtype: "HTML",
            fieldname: "capture"
          },
          {
            fieldtype: "HTML",
            fieldname: "total_count"
          }
        ],
        on_hide: () => {
          this.stop_media_stream();
        }
      });
      me2.$template = $(frappe.ui.Capture.TEMPLATE);
      let field = me2.dialog.get_field("capture");
      $(field.wrapper).html(me2.$template);
      me2.update_count();
      me2.dialog.get_close_btn().on("click", () => {
        me2.hide();
      });
    }
    show_for_mobile() {
      let me2 = this;
      if (!me2.input) {
        me2.input = get_file_input();
      }
      me2.input.onchange = async () => {
        for (let file of me2.input.files) {
          let f3 = await read(file);
          me2.images.push(f3);
        }
        me2.render_preview();
        me2.dialog.show();
      };
      me2.input.click();
    }
    show_for_desktop() {
      let me2 = this;
      this.render_stream().then(() => {
        me2.dialog.show();
      }).catch((err) => {
        if (me2.options.error) {
          frappe.show_alert(frappe.ui.Capture.ERR_MESSAGE, 3);
        }
        throw err;
      });
    }
    render_stream() {
      let me2 = this;
      let constraints = {
        video: {
          facingMode: this.facing_mode
        }
      };
      return navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
        me2.stream = stream;
        me2.dialog.custom_actions.empty();
        me2.dialog.get_primary_btn().off("click");
        me2.setup_take_photo_action();
        me2.setup_preview_action();
        me2.setup_toggle_camera();
        me2.$template.find(".fc-stream-container").show();
        me2.$template.find(".fc-preview-container").hide();
        me2.video = me2.$template.find("video")[0];
        me2.video.srcObject = me2.stream;
        me2.video.load();
        me2.video.play();
      });
    }
    render_preview() {
      this.stop_media_stream();
      this.$template.find(".fc-stream-container").hide();
      this.$template.find(".fc-preview-container").show();
      this.dialog.get_primary_btn().off("click");
      let images = ``;
      this.images.forEach((image, idx) => {
        images += `
				<div class="mt-1 p-1 rounded col-md-3 col-sm-4 col-xs-4" data-idx="${idx}">
					<span class="capture-remove-btn" data-idx="${idx}">
						${frappe.utils.icon("close", "lg")}
					</span>
					<img class="rounded" src="${image}" data-idx="${idx}">
				</div>
			`;
      });
      this.$template.find(".fc-preview-container").empty();
      $(this.$template.find(".fc-preview-container")).html(
        `<div class="row">
				${images}
			</div>`
      );
      this.setup_capture_action();
      this.setup_submit_action();
      this.setup_remove_action();
      this.update_count();
      this.dialog.custom_actions.empty();
    }
    setup_take_photo_action() {
      let me2 = this;
      this.dialog.set_primary_action(__("Take Photo"), () => {
        const data_url = frappe._.get_data_uri(me2.video);
        me2.images.push(data_url);
        me2.setup_preview_action();
        me2.update_count();
      });
    }
    setup_preview_action() {
      let me2 = this;
      if (!this.images.length) {
        return;
      }
      this.dialog.set_secondary_action_label(__("Preview"));
      this.dialog.set_secondary_action(() => {
        me2.dialog.get_primary_btn().off("click");
        me2.render_preview();
      });
    }
    setup_remove_action() {
      let me2 = this;
      let elements = this.$template[0].getElementsByClassName("capture-remove-btn");
      elements.forEach((el) => {
        el.onclick = () => {
          let idx = parseInt(el.getAttribute("data-idx"));
          me2.images.splice(idx, 1);
          me2.render_preview();
        };
      });
    }
    update_count() {
      let field = this.dialog.get_field("total_count");
      let msg = `${__("Total Images")}: <b>${this.images.length}`;
      if (this.images.length === 0) {
        msg = __("No Images");
      }
      $(field.wrapper).html(`
			<div class="row mt-2">
				<div class="offset-4 col-4 d-flex justify-content-center">${msg}</b></div>
			</div>
		`);
    }
    setup_toggle_camera() {
      let me2 = this;
      this.dialog.add_custom_action(
        __("Switch Camera"),
        () => {
          me2.facing_mode = me2.facing_mode == "environment" ? "user" : "environment";
          frappe.show_alert({
            message: __("Switching Camera")
          });
          me2.stop_media_stream();
          me2.render_stream();
        },
        "btn-switch"
      );
    }
    setup_capture_action() {
      let me2 = this;
      this.dialog.set_secondary_action_label(__("Capture"));
      this.dialog.set_secondary_action(() => {
        if (frappe.is_mobile()) {
          me2.show_for_mobile();
        } else {
          me2.render_stream();
        }
      });
    }
    setup_submit_action() {
      let me2 = this;
      this.dialog.set_primary_action(__("Submit"), () => {
        me2.hide();
        if (me2.callback) {
          me2.callback(me2.images);
        }
      });
    }
    hide() {
      if (this.dialog)
        this.dialog.hide();
      this.stop_media_stream();
    }
    stop_media_stream() {
      if (this.stream) {
        this.stream.getTracks().forEach((track) => {
          track.stop();
        });
      }
    }
    submit(fn) {
      this.callback = fn;
    }
  };
  frappe.ui.Capture.OPTIONS = {
    title: __("Camera"),
    animate: false,
    error: false
  };
  frappe.ui.Capture.ERR_MESSAGE = __("Unable to load camera.");
  frappe.ui.Capture.TEMPLATE = `
<div class="frappe-capture">
	<div class="embed-responsive embed-responsive-16by9 fc-stream-container">
		<video class="fc-stream embed-responsive-item">${frappe.ui.Capture.ERR_MESSAGE}</video>
	</div>
	<div class="fc-preview-container px-2" style="display: none;">

	</div>
</div>
`;

  // frappe/public/js/frappe/ui/app_icon.js
  frappe.provide("frappe.ui");
  frappe.ui.app_icon = {
    get_html: function(module2, small) {
      var icon = module2.icon;
      var color = module2.color;
      if (icon && icon.match(/([\uE000-\uF8FF]|\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF])/g)) {
        module2.emoji = module2.icon;
      }
      var icon_style = "";
      if (module2.reverse) {
        icon_style = "color: #36414C;";
      }
      if (!color) {
        color = "#4aa3df";
      }
      if (!icon || module2.emoji) {
        icon = '<span class="inner" ' + (module2.reverse ? 'style="' + icon_style + '"' : "") + ">" + (module2.emoji || module2._label[0].toUpperCase()) + "</span>";
      } else if (icon.split(".").slice(-1)[0] === "svg") {
        $.ajax({
          url: frappe.urllib.get_full_url(icon),
          dataType: "text",
          async: false,
          success: function(data) {
            icon = data;
          }
        });
        icon = '<object class="app-icon-svg">' + icon + "</object>";
      } else {
        icon = '<i class="' + icon + '" title="' + module2._label + '" style="' + icon_style + '"></i>';
      }
      return '<div class="app-icon' + (small ? " app-icon-small" : "") + '" style="background-color: ' + color + '" title="' + module2._label + '">' + icon + "</div>";
    }
  };

  // frappe/public/js/frappe/ui/theme_switcher.js
  frappe.provide("frappe.ui");
  frappe.ui.ThemeSwitcher = class ThemeSwitcher {
    constructor() {
      this.setup_dialog();
      this.refresh();
    }
    setup_dialog() {
      this.dialog = new frappe.ui.Dialog({
        title: __("Switch Theme")
      });
      this.body = $(`<div class="theme-grid"></div>`).appendTo(this.dialog.$body);
      this.bind_events();
    }
    bind_events() {
      this.dialog.$wrapper.on("keydown", (e2) => {
        if (!this.themes)
          return;
        const key2 = frappe.ui.keys.get_key(e2);
        let increment_by;
        if (key2 === "right") {
          increment_by = 1;
        } else if (key2 === "left") {
          increment_by = -1;
        } else if (e2.keyCode === 13) {
          this.hide();
        } else {
          return;
        }
        const current_index = this.themes.findIndex((theme) => {
          return theme.name === this.current_theme;
        });
        const new_theme = this.themes[current_index + increment_by];
        if (!new_theme)
          return;
        new_theme.$html.click();
        return false;
      });
    }
    refresh() {
      this.current_theme = document.documentElement.getAttribute("data-theme-mode") || "light";
      this.fetch_themes().then(() => {
        this.render();
      });
    }
    fetch_themes() {
      return new Promise((resolve) => {
        this.themes = [
          {
            name: "light",
            label: __("Frappe Light"),
            info: __("Light Theme")
          },
          {
            name: "dark",
            label: __("Timeless Night"),
            info: __("Dark Theme")
          },
          {
            name: "automatic",
            label: __("Automatic"),
            info: __("Uses system's theme to switch between light and dark mode")
          }
        ];
        resolve(this.themes);
      });
    }
    render() {
      this.themes.forEach((theme) => {
        let html = this.get_preview_html(theme);
        html.appendTo(this.body);
        theme.$html = html;
      });
    }
    get_preview_html(theme) {
      const is_auto_theme = theme.name === "automatic";
      const preview = $(`<div class="${this.current_theme == theme.name ? "selected" : ""}">
			<div data-theme=${is_auto_theme ? "light" : theme.name}
				data-is-auto-theme="${is_auto_theme}" title="${theme.info}">
				<div class="background">
					<div>
						<div class="preview-check" data-theme=${is_auto_theme ? "dark" : theme.name}>
							${frappe.utils.icon("tick", "xs")}
						</div>
					</div>
					<div class="navbar"></div>
					<div class="p-2">
						<div class="toolbar">
							<span class="text"></span>
							<span class="primary"></span>
						</div>
						<div class="foreground"></div>
						<div class="foreground"></div>
					</div>
				</div>
			</div>
			<div class="mt-3 text-center">
				<h5 class="theme-title">${theme.label}</h5>
			</div>
		</div>`);
      preview.on("click", () => {
        if (this.current_theme === theme.name)
          return;
        this.themes.forEach((th) => {
          th.$html.removeClass("selected");
        });
        preview.addClass("selected");
        this.toggle_theme(theme.name);
      });
      return preview;
    }
    toggle_theme(theme) {
      this.current_theme = theme.toLowerCase();
      document.documentElement.setAttribute("data-theme-mode", this.current_theme);
      frappe.show_alert(__("Theme Changed"), 3);
      frappe.xcall("frappe.core.doctype.user.user.switch_theme", {
        theme: toTitle(theme)
      });
    }
    show() {
      this.dialog.show();
    }
    hide() {
      this.dialog.hide();
    }
  };
  frappe.ui.add_system_theme_switch_listener = () => {
    frappe.ui.dark_theme_media_query.addEventListener("change", () => {
      frappe.ui.set_theme();
    });
  };
  frappe.ui.dark_theme_media_query = window.matchMedia("(prefers-color-scheme: dark)");
  frappe.ui.set_theme = (theme) => {
    const root = document.documentElement;
    let theme_mode = root.getAttribute("data-theme-mode");
    if (!theme) {
      if (theme_mode === "automatic") {
        theme = frappe.ui.dark_theme_media_query.matches ? "dark" : "light";
      }
    }
    root.setAttribute("data-theme", theme || theme_mode);
  };

  // frappe/public/js/frappe/model/model.js
  frappe.provide("frappe.model");
  $.extend(frappe.model, {
    all_fieldtypes: [
      "Autocomplete",
      "Attach",
      "Attach Image",
      "Barcode",
      "Button",
      "Check",
      "Code",
      "Color",
      "Currency",
      "Data",
      "Date",
      "Datetime",
      "Duration",
      "Dynamic Link",
      "Float",
      "Geolocation",
      "Heading",
      "HTML",
      "HTML Editor",
      "Icon",
      "Image",
      "Int",
      "JSON",
      "Link",
      "Long Text",
      "Markdown Editor",
      "Password",
      "Percent",
      "Phone",
      "Read Only",
      "Rating",
      "Select",
      "Signature",
      "Small Text",
      "Table",
      "Table MultiSelect",
      "Text",
      "Text Editor",
      "Time"
    ],
    no_value_type: [
      "Section Break",
      "Column Break",
      "Tab Break",
      "HTML",
      "Table",
      "Table MultiSelect",
      "Button",
      "Image",
      "Fold",
      "Heading"
    ],
    layout_fields: ["Section Break", "Column Break", "Tab Break", "Fold"],
    std_fields_list: [
      "name",
      "owner",
      "creation",
      "modified",
      "modified_by",
      "_user_tags",
      "_comments",
      "_assign",
      "_liked_by",
      "docstatus",
      "idx"
    ],
    child_table_field_list: ["parent", "parenttype", "parentfield"],
    core_doctypes_list: [
      "DocType",
      "DocField",
      "DocPerm",
      "User",
      "Role",
      "Has Role",
      "Page",
      "Module Def",
      "Print Format",
      "Report",
      "Customize Form",
      "Customize Form Field",
      "Property Setter",
      "Custom Field",
      "Client Script"
    ],
    restricted_fields: [
      "name",
      "parent",
      "creation",
      "modified",
      "modified_by",
      "parentfield",
      "parenttype",
      "file_list",
      "flags",
      "docstatus"
    ],
    std_fields: [
      { fieldname: "name", fieldtype: "Link", label: __("ID") },
      { fieldname: "owner", fieldtype: "Link", label: __("Created By"), options: "User" },
      { fieldname: "idx", fieldtype: "Int", label: __("Index") },
      { fieldname: "creation", fieldtype: "Datetime", label: __("Created On") },
      { fieldname: "modified", fieldtype: "Datetime", label: __("Last Updated On") },
      {
        fieldname: "modified_by",
        fieldtype: "Link",
        label: __("Last Updated By"),
        options: "User"
      },
      { fieldname: "_user_tags", fieldtype: "Data", label: __("Tags") },
      { fieldname: "_liked_by", fieldtype: "Data", label: __("Liked By") },
      { fieldname: "_comments", fieldtype: "Text", label: __("Comments") },
      { fieldname: "_assign", fieldtype: "Text", label: __("Assigned To") },
      { fieldname: "docstatus", fieldtype: "Int", label: __("Document Status") }
    ],
    numeric_fieldtypes: ["Int", "Float", "Currency", "Percent", "Duration"],
    std_fields_table: [{ fieldname: "parent", fieldtype: "Data", label: __("Parent") }],
    table_fields: ["Table", "Table MultiSelect"],
    new_names: {},
    events: {},
    user_settings: {},
    init: function() {
      frappe.realtime.on("doc_update", function(data) {
        var doc2 = locals[data.doctype] && locals[data.doctype][data.name];
        if (doc2) {
          if (frappe.get_route()[0] === "Form" && cur_frm.doc.doctype === doc2.doctype && cur_frm.doc.name === doc2.name) {
            if (data.modified !== cur_frm.doc.modified && !frappe.ui.form.is_saving) {
              if (!cur_frm.is_dirty()) {
                cur_frm.debounced_reload_doc();
              } else {
                doc2.__needs_refresh = true;
                cur_frm.show_conflict_message();
              }
            }
          } else {
            if (!doc2.__unsaved) {
              frappe.model.remove_from_locals(doc2.doctype, doc2.name);
            } else {
              doc2.__needs_refresh = true;
            }
          }
        }
      });
    },
    is_value_type: function(fieldtype) {
      if (typeof fieldtype == "object") {
        fieldtype = fieldtype.fieldtype;
      }
      return frappe.model.no_value_type.indexOf(fieldtype) === -1;
    },
    is_non_std_field: function(fieldname) {
      return ![...frappe.model.std_fields_list, ...frappe.model.child_table_field_list].includes(
        fieldname
      );
    },
    get_std_field: function(fieldname, ignore = false) {
      var docfield = $.map(
        [].concat(frappe.model.std_fields).concat(frappe.model.std_fields_table),
        function(d3) {
          if (d3.fieldname == fieldname)
            return d3;
        }
      );
      if (!docfield.length) {
        if (ignore) {
          return { fieldname };
        } else {
          frappe.msgprint(__("Unknown Column: {0}", [fieldname]));
        }
      }
      return docfield[0];
    },
    get_from_localstorage: function(doctype) {
      if (localStorage["_doctype:" + doctype]) {
        return JSON.parse(localStorage["_doctype:" + doctype]);
      }
    },
    set_in_localstorage: function(doctype, docs) {
      try {
        localStorage["_doctype:" + doctype] = JSON.stringify(docs);
      } catch (e2) {
        console.warn("localStorage quota exceeded, clearing doctype cache");
        frappe.model.clear_local_storage();
        localStorage["_doctype:" + doctype] = JSON.stringify(docs);
      }
    },
    clear_local_storage: function() {
      for (var key2 in localStorage) {
        if (key2.startsWith("_doctype:")) {
          localStorage.removeItem(key2);
        }
      }
    },
    with_doctype: function(doctype, callback, async) {
      if (locals.DocType[doctype]) {
        callback && callback();
        return Promise.resolve();
      } else {
        let cached_timestamp = null;
        let cached_doc = null;
        let cached_docs = frappe.model.get_from_localstorage(doctype);
        if (cached_docs) {
          cached_doc = cached_docs.filter((doc2) => doc2.name === doctype)[0];
          if (cached_doc) {
            cached_timestamp = cached_doc.modified;
          }
        }
        return frappe.call({
          method: "frappe.desk.form.load.getdoctype",
          type: "GET",
          args: {
            doctype,
            with_parent: 1,
            cached_timestamp
          },
          async,
          callback: function(r2) {
            if (r2.exc) {
              frappe.msgprint(__("Unable to load: {0}", [__(doctype)]));
              throw "No doctype";
            }
            if (r2.message == "use_cache") {
              frappe.model.sync(cached_doc);
            } else {
              frappe.model.set_in_localstorage(doctype, r2.docs);
            }
            frappe.model.init_doctype(doctype);
            if (r2.user_settings) {
              frappe.model.user_settings[doctype] = JSON.parse(r2.user_settings);
              frappe.model.user_settings[doctype].updated_on = moment().toString();
            }
            callback && callback(r2);
          }
        });
      }
    },
    init_doctype: function(doctype) {
      var meta = locals.DocType[doctype];
      for (const asset_key of [
        "__list_js",
        "__custom_list_js",
        "__calendar_js",
        "__map_js",
        "__tree_js"
      ]) {
        if (meta[asset_key]) {
          new Function(meta[asset_key])();
        }
      }
      if (meta.__templates) {
        $.extend(frappe.templates, meta.__templates);
      }
    },
    with_doc: function(doctype, name2, callback) {
      return new Promise((resolve) => {
        if (!name2)
          name2 = doctype;
        if (locals[doctype] && locals[doctype][name2] && frappe.model.get_docinfo(doctype, name2)) {
          callback && callback(name2);
          resolve(frappe.get_doc(doctype, name2));
        } else {
          return frappe.call({
            method: "frappe.desk.form.load.getdoc",
            type: "GET",
            args: {
              doctype,
              name: name2
            },
            callback: function(r2) {
              callback && callback(name2, r2);
              resolve(frappe.get_doc(doctype, name2));
            }
          });
        }
      });
    },
    get_docinfo: function(doctype, name2) {
      return frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name2] || null;
    },
    set_docinfo: function(doctype, name2, key2, value2) {
      if (frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name2]) {
        frappe.model.docinfo[doctype][name2][key2] = value2;
      }
    },
    get_shared: function(doctype, name2) {
      return frappe.model.get_docinfo(doctype, name2).shared;
    },
    get_server_module_name: function(doctype) {
      var dt3 = frappe.model.scrub(doctype);
      var module2 = frappe.model.scrub(locals.DocType[doctype].module);
      var app = frappe.boot.module_app[module2];
      return app + "." + module2 + ".doctype." + dt3 + "." + dt3;
    },
    scrub: function(txt2) {
      return txt2.replace(/ /g, "_").toLowerCase();
    },
    unscrub: function(txt2) {
      return (txt2 || "").replace(/-|_/g, " ").replace(/\w*/g, function(keywords) {
        return keywords.charAt(0).toUpperCase() + keywords.substr(1).toLowerCase();
      });
    },
    can_create: function(doctype) {
      return frappe.boot.user.can_create.indexOf(doctype) !== -1;
    },
    can_select: function(doctype) {
      if (frappe.boot.user) {
        return frappe.boot.user.can_select.indexOf(doctype) !== -1;
      }
    },
    can_read: function(doctype) {
      if (frappe.boot.user) {
        return frappe.boot.user.can_read.indexOf(doctype) !== -1;
      }
    },
    can_write: function(doctype) {
      return frappe.boot.user.can_write.indexOf(doctype) !== -1;
    },
    can_get_report: function(doctype) {
      return frappe.boot.user.can_get_report.indexOf(doctype) !== -1;
    },
    can_delete: function(doctype) {
      if (!doctype)
        return false;
      return frappe.boot.user.can_delete.indexOf(doctype) !== -1;
    },
    can_cancel: function(doctype) {
      if (!doctype)
        return false;
      return frappe.boot.user.can_cancel.indexOf(doctype) !== -1;
    },
    has_workflow: function(doctype) {
      return frappe.get_list("Workflow", { document_type: doctype, is_active: 1 }).length;
    },
    is_submittable: function(doctype) {
      if (!doctype)
        return false;
      return locals.DocType[doctype] && locals.DocType[doctype].is_submittable;
    },
    is_table: function(doctype) {
      if (!doctype)
        return false;
      return locals.DocType[doctype] && locals.DocType[doctype].istable;
    },
    is_single: function(doctype) {
      if (!doctype)
        return false;
      return frappe.boot.single_types.indexOf(doctype) != -1;
    },
    is_tree: function(doctype) {
      if (!doctype)
        return false;
      return locals.DocType[doctype] && locals.DocType[doctype].is_tree;
    },
    is_fresh(doc2) {
      return doc2 && doc2.__last_sync_on && new Date() - doc2.__last_sync_on < 5e3;
    },
    can_import: function(doctype, frm, meta = null) {
      if (meta && !meta.allow_import)
        return false;
      if (frappe.user_roles.includes("System Manager"))
        return true;
      if (frm)
        return frm.perm[0].import === 1;
      return frappe.boot.user.can_import.indexOf(doctype) !== -1;
    },
    can_export: function(doctype, frm) {
      if (frappe.user_roles.includes("System Manager"))
        return true;
      if (frm)
        return frm.perm[0].export === 1;
      return frappe.boot.user.can_export.indexOf(doctype) !== -1;
    },
    can_print: function(doctype, frm) {
      if (frm)
        return frm.perm[0].print === 1;
      return frappe.boot.user.can_print.indexOf(doctype) !== -1;
    },
    can_email: function(doctype, frm) {
      if (frm)
        return frm.perm[0].email === 1;
      return frappe.boot.user.can_email.indexOf(doctype) !== -1;
    },
    can_share: function(doctype, frm) {
      let disable_sharing = cint(frappe.sys_defaults.disable_document_sharing);
      if (disable_sharing && frappe.session.user !== "Administrator") {
        return false;
      }
      if (frm) {
        return frm.perm[0].share === 1;
      }
      return frappe.boot.user.can_share.indexOf(doctype) !== -1;
    },
    has_value: function(dt3, dn, fn) {
      var val2 = locals[dt3] && locals[dt3][dn] && locals[dt3][dn][fn];
      var df = frappe.meta.get_docfield(dt3, fn, dn);
      let ret;
      if (frappe.model.table_fields.includes(df.fieldtype)) {
        ret = false;
        $.each(locals[df.options] || {}, function(k2, d3) {
          if (d3.parent == dn && d3.parenttype == dt3 && d3.parentfield == df.fieldname) {
            ret = true;
            return false;
          }
        });
      } else {
        ret = !is_null(val2);
      }
      return ret ? true : false;
    },
    get_list: function(doctype, filters2) {
      var docsdict = locals[doctype] || locals[":" + doctype] || {};
      if ($.isEmptyObject(docsdict))
        return [];
      return frappe.utils.filter_dict(docsdict, filters2);
    },
    get_value: function(doctype, filters2, fieldname, callback) {
      if (callback) {
        frappe.call({
          method: "frappe.client.get_value",
          args: {
            doctype,
            fieldname,
            filters: filters2
          },
          callback: function(r2) {
            if (!r2.exc) {
              callback(r2.message);
            }
          }
        });
      } else {
        if (["number", "string"].includes(typeof filters2) && locals[doctype] && locals[doctype][filters2]) {
          return locals[doctype][filters2][fieldname];
        } else {
          var l2 = frappe.get_list(doctype, filters2);
          return l2.length && l2[0] ? l2[0][fieldname] : null;
        }
      }
    },
    set_value: function(doctype, docname, fieldname, value2, fieldtype, skip_dirty_trigger = false) {
      var doc2;
      if ($.isPlainObject(doctype)) {
        doc2 = doctype;
        fieldname = docname;
        value2 = fieldname;
      } else {
        doc2 = locals[doctype] && locals[doctype][docname];
      }
      let to_update = fieldname;
      let tasks = [];
      if (!$.isPlainObject(to_update)) {
        to_update = {};
        to_update[fieldname] = value2;
      }
      $.each(to_update, (key2, value3) => {
        if (doc2 && doc2[key2] !== value3) {
          if (doc2.__unedited && !(!doc2[key2] && !value3)) {
            doc2.__unedited = false;
          }
          doc2[key2] = value3;
          tasks.push(() => frappe.model.trigger(key2, value3, doc2, skip_dirty_trigger));
        } else {
          if (in_list(["Link", "Dynamic Link"], fieldtype) && doc2) {
            tasks.push(() => frappe.model.trigger(key2, value3, doc2, skip_dirty_trigger));
          }
        }
      });
      return frappe.run_serially(tasks);
    },
    on: function(doctype, fieldname, fn) {
      frappe.provide("frappe.model.events." + doctype);
      if (!frappe.model.events[doctype][fieldname]) {
        frappe.model.events[doctype][fieldname] = [];
      }
      frappe.model.events[doctype][fieldname].push(fn);
    },
    trigger: function(fieldname, value2, doc2, skip_dirty_trigger = false) {
      const tasks = [];
      function enqueue_events(events) {
        if (!events)
          return;
        for (const fn of events) {
          if (!fn)
            continue;
          tasks.push(() => {
            const return_value = fn(fieldname, value2, doc2, skip_dirty_trigger);
            if (return_value && return_value.then) {
              return return_value;
            } else {
              return frappe.after_server_call();
            }
          });
        }
      }
      if (frappe.model.events[doc2.doctype]) {
        enqueue_events(frappe.model.events[doc2.doctype][fieldname]);
        enqueue_events(frappe.model.events[doc2.doctype]["*"]);
      }
      return frappe.run_serially(tasks);
    },
    get_doc: function(doctype, name2) {
      if (!name2)
        name2 = doctype;
      if ($.isPlainObject(name2)) {
        var doc2 = frappe.get_list(doctype, name2);
        return doc2 && doc2.length ? doc2[0] : null;
      }
      return locals[doctype] ? locals[doctype][name2] : null;
    },
    get_children: function(doctype, parent, parentfield, filters2) {
      let doc2;
      if ($.isPlainObject(doctype)) {
        doc2 = doctype;
        filters2 = parentfield;
        parentfield = parent;
      } else {
        doc2 = frappe.get_doc(doctype, parent);
      }
      var children = doc2[parentfield] || [];
      if (filters2) {
        return frappe.utils.filter_dict(children, filters2);
      } else {
        return children;
      }
    },
    clear_table: function(doc2, parentfield) {
      for (const d3 of doc2[parentfield] || []) {
        delete locals[d3.doctype][d3.name];
      }
      doc2[parentfield] = [];
    },
    remove_from_locals: function(doctype, name2) {
      this.clear_doc(doctype, name2);
      if (frappe.views.formview[doctype]) {
        delete frappe.views.formview[doctype].frm.opendocs[name2];
      }
    },
    clear_doc: function(doctype, name2) {
      var doc2 = locals[doctype] && locals[doctype][name2];
      if (!doc2)
        return;
      var parent = null;
      if (doc2.parenttype) {
        parent = doc2.parent;
        var parenttype = doc2.parenttype, parentfield = doc2.parentfield;
      }
      delete locals[doctype][name2];
      if (parent) {
        var parent_doc = locals[parenttype][parent];
        var newlist = [], idx = 1;
        $.each(parent_doc[parentfield], function(i3, d3) {
          if (d3.name != name2) {
            newlist.push(d3);
            d3.idx = idx;
            idx++;
          }
          parent_doc[parentfield] = newlist;
        });
      }
    },
    get_no_copy_list: function(doctype) {
      var no_copy_list = ["name", "amended_from", "amendment_date", "cancel_reason"];
      var docfields = frappe.get_doc("DocType", doctype).fields || [];
      for (var i3 = 0, j3 = docfields.length; i3 < j3; i3++) {
        var df = docfields[i3];
        if (cint(df.no_copy))
          no_copy_list.push(df.fieldname);
      }
      return no_copy_list;
    },
    delete_doc: function(doctype, docname, callback) {
      let title = docname;
      const title_field = frappe.get_meta(doctype).title_field;
      if (frappe.get_meta(doctype).autoname == "hash" && title_field) {
        const value2 = frappe.model.get_value(doctype, docname, title_field);
        if (value2) {
          title = `${value2} (${docname})`;
        }
      }
      frappe.confirm(__("Permanently delete {0}?", [title.bold()]), function() {
        return frappe.call({
          method: "frappe.client.delete",
          args: {
            doctype,
            name: docname
          },
          freeze: true,
          freeze_message: __("Deleting {0}...", [title]),
          callback: function(r2, rt3) {
            if (!r2.exc) {
              frappe.utils.play_sound("delete");
              frappe.model.clear_doc(doctype, docname);
              if (callback)
                callback(r2, rt3);
            }
          }
        });
      });
    },
    rename_doc: function(doctype, docname, callback) {
      let message = __("Merge with existing");
      let warning = __("This cannot be undone");
      let merge_label = message + " <b>(" + warning + ")</b>";
      var d3 = new frappe.ui.Dialog({
        title: __("Rename {0}", [__(docname)]),
        fields: [
          {
            label: __("New Name"),
            fieldname: "new_name",
            fieldtype: "Data",
            reqd: 1,
            default: docname
          },
          { label: merge_label, fieldtype: "Check", fieldname: "merge" }
        ]
      });
      d3.set_primary_action(__("Rename"), function() {
        d3.hide();
        var args = d3.get_values();
        if (!args)
          return;
        return frappe.call({
          method: "frappe.rename_doc",
          freeze: true,
          freeze_message: "Updating related fields...",
          args: {
            doctype,
            old: docname,
            new: args.new_name,
            merge: args.merge
          },
          btn: d3.get_primary_btn(),
          callback: function(r2, rt3) {
            if (!r2.exc) {
              $(document).trigger("rename", [
                doctype,
                docname,
                r2.message || args.new_name
              ]);
              if (locals[doctype] && locals[doctype][docname])
                delete locals[doctype][docname];
              d3.hide();
              if (callback)
                callback(r2.message);
            }
          }
        });
      });
      d3.show();
    },
    round_floats_in: function(doc2, fieldnames) {
      if (!fieldnames) {
        fieldnames = frappe.meta.get_fieldnames(doc2.doctype, doc2.parent, {
          fieldtype: ["in", ["Currency", "Float"]]
        });
      }
      for (var i3 = 0, j3 = fieldnames.length; i3 < j3; i3++) {
        var fieldname = fieldnames[i3];
        doc2[fieldname] = flt(doc2[fieldname], precision(fieldname, doc2));
      }
    },
    validate_missing: function(doc2, fieldname) {
      if (!doc2[fieldname]) {
        frappe.throw(
          __("Please specify") + ": " + __(frappe.meta.get_label(doc2.doctype, fieldname, doc2.parent || doc2.name))
        );
      }
    },
    get_all_docs: function(doc2) {
      var all = [doc2];
      for (var key2 in doc2) {
        if ($.isArray(doc2[key2]) && !key2.startsWith("_")) {
          var children = doc2[key2];
          for (var i3 = 0, l2 = children.length; i3 < l2; i3++) {
            all.push(children[i3]);
          }
        }
      }
      return all;
    },
    get_full_column_name: function(fieldname, doctype) {
      if (fieldname.includes("`tab"))
        return fieldname;
      return "`tab" + doctype + "`.`" + fieldname + "`";
    },
    is_numeric_field: function(fieldtype) {
      if (!fieldtype)
        return;
      if (typeof fieldtype === "object") {
        fieldtype = fieldtype.fieldtype;
      }
      return frappe.model.numeric_fieldtypes.includes(fieldtype);
    },
    set_default_views_for_doctype(doctype, frm) {
      frappe.model.with_doctype(doctype, () => {
        var _a, _b, _c;
        let meta = frappe.get_meta(doctype);
        let default_views = ["List", "Report", "Dashboard", "Kanban"];
        if (meta.is_calendar_and_gantt && frappe.views.calendar[doctype]) {
          let views = ["Calendar", "Gantt"];
          default_views.push(...views);
        }
        if (meta.is_tree) {
          default_views.push("Tree");
        }
        if (frm.doc.image_field) {
          default_views.push("Image");
        }
        if (doctype === "Communication" && frappe.boot.email_accounts.length) {
          default_views.push("Inbox");
        }
        if (((_a = frm.doc.fields) == null ? void 0 : _a.find((i3) => i3.fieldname === "latitude")) && ((_b = frm.doc.fields) == null ? void 0 : _b.find((i3) => i3.fieldname === "longitude")) || ((_c = frm.doc.fields) == null ? void 0 : _c.find(
          (i3) => i3.fieldname === "location" && i3.fieldtype == "Geolocation"
        ))) {
          default_views.push("Map");
        }
        frm.set_df_property("default_view", "options", default_views);
      });
    }
  });
  frappe.get_doc = frappe.model.get_doc;
  frappe.get_children = frappe.model.get_children;
  frappe.get_list = frappe.model.get_list;

  // frappe/public/js/frappe/db.js
  frappe.db = {
    get_list: function(doctype, args) {
      if (!args) {
        args = {};
      }
      args.doctype = doctype;
      if (!args.fields) {
        args.fields = ["name"];
      }
      if (!("limit" in args)) {
        args.limit = 20;
      }
      return new Promise((resolve) => {
        frappe.call({
          method: "frappe.desk.reportview.get_list",
          args,
          type: "GET",
          callback: function(r2) {
            resolve(r2.message);
          }
        });
      });
    },
    exists: function(doctype, name2) {
      return new Promise((resolve) => {
        frappe.db.get_value(doctype, { name: name2 }, "name").then((r2) => {
          r2.message && r2.message.name ? resolve(true) : resolve(false);
        });
      });
    },
    get_value: function(doctype, filters2, fieldname, callback, parent_doc) {
      return frappe.call({
        method: "frappe.client.get_value",
        type: "GET",
        args: {
          doctype,
          fieldname,
          filters: filters2,
          parent: parent_doc
        },
        callback: function(r2) {
          callback && callback(r2.message);
        }
      });
    },
    get_single_value: (doctype, field) => {
      return new Promise((resolve) => {
        frappe.call({
          method: "frappe.client.get_single_value",
          args: { doctype, field },
          type: "GET"
        }).then((r2) => resolve(r2 ? r2.message : null));
      });
    },
    set_value: function(doctype, docname, fieldname, value2, callback) {
      return frappe.call({
        method: "frappe.client.set_value",
        args: {
          doctype,
          name: docname,
          fieldname,
          value: value2
        },
        callback: function(r2) {
          callback && callback(r2.message);
        }
      });
    },
    get_doc: function(doctype, name2, filters2) {
      return new Promise((resolve, reject) => {
        frappe.call({
          method: "frappe.client.get",
          type: "GET",
          args: { doctype, name: name2, filters: filters2 },
          callback: (r2) => {
            frappe.model.sync(r2.message);
            resolve(r2.message);
          }
        }).fail(reject);
      });
    },
    insert: function(doc2) {
      return frappe.xcall("frappe.client.insert", { doc: doc2 });
    },
    delete_doc: function(doctype, name2) {
      return new Promise((resolve) => {
        frappe.call("frappe.client.delete", { doctype, name: name2 }, (r2) => resolve(r2.message));
      });
    },
    count: function(doctype, args = {}) {
      let filters2 = args.filters || {};
      const distinct = Array.isArray(filters2) && filters2.some((filter) => {
        return filter[0] !== doctype;
      });
      const fields = [];
      return frappe.xcall("frappe.desk.reportview.get_count", {
        doctype,
        filters: filters2,
        fields,
        distinct
      });
    },
    get_link_options(doctype, txt2 = "", filters2 = {}) {
      return new Promise((resolve) => {
        frappe.call({
          type: "GET",
          method: "frappe.desk.search.search_link",
          args: {
            doctype,
            txt: txt2,
            filters: filters2
          },
          callback(r2) {
            resolve(r2.message);
          }
        });
      });
    }
  };

  // frappe/public/js/frappe/model/meta.js
  frappe.provide("frappe.meta.docfield_map");
  frappe.provide("frappe.meta.docfield_copy");
  frappe.provide("frappe.meta.docfield_list");
  frappe.provide("frappe.meta.doctypes");
  frappe.provide("frappe.meta.precision_map");
  frappe.get_meta = function(doctype) {
    return locals["DocType"] ? locals["DocType"][doctype] : null;
  };
  $.extend(frappe.meta, {
    sync: function(doc2) {
      $.each(doc2.fields, function(i3, df) {
        frappe.meta.add_field(df);
      });
      frappe.meta.sync_messages(doc2);
      if (doc2.__print_formats)
        frappe.model.sync(doc2.__print_formats);
      if (doc2.__workflow_docs)
        frappe.model.sync(doc2.__workflow_docs);
    },
    add_field: function(df) {
      frappe.provide("frappe.meta.docfield_map." + df.parent);
      frappe.meta.docfield_map[df.parent][df.fieldname || df.label] = df;
      if (!frappe.meta.docfield_list[df.parent])
        frappe.meta.docfield_list[df.parent] = [];
      for (var i3 in frappe.meta.docfield_list[df.parent]) {
        var d3 = frappe.meta.docfield_list[df.parent][i3];
        if (df.fieldname == d3.fieldname)
          return;
      }
      frappe.meta.docfield_list[df.parent].push(df);
    },
    make_docfield_copy_for: function(doctype, docname, docfield_list = null) {
      var c2 = frappe.meta.docfield_copy;
      if (!c2[doctype])
        c2[doctype] = {};
      if (!c2[doctype][docname])
        c2[doctype][docname] = {};
      docfield_list = docfield_list || frappe.meta.docfield_list[doctype] || [];
      for (var i3 = 0, j3 = docfield_list.length; i3 < j3; i3++) {
        var df = docfield_list[i3];
        c2[doctype][docname][df.fieldname || df.label] = copy_dict(df);
      }
    },
    get_field: function(doctype, fieldname, name2) {
      var out = frappe.meta.get_docfield(doctype, fieldname, name2);
      if (!out) {
        frappe.model.std_fields.every(function(d3) {
          if (d3.fieldname === fieldname) {
            out = d3;
            return false;
          } else {
            return true;
          }
        });
      }
      return out;
    },
    get_docfield: function(doctype, fieldname, name2) {
      var fields_dict = frappe.meta.get_docfield_copy(doctype, name2);
      return fields_dict ? fields_dict[fieldname] : null;
    },
    set_formatter: function(doctype, fieldname, name2, formatter) {
      frappe.meta.get_docfield(doctype, fieldname, name2).formatter = formatter;
    },
    set_indicator_formatter: function(doctype, fieldname, name2, get_text, get_color) {
      frappe.meta.get_docfield(doctype, fieldname, name2).formatter = function(value2, df, options, doc2) {
        return repl('<span class="indicator %(color)s">%(name)s</span>', {
          color: get_color(),
          name: get_text()
        });
      };
    },
    get_docfields: function(doctype, name2, filters2) {
      var docfield_map = frappe.meta.get_docfield_copy(doctype, name2);
      var docfields = frappe.meta.sort_docfields(docfield_map);
      if (filters2) {
        docfields = frappe.utils.filter_dict(docfields, filters2);
      }
      return docfields;
    },
    get_linked_fields: function(doctype) {
      return $.map(frappe.get_meta(doctype).fields, function(d3) {
        return d3.fieldtype == "Link" ? d3.options : null;
      });
    },
    get_fields_to_check_permissions: function(doctype) {
      var fields = $.map(frappe.meta.get_docfields(doctype, name), function(df) {
        return df.fieldtype === "Link" && df.ignore_user_permissions !== 1 ? df : null;
      });
      fields = fields.concat({ label: "ID", fieldname: name, options: doctype });
      return fields;
    },
    sort_docfields: function(docs) {
      return $.map(docs, function(d3) {
        return d3;
      }).sort(function(a2, b2) {
        return a2.idx - b2.idx;
      });
    },
    get_docfield_copy: function(doctype, name2) {
      if (!name2)
        return frappe.meta.docfield_map[doctype];
      if (!(frappe.meta.docfield_copy[doctype] && frappe.meta.docfield_copy[doctype][name2])) {
        frappe.meta.make_docfield_copy_for(doctype, name2);
      }
      return frappe.meta.docfield_copy[doctype][name2];
    },
    get_fieldnames: function(doctype, name2, filters2) {
      return $.map(
        frappe.utils.filter_dict(frappe.meta.docfield_map[doctype], filters2),
        function(df) {
          return df.fieldname;
        }
      );
    },
    has_field: function(dt3, fn) {
      let docfield_map = frappe.meta.docfield_map[dt3];
      return docfield_map && docfield_map[fn];
    },
    get_table_fields: function(dt3) {
      return $.map(frappe.meta.docfield_list[dt3], function(d3) {
        return frappe.model.table_fields.includes(d3.fieldtype) ? d3 : null;
      });
    },
    get_doctype_for_field: function(doctype, key2) {
      var out = null;
      if (in_list(frappe.model.std_fields_list, key2)) {
        out = doctype;
      } else if (frappe.meta.has_field(doctype, key2)) {
        out = doctype;
      } else {
        frappe.meta.get_table_fields(doctype).every(function(d3) {
          if (frappe.meta.has_field(d3.options, key2) || in_list(frappe.model.child_table_field_list, key2)) {
            out = d3.options;
            return false;
          }
          return true;
        });
        if (!out) {
          console.log(
            __("Warning: Unable to find {0} in any table related to {1}", [
              key2,
              __(doctype)
            ])
          );
        }
      }
      return out;
    },
    get_parentfield: function(parent_dt, child_dt) {
      var df = (frappe.get_doc("DocType", parent_dt).fields || []).filter(
        (df2) => frappe.model.table_fields.includes(df2.fieldtype) && df2.options === child_dt
      );
      if (!df.length)
        throw "parentfield not found for " + parent_dt + ", " + child_dt;
      return df[0].fieldname;
    },
    get_label: function(dt3, fn, dn) {
      var standard = {
        name: __("ID"),
        creation: __("Created On"),
        docstatus: __("Document Status"),
        idx: __("Index"),
        modified: __("Last Updated On"),
        modified_by: __("Last Updated By"),
        owner: __("Created By"),
        _user_tags: __("Tags"),
        _liked_by: __("Liked By"),
        _comments: __("Comments"),
        _assign: __("Assigned To")
      };
      if (standard[fn]) {
        return standard[fn];
      } else {
        var df = this.get_docfield(dt3, fn, dn);
        return (df ? df.label : "") || fn;
      }
    },
    get_print_sizes: function() {
      return [
        "A0",
        "A1",
        "A2",
        "A3",
        "A4",
        "A5",
        "A6",
        "A7",
        "A8",
        "A9",
        "B0",
        "B1",
        "B2",
        "B3",
        "B4",
        "B5",
        "B6",
        "B7",
        "B8",
        "B9",
        "B10",
        "C5E",
        "Comm10E",
        "DLE",
        "Executive",
        "Folio",
        "Ledger",
        "Legal",
        "Letter",
        "Tabloid",
        "Custom"
      ];
    },
    get_print_formats: function(doctype) {
      var print_format_list = ["Standard"];
      var default_print_format = locals.DocType[doctype].default_print_format;
      let enable_raw_printing = frappe.model.get_doc(
        ":Print Settings",
        "Print Settings"
      ).enable_raw_printing;
      var print_formats = frappe.get_list("Print Format", { doc_type: doctype }).sort(function(a2, b2) {
        return a2 > b2 ? 1 : -1;
      });
      $.each(print_formats, function(i3, d3) {
        if (!in_list(print_format_list, d3.name) && d3.print_format_type !== "JS" && (cint(enable_raw_printing) || !d3.raw_printing)) {
          print_format_list.push(d3.name);
        }
      });
      if (default_print_format && default_print_format != "Standard") {
        var index = print_format_list.indexOf(default_print_format);
        print_format_list.splice(index, 1).sort();
        print_format_list.unshift(default_print_format);
      }
      return print_format_list;
    },
    sync_messages: function(doc2) {
      if (doc2.__messages) {
        $.extend(frappe._messages, doc2.__messages);
      }
    },
    get_field_currency: function(df, doc2) {
      var currency = frappe.boot.sysdefaults.currency;
      if (!doc2 && cur_frm)
        doc2 = cur_frm.doc;
      if (df && df.options) {
        if (doc2 && df.options.indexOf(":") != -1) {
          var options = df.options.split(":");
          if (options.length == 3) {
            var docname = doc2[options[1]];
            if (!docname && cur_frm) {
              docname = cur_frm.doc[options[1]];
            }
            currency = frappe.model.get_value(options[0], docname, options[2]) || frappe.model.get_value(":" + options[0], docname, options[2]) || currency;
          }
        } else if (doc2 && doc2[df.options]) {
          currency = doc2[df.options];
        } else if (cur_frm && cur_frm.doc[df.options]) {
          currency = cur_frm.doc[df.options];
        }
      }
      return currency;
    },
    get_field_precision: function(df, doc2) {
      var precision3 = null;
      if (df && df.precision) {
        precision3 = cint(df.precision);
      } else if (df && df.fieldtype === "Currency") {
        precision3 = cint(frappe.defaults.get_default("currency_precision"));
        if (!precision3) {
          var number_format = get_number_format();
          var number_format_info = get_number_format_info(number_format);
          precision3 = number_format_info.precision;
        }
      } else {
        precision3 = cint(frappe.defaults.get_default("float_precision")) || 3;
      }
      return precision3;
    }
  });

  // frappe/public/js/frappe/model/sync.js
  Object.assign(frappe.model, {
    docinfo: {},
    sync: function(r2) {
      var isPlain;
      if (!r2.docs && !r2.docinfo)
        r2 = { docs: r2 };
      isPlain = $.isPlainObject(r2.docs);
      if (isPlain)
        r2.docs = [r2.docs];
      if (r2.docs) {
        for (var i3 = 0, l2 = r2.docs.length; i3 < l2; i3++) {
          var d3 = r2.docs[i3];
          if (locals[d3.doctype] && locals[d3.doctype][d3.name]) {
            frappe.model.update_in_locals(d3);
          } else {
            frappe.model.add_to_locals(d3);
          }
          d3.__last_sync_on = new Date();
          if (d3.doctype === "DocType") {
            frappe.meta.sync(d3);
          }
          if (d3.localname) {
            frappe.model.rename_after_save(d3, i3);
          }
        }
      }
      frappe.model.sync_docinfo(r2);
      return r2.docs;
    },
    rename_after_save: (d3, i3) => {
      frappe.model.new_names[d3.localname] = d3.name;
      $(document).trigger("rename", [d3.doctype, d3.localname, d3.name]);
      delete locals[d3.doctype][d3.localname];
      if (i3 === 0) {
        frappe.model.docinfo[d3.doctype][d3.name] = frappe.model.docinfo[d3.doctype][d3.localname];
        frappe.model.docinfo[d3.doctype][d3.localname] = void 0;
      }
    },
    sync_docinfo: (r2) => {
      if (r2.docinfo) {
        const { doctype, name: name2 } = r2.docinfo;
        if (!frappe.model.docinfo[doctype]) {
          frappe.model.docinfo[doctype] = {};
        }
        frappe.model.docinfo[doctype][name2] = r2.docinfo;
        Object.assign(frappe.boot.user_info, r2.docinfo.user_info);
      }
      return r2.docs;
    },
    add_to_locals: function(doc2) {
      if (!locals[doc2.doctype])
        locals[doc2.doctype] = {};
      if (!doc2.name && doc2.__islocal) {
        if (!doc2.parentfield)
          frappe.model.clear_doc(doc2);
        doc2.name = frappe.model.get_new_name(doc2.doctype);
        if (!doc2.parentfield)
          frappe.provide("frappe.model.docinfo." + doc2.doctype + "." + doc2.name);
      }
      locals[doc2.doctype][doc2.name] = doc2;
      let meta = frappe.get_meta(doc2.doctype);
      let is_table = meta ? meta.istable : doc2.parentfield;
      if (!is_table) {
        for (var i3 in doc2) {
          var value2 = doc2[i3];
          if ($.isArray(value2)) {
            for (var x2 = 0, y2 = value2.length; x2 < y2; x2++) {
              var d3 = value2[x2];
              if (typeof d3 == "object" && !d3.parent)
                d3.parent = doc2.name;
              frappe.model.add_to_locals(d3);
            }
          }
        }
      }
    },
    update_in_locals: function(doc2) {
      let local_doc = locals[doc2.doctype][doc2.name];
      let clear_keys = function(source, target) {
        Object.keys(target).map((key2) => {
          if (source[key2] == void 0)
            delete target[key2];
        });
      };
      for (let fieldname in doc2) {
        let df = frappe.meta.get_field(doc2.doctype, fieldname);
        if (df && frappe.model.table_fields.includes(df.fieldtype)) {
          if (!(doc2[fieldname] instanceof Array)) {
            doc2[fieldname] = [];
          }
          if (!(local_doc[fieldname] instanceof Array)) {
            local_doc[fieldname] = [];
          }
          for (let i3 = 0; i3 < doc2[fieldname].length; i3++) {
            let d3 = doc2[fieldname][i3];
            let local_d = local_doc[fieldname][i3];
            if (local_d) {
              if (!locals[d3.doctype])
                locals[d3.doctype] = {};
              if (!d3.name) {
                d3.name = frappe.model.get_new_name(doc2.doctype);
              }
              if (!locals[d3.doctype][d3.name]) {
                delete locals[d3.doctype][local_d.name];
                locals[d3.doctype][d3.name] = local_d;
              }
              Object.assign(local_d, d3);
              clear_keys(d3, local_d);
            } else {
              local_doc[fieldname].push(d3);
              if (!d3.parent)
                d3.parent = doc2.name;
              frappe.model.add_to_locals(d3);
            }
          }
          if (local_doc[fieldname].length > doc2[fieldname].length) {
            for (let i3 = doc2[fieldname].length; i3 < local_doc[fieldname].length; i3++) {
              let d3 = local_doc[fieldname][i3];
              if (locals[d3.doctype] && locals[d3.doctype][d3.name]) {
                delete locals[d3.doctype][d3.name];
              }
            }
            local_doc[fieldname].length = doc2[fieldname].length;
          }
        } else {
          local_doc[fieldname] = doc2[fieldname];
        }
      }
      clear_keys(doc2, local_doc);
    }
  });

  // frappe/public/js/frappe/model/create_new.js
  frappe.provide("frappe.model");
  $.extend(frappe.model, {
    new_names: {},
    get_new_doc: function(doctype, parent_doc, parentfield, with_mandatory_children) {
      frappe.provide("locals." + doctype);
      var doc2 = {
        docstatus: 0,
        doctype,
        name: frappe.model.get_new_name(doctype),
        __islocal: 1,
        __unsaved: 1,
        owner: frappe.session.user
      };
      frappe.model.set_default_values(doc2, parent_doc);
      if (parent_doc) {
        $.extend(doc2, {
          parent: parent_doc.name,
          parentfield,
          parenttype: parent_doc.doctype
        });
        if (!parent_doc[parentfield])
          parent_doc[parentfield] = [];
        doc2.idx = parent_doc[parentfield].length + 1;
        parent_doc[parentfield].push(doc2);
      } else {
        frappe.provide("frappe.model.docinfo." + doctype + "." + doc2.name);
      }
      frappe.model.add_to_locals(doc2);
      if (with_mandatory_children) {
        frappe.model.create_mandatory_children(doc2);
      }
      if (!parent_doc) {
        doc2.__run_link_triggers = 1;
      }
      if (frappe.route_options && frappe.route_options.name_field) {
        var meta = frappe.get_meta(doctype);
        if (meta.autoname && meta.autoname.indexOf("field:") !== -1) {
          doc2[meta.autoname.substr(6)] = frappe.route_options.name_field;
        } else if (meta.autoname && meta.autoname === "prompt") {
          doc2.__newname = frappe.route_options.name_field;
        } else if (meta.title_field) {
          doc2[meta.title_field] = frappe.route_options.name_field;
        }
        delete frappe.route_options.name_field;
      }
      if (frappe.route_options && !doc2.parent) {
        $.each(frappe.route_options, function(fieldname, value2) {
          var df = frappe.meta.has_field(doctype, fieldname);
          if (df && in_list(["Link", "Data", "Select", "Dynamic Link"], df.fieldtype) && !df.no_copy) {
            doc2[fieldname] = value2;
          }
        });
        frappe.route_options = null;
      }
      return doc2;
    },
    make_new_doc_and_get_name: function(doctype, with_mandatory_children) {
      return frappe.model.get_new_doc(doctype, null, null, with_mandatory_children).name;
    },
    get_new_name: function(doctype) {
      return frappe.router.slug(`new-${doctype}-${frappe.utils.get_random(10)}`);
    },
    set_default_values: function(doc2, parent_doc) {
      var doctype = doc2.doctype;
      var docfields = frappe.meta.get_docfields(doctype);
      var updated = [];
      for (var fid = 0; fid < docfields.length; fid++) {
        var f3 = docfields[fid];
        if (!in_list(frappe.model.no_value_type, f3.fieldtype) && doc2[f3.fieldname] == null) {
          if (f3.no_default)
            continue;
          var v2 = frappe.model.get_default_value(f3, doc2, parent_doc);
          if (v2) {
            if (in_list(["Int", "Check"], f3.fieldtype))
              v2 = cint(v2);
            else if (in_list(["Currency", "Float"], f3.fieldtype))
              v2 = flt(v2);
            doc2[f3.fieldname] = v2;
            updated.push(f3.fieldname);
          } else if (f3.fieldtype == "Select" && f3.options && typeof f3.options === "string" && !in_list(["[Select]", "Loading..."], f3.options)) {
            doc2[f3.fieldname] = f3.options.split("\n")[0];
          }
        }
      }
      return updated;
    },
    create_mandatory_children: function(doc2) {
      var meta = frappe.get_meta(doc2.doctype);
      if (meta && meta.istable)
        return;
      frappe.meta.get_docfields(doc2.doctype).forEach(function(df) {
        if (df.fieldtype === "Table" && df.reqd) {
          frappe.model.add_child(doc2, df.fieldname);
        }
      });
    },
    get_default_value: function(df, doc2, parent_doc) {
      var user_default = "";
      var user_permissions = frappe.defaults.get_user_permissions();
      let allowed_records = [];
      let default_doc = null;
      let value2 = null;
      if (user_permissions) {
        ({ allowed_records, default_doc } = frappe.perm.filter_allowed_docs_for_doctype(
          user_permissions[df.options],
          doc2.doctype
        ));
      }
      var meta = frappe.get_meta(doc2.doctype);
      var has_user_permissions = df.fieldtype === "Link" && !$.isEmptyObject(user_permissions) && df.ignore_user_permissions != 1 && allowed_records.length;
      if (df.fieldtype === "Link" && df.options !== "User") {
        if (has_user_permissions && default_doc) {
          value2 = default_doc;
        } else {
          if (!df.ignore_user_permissions) {
            var user_defaults = frappe.defaults.get_user_defaults(df.options);
            if (user_defaults && user_defaults.length === 1) {
              user_default = user_defaults[0];
            }
          }
          if (!user_default) {
            user_default = frappe.defaults.get_user_default(df.fieldname);
          }
          if (!user_default && df.remember_last_selected_value && frappe.boot.user.last_selected_values) {
            user_default = frappe.boot.user.last_selected_values[df.options];
          }
          var is_allowed_user_default = user_default && (!has_user_permissions || allowed_records.includes(user_default));
          if (is_allowed_user_default) {
            value2 = user_default;
          }
        }
      }
      if (!value2 || df["default"]) {
        const default_val = String(df["default"]);
        if (default_val == "__user" || default_val.toLowerCase() == "user") {
          value2 = frappe.session.user;
        } else if (default_val == "user_fullname") {
          value2 = frappe.session.user_fullname;
        } else if (default_val == "Today") {
          value2 = frappe.datetime.get_today();
        } else if ((default_val || "").toLowerCase() === "now") {
          if (df.fieldtype == "Time") {
            value2 = frappe.datetime.now_time();
          } else {
            value2 = frappe.datetime.system_datetime();
          }
        } else if (default_val[0] === ":") {
          var boot_doc = frappe.model.get_default_from_boot_docs(df, doc2, parent_doc);
          var is_allowed_boot_doc = !has_user_permissions || allowed_records.includes(boot_doc);
          if (is_allowed_boot_doc) {
            value2 = boot_doc;
          }
        } else if (df.fieldname === meta.title_field) {
          value2 = "";
        } else {
          var is_allowed_default = !has_user_permissions || allowed_records.includes(df.default);
          if (df.fieldtype !== "Link" || df.options === "User" || is_allowed_default) {
            value2 = df["default"];
          }
        }
      } else if (df.fieldtype == "Time") {
        value2 = frappe.datetime.now_time();
      }
      df.__default_value = value2;
      return value2;
    },
    get_default_from_boot_docs: function(df, doc2, parent_doc) {
      if (frappe.get_list(df["default"]).length > 0) {
        var ref_fieldname = df["default"].slice(1).toLowerCase().replace(" ", "_");
        var ref_value = parent_doc ? parent_doc[ref_fieldname] : frappe.defaults.get_user_default(ref_fieldname);
        var ref_doc = ref_value ? frappe.get_doc(df["default"], ref_value) : null;
        if (ref_doc && ref_doc[df.fieldname]) {
          return ref_doc[df.fieldname];
        }
      }
    },
    add_child: function(parent_doc, doctype, parentfield, idx) {
      if (arguments.length === 2) {
        parentfield = doctype;
        doctype = frappe.meta.get_field(parent_doc.doctype, parentfield).options;
      }
      idx = idx ? idx - 0.1 : (parent_doc[parentfield] || []).length + 1;
      var child = frappe.model.get_new_doc(doctype, parent_doc, parentfield);
      child.idx = idx;
      if (idx !== cint(idx)) {
        var sorted = parent_doc[parentfield].sort(function(a2, b2) {
          return a2.idx - b2.idx;
        });
        for (var i3 = 0, j3 = sorted.length; i3 < j3; i3++) {
          var d3 = sorted[i3];
          d3.idx = i3 + 1;
        }
      }
      if (cur_frm && cur_frm.doc == parent_doc)
        cur_frm.dirty();
      return child;
    },
    copy_doc: function(doc2, from_amend, parent_doc, parentfield) {
      var no_copy_list = ["name", "amended_from", "amendment_date", "cancel_reason"];
      var newdoc = frappe.model.get_new_doc(doc2.doctype, parent_doc, parentfield);
      for (var key2 in doc2) {
        var df = frappe.meta.get_docfield(doc2.doctype, key2);
        if (df && key2.substr(0, 2) != "__" && !in_list(no_copy_list, key2) && !(df && !from_amend && cint(df.no_copy) == 1)) {
          var value2 = doc2[key2] || [];
          if (frappe.model.table_fields.includes(df.fieldtype)) {
            for (var i3 = 0, j3 = value2.length; i3 < j3; i3++) {
              var d3 = value2[i3];
              frappe.model.copy_doc(d3, from_amend, newdoc, df.fieldname);
            }
          } else {
            newdoc[key2] = doc2[key2];
          }
        }
      }
      var user = frappe.session.user;
      newdoc.__islocal = 1;
      newdoc.docstatus = 0;
      newdoc.owner = user;
      newdoc.creation = "";
      newdoc.modified_by = user;
      newdoc.modified = "";
      newdoc.lft = null;
      newdoc.rgt = null;
      if (from_amend && parent_doc) {
        newdoc._amended_from = doc2.name;
      }
      return newdoc;
    },
    open_mapped_doc: function(opts) {
      if (opts.frm && opts.frm.doc.__unsaved) {
        frappe.throw(
          __("You have unsaved changes in this form. Please save before you continue.")
        );
      } else if (!opts.source_name && opts.frm) {
        opts.source_name = opts.frm.doc.name;
      } else if (!opts.frm && !opts.source_name) {
        opts.source_name = null;
      }
      return frappe.call({
        type: "POST",
        method: "frappe.model.mapper.make_mapped_doc",
        args: {
          method: opts.method,
          source_name: opts.source_name,
          args: opts.args || null,
          selected_children: opts.frm ? opts.frm.get_selected() : null
        },
        freeze: true,
        freeze_message: opts.freeze_message || "",
        callback: function(r2) {
          if (!r2.exc) {
            frappe.model.sync(r2.message);
            if (opts.run_link_triggers) {
              frappe.get_doc(
                r2.message.doctype,
                r2.message.name
              ).__run_link_triggers = true;
            }
            frappe.set_route("Form", r2.message.doctype, r2.message.name);
          }
        }
      });
    }
  });
  frappe.create_routes = {};
  frappe.new_doc = function(doctype, opts, init_callback) {
    if (doctype === "File") {
      new frappe.ui.FileUploader({
        folder: opts ? opts.folder : "Home"
      });
      return;
    }
    return new Promise((resolve) => {
      if (opts && $.isPlainObject(opts)) {
        frappe.route_options = opts;
      }
      frappe.model.with_doctype(doctype, function() {
        if (frappe.create_routes[doctype]) {
          frappe.set_route(frappe.create_routes[doctype]).then(() => resolve());
        } else {
          frappe.ui.form.make_quick_entry(doctype, null, init_callback).then(() => resolve());
        }
      });
    });
  };

  // frappe/public/js/frappe/model/perm.js
  frappe.provide("frappe.perm");
  Object.assign(window, {
    READ: "read",
    WRITE: "write",
    CREATE: "create",
    DELETE: "delete",
    SUBMIT: "submit",
    CANCEL: "cancel",
    AMEND: "amend"
  });
  $.extend(frappe.perm, {
    rights: [
      "select",
      "read",
      "write",
      "create",
      "delete",
      "submit",
      "cancel",
      "amend",
      "report",
      "import",
      "export",
      "print",
      "email",
      "share"
    ],
    doctype_perm: {},
    has_perm: (doctype, permlevel = 0, ptype = "read", doc2) => {
      var _a;
      const perms = frappe.perm.get_perm(doctype, doc2);
      return !!((_a = perms == null ? void 0 : perms[permlevel]) == null ? void 0 : _a[ptype]);
    },
    get_perm: (doctype, doc2) => {
      var _a, _b;
      if (doc2 && !doc2.__islocal) {
        return frappe.perm._get_perm(doctype, doc2);
      }
      return (_b = (_a = frappe.perm.doctype_perm)[doctype]) != null ? _b : _a[doctype] = frappe.perm._get_perm(doctype);
    },
    _get_perm: (doctype, doc2) => {
      let perm = [{ read: 0, permlevel: 0 }];
      let meta = frappe.get_doc("DocType", doctype);
      const user = frappe.session.user;
      if (user === "Administrator" || frappe.user_roles.includes("Administrator")) {
        perm[0].read = 1;
      }
      if (!meta)
        return perm;
      perm = frappe.perm.get_role_permissions(meta);
      const base_perm = perm[0];
      if (doc2) {
        let docinfo = frappe.model.get_docinfo(doctype, doc2.name);
        if (docinfo && docinfo.permissions) {
          Object.keys(docinfo.permissions).forEach((ptype) => {
            base_perm[ptype] = docinfo.permissions[ptype];
          });
        }
        if (doc2.owner !== user) {
          for (const right of frappe.perm.rights) {
            if (base_perm[right] && !base_perm.rights_without_if_owner.has(right)) {
              base_perm[right] = 0;
            }
          }
        }
        if (docinfo && docinfo.shared) {
          for (const s2 of docinfo.shared) {
            if (s2.user !== user)
              continue;
            for (const right of ["read", "write", "submit", "share"]) {
              if (!base_perm[right])
                base_perm[right] = s2[right];
            }
            if (s2.read) {
              base_perm.email = frappe.boot.user.can_email.indexOf(doctype) !== -1 ? 1 : 0;
              base_perm.print = frappe.boot.user.can_print.indexOf(doctype) !== -1 ? 1 : 0;
            }
          }
        }
      }
      if (!base_perm.read && frappe.model.can_read(doctype)) {
        base_perm.read = 1;
      }
      return perm;
    },
    get_role_permissions: (meta) => {
      let perm = [{ read: 0, permlevel: 0 }];
      (meta.permissions || []).forEach((p2) => {
        var _a, _b;
        const permlevel = cint(p2.permlevel);
        const current_perm = (_a = perm[permlevel]) != null ? _a : perm[permlevel] = { permlevel };
        if (permlevel === 0) {
          (_b = current_perm.rights_without_if_owner) != null ? _b : current_perm.rights_without_if_owner = /* @__PURE__ */ new Set();
        }
        if (frappe.user_roles.includes(p2.role)) {
          frappe.perm.rights.forEach((right) => {
            if (!p2[right])
              return;
            current_perm[right] = 1;
            if (permlevel === 0 && !p2.if_owner) {
              current_perm.rights_without_if_owner.add(right);
            }
          });
        }
      });
      perm = perm.map((p2) => p2 || {});
      return perm;
    },
    get_match_rules: (doctype, ptype) => {
      let match_rules = [];
      if (!ptype)
        ptype = "read";
      let perm = frappe.perm.get_perm(doctype);
      let user_permissions = frappe.defaults.get_user_permissions();
      if (user_permissions && !$.isEmptyObject(user_permissions)) {
        let rules = {};
        let fields_to_check = frappe.meta.get_fields_to_check_permissions(doctype);
        $.each(fields_to_check, (i3, df) => {
          const user_permissions_for_doctype = user_permissions[df.options] || [];
          const allowed_records = frappe.perm.get_allowed_docs_for_doctype(
            user_permissions_for_doctype,
            doctype
          );
          if (allowed_records.length) {
            rules[df.label] = allowed_records;
          }
        });
        if (!$.isEmptyObject(rules)) {
          match_rules.push(rules);
        }
      }
      const base_perm = perm[0];
      if (base_perm.read && !base_perm.rights_without_if_owner.has("read")) {
        match_rules.push({ Owner: frappe.session.user });
      }
      return match_rules;
    },
    get_field_display_status: (df, doc2, perm, explain) => {
      if (!perm && doc2) {
        perm = frappe.perm.get_perm(doc2.doctype, doc2);
      }
      if (!perm) {
        let is_hidden = df && (cint(df.hidden) || cint(df.hidden_due_to_dependency));
        let is_read_only = df && cint(df.read_only);
        return is_hidden ? "None" : is_read_only ? "Read" : "Write";
      }
      if (!df.permlevel)
        df.permlevel = 0;
      let p2 = perm[df.permlevel];
      let status = "None";
      if (p2) {
        if (p2.write && !df.disabled) {
          status = "Write";
        } else if (p2.read) {
          status = "Read";
        }
      }
      if (explain)
        console.log("By Permission:" + status);
      if (cint(df.hidden))
        status = "None";
      if (explain)
        console.log("By Hidden:" + status);
      if (cint(df.hidden_due_to_dependency))
        status = "None";
      if (explain)
        console.log("By Hidden Due To Dependency:" + status);
      if (!doc2) {
        return status;
      }
      if (status === "Write" && cint(doc2.docstatus) > 0)
        status = "Read";
      if (explain)
        console.log("By Submit:" + status);
      let allow_on_submit = cint(df.allow_on_submit);
      if (status === "Read" && allow_on_submit && cint(doc2.docstatus) === 1 && p2.write) {
        status = "Write";
      }
      if (explain)
        console.log("By Allow on Submit:" + status);
      if (status === "Read" && cur_frm && cur_frm.state_fieldname) {
        if (cint(cur_frm.read_only) || in_list(cur_frm.states.update_fields, df.fieldname) || df.fieldname == cur_frm.state_fieldname) {
          status = "Read";
        }
      }
      if (explain)
        console.log("By Workflow:" + status);
      if (status === "Write" && (cint(df.read_only) || df.fieldtype === "Read Only")) {
        status = "Read";
      }
      if (explain)
        console.log("By Read Only:" + status);
      if (status === "Write" && df.set_only_once && !doc2.__islocal) {
        status = "Read";
      }
      if (explain)
        console.log("By Set Only Once:" + status);
      return status;
    },
    is_visible: (df, doc2, perm) => {
      if (typeof df === "string") {
        df = frappe.meta.get_docfield(doc2.doctype, df, doc2.parent || doc2.name);
      }
      let status = frappe.perm.get_field_display_status(df, doc2, perm);
      return status === "None" ? false : true;
    },
    get_allowed_docs_for_doctype: (user_permissions, doctype) => {
      return frappe.perm.filter_allowed_docs_for_doctype(user_permissions, doctype, false);
    },
    filter_allowed_docs_for_doctype: (user_permissions, doctype, with_default_doc = true) => {
      const filtered_perms = (user_permissions || []).filter((perm) => {
        return perm.applicable_for === doctype || !perm.applicable_for;
      });
      const allowed_docs = filtered_perms.map((perm) => perm.doc);
      if (with_default_doc) {
        const default_doc = filtered_perms.filter((perm) => perm.is_default).map((record) => record.doc);
        return {
          allowed_records: allowed_docs,
          default_doc: default_doc[0]
        };
      } else {
        return allowed_docs;
      }
    }
  });

  // frappe/public/js/frappe/model/workflow.js
  frappe.provide("frappe.workflow");
  frappe.workflow = {
    state_fields: {},
    workflows: {},
    setup: function(doctype) {
      var wf = frappe.get_list("Workflow", { document_type: doctype });
      if (wf.length) {
        frappe.workflow.workflows[doctype] = wf[0];
        frappe.workflow.state_fields[doctype] = wf[0].workflow_state_field;
      } else {
        frappe.workflow.state_fields[doctype] = null;
      }
    },
    get_state_fieldname: function(doctype) {
      if (frappe.workflow.state_fields[doctype] === void 0) {
        frappe.workflow.setup(doctype);
      }
      return frappe.workflow.state_fields[doctype];
    },
    get_default_state: function(doctype, docstatus) {
      frappe.workflow.setup(doctype);
      var value2 = null;
      $.each(frappe.workflow.workflows[doctype].states, function(i3, workflow_state) {
        if (cint(workflow_state.doc_status) === cint(docstatus)) {
          value2 = workflow_state.state;
          return false;
        }
      });
      return value2;
    },
    get_transitions: function(doc2) {
      frappe.workflow.setup(doc2.doctype);
      return frappe.xcall("frappe.model.workflow.get_transitions", { doc: doc2 });
    },
    get_document_state_roles: function(doctype, state) {
      frappe.workflow.setup(doctype);
      let workflow_states = frappe.get_children(frappe.workflow.workflows[doctype], "states", { state }) || [];
      return workflow_states.map((d3) => d3.allow_edit);
    },
    is_self_approval_enabled: function(doctype) {
      return frappe.workflow.workflows[doctype].allow_self_approval;
    },
    is_read_only: function(doctype, name2) {
      var state_fieldname = frappe.workflow.get_state_fieldname(doctype);
      if (state_fieldname) {
        var doc2 = locals[doctype][name2];
        if (!doc2)
          return false;
        if (doc2.__islocal)
          return false;
        var state = doc2[state_fieldname] || frappe.workflow.get_default_state(doctype, doc2.docstatus);
        let allow_edit_roles = state ? frappe.workflow.get_document_state_roles(doctype, state) : null;
        let has_common_role = frappe.user_roles.some(
          (role) => allow_edit_roles.includes(role)
        );
        return !has_common_role;
      }
      return false;
    },
    get_update_fields: function(doctype) {
      var update_fields = $.unique(
        $.map(frappe.workflow.workflows[doctype].states || [], function(d3) {
          return d3.update_field;
        })
      );
      return update_fields;
    },
    get_state(doc2) {
      const state_field = this.get_state_fieldname(doc2.doctype);
      let state = doc2[state_field];
      if (!state) {
        state = this.get_default_state(doc2.doctype, doc2.docstatus);
      }
      return state;
    },
    get_all_transitions(doctype) {
      return frappe.workflow.workflows[doctype].transitions || [];
    },
    get_all_transition_actions(doctype) {
      const transitions = this.get_all_transitions(doctype);
      return transitions.map((transition) => {
        return transition.action;
      });
    }
  };

  // frappe/public/js/frappe/model/user_settings.js
  frappe.provide("frappe.model.user_settings");
  $.extend(frappe.model.user_settings, {
    get: function(doctype) {
      return frappe.call("frappe.model.utils.user_settings.get", { doctype }).then((r2) => JSON.parse(r2.message || "{}"));
    },
    save: function(doctype, key2, value2) {
      if (frappe.session.user === "Guest")
        return Promise.resolve();
      const old_user_settings = frappe.model.user_settings[doctype] || {};
      const new_user_settings = $.extend(true, {}, old_user_settings);
      if ($.isPlainObject(value2)) {
        new_user_settings[key2] = new_user_settings[key2] || {};
        $.extend(new_user_settings[key2], value2);
      } else {
        new_user_settings[key2] = value2;
      }
      const a2 = JSON.stringify(old_user_settings);
      const b2 = JSON.stringify(new_user_settings);
      if (a2 !== b2) {
        return this.update(doctype, new_user_settings);
      }
      return Promise.resolve(new_user_settings);
    },
    remove: function(doctype, key2) {
      var user_settings = frappe.model.user_settings[doctype] || {};
      delete user_settings[key2];
      return this.update(doctype, user_settings);
    },
    update: function(doctype, user_settings) {
      if (frappe.session.user === "Guest")
        return Promise.resolve();
      return frappe.call({
        method: "frappe.model.utils.user_settings.save",
        args: {
          doctype,
          user_settings
        },
        callback: function(r2) {
          frappe.model.user_settings[doctype] = r2.message;
        }
      });
    }
  });
  frappe.get_user_settings = function(doctype, key2) {
    var settings = frappe.model.user_settings[doctype] || {};
    if (key2) {
      settings = settings[key2] || {};
    }
    return settings;
  };

  // frappe/public/js/frappe/utils/user.js
  frappe.user_info = function(uid) {
    if (!uid)
      uid = frappe.session.user;
    let user_info;
    if (!(frappe.boot.user_info && frappe.boot.user_info[uid])) {
      user_info = { fullname: uid || "Unknown" };
    } else {
      user_info = frappe.boot.user_info[uid];
    }
    user_info.abbr = frappe.get_abbr(user_info.fullname);
    user_info.color = frappe.get_palette(user_info.fullname);
    return user_info;
  };
  frappe.update_user_info = function(user_info) {
    for (let user in user_info) {
      if (frappe.boot.user_info[user]) {
        Object.assign(frappe.boot.user_info[user], user_info[user]);
      } else {
        frappe.boot.user_info[user] = user_info[user];
      }
    }
  };
  frappe.provide("frappe.user");
  $.extend(frappe.user, {
    name: "Guest",
    full_name: function(uid) {
      return uid === frappe.session.user ? __(
        "You",
        null,
        "Name of the current user. For example: You edited this 5 hours ago."
      ) : frappe.user_info(uid).fullname;
    },
    image: function(uid) {
      return frappe.user_info(uid).image;
    },
    abbr: function(uid) {
      return frappe.user_info(uid).abbr;
    },
    has_role: function(rl) {
      if (typeof rl == "string")
        rl = [rl];
      for (var i3 in rl) {
        if ((frappe.boot ? frappe.boot.user.roles : ["Guest"]).indexOf(rl[i3]) != -1)
          return true;
      }
    },
    get_desktop_items: function() {
      var modules_list = $.map(frappe.boot.allowed_modules, function(icon) {
        var m3 = icon.module_name;
        var type = frappe.modules[m3] && frappe.modules[m3].type;
        if (frappe.boot.user.allow_modules.indexOf(m3) === -1)
          return null;
        var ret = null;
        if (type === "module") {
          if (frappe.boot.user.allow_modules.indexOf(m3) != -1 || frappe.modules[m3].is_help)
            ret = m3;
        } else if (type === "page") {
          if (frappe.boot.allowed_pages.indexOf(frappe.modules[m3].link) != -1)
            ret = m3;
        } else if (type === "list") {
          if (frappe.model.can_read(frappe.modules[m3]._doctype))
            ret = m3;
        } else if (type === "view") {
          ret = m3;
        } else if (type === "setup") {
          if (frappe.user.has_role("System Manager") || frappe.user.has_role("Administrator"))
            ret = m3;
        } else {
          ret = m3;
        }
        return ret;
      });
      return modules_list;
    },
    is_report_manager: function() {
      return frappe.user.has_role(["Administrator", "System Manager", "Report Manager"]);
    },
    get_formatted_email: function(email) {
      var fullname = frappe.user.full_name(email);
      if (!fullname) {
        return email;
      } else {
        var quote = "";
        if (fullname.search(/[\[\]\\()<>@,:;".]/) !== -1) {
          quote = '"';
        }
        return repl("%(quote)s%(fullname)s%(quote)s <%(email)s>", {
          fullname,
          email,
          quote
        });
      }
    },
    get_emails: () => {
      return Object.keys(frappe.boot.user_info).map((key2) => frappe.boot.user_info[key2].email);
    },
    toString: function() {
      return this.name;
    }
  });
  frappe.session_alive = true;
  $(document).bind("mousemove", function() {
    if (frappe.session_alive === false) {
      $(document).trigger("session_alive");
    }
    frappe.session_alive = true;
    if (frappe.session_alive_timeout)
      clearTimeout(frappe.session_alive_timeout);
    frappe.session_alive_timeout = setTimeout("frappe.session_alive=false;", 3e4);
  });

  // frappe/public/js/frappe/utils/common.js
  var import_md5 = __toESM(require_md5());
  frappe.avatar = function(user, css_class, title, image_url = null, remove_color = false, filterable = false) {
    let user_info;
    if (user) {
      user_info = frappe.user_info(user);
    } else {
      let full_name = title || frappe.get_cookie("full_name");
      user_info = {
        image: image_url === null ? frappe.get_cookie("user_image") : image_url,
        fullname: full_name,
        abbr: frappe.get_abbr(full_name),
        color: frappe.get_palette(full_name)
      };
    }
    if (!title) {
      title = user_info.fullname;
    }
    let data_attr = "";
    if (filterable) {
      css_class += " filterable";
      data_attr = `data-filter="_assign,like,%${user}%"`;
    }
    return frappe.get_avatar(
      css_class,
      title,
      image_url || user_info.image,
      remove_color,
      data_attr
    );
  };
  frappe.get_avatar = function(css_class, title, image_url = null, remove_color, data_attributes) {
    if (!css_class) {
      css_class = "avatar-small";
    }
    let el = document.createElement("div");
    if (image_url) {
      el.innerHTML = `
			<span class="avatar ${css_class}" ${data_attributes}>
				<span class="avatar-frame" style='background-image: url("${image_url}")'</span>
			</span>`;
    } else {
      let abbr = frappe.get_abbr(title);
      let style = "";
      if (!remove_color) {
        let color = frappe.get_palette(title);
        style = `background-color: var(${color[0]}); color: var(${color[1]})`;
      }
      if (css_class === "avatar-small" || css_class == "avatar-xs") {
        abbr = abbr.substr(0, 1);
      }
      el.innerHTML = `<span class="avatar ${css_class}" ${data_attributes}>
			<div class="avatar-frame standard-image"
				style="${style}">
					${abbr}
			</div>
		</span>`;
    }
    el.querySelector(".avatar").setAttribute("title", title);
    el.querySelector(".avatar-frame").setAttribute("title", title);
    return el.innerHTML;
  };
  frappe.avatar_group = function(users, limit = 4, options = {}) {
    let avatar_action_html = "";
    const display_users = users.slice(0, limit);
    const extra_users = users.slice(limit);
    const css_class = options.css_class || "";
    let html = display_users.map(
      (user) => frappe.avatar(user, "avatar-small " + css_class, null, null, false, options.filterable)
    ).join("");
    if (extra_users.length === 1) {
      html += frappe.avatar(
        extra_users[0],
        "avatar-small " + css_class,
        null,
        null,
        false,
        options.filterable
      );
    } else if (extra_users.length > 1) {
      html = `
			${html}
			<span class="avatar avatar-small ${css_class}">
				<div class="avatar-frame standard-image avatar-extra-count"
					title="${extra_users.map((u2) => frappe.user_info(u2).fullname).join(", ")}">
					+${extra_users.length}
				</div>
			</span>
		`;
    }
    if (options.action_icon) {
      avatar_action_html = `
			<span class="avatar avatar-small">
				<div class="avatar-frame avatar-action">
					${frappe.utils.icon(options.action_icon, "sm")}
				</div>
			</span>
		`;
    }
    const $avatar_group = $(`<div class="avatar-group ${options.align || "right"} ${options.overlap != false ? "overlap" : ""}">
			${html}
			${avatar_action_html}
		</div>`);
    $avatar_group.find(".avatar-action").on("click", options.action);
    return $avatar_group;
  };
  frappe.ui.scroll = function(element, animate, additional_offset) {
    var header_offset = $(".navbar").height() + $(".page-head").height();
    var top = $(element).offset().top - header_offset - cint(additional_offset);
    if (animate) {
      $("html, body").animate({ scrollTop: top });
    } else {
      $(window).scrollTop(top);
    }
  };
  frappe.palette = [
    ["--orange-avatar-bg", "--orange-avatar-color"],
    ["--pink-avatar-bg", "--pink-avatar-color"],
    ["--blue-avatar-bg", "--blue-avatar-color"],
    ["--green-avatar-bg", "--green-avatar-color"],
    ["--dark-green-avatar-bg", "--dark-green-avatar-color"],
    ["--red-avatar-bg", "--red-avatar-color"],
    ["--yellow-avatar-bg", "--yellow-avatar-color"],
    ["--purple-avatar-bg", "--purple-avatar-color"],
    ["--gray-avatar-bg", "--gray-avatar-color0"]
  ];
  frappe.get_palette = function(txt2) {
    if (!txt2)
      return frappe.palette[8];
    var idx = cint((parseInt((0, import_md5.default)(txt2).substr(4, 2), 16) + 1) / 5.33);
    return frappe.palette[idx % 8];
  };
  frappe.get_abbr = function(txt2, max_length) {
    if (!txt2)
      return "";
    var abbr = "";
    $.each(txt2.split(" "), function(i3, w2) {
      if (abbr.length >= (max_length || 2)) {
        return false;
      } else if (!w2.trim().length) {
        return true;
      }
      abbr += w2.trim()[0];
    });
    return abbr || "?";
  };
  frappe.gravatars = {};
  frappe.get_gravatar = function(email_id, size = 0) {
    var param = size ? "s=" + size : "d=retro";
    if (!frappe.gravatars[email_id]) {
      frappe.gravatars[email_id] = "https://secure.gravatar.com/avatar/" + (0, import_md5.default)(email_id) + "?" + param;
    }
    return frappe.gravatars[email_id];
  };
  window.repl = function repl2(s2, dict) {
    if (s2 == null)
      return "";
    for (var key2 in dict) {
      s2 = s2.split("%(" + key2 + ")s").join(dict[key2]);
    }
    return s2;
  };
  window.replace_all = function(s2, t1, t22) {
    return s2.split(t1).join(t22);
  };
  window.strip_html = function(txt2) {
    return cstr(txt2).replace(/<[^>]*>/g, "");
  };
  window.strip = function(s2, chars2) {
    if (s2) {
      s2 = lstrip(s2, chars2);
      s2 = rstrip(s2, chars2);
      return s2;
    }
  };
  window.lstrip = function lstrip2(s2, chars2) {
    if (!chars2)
      chars2 = ["\n", "	", " "];
    let first_char = s2.substr(0, 1);
    while (in_list(chars2, first_char)) {
      s2 = s2.substr(1);
      first_char = s2.substr(0, 1);
    }
    return s2;
  };
  window.rstrip = function(s2, chars2) {
    if (!chars2)
      chars2 = ["\n", "	", " "];
    let last_char = s2.substr(s2.length - 1);
    while (in_list(chars2, last_char)) {
      s2 = s2.substr(0, s2.length - 1);
      last_char = s2.substr(s2.length - 1);
    }
    return s2;
  };
  frappe.get_cookie = function getCookie(name2) {
    return frappe.get_cookies()[name2];
  };
  frappe.get_cookies = function getCookies() {
    var c2 = document.cookie, v2 = 0, cookies = {};
    if (document.cookie.match(/^\s*\$Version=(?:"1"|1);\s*(.*)/)) {
      c2 = RegExp.$1;
      v2 = 1;
    }
    if (v2 === 0) {
      c2.split(/[,;]/).map(function(cookie) {
        var parts2 = cookie.split(/=/, 2), name2 = decodeURIComponent(parts2[0].trimLeft()), value2 = parts2.length > 1 ? decodeURIComponent(parts2[1].trimRight()) : null;
        if (value2 && value2.charAt(0) === '"') {
          value2 = value2.substr(1, value2.length - 2);
        }
        cookies[name2] = value2;
      });
    } else {
      c2.match(
        /(?:^|\s+)([!#$%&'*+\-.0-9A-Z^`a-z|~]+)=([!#$%&'*+\-.0-9A-Z^`a-z|~]*|"(?:[\x20-\x7E\x80\xFF]|\\[\x00-\x7F])*")(?=\s*[,;]|$)/g
      ).map(function($0, $1) {
        var name2 = $0, value2 = $1.charAt(0) === '"' ? $1.substr(1, -1).replace(/\\(.)/g, "$1") : $1;
        cookies[name2] = value2;
      });
    }
    return cookies;
  };
  frappe.is_mobile = function() {
    return $(document).width() < 768;
  };
  frappe.utils.xss_sanitise = function(string, options) {
    let sanitised = string;
    const DEFAULT_OPTIONS = {
      strategies: ["html", "js"]
    };
    const HTML_ESCAPE_MAP = {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "/": "&#x2F;"
    };
    const REGEX_SCRIPT = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    const REGEX_ALERT = /confirm\(.*\)|alert\(.*\)|prompt\(.*\)/gi;
    options = Object.assign({}, DEFAULT_OPTIONS, options);
    if (options.strategies.includes("js")) {
      sanitised = sanitised.replace(REGEX_SCRIPT, "");
      sanitised = sanitised.replace(REGEX_ALERT, "");
    }
    if (options.strategies.includes("html")) {
      for (let char in HTML_ESCAPE_MAP) {
        const escape2 = HTML_ESCAPE_MAP[char];
        const regex = new RegExp(char, "g");
        sanitised = sanitised.replace(regex, escape2);
      }
    }
    return sanitised;
  };
  frappe.utils.sanitise_redirect = (url2) => {
    const is_external = (() => {
      return (url3) => {
        function domain(url4) {
          let base_domain = /^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:/\n?]+)/gim.exec(
            url4
          );
          return base_domain == null ? "" : base_domain[1];
        }
        function is_absolute(url4) {
          return /^(?:[a-z]+:)?\/\//i.test(url4);
        }
        return is_absolute(url3) ? domain(location.href) !== domain(url3) : false;
      };
    })();
    const sanitise_javascript = (url3) => {
      const REGEX_ESC_UNIT = /\s*(&#x.{1,7})?/;
      const REGEX_SCRIPT = new RegExp(
        Array.from("javascript").join(REGEX_ESC_UNIT.source),
        "gi"
      );
      return url3.replace(REGEX_SCRIPT, "");
    };
    url2 = frappe.utils.strip_url(url2);
    return is_external(url2) ? "" : sanitise_javascript(frappe.utils.xss_sanitise(url2, { strategies: ["js"] }));
  };
  frappe.utils.strip_url = (url2) => {
    return url2.replace(/^[^A-Za-z0-9(//)#]+/g, "");
  };
  frappe.utils.new_auto_repeat_prompt = function(frm) {
    const fields = [
      {
        fieldname: "frequency",
        fieldtype: "Select",
        label: __("Frequency"),
        reqd: 1,
        options: [
          { label: __("Daily"), value: "Daily" },
          { label: __("Weekly"), value: "Weekly" },
          { label: __("Monthly"), value: "Monthly" },
          { label: __("Quarterly"), value: "Quarterly" },
          { label: __("Half-yearly"), value: "Half-yearly" },
          { label: __("Yearly"), value: "Yearly" }
        ]
      },
      {
        fieldname: "start_date",
        fieldtype: "Date",
        label: __("Start Date"),
        reqd: 1,
        default: frappe.datetime.nowdate()
      },
      {
        fieldname: "end_date",
        fieldtype: "Date",
        label: __("End Date")
      }
    ];
    frappe.prompt(
      fields,
      function(values) {
        frappe.call({
          method: "frappe.automation.doctype.auto_repeat.auto_repeat.make_auto_repeat",
          args: {
            doctype: frm.doc.doctype,
            docname: frm.doc.name,
            frequency: values["frequency"],
            start_date: values["start_date"],
            end_date: values["end_date"]
          },
          callback: function(r2) {
            if (r2.message) {
              frappe.show_alert({
                message: __("Auto Repeat created for this document"),
                indicator: "green"
              });
              frm.reload_doc();
            }
          }
        });
      },
      __("Auto Repeat"),
      __("Save")
    );
  };
  frappe.utils.get_page_view_count = function(route) {
    return frappe.call("frappe.website.doctype.web_page_view.web_page_view.get_page_view_count", {
      path: route
    });
  };

  // frappe/public/js/frappe/utils/urllib.js
  frappe.urllib = {
    get_arg: function(name2) {
      name2 = name2.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
      var regexS = "[\\?&]" + name2 + "=([^&#]*)";
      var regex = new RegExp(regexS);
      var results = regex.exec(window.location.href);
      if (results == null)
        return "";
      else
        return decodeURIComponent(results[1]);
    },
    get_dict: function() {
      var d3 = {};
      var t3 = window.location.href.split("?")[1];
      if (!t3)
        return d3;
      if (t3.indexOf("#") != -1)
        t3 = t3.split("#")[0];
      if (!t3)
        return d3;
      t3 = t3.split("&");
      for (var i3 = 0; i3 < t3.length; i3++) {
        var a2 = t3[i3].split("=");
        d3[decodeURIComponent(a2[0])] = decodeURIComponent(a2[1]);
      }
      return d3;
    },
    get_base_url: function() {
      var url2 = frappe.base_url || window.location.origin;
      if (url2.substr(url2.length - 1, 1) == "/")
        url2 = url2.substr(0, url2.length - 1);
      return url2;
    },
    get_full_url: function(url2) {
      if (url2.indexOf("http://") === 0 || url2.indexOf("https://") === 0) {
        return url2;
      }
      return url2.substr(0, 1) === "/" ? frappe.urllib.get_base_url() + url2 : frappe.urllib.get_base_url() + "/" + url2;
    }
  };
  window.open_url_post = function open_url_post(URL2, PARAMS, new_window) {
    if (window.cordova) {
      let url2 = URL2 + "api/method/" + PARAMS.cmd + frappe.utils.make_query_string(PARAMS, false);
      window.location.href = url2;
    } else {
      var temp = document.createElement("form");
      temp.action = URL2;
      temp.method = "POST";
      temp.style.display = "none";
      if (new_window) {
        temp.target = "_blank";
      }
      PARAMS["csrf_token"] = frappe.csrf_token;
      for (var x2 in PARAMS) {
        var opt = document.createElement("textarea");
        opt.name = x2;
        var val2 = PARAMS[x2];
        if (typeof val2 != "string")
          val2 = JSON.stringify(val2);
        opt.value = val2;
        temp.appendChild(opt);
      }
      document.body.appendChild(temp);
      temp.submit();
      return temp;
    }
  };
  window.get_url_arg = frappe.urllib.get_arg;
  window.get_url_dict = frappe.urllib.get_dict;

  // frappe/public/js/frappe/utils/pretty_date.js
  function prettyDate(date, mini) {
    if (!date)
      return "";
    if (typeof date == "string") {
      date = frappe.datetime.convert_to_user_tz(date);
      date = new Date(
        (date || "").replace(/-/g, "/").replace(/[TZ]/g, " ").replace(/\.[0-9]*/, "")
      );
    }
    let diff = (new Date(frappe.datetime.now_datetime().replace(/-/g, "/")).getTime() - date.getTime()) / 1e3;
    let day_diff = Math.floor(diff / 86400);
    if (isNaN(day_diff) || day_diff < 0)
      return "";
    if (mini) {
      if (day_diff == 0) {
        if (diff < 60) {
          return __("now");
        } else if (diff < 3600) {
          return __("{0} m", [Math.floor(diff / 60)]);
        } else if (diff < 86400) {
          return __("{0} h", [Math.floor(diff / 3600)]);
        }
      } else {
        if (day_diff < 7) {
          return __("{0} d", [day_diff]);
        } else if (day_diff < 31) {
          return __("{0} w", [Math.floor(day_diff / 7)]);
        } else if (day_diff < 365) {
          return __("{0} M", [Math.floor(day_diff / 30)]);
        } else {
          return __("{0} y", [Math.floor(day_diff / 365)]);
        }
      }
    } else {
      if (day_diff == 0) {
        if (diff < 60) {
          return __("just now");
        } else if (diff < 120) {
          return __("1 minute ago");
        } else if (diff < 3600) {
          return __("{0} minutes ago", [Math.floor(diff / 60)]);
        } else if (diff < 7200) {
          return __("1 hour ago");
        } else if (diff < 86400) {
          return __("{0} hours ago", [Math.floor(diff / 3600)]);
        }
      } else {
        if (day_diff == 1) {
          return __("yesterday");
        } else if (day_diff < 7) {
          return __("{0} days ago", [day_diff]);
        } else if (day_diff < 14) {
          return __("1 week ago");
        } else if (day_diff < 31) {
          return __("{0} weeks ago", [Math.floor(day_diff / 7)]);
        } else if (day_diff < 62) {
          return __("1 month ago");
        } else if (day_diff < 365) {
          return __("{0} months ago", [Math.floor(day_diff / 30)]);
        } else if (day_diff < 730) {
          return __("1 year ago");
        } else {
          return __("{0} years ago", [Math.floor(day_diff / 365)]);
        }
      }
    }
  }
  frappe.provide("frappe.datetime");
  window.comment_when = function(datetime, mini) {
    var timestamp = frappe.datetime.str_to_user ? frappe.datetime.str_to_user(datetime) : datetime;
    return '<span class="frappe-timestamp ' + (mini ? " mini" : "") + '" data-timestamp="' + datetime + '" title="' + timestamp + '">' + prettyDate(datetime, mini) + "</span>";
  };
  frappe.datetime.comment_when = comment_when;
  frappe.datetime.prettyDate = prettyDate;
  frappe.datetime.refresh_when = function() {
    if (jQuery) {
      $(".frappe-timestamp").each(function() {
        $(this).html(prettyDate($(this).attr("data-timestamp"), $(this).hasClass("mini")));
      });
    }
  };
  setInterval(function() {
    frappe.datetime.refresh_when();
  }, 6e4);

  // frappe/public/js/frappe/utils/tools.js
  var import_showdown = __toESM(require_showdown());
  frappe.provide("frappe.tools");
  frappe.tools.downloadify = function(data, roles, title) {
    if (roles && roles.length && !has_common(roles, roles)) {
      frappe.msgprint(
        __("Export not allowed. You need {0} role to export.", [frappe.utils.comma_or(roles)])
      );
      return;
    }
    var filename = title + ".csv";
    var csv_data = frappe.tools.to_csv(data);
    var a2 = document.createElement("a");
    if ("download" in a2) {
      var blob_object = new Blob([csv_data], { type: "text/csv;charset=UTF-8" });
      a2.href = URL.createObjectURL(blob_object);
      a2.download = filename;
    } else {
      a2.href = "data:attachment/csv," + encodeURIComponent(csv_data);
      a2.download = filename;
      a2.target = "_blank";
    }
    document.body.appendChild(a2);
    a2.click();
    document.body.removeChild(a2);
  };
  frappe.markdown = function(txt2) {
    if (!frappe.md2html) {
      frappe.md2html = new import_showdown.default.Converter();
    }
    while (txt2.substr(0, 1) === "\n") {
      txt2 = txt2.substr(1);
    }
    var whitespace_len = 0, first_line = txt2.split("\n")[0];
    while (["\n", "	"].indexOf(first_line.substr(0, 1)) !== -1) {
      whitespace_len++;
      first_line = first_line.substr(1);
    }
    if (whitespace_len && whitespace_len != first_line.length) {
      var txt1 = [];
      $.each(txt2.split("\n"), function(i3, t3) {
        txt1.push(t3.substr(whitespace_len));
      });
      txt2 = txt1.join("\n");
    }
    return frappe.md2html.makeHtml(txt2);
  };
  frappe.tools.to_csv = function(data) {
    var res = [];
    $.each(data, function(i3, row) {
      row = $.map(row, function(col) {
        if (col === null || col === void 0)
          col = "";
        return typeof col === "string" ? '"' + $("<i>").html(col.replace(/"/g, '""')).text() + '"' : col;
      });
      res.push(row.join(","));
    });
    return res.join("\n");
  };

  // frappe/public/js/frappe/utils/datetime.js
  frappe.provide("frappe.datetime");
  frappe.defaultDateFormat = "YYYY-MM-DD";
  frappe.defaultTimeFormat = "HH:mm:ss";
  frappe.defaultDatetimeFormat = frappe.defaultDateFormat + " " + frappe.defaultTimeFormat;
  moment.defaultFormat = frappe.defaultDateFormat;
  frappe.provide("frappe.datetime");
  $.extend(frappe.datetime, {
    convert_to_user_tz: function(date, format2) {
      let date_obj = null;
      if (frappe.boot.time_zone && frappe.boot.time_zone.system && frappe.boot.time_zone.user) {
        date_obj = moment.tz(date, frappe.boot.time_zone.system).clone().tz(frappe.boot.time_zone.user);
      } else {
        date_obj = moment(date);
      }
      return format2 === false ? date_obj : date_obj.format(frappe.defaultDatetimeFormat);
    },
    convert_to_system_tz: function(date, format2) {
      let date_obj = null;
      if (frappe.boot.time_zone && frappe.boot.time_zone.system && frappe.boot.time_zone.user) {
        date_obj = moment.tz(date, frappe.boot.time_zone.user).clone().tz(frappe.boot.time_zone.system);
      } else {
        date_obj = moment(date);
      }
      return format2 === false ? date_obj : date_obj.format(frappe.defaultDatetimeFormat);
    },
    is_system_time_zone: function() {
      if (frappe.boot.time_zone && frappe.boot.time_zone.system && frappe.boot.time_zone.user) {
        return moment().tz(frappe.boot.time_zone.system).utcOffset() === moment().tz(frappe.boot.time_zone.user).utcOffset();
      }
      return true;
    },
    is_timezone_same: function() {
      return frappe.datetime.is_system_time_zone();
    },
    str_to_obj: function(d3) {
      return moment(d3, frappe.defaultDatetimeFormat)._d;
    },
    obj_to_str: function(d3) {
      return moment(d3).locale("en").format();
    },
    obj_to_user: function(d3) {
      return moment(d3).format(frappe.datetime.get_user_date_fmt().toUpperCase());
    },
    get_diff: function(d1, d22) {
      return moment(d1).diff(d22, "days");
    },
    get_hour_diff: function(d1, d22) {
      return moment(d1).diff(d22, "hours");
    },
    get_minute_diff: function(d1, d22) {
      return moment(d1).diff(d22, "minutes");
    },
    get_day_diff: function(d1, d22) {
      return moment(d1).diff(d22, "days");
    },
    add_days: function(d3, days) {
      return moment(d3).add(days, "days").format();
    },
    add_months: function(d3, months) {
      return moment(d3).add(months, "months").format();
    },
    week_start: function() {
      return moment().startOf("week").format();
    },
    week_end: function() {
      return moment().endOf("week").format();
    },
    month_start: function() {
      return moment().startOf("month").format();
    },
    month_end: function() {
      return moment().endOf("month").format();
    },
    quarter_start: function() {
      return moment().startOf("quarter").format();
    },
    quarter_end: function() {
      return moment().endOf("quarter").format();
    },
    year_start: function() {
      return moment().startOf("year").format();
    },
    year_end: function() {
      return moment().endOf("year").format();
    },
    get_user_time_fmt: function() {
      return frappe.sys_defaults && frappe.sys_defaults.time_format || "HH:mm:ss";
    },
    get_user_date_fmt: function() {
      return frappe.sys_defaults && frappe.sys_defaults.date_format || "yyyy-mm-dd";
    },
    get_user_fmt: function() {
      return frappe.sys_defaults && frappe.sys_defaults.date_format || "yyyy-mm-dd";
    },
    str_to_user: function(val2, only_time = false, only_date = false) {
      if (!val2)
        return "";
      const user_date_fmt = frappe.datetime.get_user_date_fmt().toUpperCase();
      const user_time_fmt = frappe.datetime.get_user_time_fmt();
      let user_format = user_time_fmt;
      if (only_time) {
        let date_obj = moment(val2, frappe.defaultTimeFormat);
        return date_obj.format(user_format);
      } else if (only_date) {
        let date_obj = moment(val2, frappe.defaultDateFormat);
        return date_obj.format(user_date_fmt);
      } else {
        let date_obj = moment.tz(val2, frappe.boot.time_zone.system);
        if (typeof val2 !== "string" || val2.indexOf(" ") === -1) {
          user_format = user_date_fmt;
        } else {
          user_format = user_date_fmt + " " + user_time_fmt;
        }
        return date_obj.clone().tz(frappe.boot.time_zone.user).format(user_format);
      }
    },
    get_datetime_as_string: function(d3) {
      return moment(d3).format("YYYY-MM-DD HH:mm:ss");
    },
    user_to_str: function(val2, only_time = false) {
      var user_time_fmt = frappe.datetime.get_user_time_fmt();
      if (only_time) {
        return moment(val2, user_time_fmt).format(frappe.defaultTimeFormat);
      }
      var user_fmt = frappe.datetime.get_user_date_fmt().toUpperCase();
      var system_fmt = "YYYY-MM-DD";
      if (val2.indexOf(" ") !== -1) {
        user_fmt += " " + user_time_fmt;
        system_fmt += " HH:mm:ss";
      }
      return moment(val2, [user_fmt.replace("YYYY", "YY"), user_fmt]).locale("en").format(system_fmt);
    },
    user_to_obj: function(d3) {
      return frappe.datetime.str_to_obj(frappe.datetime.user_to_str(d3));
    },
    global_date_format: function(d3) {
      var m3 = moment(d3);
      if (m3._f && m3._f.indexOf("HH") !== -1) {
        return m3.format("Do MMMM YYYY, hh:mm A");
      } else {
        return m3.format("Do MMMM YYYY");
      }
    },
    now_date: function(as_obj = false) {
      return frappe.datetime._date(frappe.defaultDateFormat, as_obj);
    },
    now_time: function(as_obj = false) {
      return frappe.datetime._date(frappe.defaultTimeFormat, as_obj);
    },
    now_datetime: function(as_obj = false) {
      return frappe.datetime._date(frappe.defaultDatetimeFormat, as_obj);
    },
    system_datetime: function(as_obj = false) {
      return frappe.datetime._date(frappe.defaultDatetimeFormat, as_obj, true);
    },
    _date: function(format2, as_obj = false, system_time = false) {
      var _a, _b;
      let time_zone = ((_a = frappe.boot.time_zone) == null ? void 0 : _a.system) || frappe.sys_defaults.time_zone;
      if (!system_time) {
        time_zone = ((_b = frappe.boot.time_zone) == null ? void 0 : _b.user) || time_zone;
      }
      let date = moment.tz(time_zone);
      return as_obj ? frappe.datetime.moment_to_date_obj(date) : date.format(format2);
    },
    moment_to_date_obj: function(moment_obj) {
      const date_obj = new Date();
      const date_array = moment_obj.toArray();
      date_obj.setFullYear(date_array[0]);
      date_obj.setMonth(date_array[1]);
      date_obj.setDate(date_array[2]);
      date_obj.setHours(date_array[3]);
      date_obj.setMinutes(date_array[4]);
      date_obj.setSeconds(date_array[5]);
      date_obj.setMilliseconds(date_array[6]);
      return date_obj;
    },
    nowdate: function() {
      return frappe.datetime.now_date();
    },
    get_today: function() {
      return frappe.datetime.now_date();
    },
    get_time: (timestamp) => {
      return moment(timestamp).format("hh:mm A");
    },
    validate: function(d3) {
      return moment(
        d3,
        [frappe.defaultDateFormat, frappe.defaultDatetimeFormat, frappe.defaultTimeFormat],
        true
      ).isValid();
    },
    get_first_day_of_the_week_index() {
      const first_day_of_the_week = frappe.sys_defaults.first_day_of_the_week || "Sunday";
      return moment.weekdays().indexOf(first_day_of_the_week);
    }
  });

  // frappe/public/js/frappe/utils/datatype.js
  window.cstr = function(s2) {
    if (s2 == null)
      return "";
    return s2 + "";
  };
  window.cint = function(v2, def) {
    if (v2 === true)
      return 1;
    if (v2 === false)
      return 0;
    v2 = v2 + "";
    if (v2 !== "0")
      v2 = lstrip(v2, ["0"]);
    v2 = parseInt(v2);
    if (isNaN(v2))
      v2 = def === void 0 ? 0 : def;
    return v2;
  };
  window.toTitle = function(str) {
    var word_in = str.split(" ");
    var word_out = [];
    for (var w2 in word_in) {
      word_out[w2] = word_in[w2].charAt(0).toUpperCase() + word_in[w2].slice(1);
    }
    return word_out.join(" ");
  };
  window.is_null = function(v2) {
    if (v2 === null || v2 === void 0 || cstr(v2).trim() === "")
      return true;
  };
  window.copy_dict = function(d3) {
    var n2 = {};
    for (var k2 in d3)
      n2[k2] = d3[k2];
    return n2;
  };
  window.validate_email = function(txt2) {
    return frappe.utils.validate_type(txt2, "email");
  };
  window.validate_phone = function(txt2) {
    return frappe.utils.validate_type(txt2, "phone");
  };
  window.validate_name = function(txt2) {
    return frappe.utils.validate_type(txt2, "name");
  };
  window.validate_url = function(txt2) {
    return frappe.utils.validate_type(txt2, "url");
  };
  window.nth = function(number) {
    number = cint(number);
    var s2 = "th";
    if ((number + "").substr(-1) == "1")
      s2 = "st";
    if ((number + "").substr(-1) == "2")
      s2 = "nd";
    if ((number + "").substr(-1) == "3")
      s2 = "rd";
    return number + s2;
  };
  window.has_words = function(list, item) {
    if (!item)
      return true;
    if (!list)
      return false;
    for (var i3 = 0, j3 = list.length; i3 < j3; i3++) {
      if (item.indexOf(list[i3]) != -1)
        return true;
    }
    return false;
  };
  window.has_common = function(list1, list2) {
    if (!list1 || !list2)
      return false;
    for (var i3 = 0, j3 = list1.length; i3 < j3; i3++) {
      if (in_list(list2, list1[i3]))
        return true;
    }
    return false;
  };

  // frappe/public/js/frappe/utils/number_format.js
  if (!window.frappe)
    window.frappe = {};
  function flt2(v2, decimals, number_format, rounding_method) {
    if (v2 == null || v2 == "")
      return 0;
    if (typeof v2 !== "number") {
      v2 = v2 + "";
      if (v2.indexOf(" ") != -1) {
        var parts2 = v2.split(" ");
        v2 = isNaN(parseFloat(parts2[0])) ? parts2.slice(parts2.length - 1).join(" ") : v2;
      }
      v2 = strip_number_groups(v2, number_format);
      v2 = parseFloat(v2);
      if (isNaN(v2))
        v2 = 0;
    }
    if (decimals != null)
      return _round(v2, decimals, rounding_method);
    return v2;
  }
  function strip_number_groups(v2, number_format) {
    if (!number_format)
      number_format = get_number_format2();
    var info = get_number_format_info2(number_format);
    var group_regex = new RegExp(info.group_sep === "." ? "\\." : info.group_sep, "g");
    v2 = v2.replace(group_regex, "");
    if (info.decimal_str !== "." && info.decimal_str !== "") {
      var decimal_regex = new RegExp(info.decimal_str, "g");
      v2 = v2.replace(decimal_regex, ".");
    }
    return v2;
  }
  function convert_old_to_new_number_format(v2, old_number_format, new_number_format) {
    if (!new_number_format)
      new_number_format = get_number_format2();
    let new_info = get_number_format_info2(new_number_format);
    if (!old_number_format)
      old_number_format = "#,###.##";
    let old_info = get_number_format_info2(old_number_format);
    if (old_number_format === new_number_format)
      return v2;
    if (new_info.decimal_str == "") {
      return strip_number_groups(v2);
    }
    let v_parts = v2.split(old_info.decimal_str);
    let v_before_decimal = v_parts[0];
    let v_after_decimal = v_parts[1] || "";
    let old_group_regex = new RegExp(old_info.group_sep === "." ? "\\." : old_info.group_sep, "g");
    v_before_decimal = v_before_decimal.replace(old_group_regex, new_info.group_sep);
    v2 = v_before_decimal + new_info.decimal_str + v_after_decimal;
    return v2;
  }
  frappe.number_format_info = {
    "#,###.##": { decimal_str: ".", group_sep: "," },
    "#.###,##": { decimal_str: ",", group_sep: "." },
    "# ###.##": { decimal_str: ".", group_sep: " " },
    "# ###,##": { decimal_str: ",", group_sep: " " },
    "#'###.##": { decimal_str: ".", group_sep: "'" },
    "#, ###.##": { decimal_str: ".", group_sep: ", " },
    "#,##,###.##": { decimal_str: ".", group_sep: "," },
    "#,###.###": { decimal_str: ".", group_sep: "," },
    "#.###": { decimal_str: "", group_sep: "." },
    "#,###": { decimal_str: "", group_sep: "," }
  };
  window.format_number = function(v2, format2, decimals) {
    if (!format2) {
      format2 = get_number_format2();
      if (decimals == null)
        decimals = cint(frappe.defaults.get_default("float_precision")) || 3;
    }
    var info = get_number_format_info2(format2);
    if (decimals == null)
      decimals = info.precision;
    v2 = flt2(v2, decimals, format2);
    let is_negative = false;
    if (v2 < 0)
      is_negative = true;
    v2 = Math.abs(v2);
    v2 = v2.toFixed(decimals);
    var part = v2.split(".");
    var group_position = info.group_sep ? 3 : 0;
    if (group_position) {
      var integer = part[0];
      var str = "";
      var offset = integer.length % group_position;
      for (var i3 = integer.length; i3 >= 0; i3--) {
        var l2 = replace_all(str, info.group_sep, "").length;
        if (format2 == "#,##,###.##" && str.indexOf(",") != -1) {
          group_position = 2;
          l2 += 1;
        }
        str += integer.charAt(i3);
        if (l2 && !((l2 + 1) % group_position) && i3 != 0) {
          str += info.group_sep;
        }
      }
      part[0] = str.split("").reverse().join("");
    }
    if (part[0] + "" == "") {
      part[0] = "0";
    }
    part[1] = part[1] && info.decimal_str ? info.decimal_str + part[1] : "";
    return (is_negative ? "-" : "") + part[0] + part[1];
  };
  function format_currency2(v2, currency, decimals) {
    var _a;
    const format2 = get_number_format2(currency);
    const symbol = get_currency_symbol(currency);
    const show_symbol_on_right = (_a = frappe.model.get_value(":Currency", currency, "symbol_on_right")) != null ? _a : false;
    if (decimals === void 0) {
      decimals = frappe.boot.sysdefaults.currency_precision || null;
    }
    if (symbol) {
      if (show_symbol_on_right) {
        return format_number(v2, format2, decimals) + " " + __(symbol);
      }
      return __(symbol) + " " + format_number(v2, format2, decimals);
    }
    return format_number(v2, format2, decimals);
  }
  function get_currency_symbol(currency) {
    if (frappe.boot) {
      if (frappe.boot.sysdefaults && frappe.boot.sysdefaults.hide_currency_symbol == "Yes")
        return null;
      if (!currency)
        currency = frappe.boot.sysdefaults.currency;
      return frappe.model.get_value(":Currency", currency, "symbol") || currency;
    } else {
      return frappe.currency_symbols[currency];
    }
  }
  function get_number_format2(currency) {
    return frappe.boot && frappe.boot.sysdefaults && frappe.boot.sysdefaults.number_format || "#,###.##";
  }
  function get_number_format_info2(format2) {
    var info = frappe.number_format_info[format2];
    if (!info) {
      info = { decimal_str: ".", group_sep: "," };
    }
    info.precision = format2.split(info.decimal_str).slice(1)[0].length;
    return info;
  }
  function _round(num, precision3, rounding_method) {
    rounding_method = rounding_method || frappe.boot.sysdefaults.rounding_method || "Banker's Rounding (legacy)";
    let is_negative = num < 0 ? true : false;
    if (rounding_method == "Banker's Rounding (legacy)") {
      var d3 = cint(precision3);
      var m3 = Math.pow(10, d3);
      var n2 = +(d3 ? Math.abs(num) * m3 : Math.abs(num)).toFixed(8);
      var i3 = Math.floor(n2), f3 = n2 - i3;
      var r2 = !precision3 && f3 == 0.5 ? i3 % 2 == 0 ? i3 : i3 + 1 : Math.round(n2);
      r2 = d3 ? r2 / m3 : r2;
      return is_negative ? -r2 : r2;
    } else if (rounding_method == "Banker's Rounding") {
      if (num == 0)
        return 0;
      precision3 = cint(precision3);
      let multiplier = Math.pow(10, precision3);
      num = Math.abs(num) * multiplier;
      let floor_num = Math.floor(num);
      let decimal_part = num - floor_num;
      let epsilon = 2 ** (Math.log2(Math.abs(num)) - 52);
      if (Math.abs(decimal_part - 0.5) < epsilon) {
        num = floor_num % 2 == 0 ? floor_num : floor_num + 1;
      } else {
        num = Math.round(num);
      }
      num = num / multiplier;
      return is_negative ? -num : num;
    } else if (rounding_method == "Commercial Rounding") {
      if (num == 0)
        return 0;
      let digits = cint(precision3);
      let multiplier = Math.pow(10, digits);
      num = num * multiplier;
      let epsilon = 2 ** (Math.log2(Math.abs(num)) - 52);
      if (is_negative) {
        epsilon = -1 * epsilon;
      }
      num = Math.round(num + epsilon);
      return num / multiplier;
    } else {
      throw new Error(`Unknown rounding method ${rounding_method}`);
    }
  }
  function roundNumber(num, precision3) {
    return _round(num, precision3);
  }
  function precision2(fieldname, doc2) {
    if (cur_frm) {
      if (!doc2)
        doc2 = cur_frm.doc;
      var df = frappe.meta.get_docfield(doc2.doctype, fieldname, doc2.parent || doc2.name);
      if (!df)
        console.log(fieldname + ": could not find docfield in method precision()");
      return frappe.meta.get_field_precision(df, doc2);
    } else {
      return frappe.boot.sysdefaults.float_precision;
    }
  }
  function in_list2(list, item) {
    return list.includes(item);
  }
  function remainder(numerator, denominator, precision3) {
    precision3 = cint(precision3);
    var multiplier = Math.pow(10, precision3);
    let _remainder;
    if (precision3) {
      _remainder = numerator * multiplier % (denominator * multiplier) / multiplier;
    } else {
      _remainder = numerator % denominator;
    }
    return flt2(_remainder, precision3);
  }
  function round_based_on_smallest_currency_fraction(value2, currency, precision3) {
    var smallest_currency_fraction_value = flt2(
      frappe.model.get_value(":Currency", currency, "smallest_currency_fraction_value")
    );
    if (smallest_currency_fraction_value) {
      var remainder_val = remainder(value2, smallest_currency_fraction_value, precision3);
      if (remainder_val > smallest_currency_fraction_value / 2) {
        value2 += smallest_currency_fraction_value - remainder_val;
      } else {
        value2 -= remainder_val;
      }
    } else {
      value2 = _round(value2);
    }
    return value2;
  }
  function fmt_money(v2, format2) {
    return format_currency2(v2, format2);
  }
  Object.assign(window, {
    flt: flt2,
    cint,
    strip_number_groups,
    convert_old_to_new_number_format,
    format_currency: format_currency2,
    fmt_money,
    get_currency_symbol,
    get_number_format: get_number_format2,
    get_number_format_info: get_number_format_info2,
    _round,
    roundNumber,
    precision: precision2,
    remainder,
    round_based_on_smallest_currency_fraction,
    in_list: in_list2
  });

  // frappe/public/js/frappe/utils/help.js
  frappe.provide("frappe.help");
  frappe.help.youtube_id = {};
  frappe.help.has_help = function(doctype) {
    return frappe.help.youtube_id[doctype];
  };
  frappe.help.show = function(doctype) {
    if (frappe.help.youtube_id[doctype]) {
      frappe.help.show_video(frappe.help.youtube_id[doctype]);
    }
  };
  frappe.help.show_video = function(youtube_id, title) {
    if (frappe.utils.is_url(youtube_id)) {
      const expression = '(?:youtube.com/(?:[^/]+/.+/|(?:v|e(?:mbed)?)/|.*[?&]v=)|youtu.be/)([^"&?\\s]{11})';
      youtube_id = youtube_id.match(expression)[1];
    }
    let dialog = new frappe.ui.Dialog({
      title: title || __("Help"),
      size: "large"
    });
    let video = $(
      `<div class="video-player" data-plyr-provider="youtube" data-plyr-embed-id="${youtube_id}"></div>`
    );
    video.appendTo(dialog.body);
    dialog.show();
    dialog.$wrapper.addClass("video-modal");
    let plyr;
    frappe.utils.load_video_player().then(() => {
      plyr = new frappe.Plyr(video[0], {
        hideControls: true,
        resetOnEnd: true
      });
    });
    dialog.onhide = () => {
      plyr == null ? void 0 : plyr.destroy();
    };
  };
  $("body").on("click", "a.help-link", function() {
    var doctype = $(this).attr("data-doctype");
    doctype && frappe.help.show(doctype);
  });

  // frappe/public/js/frappe/utils/help_links.js
  frappe.provide("frappe.help.help_links");
  frappe.help.help_links["data-import-tool"] = [
    {
      label: "Importing and Exporting Data",
      url: "https://docs.erpnext.com/docs/user/manual/en/data"
    }
  ];
  frappe.help.help_links["modules/Setup"] = [
    {
      label: "Users and Permissions",
      url: "https://frappeframework.com/docs/user/en/basics/users-and-permissions"
    },
    {
      label: "System Settings",
      url: "https://docs.erpnext.com/docs/user/manual/en/system-settings"
    },
    {
      label: "Data Management",
      url: "https://docs.erpnext.com/docs/user/manual/en/data"
    },
    { label: "Email", url: "https://docs.erpnext.com/docs/user/manual/en/email" },
    { label: "Printing and Branding", url: "https://docs.erpnext.com/docs/user/manual/en/print" }
  ];
  frappe.help.help_links["List/User"] = [
    {
      label: "Adding Users",
      url: "https://docs.erpnext.com/docs/user/manual/en/adding-users"
    },
    {
      label: "Rename User",
      url: "https://docs.erpnext.com/docs/user/manual/en/renaming-documents"
    }
  ];
  frappe.help.help_links["permission-manager"] = [
    {
      label: "Role Permissions Manager",
      url: "https://frappeframework.com/docs/user/en/basics/users-and-permissions#role-permissions-manager"
    }
  ];
  frappe.help.help_links["user-permissions"] = [
    {
      label: "User Permissions",
      url: "https://frappeframework.com/docs/user/en/basics/users-and-permissions#user-permissions"
    }
  ];
  frappe.help.help_links["Form/System Settings"] = [
    {
      label: "System Settings",
      url: "https://docs.erpnext.com/docs/user/manual/en/system-settings"
    }
  ];
  frappe.help.help_links["List/Email Account"] = [
    {
      label: "Email Account",
      url: "https://docs.erpnext.com/docs/user/manual/en/email-account"
    }
  ];
  frappe.help.help_links["List/Notification"] = [
    {
      label: "Notification",
      url: "https://docs.erpnext.com/docs/user/manual/en/notifications"
    }
  ];
  frappe.help.help_links["Form/Print Settings"] = [
    {
      label: "Print Settings",
      url: "https://docs.erpnext.com/docs/user/manual/en/print-settings"
    }
  ];
  frappe.help.help_links["print-format-builder"] = [
    {
      label: "Print Format Builder",
      url: "https://docs.erpnext.com/docs/user/manual/en/print-format-builder"
    }
  ];

  // frappe/public/js/frappe/utils/address_and_contact.js
  frappe.provide("frappe.contacts");
  $.extend(frappe.contacts, {
    clear_address_and_contact: function(frm) {
      $(frm.fields_dict["address_html"].wrapper).html("");
      frm.fields_dict["contact_html"] && $(frm.fields_dict["contact_html"].wrapper).html("");
    },
    render_address_and_contact: function(frm) {
      if (frm.fields_dict["address_html"] && "addr_list" in frm.doc.__onload) {
        $(frm.fields_dict["address_html"].wrapper).html(frappe.render_template("address_list", frm.doc.__onload)).find(".btn-address").on("click", () => new_record("Address", frm.doctype, frm.doc.name));
      }
      if (frm.fields_dict["contact_html"] && "contact_list" in frm.doc.__onload) {
        $(frm.fields_dict["contact_html"].wrapper).html(frappe.render_template("contact_list", frm.doc.__onload)).find(".btn-contact").on("click", () => new_record("Contact", frm.doctype, frm.doc.name));
      }
    },
    get_last_doc: function(frm) {
      const reverse_routes = frappe.route_history.slice().reverse();
      const last_route = reverse_routes.find((route) => {
        return route[0] === "Form" && route[1] !== frm.doctype;
      });
      let doctype = last_route && last_route[1];
      let docname = last_route && last_route[2];
      if (last_route && last_route.length > 3)
        docname = last_route.slice(2).join("/");
      return {
        doctype,
        docname
      };
    },
    get_address_display: function(frm, address_field, display_field) {
      if (frm.updating_party_details) {
        return;
      }
      let _address_field = address_field || "address";
      let _display_field = display_field || "address_display";
      if (!frm.doc[_address_field]) {
        frm.set_value(_display_field, "");
        return;
      }
      frappe.xcall("frappe.contacts.doctype.address.address.get_address_display", {
        address_dict: frm.doc[_address_field]
      }).then((address_display) => frm.set_value(_display_field, address_display));
    }
  });
  function new_record(doctype, link_doctype, link_name) {
    return frappe.new_doc(doctype).then(() => {
      if (cur_frm.doc.links) {
        return;
      }
      cur_frm.add_child("links", { link_doctype, link_name });
      cur_frm.refresh_field("links");
    });
  }

  // frappe/public/js/frappe/utils/preview_email.js
  frappe.preview_email = function(template, args, header, with_container = false, only_html = false) {
    return frappe.call({
      method: "frappe.email.email_body.get_email_html",
      args: {
        subject: "Test",
        template,
        args,
        header,
        with_container
      }
    }).then((r2) => {
      var html = r2.message;
      html = html.replace(/embed=/, "src=");
      if (only_html) {
        return html;
      }
      var d3 = frappe.msgprint({
        message: '<iframe width="100%" height="600px" style="border: none;"></iframe>',
        wide: true
      });
      setTimeout(() => {
        d3.$wrapper.find("iframe").contents().find("html").html(html);
        d3.$wrapper.find(".modal-dialog").css("width", "70%");
      }, 1e3);
    });
  };

  // frappe/public/js/frappe/utils/file_manager.js
  frappe.provide("frappe.file_manager");
  frappe.file_manager = function() {
    let files_to_move = [];
    let old_folder = null;
    let new_folder = null;
    function cut(files, old_folder_) {
      files_to_move = files;
      old_folder = old_folder_;
    }
    function paste(new_folder_) {
      return new Promise((resolve, reject) => {
        if (files_to_move.length === 0 || !old_folder) {
          reset();
          resolve();
          return;
        }
        new_folder = new_folder_;
        frappe.call({
          method: "frappe.core.api.file.move_file",
          args: {
            file_list: files_to_move,
            new_parent: new_folder,
            old_parent: old_folder
          },
          callback: (r2) => {
            reset();
            resolve(r2);
          }
        }).fail(reject);
      });
    }
    function reset() {
      files_to_move = [];
      old_folder = null;
      new_folder = null;
    }
    return {
      cut,
      paste,
      get can_paste() {
        return Boolean(files_to_move.length > 0 && old_folder);
      },
      get old_folder() {
        return old_folder;
      },
      get files_to_move() {
        return files_to_move;
      }
    };
  }();

  // frappe/public/js/frappe/utils/diffview.js
  frappe.provide("frappe.ui");
  frappe.ui.DiffView = class DiffView {
    constructor(doctype, fieldname, docname) {
      this.dialog = null;
      this.handler = null;
      this.doctype = doctype;
      this.fieldname = fieldname;
      this.docname = docname;
      this.dialog = this.make_dialog();
      this.set_empty_state();
      this.dialog.show();
    }
    make_dialog() {
      const get_query = () => ({
        query: "frappe.utils.diff.version_query",
        filters: { docname: this.docname, ref_doctype: this.doctype }
      });
      const onchange = () => this.compute_diff();
      return new frappe.ui.Dialog({
        title: __("Compare Versions"),
        fields: [
          {
            label: __("From version"),
            fieldtype: "Link",
            fieldname: "from_version",
            options: "Version",
            reqd: 1,
            get_query,
            onchange
          },
          {
            fieldtype: "Column Break",
            fieldname: "cb"
          },
          {
            label: __("To version"),
            fieldtype: "Link",
            fieldname: "to_version",
            options: "Version",
            reqd: 1,
            get_query,
            onchange
          },
          {
            fieldtype: "Section Break",
            fieldname: "sb"
          },
          {
            label: __("Diff"),
            fieldtype: "HTML",
            fieldname: "diff"
          }
        ],
        size: "extra-large"
      });
    }
    compute_diff() {
      const from_version = this.dialog.get_value("from_version");
      const to_version = this.dialog.get_value("to_version");
      const fieldname = this.fieldname;
      if (from_version && to_version) {
        frappe.xcall("frappe.utils.diff.get_version_diff", {
          from_version,
          to_version,
          fieldname
        }).then((data) => {
          this.dialog.set_value("diff", this.prettify_diff(data));
        });
      } else {
        this.set_empty_state();
      }
    }
    prettify_diff(diff) {
      let html = ``;
      diff.forEach((line) => {
        let line_class = "";
        if (line.startsWith("+")) {
          line_class = "insert";
        } else if (line.startsWith("-")) {
          line_class = "delete";
        }
        html += `<div class="${line_class} text-wrap">${line}</div>`;
      });
      return `<div class='diffview'>${html}</div>`;
    }
    set_empty_state() {
      this.dialog.set_value("diff", __("Select two versions to view the diff."));
    }
  };

  // frappe/public/js/frappe/utils/datatable.js
  frappe.provide("frappe.utils.datatable");
  frappe.utils.datatable.get_translations = function() {
    let translations = {};
    translations[frappe.boot.lang] = {
      "Sort Ascending": __("Sort Ascending"),
      "Sort Descending": __("Sort Descending"),
      "Reset sorting": __("Reset sorting"),
      "Remove column": __("Remove column"),
      "No Data": __("No Data"),
      "{count} cells copied": {
        1: __("{count} cell copied"),
        default: __("{count} cells copied")
      },
      "{count} rows selected": {
        1: __("{count} row selected"),
        default: __("{count} rows selected")
      }
    };
    return translations;
  };

  // frappe/public/js/frappe/upload.js
  if (frappe.require) {
    frappe.require("file_uploader.bundle.js");
  } else {
    frappe.ready(function() {
      frappe.require("file_uploader.bundle.js");
    });
  }

  // frappe/public/js/frappe/ui/tree.js
  frappe.provide("frappe.ui");
  frappe.ui.Tree = class {
    constructor({
      parent,
      label,
      root_value,
      icon_set,
      toolbar,
      expandable,
      with_skeleton = 1,
      args,
      method,
      get_label,
      on_render,
      on_click
    }) {
      $.extend(this, arguments[0]);
      if (root_value == null) {
        this.root_value = label;
      }
      this.setup_treenode_class();
      this.nodes = {};
      this.wrapper = $('<div class="tree">').appendTo(this.parent);
      if (with_skeleton)
        this.wrapper.addClass("with-skeleton");
      if (!icon_set) {
        this.icon_set = {
          open: frappe.utils.icon("folder-open", "md"),
          closed: frappe.utils.icon("folder-normal", "md"),
          leaf: frappe.utils.icon("primitive-dot", "xs")
        };
      }
      this.setup_root_node();
    }
    get_nodes(value2, is_root) {
      var args = Object.assign({}, this.args);
      args.parent = value2;
      args.is_root = is_root;
      return new Promise((resolve) => {
        frappe.call({
          method: this.method,
          args,
          callback: (r2) => {
            this.on_get_node && this.on_get_node(r2.message);
            resolve(r2.message);
          }
        });
      });
    }
    get_all_nodes(value2, is_root, label) {
      var args = Object.assign({}, this.args);
      args.label = label || value2;
      args.parent = value2;
      args.is_root = is_root;
      args.tree_method = this.method;
      return new Promise((resolve) => {
        frappe.call({
          method: "frappe.desk.treeview.get_all_nodes",
          args,
          callback: (r2) => {
            this.on_get_node && this.on_get_node(r2.message, true);
            resolve(r2.message);
          }
        });
      });
    }
    setup_treenode_class() {
      let tree = this;
      this.TreeNode = class {
        constructor({ parent, label, parent_label, expandable, is_root, data }) {
          $.extend(this, arguments[0]);
          this.loaded = 0;
          this.expanded = 0;
          if (this.parent_label) {
            this.parent_node = tree.nodes[this.parent_label];
          }
          tree.nodes[this.label] = this;
          tree.make_node_element(this);
          tree.on_render && tree.on_render(this);
        }
      };
    }
    setup_root_node() {
      this.root_node = new this.TreeNode({
        parent: this.wrapper,
        label: this.label,
        parent_label: null,
        expandable: true,
        is_root: true,
        data: {
          value: this.root_value
        }
      });
      this.expand_node(this.root_node, false);
    }
    refresh() {
      this.selected_node.parent_node && this.load_children(this.selected_node.parent_node, true);
    }
    make_node_element(node) {
      node.$tree_link = $('<span class="tree-link">').attr("data-label", node.label).data("node", node).appendTo(node.parent);
      node.$ul = $('<ul class="tree-children">').hide().appendTo(node.parent);
      this.make_icon_and_label(node);
      if (this.toolbar) {
        node.$toolbar = this.get_toolbar(node).insertAfter(node.$tree_link);
      }
    }
    add_node(node, data) {
      var $li = $('<li class="tree-node">');
      return new this.TreeNode({
        parent: $li.appendTo(node.$ul),
        parent_label: node.label,
        label: data.value,
        title: data.title,
        expandable: data.expandable,
        data
      });
    }
    reload_node(node) {
      return this.load_children(node);
    }
    toggle() {
      this.get_selected_node().toggle();
    }
    get_selected_node() {
      return this.selected_node;
    }
    set_selected_node(node) {
      this.selected_node = node;
    }
    load_children(node, deep = false) {
      const value2 = node.data.value, is_root = node.is_root;
      return deep ? frappe.run_serially([
        () => this.get_all_nodes(value2, is_root, node.label),
        (data_list) => this.render_children_of_all_nodes(data_list),
        () => this.set_selected_node(node)
      ]) : frappe.run_serially([
        () => this.get_nodes(value2, is_root),
        (data_set) => this.render_node_children(node, data_set),
        () => this.set_selected_node(node)
      ]);
    }
    render_children_of_all_nodes(data_list) {
      data_list.map((d3) => this.render_node_children(this.nodes[d3.parent], d3.data));
    }
    render_node_children(node, data_set) {
      node.$ul.empty();
      if (data_set) {
        $.each(data_set, (i3, data) => {
          var child_node = this.add_node(node, data);
          child_node.$tree_link.data("node-data", data).data("node", child_node);
        });
      }
      node.expanded = false;
      node.loaded = true;
      this.expand_node(node);
    }
    on_node_click(node) {
      this.expand_node(node);
      frappe.dom.activate(this.wrapper, node.$tree_link, "tree-link");
      if (node.$toolbar)
        this.show_toolbar(node);
    }
    expand_node(node, click = true) {
      this.set_selected_node(node);
      if (click) {
        this.on_click && this.on_click(node);
      }
      if (node.expandable) {
        this.toggle_node(node);
      }
      this.select_link(node);
      node.expanded = !node.expanded;
      node.parent.toggleClass("opened", node.expanded);
    }
    toggle_node(node) {
      if (node.expandable && this.get_nodes && !node.loaded) {
        return this.load_children(node);
      }
      if (node.$ul) {
        if (node.$ul.children().length) {
          node.$ul.toggle(!node.expanded);
        }
        if (this.icon_set) {
          if (!node.expanded) {
            node.$tree_link.find(".icon").parent().html(this.icon_set.open);
          } else {
            node.$tree_link.find(".icon").parent().addClass("node-parent").html(this.icon_set.closed);
          }
        }
      }
    }
    select_link(node) {
      this.wrapper.find(".selected").removeClass("selected");
      node.$tree_link.toggleClass("selected");
    }
    show_toolbar(node) {
      if (this.cur_toolbar)
        $(this.cur_toolbar).hide();
      this.cur_toolbar = node.$toolbar;
      node.$toolbar.show();
    }
    get_node_label(node) {
      if (this.get_label) {
        return this.get_label(node);
      }
      if (node.title && node.title != node.label) {
        return __(node.title) + ` <span class='text-muted'>(${node.label})</span>`;
      } else {
        return __(node.title || node.label);
      }
    }
    make_icon_and_label(node) {
      let icon_html = "";
      if (this.icon_set) {
        if (node.expandable) {
          icon_html = `<span class="node-parent">${this.icon_set.closed}</span>`;
        } else {
          icon_html = `<span>${this.icon_set.leaf}</span>`;
        }
      }
      $(icon_html).appendTo(node.$tree_link);
      $(`<a class="tree-label"> ${this.get_node_label(node)}</a>`).appendTo(node.$tree_link);
      node.$tree_link.on("click", () => {
        setTimeout(() => {
          this.on_node_click(node);
        }, 100);
      });
      node.$tree_link.hover(
        function() {
          $(this).parent().addClass("hover-active");
        },
        function() {
          $(this).parent().removeClass("hover-active");
        }
      );
    }
    get_toolbar(node) {
      let $toolbar = $('<span class="tree-node-toolbar btn-group"></span>').hide();
      Object.keys(this.toolbar).map((key2) => {
        let obj = this.toolbar[key2];
        if (!obj.label)
          return;
        if (obj.condition && !obj.condition(node))
          return;
        var label = obj.get_label ? obj.get_label() : obj.label;
        var $link = $("<button class='btn btn-default btn-xs'></button>").html(label).addClass("tree-toolbar-button " + (obj.btnClass || "")).appendTo($toolbar);
        $link.on("click", () => {
          obj.click(node);
        });
      });
      return $toolbar;
    }
  };

  // frappe/public/js/frappe/views/container.js
  frappe.provide("frappe.pages");
  frappe.provide("frappe.views");
  window.cur_page = null;
  frappe.views.Container = class Container {
    constructor() {
      this.container = $("#body").get(0);
      this.page = null;
      this.pagewidth = $(this.container).width();
      this.pagemargin = 50;
      var me2 = this;
      $(document).on("page-change", function() {
        var route_str = frappe.get_route_str();
        $("body").attr("data-route", route_str);
        $("body").attr("data-sidebar", me2.has_sidebar() ? 1 : 0);
      });
      $(document).bind("rename", function(event2, dt3, old_name, new_name) {
        frappe.breadcrumbs.rename(dt3, old_name, new_name);
      });
    }
    add_page(label) {
      var page = $('<div class="content page-container"></div>').attr("id", "page-" + label).attr("data-page-route", label).hide().appendTo(this.container).get(0);
      page.label = label;
      frappe.pages[label] = page;
      return page;
    }
    change_to(label) {
      cur_page = this;
      let page;
      if (label.tagName) {
        page = label;
      } else {
        page = frappe.pages[label];
      }
      if (!page) {
        console.log(__("Page not found") + ": " + label);
        return;
      }
      if (window.cur_dialog && cur_dialog.display && !cur_dialog.keep_open) {
        if (!cur_dialog.minimizable) {
          cur_dialog.hide();
        } else if (!cur_dialog.is_minimized) {
          cur_dialog.toggle_minimize();
        }
      }
      if (this.page && this.page != page) {
        $(this.page).hide();
        $(this.page).trigger("hide");
      }
      if (!this.page || this.page != page) {
        this.page = page;
        $(this.page).show();
      }
      $(document).trigger("page-change");
      this.page._route = frappe.router.get_sub_path();
      $(this.page).trigger("show");
      !this.page.disable_scroll_to_top && frappe.utils.scroll_to(0);
      frappe.breadcrumbs.update();
      return this.page;
    }
    has_sidebar() {
      var flag = 0;
      var route_str = frappe.get_route_str();
      flag = frappe.ui.pages[route_str] && !frappe.ui.pages[route_str].single_column;
      if (!flag) {
        var page_route = route_str.split("/").slice(0, 2).join("/");
        flag = $(`.page-container[data-page-route="${page_route}"] .layout-side-section`).length ? 1 : 0;
      }
      return flag;
    }
  };

  // frappe/public/js/frappe/views/breadcrumbs.js
  frappe.breadcrumbs = {
    all: {},
    preferred: {
      File: "",
      Dashboard: "Customization",
      "Dashboard Chart": "Customization",
      "Dashboard Chart Source": "Customization"
    },
    module_map: {
      Core: "Settings",
      Email: "Settings",
      Custom: "Settings",
      Workflow: "Settings",
      Printing: "Settings",
      Setup: "Settings",
      Automation: "Tools"
    },
    set_doctype_module(doctype, module2) {
      localStorage["preferred_breadcrumbs:" + doctype] = module2;
    },
    get_doctype_module(doctype) {
      return localStorage["preferred_breadcrumbs:" + doctype];
    },
    add(module2, doctype, type) {
      let obj;
      if (typeof module2 === "object") {
        obj = module2;
      } else {
        obj = {
          module: module2,
          doctype,
          type
        };
      }
      this.all[frappe.breadcrumbs.current_page()] = obj;
      this.update();
    },
    current_page() {
      return frappe.get_route_str();
    },
    update() {
      var breadcrumbs = this.all[frappe.breadcrumbs.current_page()];
      this.clear();
      if (!breadcrumbs)
        return this.toggle(false);
      if (breadcrumbs.type === "Custom") {
        this.set_custom_breadcrumbs(breadcrumbs);
      } else {
        this.set_workspace_breadcrumb(breadcrumbs);
        let view = frappe.get_route()[0];
        view = view ? view.toLowerCase() : null;
        if (breadcrumbs.doctype && ["print", "form"].includes(view)) {
          this.set_list_breadcrumb(breadcrumbs);
          this.set_form_breadcrumb(breadcrumbs, view);
        } else if (breadcrumbs.doctype && view === "list") {
          this.set_list_breadcrumb(breadcrumbs);
        } else if (breadcrumbs.doctype && view == "dashboard-view") {
          this.set_list_breadcrumb(breadcrumbs);
          this.set_dashboard_breadcrumb(breadcrumbs);
        }
      }
      this.toggle(true);
    },
    set_custom_breadcrumbs(breadcrumbs) {
      this.append_breadcrumb_element(breadcrumbs.route, breadcrumbs.label);
    },
    append_breadcrumb_element(route, label) {
      const el = document.createElement("li");
      const a2 = document.createElement("a");
      a2.href = route;
      a2.innerText = label;
      el.appendChild(a2);
      this.$breadcrumbs.append(el);
    },
    get last_route() {
      return frappe.route_history.slice(-2)[0];
    },
    set_workspace_breadcrumb(breadcrumbs) {
      if (!breadcrumbs.workspace) {
        this.set_workspace(breadcrumbs);
      }
      if (!breadcrumbs.workspace) {
        return;
      }
      if (breadcrumbs.module_info && (breadcrumbs.module_info.blocked || !frappe.visible_modules.includes(breadcrumbs.module_info.module))) {
        return;
      }
      this.append_breadcrumb_element(
        `/app/${frappe.router.slug(breadcrumbs.workspace)}`,
        __(breadcrumbs.workspace)
      );
    },
    set_workspace(breadcrumbs) {
      var _a, _b;
      this.setup_modules();
      var from_module = this.get_doctype_module(breadcrumbs.doctype);
      if (from_module) {
        breadcrumbs.module = from_module;
      } else if (this.preferred[breadcrumbs.doctype] !== void 0) {
        breadcrumbs.module = this.preferred[breadcrumbs.doctype];
      }
      if (((_a = this.last_route) == null ? void 0 : _a[0]) == "Workspaces") {
        let last_workspace = this.last_route[1];
        if (breadcrumbs.module && ((_b = frappe.boot.module_wise_workspaces[breadcrumbs.module]) == null ? void 0 : _b.includes(last_workspace))) {
          breadcrumbs.workspace = last_workspace;
          return;
        }
      }
      if (breadcrumbs.module) {
        if (this.module_map[breadcrumbs.module]) {
          breadcrumbs.module = this.module_map[breadcrumbs.module];
        }
        breadcrumbs.module_info = frappe.get_module(breadcrumbs.module);
        if (breadcrumbs.module_info && frappe.boot.module_wise_workspaces[breadcrumbs.module]) {
          breadcrumbs.workspace = frappe.boot.module_wise_workspaces[breadcrumbs.module][0];
        }
      }
    },
    set_list_breadcrumb(breadcrumbs) {
      const doctype = breadcrumbs.doctype;
      const doctype_meta = frappe.get_doc("DocType", doctype);
      if (doctype === "User" && !frappe.user.has_role("System Manager") || (doctype_meta == null ? void 0 : doctype_meta.issingle)) {
      } else {
        let route;
        const doctype_route = frappe.router.slug(frappe.router.doctype_layout || doctype);
        if (doctype_meta == null ? void 0 : doctype_meta.is_tree) {
          let view = frappe.model.user_settings[doctype].last_view || "Tree";
          route = `${doctype_route}/view/${view}`;
        } else {
          route = doctype_route;
        }
        this.append_breadcrumb_element(`/app/${route}`, __(doctype));
      }
    },
    set_form_breadcrumb(breadcrumbs, view) {
      const doctype = breadcrumbs.doctype;
      let docname = frappe.get_route().slice(2).join("/");
      let docname_title = docname;
      if (docname.startsWith("new-" + doctype.toLowerCase().replace(/ /g, "-"))) {
        docname_title = docname_title.slice(0, -10).replace(/-/g, " ").replace(/\b\w/g, (l2) => l2.toUpperCase());
      }
      let form_route = `/app/${frappe.router.slug(doctype)}/${docname_title}`;
      this.append_breadcrumb_element(form_route, __(docname_title));
      if (view === "form") {
        let last_crumb = this.$breadcrumbs.find("li").last();
        last_crumb.addClass("disabled");
        last_crumb.css("cursor", "copy");
        last_crumb.click((event2) => {
          event2.stopImmediatePropagation();
          frappe.utils.copy_to_clipboard(last_crumb.text());
        });
      }
    },
    set_dashboard_breadcrumb(breadcrumbs) {
      const doctype = breadcrumbs.doctype;
      const docname = frappe.get_route()[1];
      let dashboard_route = `/app/${frappe.router.slug(doctype)}/${docname}`;
      $(`<li><a href="${dashboard_route}">${__(docname)}</a></li>`).appendTo(this.$breadcrumbs);
    },
    setup_modules() {
      if (!frappe.visible_modules) {
        frappe.visible_modules = $.map(frappe.boot.allowed_workspaces, (m3) => {
          return m3.module;
        });
      }
    },
    rename(doctype, old_name, new_name) {
      var old_route_str = ["Form", doctype, old_name].join("/");
      var new_route_str = ["Form", doctype, new_name].join("/");
      this.all[new_route_str] = this.all[old_route_str];
      delete frappe.breadcrumbs.all[old_route_str];
      this.update();
    },
    clear() {
      this.$breadcrumbs = $("#navbar-breadcrumbs").empty();
    },
    toggle(show) {
      if (show) {
        $("body").addClass("no-breadcrumbs");
      } else {
        $("body").removeClass("no-breadcrumbs");
      }
    }
  };

  // frappe/public/js/frappe/views/factory.js
  frappe.provide("frappe.pages");
  frappe.provide("frappe.views");
  frappe.views.Factory = class Factory {
    constructor(opts) {
      $.extend(this, opts);
    }
    show() {
      this.route = frappe.get_route();
      this.page_name = frappe.get_route_str();
      if (this.before_show && this.before_show() === false)
        return;
      if (frappe.pages[this.page_name]) {
        frappe.container.change_to(this.page_name);
        if (this.on_show) {
          this.on_show();
        }
      } else {
        if (this.route[1]) {
          this.make(this.route);
        } else {
          frappe.show_not_found(this.route);
        }
      }
    }
    make_page(double_column, page_name) {
      return frappe.make_page(double_column, page_name);
    }
  };
  frappe.make_page = function(double_column, page_name) {
    if (!page_name) {
      page_name = frappe.get_route_str();
    }
    const page = frappe.container.add_page(page_name);
    frappe.ui.make_app_page({
      parent: page,
      single_column: !double_column
    });
    frappe.container.change_to(page_name);
    return page;
  };

  // frappe/public/js/frappe/views/pageview.js
  frappe.provide("frappe.views.pageview");
  frappe.provide("frappe.standard_pages");
  frappe.views.pageview = {
    with_page: function(name2, callback) {
      if (frappe.standard_pages[name2]) {
        if (!frappe.pages[name2]) {
          frappe.standard_pages[name2]();
        }
        callback();
        return;
      }
      if (locals.Page && locals.Page[name2] && locals.Page[name2].script || name2 == window.page_name) {
        callback();
      } else if (localStorage["_page:" + name2] && frappe.boot.developer_mode != 1) {
        frappe.model.sync(JSON.parse(localStorage["_page:" + name2]));
        callback();
      } else if (name2) {
        return frappe.call({
          method: "frappe.desk.desk_page.getpage",
          args: { name: name2 },
          callback: function(r2) {
            if (!r2.docs._dynamic_page) {
              localStorage["_page:" + name2] = JSON.stringify(r2.docs);
            }
            callback();
          },
          freeze: true
        });
      }
    },
    show: function(name2) {
      if (!name2) {
        name2 = frappe.boot ? frappe.boot.home_page : window.page_name;
      }
      frappe.model.with_doctype("Page", function() {
        frappe.views.pageview.with_page(name2, function(r2) {
          if (r2 && r2.exc) {
            if (!r2["403"])
              frappe.show_not_found(name2);
          } else if (!frappe.pages[name2]) {
            new frappe.views.Page(name2);
          }
          frappe.container.change_to(name2);
        });
      });
    }
  };
  frappe.views.Page = class Page2 {
    constructor(name2) {
      this.name = name2;
      var me2 = this;
      if (name2 == window.page_name) {
        this.wrapper = document.getElementById("page-" + name2);
        this.wrapper.label = document.title || window.page_name;
        this.wrapper.page_name = window.page_name;
        frappe.pages[window.page_name] = this.wrapper;
      } else {
        this.pagedoc = locals.Page[this.name];
        if (!this.pagedoc) {
          frappe.show_not_found(name2);
          return;
        }
        this.wrapper = frappe.container.add_page(this.name);
        this.wrapper.page_name = this.pagedoc.name;
        if (this.pagedoc.content)
          this.wrapper.innerHTML = this.pagedoc.content;
        frappe.dom.eval(this.pagedoc.__script || this.pagedoc.script || "");
        frappe.dom.set_style(this.pagedoc.style || "");
        frappe.breadcrumbs.add(this.pagedoc.module || null);
      }
      this.trigger_page_event("on_page_load");
      $(this.wrapper).on("show", function() {
        window.cur_frm = null;
        me2.trigger_page_event("on_page_show");
        me2.trigger_page_event("refresh");
      });
    }
    trigger_page_event(eventname) {
      var me2 = this;
      if (me2.wrapper[eventname]) {
        me2.wrapper[eventname](me2.wrapper);
      }
    }
  };
  frappe.show_not_found = function(page_name) {
    frappe.show_message_page({
      page_name,
      message: __("Sorry! I could not find what you were looking for."),
      img: "/assets/frappe/images/ui/bubble-tea-sorry.svg"
    });
  };
  frappe.show_not_permitted = function(page_name) {
    frappe.show_message_page({
      page_name,
      message: __("Sorry! You are not permitted to view this page."),
      img: "/assets/frappe/images/ui/bubble-tea-sorry.svg"
    });
  };
  frappe.show_message_page = function(opts) {
    if (!opts.page_name) {
      opts.page_name = frappe.get_route_str();
    }
    if (opts.icon) {
      opts.img = repl('<span class="%(icon)s message-page-icon"></span> ', opts);
    } else if (opts.img) {
      opts.img = repl('<img src="%(img)s" class="message-page-image">', opts);
    }
    var page = frappe.pages[opts.page_name] || frappe.container.add_page(opts.page_name);
    $(page).html(
      repl(
        '<div class="page message-page">			<div class="text-center message-page-content">				%(img)s				<p class="lead">%(message)s</p>				<a class="btn btn-default btn-sm btn-home" href="/app">%(home)s</a>			</div>		</div>',
        {
          img: opts.img || "",
          message: opts.message || "",
          home: __("Home")
        }
      )
    );
    frappe.container.change_to(opts.page_name);
  };

  // frappe/public/js/desk.bundle.js
  var import_awesome_bar = __toESM(require_awesome_bar());

  // frappe/public/js/frappe/ui/notifications/notifications.js
  frappe.provide("frappe.search");
  frappe.ui.Notifications = class Notifications {
    constructor() {
      this.tabs = {};
      this.notification_settings = frappe.boot.notification_settings;
      this.make();
    }
    make() {
      this.dropdown = $(".navbar").find(".dropdown-notifications").removeClass("hidden");
      this.dropdown_list = this.dropdown.find(".notifications-list");
      this.header_items = this.dropdown_list.find(".header-items");
      this.header_actions = this.dropdown_list.find(".header-actions");
      this.body = this.dropdown_list.find(".notification-list-body");
      this.panel_events = this.dropdown_list.find(".panel-events");
      this.panel_notifications = this.dropdown_list.find(".panel-notifications");
      this.user = frappe.session.user;
      this.setup_headers();
      this.setup_dropdown_events();
    }
    setup_headers() {
      $(`<span class="notification-settings pull-right" data-action="go_to_settings">
			${frappe.utils.icon("setting-gear")}
		</span>`).on("click", (e2) => {
        e2.stopImmediatePropagation();
        this.dropdown.dropdown("hide");
        frappe.set_route("Form", "Notification Settings", frappe.session.user);
      }).appendTo(this.header_actions).attr("title", __("Notification Settings")).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      $(`<span class="mark-all-read pull-right" data-action="mark_all_as_read">
			${frappe.utils.icon("mark-as-read")}
		</span>`).on("click", (e2) => this.mark_all_as_read(e2)).appendTo(this.header_actions).attr("title", __("Mark all as read")).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      this.categories = [
        {
          label: __("Notifications"),
          id: "notifications",
          view: NotificationsView,
          el: this.panel_notifications
        },
        {
          label: __("Today's Events"),
          id: "todays_events",
          view: EventsView,
          el: this.panel_events
        }
      ];
      let get_headers_html = (item) => {
        let active = item.id == "notifications" ? "active" : "";
        return `<li class="notifications-category ${active}"
   					id="${item.id}"
   					data-toggle="collapse"
   				>${item.label}</li>`;
      };
      let navitem = $(`<ul class="notification-item-tabs nav nav-tabs" role="tablist"></ul>`);
      this.categories = this.categories.map((item) => {
        item.$tab = $(get_headers_html(item));
        item.$tab.on("click", (e2) => {
          e2.stopImmediatePropagation();
          this.switch_tab(item);
        });
        navitem.append(item.$tab);
        return item;
      });
      navitem.appendTo(this.header_items);
      this.categories.forEach((category) => {
        this.make_tab_view(category);
      });
      this.switch_tab(this.categories[0]);
    }
    switch_tab(item) {
      this.categories.forEach((item2) => {
        item2.$tab.removeClass("active");
      });
      item.$tab.addClass("active");
      Object.keys(this.tabs).forEach((tab_name) => this.tabs[tab_name].hide());
      this.tabs[item.id].show();
    }
    make_tab_view(item) {
      let tabView = new item.view(item.el, this.dropdown, this.notification_settings);
      this.tabs[item.id] = tabView;
    }
    mark_all_as_read(e2) {
      e2.stopImmediatePropagation();
      this.dropdown_list.find(".unread").removeClass("unread");
      frappe.call("frappe.desk.doctype.notification_log.notification_log.mark_all_as_read");
    }
    setup_dropdown_events() {
      this.dropdown.on("hide.bs.dropdown", (e2) => {
        let hide = $(e2.currentTarget).data("closable");
        $(e2.currentTarget).data("closable", true);
        return hide;
      });
      this.dropdown.on("click", (e2) => {
        $(e2.currentTarget).data("closable", true);
      });
    }
  };
  frappe.ui.notifications = {
    get_notification_config() {
      return frappe.xcall("frappe.desk.notifications.get_notification_info").then((r2) => {
        frappe.ui.notifications.config = r2;
        return r2;
      });
    },
    show_open_count_list(doctype) {
      if (!frappe.ui.notifications.config) {
        this.get_notification_config().then(() => {
          this.route_to_list_with_filters(doctype);
        });
      } else {
        this.route_to_list_with_filters(doctype);
      }
    },
    route_to_list_with_filters(doctype) {
      let filters2 = frappe.ui.notifications.config["conditions"][doctype];
      if (filters2 && $.isPlainObject(filters2)) {
        if (!frappe.route_options) {
          frappe.route_options = {};
        }
        $.extend(frappe.route_options, filters2);
      }
      frappe.set_route("List", doctype);
    }
  };
  var BaseNotificationsView = class {
    constructor(wrapper, parent, settings) {
      this.wrapper = wrapper;
      this.parent = parent;
      this.settings = settings;
      this.max_length = 20;
      this.container = $(`<div></div>`).appendTo(this.wrapper);
      this.make();
    }
    show() {
      this.container.show();
    }
    hide() {
      this.container.hide();
    }
  };
  var NotificationsView = class extends BaseNotificationsView {
    make() {
      this.notifications_icon = this.parent.find(".notifications-icon");
      this.notifications_icon.attr("title", __("Notifications")).tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
      this.setup_notification_listeners();
      this.get_notifications_list(this.max_length).then((r2) => {
        if (!r2.message)
          return;
        this.dropdown_items = r2.message.notification_logs;
        frappe.update_user_info(r2.message.user_info);
        this.render_notifications_dropdown();
        if (this.settings.seen == 0 && this.dropdown_items.length > 0) {
          this.toggle_notification_icon(false);
        }
      });
    }
    update_dropdown() {
      this.get_notifications_list(1).then((r2) => {
        if (!r2.message)
          return;
        let new_item = r2.message.notification_logs[0];
        frappe.update_user_info(r2.message.user_info);
        this.dropdown_items.unshift(new_item);
        if (this.dropdown_items.length > this.max_length) {
          this.container.find(".recent-notification").last().remove();
          this.dropdown_items.pop();
        }
        this.insert_into_dropdown();
      });
    }
    change_activity_status() {
      if (this.container.find(".activity-status")) {
        this.container.find(".activity-status").replaceWith(
          `<a class="recent-item text-center text-muted"
					href="/app/List/Notification Log">
					<div class="full-log-btn">${__("View Full Log")}</div>
				</a>`
        );
      }
    }
    mark_as_read(docname, $el) {
      frappe.call("frappe.desk.doctype.notification_log.notification_log.mark_as_read", {
        docname
      }).then(() => {
        $el.removeClass("unread");
      });
    }
    insert_into_dropdown() {
      let new_item = this.dropdown_items[0];
      let new_item_html = this.get_dropdown_item_html(new_item);
      $(new_item_html).prependTo(this.container);
      this.change_activity_status();
    }
    get_dropdown_item_html(notification_log) {
      let doc_link = this.get_item_link(notification_log);
      let read_class = notification_log.read ? "" : "unread";
      let message = notification_log.subject;
      let title = message.match(/<b class="subject-title">(.*?)<\/b>/);
      message = title ? message.replace(title[1], frappe.ellipsis(strip_html(title[1]), 100)) : message;
      let timestamp = frappe.datetime.comment_when(notification_log.creation);
      let message_html = `<div class="message">
			<div>${message}</div>
			<div class="notification-timestamp text-muted">
				${timestamp}
			</div>
		</div>`;
      let user = notification_log.from_user;
      let user_avatar = frappe.avatar(user, "avatar-medium user-avatar");
      let item_html = $(`<a class="recent-item notification-item ${read_class}"
				href="${doc_link}"
				data-name="${notification_log.name}"
			>
				<div class="notification-body">
					${user_avatar}
					${message_html}
				</div>
				<div class="mark-as-read" title="${__("Mark as Read")}">
				</div>
			</a>`);
      if (!notification_log.read) {
        let mark_btn = item_html.find(".mark-as-read");
        mark_btn.tooltip({ delay: { show: 600, hide: 100 }, trigger: "hover" });
        mark_btn.on("click", (e2) => {
          e2.preventDefault();
          e2.stopImmediatePropagation();
          this.mark_as_read(notification_log.name, item_html);
        });
      }
      item_html.on("click", () => {
        !notification_log.read && this.mark_as_read(notification_log.name, item_html);
        this.notifications_icon.trigger("click");
      });
      return item_html;
    }
    render_notifications_dropdown() {
      if (this.settings && !this.settings.enabled) {
        this.container.html(`<li class="recent-item notification-item">
				<span class="text-muted">
					${__("Notifications Disabled")}
				</span></li>`);
      } else {
        if (this.dropdown_items.length) {
          this.container.empty();
          this.dropdown_items.forEach((notification_log) => {
            this.container.append(this.get_dropdown_item_html(notification_log));
          });
          this.container.append(`<a class="list-footer"
					href="/app/List/Notification Log">
						<div class="full-log-btn">${__("See all Activity")}</div>
					</a>`);
        } else {
          this.container.append(
            $(`<div class="notification-null-state">
					<div class="text-center">
						<img src="/assets/frappe/images/ui-states/notification-empty-state.svg" alt="Generic Empty State" class="null-state">
						<div class="title">${__("No New notifications")}</div>
						<div class="subtitle">
							${__("Looks like you haven\u2019t received any notifications.")}
					</div></div></div>`)
          );
        }
      }
    }
    get_notifications_list(limit) {
      return frappe.call(
        "frappe.desk.doctype.notification_log.notification_log.get_notification_logs",
        { limit }
      );
    }
    get_item_link(notification_doc) {
      const link_doctype = notification_doc.document_type ? notification_doc.document_type : "Notification Log";
      const link_docname = notification_doc.document_name ? notification_doc.document_name : notification_doc.name;
      return frappe.utils.get_form_link(link_doctype, link_docname);
    }
    toggle_notification_icon(seen) {
      this.notifications_icon.find(".notifications-seen").toggle(seen);
      this.notifications_icon.find(".notifications-unseen").toggle(!seen);
    }
    toggle_seen(flag) {
      frappe.call(
        "frappe.desk.doctype.notification_settings.notification_settings.set_seen_value",
        {
          value: cint(flag),
          user: frappe.session.user
        }
      );
    }
    setup_notification_listeners() {
      frappe.realtime.on("notification", () => {
        this.toggle_notification_icon(false);
        this.update_dropdown();
      });
      frappe.realtime.on("indicator_hide", () => {
        this.toggle_notification_icon(true);
      });
      this.parent.on("show.bs.dropdown", () => {
        this.toggle_seen(true);
        if (this.notifications_icon.find(".notifications-unseen").is(":visible")) {
          this.toggle_notification_icon(true);
          frappe.call(
            "frappe.desk.doctype.notification_log.notification_log.trigger_indicator_hide"
          );
        }
      });
    }
  };
  var EventsView = class extends BaseNotificationsView {
    make() {
      let today = frappe.datetime.get_today();
      frappe.xcall("frappe.desk.doctype.event.event.get_events", {
        start: today,
        end: today
      }).then((event_list) => {
        this.render_events_html(event_list);
      });
    }
    render_events_html(event_list) {
      let html = "";
      if (event_list.length) {
        let get_event_html = (event2) => {
          let time = __("All Day");
          if (!event2.all_day) {
            let start_time = frappe.datetime.get_time(event2.starts_on);
            let days_diff = frappe.datetime.get_day_diff(event2.ends_on, event2.starts_on);
            let end_time = frappe.datetime.get_time(event2.ends_on);
            if (days_diff > 1) {
              end_time = __("Rest of the day");
            }
            time = `${start_time} - ${end_time}`;
          }
          let particpants = "";
          if (event2.particpants) {
            particpants = frappe.avatar_group(event2.particpants, 3);
          }
          let location2 = "";
          if (event2.location) {
            location2 = `, ${event2.location}`;
          }
          return `<a class="recent-item event" href="/app/event/${event2.name}">
					<div class="event-border" style="border-color: ${event2.color}"></div>
					<div class="event-item">
						<div class="event-subject">${event2.subject}</div>
						<div class="event-time">${time}${location2}</div>
						${particpants}
					</div>
				</a>`;
        };
        html = event_list.map(get_event_html).join("");
      } else {
        html = `
				<div class="notification-null-state">
					<div class="text-center">
					<img src="/assets/frappe/images/ui-states/event-empty-state.svg" alt="Generic Empty State" class="null-state">
					<div class="title">${__("No Upcoming Events")}</div>
					<div class="subtitle">
						${__("There are no upcoming events for you.")}
				</div></div></div>
			`;
      }
      this.container.html(html);
    }
  };

  // frappe/public/js/frappe/ui/toolbar/search.js
  frappe.provide("frappe.search");
  frappe.search.SearchDialog = class {
    constructor(opts) {
      $.extend(this, opts);
      this.make();
    }
    make() {
      this.search_dialog = new frappe.ui.Dialog({
        minimizable: true,
        size: "large"
      });
      this.set_header();
      this.$wrapper = $(this.search_dialog.$wrapper).addClass("search-dialog");
      this.$body = $(this.search_dialog.body);
      this.$input = this.$wrapper.find(".search-input");
      this.setup();
    }
    set_header() {
      this.search_dialog.header.addClass("search-header").find(".title-section").html(
        `<div class="input-group text-muted">
					<input type="text" class="form-control search-input">
				</div>
				<span class="search-icon">
					${frappe.utils.icon("search")}
				</span>`
      );
    }
    setup() {
      this.modal_state = 0;
      this.current_keyword = "";
      this.more_count = 20;
      this.full_lists = {};
      this.nav_lists = {};
      this.init_search_objects();
      this.bind_input();
      this.bind_events();
    }
    init_search_objects() {
      this.searches = {
        global_search: {
          input_placeholder: __("Search"),
          empty_state_text: __("Search for anything"),
          no_results_status: () => __("No Results found"),
          get_results: (keywords, callback) => {
            let start = 0, limit = 100;
            let results = frappe.search.utils.get_nav_results(keywords);
            frappe.search.utils.get_global_results(keywords, start, limit).then(
              (global_results) => {
                results = results.concat(global_results);
                callback(results, keywords);
              },
              (err) => {
                console.error(err);
              }
            );
          }
        },
        tags: {
          input_placeholder: __("Search"),
          empty_state_text: __("Search for anything"),
          no_results_status: (keyword) => "<div>" + __("No documents found tagged with {0}", [keyword]) + "</div>",
          get_results: (keywords, callback) => {
            var results = frappe.search.utils.get_nav_results(keywords);
            frappe.tags.utils.get_tag_results(keywords).then(
              (global_results) => {
                results = results.concat(global_results);
                callback(results, keywords);
              },
              (err) => {
                console.error(err);
              }
            );
          }
        }
      };
    }
    update($r) {
      this.$wrapper.find(".loading-state").addClass("hide");
      this.$body.append($r);
      if (this.$body.find(".search-results").length > 1) {
        this.$body.find(".search-results").first().addClass("hide");
        $r.removeClass("hide");
        this.$body.find(".search-results").first().remove();
      } else {
        $r.removeClass("hide");
      }
    }
    put_placeholder(status_text) {
      var $placeholder = $(`<div class="row search-results hide">
			<div class="empty-state">
				<div class="text-center">
					<img src="/assets/frappe/images/ui-states/search-empty-state.svg"
						alt="Generic Empty State"
						class="null-state"
					>
					<div class="empty-state-text">${status_text}</div>
				</div>
			</div>
		</div>`);
      this.update($placeholder);
    }
    bind_input() {
      this.$input.on("input", (e2) => {
        const $el = $(e2.currentTarget);
        clearTimeout($el.data("timeout"));
        $el.data(
          "timeout",
          setTimeout(() => {
            if (this.$input.val() === this.current_keyword)
              return;
            let keywords = this.$input.val();
            if (keywords.length > 1) {
              this.get_results(keywords);
            } else {
              this.current_keyword = "";
              this.put_placeholder(this.search.empty_state_text);
            }
          }, 300)
        );
      });
    }
    bind_events() {
      this.$body.on("click", ".list-link", (e2) => {
        const $link = $(e2.currentTarget);
        this.$body.find(".search-sidebar").find(".list-link").removeClass("active selected");
        $link.addClass("active selected");
        const type = $link.attr("data-category");
        this.$body.find(".results-area").empty().html(this.full_lists[type]);
        this.$body.find(".module-section-link").first().focus();
      });
      this.$body.on("click", ".section-more", (e2) => {
        const $section = $(e2.currentTarget);
        const type = $section.attr("data-category");
        this.$body.find(".search-sidebar").find('*[data-category="' + type + '"]').trigger("click");
      });
      this.$body.on("click", ".all-results-link", () => {
        this.$body.find(".search-sidebar").find('*[data-category="All Results"]').trigger("click");
      });
      this.$body.on("click", ".list-more", (e2) => {
        const $el = $(e2.currentTarget);
        const type = $el.attr("data-category");
        const fetch_type = $el.attr("data-search");
        var current_count = this.$body.find(".result").length;
        if (fetch_type === "Global") {
          frappe.search.utils.get_global_results(this.current_keyword, current_count, this.more_count, type).then(
            (doctype_results) => {
              doctype_results.length && this.add_more_results(doctype_results);
            },
            (err) => {
              console.error(err);
            }
          );
        } else {
          let results = this.nav_lists[type].slice(0, this.more_count);
          this.nav_lists[type].splice(0, this.more_count);
          this.add_more_results([{ title: type, results }]);
        }
      });
      this.$body.on("click", ".switch-to-global-search", () => {
        this.search = this.searches["global_search"];
        this.$input.attr("placeholder", this.search.input_placeholder);
        this.put_placeholder(this.search.empty_state_text);
        this.get_results(this.current_keyword);
      });
    }
    init_search(keywords, search_type) {
      this.search = this.searches[search_type];
      this.$input.attr("placeholder", this.search.input_placeholder);
      this.put_placeholder(this.search.empty_state_text);
      this.get_results(keywords);
      this.search_dialog.show();
      this.$input.val(keywords);
      setTimeout(() => this.$input.select(), 500);
    }
    get_results(keywords) {
      this.current_keyword = keywords;
      if (this.$body.find(".empty-state").length > 0) {
        this.put_placeholder(__("Searching ..."));
      } else {
        this.$wrapper.find(".loading-state").removeClass("hide");
      }
      if (this.current_keyword.charAt(0) === "#") {
        this.search = this.searches["tags"];
      } else {
        this.search = this.searches["global_search"];
      }
      this.search.get_results(keywords, this.parse_results.bind(this));
    }
    parse_results(result_sets, keyword) {
      result_sets = result_sets.filter(function(set) {
        return set.results.length > 0;
      });
      if (result_sets.length > 0) {
        this.render_data(result_sets);
      } else {
        this.put_placeholder(this.search.no_results_status(keyword));
      }
    }
    render_data(result_sets) {
      let $search_results = $(frappe.render_template("search")).addClass("hide");
      let $sidebar = $search_results.find(".search-sidebar").empty();
      let sidebar_item_html = '<li class="search-sidebar-item standard-sidebar-item list-link" data-category="{0}"><a><span class="ellipsis">{1}</span></a></li>';
      this.modal_state = 0;
      this.full_lists = {
        "All Results": $('<div class="results-summary"></div>')
      };
      this.nav_lists = {};
      result_sets.forEach((set) => {
        $sidebar.append($(__(sidebar_item_html, [set.title, __(set.title)])));
        this.add_section_to_summary(set.title, set.results);
        this.full_lists[set.title] = this.render_full_list(
          set.title,
          set.results,
          set.fetch_type
        );
      });
      if (result_sets.length > 1) {
        $sidebar.prepend($(__(sidebar_item_html, ["All Results", __("All Results")])));
      }
      this.update($search_results.clone());
      this.$body.find(".list-link").first().trigger("click");
    }
    render_full_list(type, results, fetch_type) {
      let max_length = 20;
      let $results_list = $(`<div class="results-summary">
			<div class="result-section full-list ${type}-section col-sm-12">
				<div class="result-title"> ${__(type)}</div>
				<div class="result-body">
				</div>
			</div>
		</div>`);
      results.slice(0, max_length).forEach((result) => {
        $results_list.find(".result-body").append(this.render_result(type, result));
      });
      if (results.length > 0) {
        if (fetch_type === "Nav")
          this.nav_lists[type] = results;
        if (results.length > max_length) {
          $(`<a class="list-more" data-search="${fetch_type}"
					data-category="${type}" data-count="${max_length}">
						${__("More")}
				</a>`).appendTo($results_list.find(".result-body"));
        }
      }
      return $results_list;
    }
    add_section_to_summary(type, results) {
      let section_length = 4;
      let more_html = "";
      let get_result_html = (result) => this.render_result(type, result);
      if (results.length > section_length) {
        more_html = `<div>
				<a class="section-more" data-category="${type}">${__("More")}</a>
			</div>`;
      }
      let $result_section = $(`<div class="col-sm-12 result-section" data-type="${type}">
			<div class="result-title">${__(type)}</div>
			<div class="result-body">
				${more_html}
			</div>
		</div>`).appendTo(this.full_lists["All Results"]);
      $result_section.find(".result-body").prepend(results.slice(0, section_length).map(get_result_html));
    }
    get_link(result) {
      let link = "";
      if (result.route) {
        link = `href="/app/${result.route.join("/")}"`;
      } else if (result.data_path) {
        link = `data-path=${result.data_path}"`;
      }
      return link;
    }
    render_result(type, result) {
      let image_html = "";
      if (result.image !== void 0) {
        let avatar_html = frappe.get_avatar("avatar-medium", result.label, result.image);
        image_html = `<a ${this.get_link(result)}>
				<div class="result-image">
					${avatar_html}
				</div>
			</a>`;
      }
      let link_html = `<a ${this.get_link(result)} class="result-section-link">${result.label}</a>`;
      let title_html = !result.description ? link_html : `<b>${link_html}</b><div class="description"> ${result.description} </div>`;
      let result_text = `<div class="result-text">
			${title_html}
		</div>`;
      let $result = $(`<div class="result ${type}-result">
			${image_html}
			${result_text}
			${result.subtypes || ""}
		</div>`);
      if (!result.description) {
        this.handle_result_click(result, $result);
      }
      return $result;
    }
    handle_result_click(result, $result) {
      if (result.route_options) {
        frappe.route_options = result.route_options;
      }
      $result.on("click", () => {
        if (result.onclick) {
          result.onclick(result.match);
        } else {
          var previous_hash = window.location.hash;
          frappe.set_route(result.route);
          if (window.location.hash == previous_hash) {
            frappe.router.route();
          }
        }
      });
    }
    add_more_results(results_set) {
      let more_results = $('<div class="more-results last"></div>');
      if (results_set[0].results) {
        results_set[0].results.forEach((result) => {
          more_results.append(this.render_result(results_set[0].title, result));
        });
      }
      this.$body.find(".list-more").before(more_results);
      if (results_set[0].results.length < this.more_count) {
        this.$body.find(".list-more").hide();
        let no_of_results = this.$body.find(".result").length;
        let no_of_results_cue = $(
          '<div class="results-status">' + no_of_results + " results found</div>"
        );
        this.$body.find(".more-results:last").append(no_of_results_cue);
      }
      this.$body.find(".more-results.last").slideDown(200, function() {
      });
    }
  };

  // frappe/public/js/frappe/ui/toolbar/tag_utils.js
  frappe.provide("frappe.tags");
  frappe.tags.utils = {
    get_tags: function(txt2) {
      txt2 = txt2.slice(1);
      let out = [];
      if (!frappe.tags.tags) {
        frappe.tags.utils.fetch_tags();
        return [];
      }
      for (let i3 in frappe.tags.tags) {
        let tag = frappe.tags.tags[i3];
        let level = frappe.search.utils.fuzzy_search(txt2, tag);
        if (level) {
          out.push({
            type: "Tag",
            label: __("#{0}", [frappe.search.utils.bolden_match_part(__(tag), txt2)]),
            value: __("#{0}", [__(tag)]),
            index: 1 + level,
            match: tag,
            onclick() {
              frappe.searchdialog.search.init_search("#".concat(tag), "tags");
            }
          });
        }
      }
      return out;
    },
    fetch_tags() {
      frappe.call({
        method: "frappe.desk.doctype.tag.tag.get_tags_list_for_awesomebar",
        callback: function(r2) {
          if (r2 && r2.message) {
            frappe.tags.tags = $.extend([], r2.message);
          }
        }
      });
    },
    get_tag_results: function(tag) {
      function get_results_sets(data) {
        var results_sets = [], result, set;
        function get_existing_set(doctype) {
          return results_sets.find(function(set2) {
            return set2.title === doctype;
          });
        }
        function make_description(content) {
          var field_length = 110;
          var field_value = null;
          if (content.length > field_length) {
            field_value = content.slice(0, field_length) + "...";
          } else {
            var length2 = content.length;
            field_value = content.slice(0, length2) + "...";
          }
          return field_value;
        }
        data.forEach(function(d3) {
          var description = "";
          if (d3.content) {
            description = make_description(d3.content);
          }
          result = {
            label: d3.name,
            value: d3.name,
            description,
            route: ["Form", d3.doctype, d3.name]
          };
          set = get_existing_set(d3.doctype);
          if (set) {
            set.results.push(result);
          } else {
            set = {
              title: d3.doctype,
              results: [result],
              fetch_type: "Global"
            };
            results_sets.push(set);
          }
        });
        return results_sets;
      }
      return new Promise(function(resolve) {
        frappe.call({
          method: "frappe.desk.doctype.tag.tag.get_documents_for_tag",
          args: {
            tag
          },
          callback: function(r2) {
            if (r2.message) {
              resolve(get_results_sets(r2.message));
            } else {
              resolve([]);
            }
          }
        });
      });
    }
  };

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/search.html
  frappe.templates["search"] = `<div class="search-results flex">
	<div class="col-md-3 col-sm-3 hidden-xs layout-side-section">
		<ul class="overlay-sidebar list-unstyled search-sidebar"></ul>
	</div>
	<div class="col-md-9 col-sm-9 layout-main-section results-area">

	</div>
</div>
`;

  // frappe/public/js/frappe/ui/toolbar/fuzzy_match.js
  var SEQUENTIAL_BONUS = 25;
  var SEPARATOR_BONUS = 30;
  var CAMEL_BONUS = 30;
  var FIRST_LETTER_BONUS = 15;
  var LEADING_LETTER_PENALTY = -5;
  var MAX_LEADING_LETTER_PENALTY = -15;
  var UNMATCHED_LETTER_PENALTY = -1;
  function fuzzy_match(pattern, str) {
    const recursion_count = 0;
    const recursion_limit = 10;
    const max_matches = 256;
    return fuzzy_match_recursive(
      pattern,
      str,
      0,
      0,
      null,
      [],
      max_matches,
      0,
      recursion_count,
      recursion_limit
    );
  }
  function fuzzy_match_recursive(pattern, str, pattern_cur_index, str_curr_index, src_matches, matches, max_matches, next_match, recursion_count, recursion_limit) {
    let out_score = 0;
    if (++recursion_count >= recursion_limit) {
      return [false, out_score, matches];
    }
    if (pattern_cur_index === pattern.length || str_curr_index === str.length) {
      return [false, out_score, matches];
    }
    let recursive_match = false;
    let best_recursive_matches = [];
    let best_recursive_score = 0;
    let first_match = true;
    while (pattern_cur_index < pattern.length && str_curr_index < str.length) {
      if (pattern[pattern_cur_index].toLowerCase() === str[str_curr_index].toLowerCase()) {
        if (next_match >= max_matches) {
          return [false, out_score, matches];
        }
        if (first_match && src_matches) {
          matches = [...src_matches];
          first_match = false;
        }
        const [matched2, recursive_score, recursive_matches] = fuzzy_match_recursive(
          pattern,
          str,
          pattern_cur_index,
          str_curr_index + 1,
          matches,
          [],
          max_matches,
          next_match,
          recursion_count,
          recursion_limit
        );
        if (matched2) {
          if (!recursive_match || recursive_score > best_recursive_score) {
            best_recursive_matches = [...recursive_matches];
            best_recursive_score = recursive_score;
          }
          recursive_match = true;
        }
        matches[next_match++] = str_curr_index;
        ++pattern_cur_index;
      }
      ++str_curr_index;
    }
    const matched = pattern_cur_index === pattern.length;
    if (matched) {
      out_score = 100;
      let penalty = LEADING_LETTER_PENALTY * matches[0];
      penalty = penalty < MAX_LEADING_LETTER_PENALTY ? MAX_LEADING_LETTER_PENALTY : penalty;
      out_score += penalty;
      const unmatched = str.length - next_match;
      out_score += UNMATCHED_LETTER_PENALTY * unmatched;
      for (let i3 = 0; i3 < next_match; i3++) {
        const curr_idx = matches[i3];
        if (i3 > 0) {
          const prev_idx = matches[i3 - 1];
          if (curr_idx == prev_idx + 1) {
            out_score += SEQUENTIAL_BONUS;
          }
        }
        if (curr_idx > 0) {
          const neighbor = str[curr_idx - 1];
          const curr = str[curr_idx];
          if (neighbor !== neighbor.toUpperCase() && curr !== curr.toLowerCase()) {
            out_score += CAMEL_BONUS;
          }
          const is_neighbour_separator = neighbor == "_" || neighbor == " ";
          if (is_neighbour_separator) {
            out_score += SEPARATOR_BONUS;
          }
        } else {
          out_score += FIRST_LETTER_BONUS;
        }
      }
      if (recursive_match && (!matched || best_recursive_score > out_score)) {
        matches = [...best_recursive_matches];
        out_score = best_recursive_score;
        return [true, out_score, matches];
      } else if (matched) {
        return [true, out_score, matches];
      } else {
        return [false, out_score, matches];
      }
    }
    return [false, out_score, matches];
  }

  // frappe/public/js/frappe/ui/toolbar/search_utils.js
  frappe.provide("frappe.search");
  frappe.search.utils = {
    setup_recent: function() {
      this.recent = JSON.parse(frappe.boot.user.recent || "[]") || [];
    },
    get_recent_pages: function(keywords) {
      if (keywords === null)
        keywords = "";
      var me2 = this, values = [], options = [];
      function find(list, keywords2, process) {
        list.forEach(function(item, i3) {
          var _item = $.isArray(item) ? item[0] : item;
          _item = __(_item || "").toLowerCase().replace(/-/g, " ");
          if (keywords2 === _item || _item.indexOf(keywords2) !== -1) {
            var option = process(item);
            if (option) {
              if ($.isPlainObject(option)) {
                option = [option];
              }
              option.forEach(function(o2) {
                o2.match = item;
                o2.recent = true;
              });
              options = option.concat(options);
            }
          }
        });
      }
      me2.recent.forEach(function(doctype, i3) {
        values.push([doctype[1], ["Form", doctype[0], doctype[1]]]);
      });
      values = values.reverse();
      frappe.route_history.forEach(function(route, i3) {
        if (route[0] === "Form") {
          values.push([route[2], route]);
        } else if (["List", "Tree", "Workspaces", "query-report"].includes(route[0]) || route[2] === "Report") {
          if (route[1]) {
            values.push([route[1], route]);
          }
        } else if (route[0]) {
          values.push([frappe.route_titles[route.join("/")] || route[0], route]);
        }
      });
      find(values, keywords, function(match) {
        var out = {
          route: match[1]
        };
        if (match[1][0] === "Form") {
          if (match[1].length > 2 && match[1][1] !== match[1][2]) {
            out.label = __(match[1][1]) + " " + match[1][2].bold();
            out.value = __(match[1][1]) + " " + match[1][2];
          } else {
            out.label = __(match[1][1]).bold();
            out.value = __(match[1][1]);
          }
        } else if (["List", "Tree", "Workspaces", "query-report"].includes(match[1][0]) && match[1].length > 1) {
          var type = match[1][0], label = type;
          if (type === "Workspaces")
            label = "Workspace";
          else if (type === "query-report" || match[1][2] === "Report")
            label = "Report";
          out.label = __(`{0} ${label}`, [__(match[1][1]).bold()]);
          out.value = __(`{0} ${label}`, [__(match[1][1])]);
        } else if (match[0]) {
          out.label = match[0].bold();
          out.value = match[0];
        } else {
          console.log("Illegal match", match);
        }
        out.index = 80;
        return out;
      });
      return options;
    },
    get_frequent_links() {
      let options = [];
      frappe.boot.frequently_visited_links.forEach((link) => {
        const label = frappe.utils.get_route_label(link.route);
        options.push({
          route: link.route,
          label,
          value: label,
          index: link.count
        });
      });
      if (!options.length) {
        return this.get_recent_pages("");
      }
      return options;
    },
    get_search_in_list: function(keywords) {
      var me2 = this;
      var out = [];
      if (in_list(keywords.split(" "), "in") && keywords.slice(-2) !== "in") {
        var parts2 = keywords.split(" in ");
        frappe.boot.user.can_read.forEach(function(item) {
          if (frappe.boot.user.can_search.includes(item)) {
            const search_result = me2.fuzzy_search(parts2[1], item, true);
            if (search_result.score) {
              out.push({
                type: "In List",
                label: __("Find {0} in {1}", [
                  __(parts2[0]),
                  search_result.marked_string
                ]),
                value: __("Find {0} in {1}", [__(parts2[0]), __(item)]),
                route_options: { name: ["like", "%" + parts2[0] + "%"] },
                index: 1 + search_result.score,
                route: ["List", item]
              });
            }
          }
        });
      }
      return out;
    },
    get_creatables: function(keywords) {
      var me2 = this;
      var out = [];
      var firstKeyword = keywords.split(" ")[0];
      if (firstKeyword.toLowerCase() === __("new")) {
        frappe.boot.user.can_create.forEach(function(item) {
          const search_result = me2.fuzzy_search(keywords.substr(4), item, true);
          var level = search_result.score;
          if (level) {
            out.push({
              type: "New",
              label: __("New {0}", [search_result.marked_string || __(item)]),
              value: __("New {0}", [__(item)]),
              index: 1 + level,
              match: item,
              onclick: function() {
                frappe.new_doc(item, true);
              }
            });
          }
        });
      }
      return out;
    },
    get_doctypes: function(keywords) {
      var me2 = this;
      var out = [];
      var score, marked_string, target;
      var option = function(type, route, order) {
        let skip_list = type === "List" && target.endsWith("List");
        if (skip_list) {
          var label = marked_string || __(target);
        } else {
          label = __(`{0} ${skip_list ? "" : type}`, [marked_string || __(target)]);
        }
        return {
          type,
          label,
          value: __(`{0} ${type}`, [target]),
          index: score + order,
          match: target,
          route
        };
      };
      frappe.boot.user.can_read.forEach(function(item) {
        const search_result = me2.fuzzy_search(keywords, item, true);
        ({ score, marked_string } = search_result);
        if (score) {
          target = item;
          if (in_list(frappe.boot.single_types, item)) {
            out.push(option("", ["Form", item, item], 0.05));
          } else if (frappe.boot.user.can_search.includes(item)) {
            if (in_list(frappe.boot.user.can_create, item)) {
              var match = item;
              out.push({
                type: "New",
                label: __("New {0}", [search_result.marked_string || __(item)]),
                value: __("New {0}", [__(item)]),
                index: score + 0.015,
                match: item,
                onclick: function() {
                  frappe.new_doc(match, true);
                }
              });
            }
            out.push(option("List", ["List", item], 0.05));
            if (frappe.model.can_get_report(item)) {
              out.push(option("Report", ["List", item, "Report"], 0.04));
            }
          }
        }
      });
      return out;
    },
    get_reports: function(keywords) {
      var me2 = this;
      var out = [];
      var route;
      Object.keys(frappe.boot.user.all_reports).forEach(function(item) {
        const search_result = me2.fuzzy_search(keywords, item, true);
        var level = search_result.score;
        if (level > 0) {
          var report = frappe.boot.user.all_reports[item];
          if (report.report_type == "Report Builder")
            route = ["List", report.ref_doctype, "Report", item];
          else
            route = ["query-report", item];
          out.push({
            type: "Report",
            label: __("Report {0}", [search_result.marked_string || __(item)]),
            value: __("Report {0}", [__(item)]),
            index: level,
            route
          });
        }
      });
      return out;
    },
    get_pages: function(keywords) {
      var me2 = this;
      var out = [];
      this.pages = {};
      $.each(frappe.boot.page_info, function(name2, p2) {
        me2.pages[p2.title] = p2;
        p2.name = name2;
      });
      Object.keys(this.pages).forEach(function(item) {
        if (item == "Hub" || item == "hub")
          return;
        const search_result = me2.fuzzy_search(keywords, item, true);
        var level = search_result.score;
        if (level) {
          var page = me2.pages[item];
          out.push({
            type: "Page",
            label: __("Open {0}", [search_result.marked_string || __(item)]),
            value: __("Open {0}", [__(item)]),
            match: item,
            index: level,
            route: [page.route || page.name]
          });
        }
      });
      var target = "Calendar";
      if (__("calendar").indexOf(keywords.toLowerCase()) === 0) {
        out.push({
          type: "Calendar",
          value: __("Open {0}", [__(target)]),
          index: me2.fuzzy_search(keywords, "Calendar"),
          match: target,
          route: ["List", "Event", target]
        });
      }
      target = "Hub";
      if (__("hub").indexOf(keywords.toLowerCase()) === 0) {
        out.push({
          type: "Hub",
          value: __("Open {0}", [__(target)]),
          index: me2.fuzzy_search(keywords, "Hub"),
          match: target,
          route: [target, "Item"]
        });
      }
      if (__("email inbox").indexOf(keywords.toLowerCase()) === 0) {
        out.push({
          type: "Inbox",
          value: __("Open {0}", [__("Email Inbox")]),
          index: me2.fuzzy_search(keywords, "email inbox"),
          match: target,
          route: ["List", "Communication", "Inbox"]
        });
      }
      return out;
    },
    get_workspaces: function(keywords) {
      var me2 = this;
      var out = [];
      frappe.boot.allowed_workspaces.forEach(function(item) {
        const search_result = me2.fuzzy_search(keywords, item.name, true);
        var level = search_result.score;
        if (level > 0) {
          var ret = {
            type: "Workspace",
            label: __("Open {0}", [search_result.marked_string || __(item.name)]),
            value: __("Open {0}", [__(item.name)]),
            index: level,
            route: [frappe.router.slug(item.name)]
          };
          out.push(ret);
        }
      });
      return out;
    },
    get_dashboards: function(keywords) {
      var me2 = this;
      var out = [];
      frappe.boot.dashboards.forEach(function(item) {
        const search_result = me2.fuzzy_search(keywords, item.name, true);
        var level = search_result.score;
        if (level > 0) {
          var ret = {
            type: "Dashboard",
            label: __("{0} Dashboard", [search_result.marked_string || __(item.name)]),
            value: __("{0} Dashboard", [__(item.name)]),
            index: level,
            route: ["dashboard-view", item.name]
          };
          out.push(ret);
        }
      });
      return out;
    },
    get_global_results: function(keywords, start, limit, doctype = "") {
      var me2 = this;
      function get_results_sets(data) {
        var results_sets = [], result, set;
        function get_existing_set(doctype2) {
          return results_sets.find(function(set2) {
            return set2.title === doctype2;
          });
        }
        function make_description(content, doc_name) {
          var parts2 = content.split(" ||| ");
          var result_max_length = 300;
          var field_length = 120;
          var fields = [];
          var result_current_length = 0;
          var field_text = "";
          for (var i3 = 0; i3 < parts2.length; i3++) {
            var part = parts2[i3];
            if (part.toLowerCase().indexOf(keywords) !== -1) {
              let colon_index, field_value;
              if (part.indexOf(" &&& ") !== -1) {
                colon_index = part.indexOf(" &&& ");
                field_value = part.slice(colon_index + 5);
              } else {
                colon_index = part.indexOf(" : ");
                field_value = part.slice(colon_index + 3);
              }
              if (field_value.length > field_length) {
                var field_data = "";
                var index = field_value.indexOf(keywords);
                field_data += index < field_length / 2 ? field_value.slice(0, index) : "..." + field_value.slice(index - field_length / 2, index);
                field_data += field_value.slice(index, index + field_length / 2);
                field_data += index + field_length / 2 < field_value.length ? "..." : "";
                field_value = field_data;
              }
              var field_name = part.slice(0, colon_index);
              var remaining_length = result_max_length - result_current_length;
              result_current_length += field_name.length + field_value.length + 2;
              const search_result_name = me2.fuzzy_search(keywords, field_name, true);
              const search_result_value = me2.fuzzy_search(keywords, field_value, true);
              if (result_current_length < result_max_length) {
                field_text = '<span class="field-name text-muted">' + search_result_name.marked_string + ": </span> " + search_result_value.marked_string;
                if (fields.indexOf(field_text) === -1 && doc_name !== field_value) {
                  fields.push(field_text);
                }
              } else {
                if (field_name.length < remaining_length) {
                  remaining_length -= field_name.length;
                  field_text = '<span class="field-name text-muted">' + search_result_name.marked_string + ": </span> ";
                  field_value = field_value.slice(0, remaining_length);
                  field_value = field_value.slice(0, field_value.lastIndexOf(" ")) + " ...";
                  field_text += search_result_value.marked_string;
                  fields.push(field_text);
                } else {
                  fields.push("...");
                }
                break;
              }
            }
          }
          return fields.join(", ");
        }
        data.forEach(function(d3) {
          result = {
            label: d3.name,
            value: d3.name,
            description: make_description(d3.content, d3.name),
            route: ["Form", d3.doctype, d3.name]
          };
          if (d3.image || d3.image === null) {
            result.image = d3.image;
          }
          set = get_existing_set(d3.doctype);
          if (set) {
            set.results.push(result);
          } else {
            set = {
              title: d3.doctype,
              results: [result],
              fetch_type: "Global"
            };
            results_sets.push(set);
          }
        });
        return results_sets;
      }
      return new Promise(function(resolve, reject) {
        frappe.call({
          method: "frappe.utils.global_search.search",
          args: {
            text: keywords,
            start,
            limit,
            doctype
          },
          callback: function(r2) {
            if (r2.message) {
              resolve(get_results_sets(r2.message));
            } else {
              resolve([]);
            }
          }
        });
      });
    },
    get_nav_results: function(keywords) {
      function sort_uniques(array) {
        var routes = [], out = [];
        array.forEach(function(d3) {
          if (d3.route) {
            if (d3.route[0] === "List" && d3.route[2]) {
              d3.route.splice(2);
            }
            var str_route = d3.route.join("/");
            if (routes.indexOf(str_route) === -1) {
              routes.push(str_route);
              out.push(d3);
            } else {
              var old = routes.indexOf(str_route);
              if (out[old].index > d3.index) {
                out[old] = d3;
              }
            }
          } else {
            out.push(d3);
          }
        });
        return out.sort(function(a2, b2) {
          return b2.index - a2.index;
        });
      }
      var lists = [], setup = [];
      var all_doctypes = sort_uniques(this.get_doctypes(keywords));
      all_doctypes.forEach(function(d3) {
        if (d3.type === "") {
          setup.push(d3);
        } else {
          lists.push(d3);
        }
      });
      var in_keyword = keywords.split(" in ")[0];
      return [
        {
          title: __("Recents"),
          fetch_type: "Nav",
          results: sort_uniques(this.get_recent_pages(keywords))
        },
        {
          title: __("Create a new ..."),
          fetch_type: "Nav",
          results: sort_uniques(this.get_creatables(keywords))
        },
        {
          title: __("Lists"),
          fetch_type: "Nav",
          results: lists
        },
        {
          title: __("Reports"),
          fetch_type: "Nav",
          results: sort_uniques(this.get_reports(keywords))
        },
        {
          title: __("Administration"),
          fetch_type: "Nav",
          results: sort_uniques(this.get_pages(keywords))
        },
        {
          title: __("Workspace"),
          fetch_type: "Nav",
          results: sort_uniques(this.get_workspaces(keywords))
        },
        {
          title: __("Dashboard"),
          fetch_type: "Nav",
          results: sort_uniques(this.get_dashboards(keywords))
        },
        {
          title: __("Setup"),
          fetch_type: "Nav",
          results: setup
        },
        {
          title: __("Find '{0}' in ...", [in_keyword]),
          fetch_type: "Nav",
          results: sort_uniques(this.get_search_in_list(keywords))
        }
      ];
    },
    fuzzy_search: function(keywords = "", _item = "", return_marked_string = false) {
      const item = __(_item);
      const [, score, matches] = fuzzy_match(keywords, item, return_marked_string);
      if (!return_marked_string) {
        return score;
      }
      if (score == 0) {
        return { score, item };
      }
      const matchArray = Array(item.length).fill(0);
      matches.forEach((index) => matchArray[index] = 1);
      let marked_string = "";
      let buffer = "";
      const flushBuffer = () => {
        if (!buffer)
          return "";
        const temp = `<mark>${buffer}</mark>`;
        buffer = "";
        return temp;
      };
      matchArray.forEach((isMatch, index) => {
        if (isMatch) {
          buffer += item[index];
        } else {
          marked_string += flushBuffer();
          marked_string += item[index];
        }
      });
      marked_string += flushBuffer();
      return { score, marked_string };
    },
    bolden_match_part: function(str, subseq) {
      if (fuzzy_match(subseq, str)[0] === false) {
        return str;
      }
      if (str.indexOf(subseq) == 0) {
        var tail = str.split(subseq)[1];
        return "<mark>" + subseq + "</mark>" + tail;
      }
      var rendered = "";
      var str_orig = str;
      var str_len = str.length;
      str = str.toLowerCase();
      subseq = subseq.toLowerCase();
      outer:
        for (var i3 = 0, j3 = 0; i3 < subseq.length; i3++) {
          var sub_ch = subseq.charCodeAt(i3);
          while (j3 < str_len) {
            if (str.charCodeAt(j3) === sub_ch) {
              var str_char = str_orig.charAt(j3);
              if (str_char === str_char.toLowerCase()) {
                rendered += "<mark>" + subseq.charAt(i3) + "</mark>";
              } else {
                rendered += "<mark>" + subseq.charAt(i3).toUpperCase() + "</mark>";
              }
              j3++;
              continue outer;
            }
            rendered += str_orig.charAt(j3);
            j3++;
          }
          return str_orig;
        }
      rendered += str_orig.slice(j3);
      return rendered;
    },
    get_executables(keywords) {
      let results = [];
      this.searchable_functions.forEach((item) => {
        const target = item.label.toLowerCase();
        const txt2 = keywords.toLowerCase();
        if (txt2 === target || target.indexOf(txt2) === 0) {
          const search_result = this.fuzzy_search(txt2, target, true);
          results.push({
            type: "Executable",
            value: search_result.marked_string,
            index: search_result.score,
            match: item.label,
            onclick: () => item.action.apply(this, item.args)
          });
        }
      });
      return results;
    },
    make_function_searchable(_function, label = null, args = null) {
      if (typeof _function !== "function") {
        throw new Error("First argument should be a function");
      }
      this.searchable_functions.push({
        label: label || _function.name,
        action: _function,
        args
      });
    },
    get_marketplace_apps: function(keywords) {
      var me2 = this;
      var out = [];
      frappe.boot.marketplace_apps.forEach(function(item) {
        const search_result = me2.fuzzy_search(keywords, item.title, true);
        if (search_result.score > 0) {
          var ret = {
            label: __("Install {0} from Marketplace", [search_result.marked_string]),
            value: __("Install {0} from Marketplace", [__(item.title)]),
            index: search_result.score * 0.8,
            route: [
              `https://frappecloud.com/${item.route}?utm_source=awesomebar`,
              item.name
            ]
          };
          out.push(ret);
        }
      });
      return out;
    },
    searchable_functions: []
  };

  // frappe/public/js/frappe/ui/toolbar/about.js
  frappe.provide("frappe.ui.misc");
  frappe.ui.misc.about = function() {
    if (!frappe.ui.misc.about_dialog) {
      var d3 = new frappe.ui.Dialog({ title: __("Frappe Framework") });
      $(d3.body).html(
        repl(
          `<div>
					<p>${__("Open Source Applications for the Web")}</p>
					<p><i class='fa fa-globe fa-fw'></i>
						${__("Website")}:
						<a href='https://frappeframework.com' target='_blank'>https://frappeframework.com</a></p>
					<p><i class='fa fa-github fa-fw'></i>
						${__("Source")}:
						<a href='https://github.com/frappe' target='_blank'>https://github.com/frappe</a></p>
					<p><i class='fa fa-linkedin fa-fw'></i>
						Linkedin: <a href='https://linkedin.com/company/frappe-tech' target='_blank'>https://linkedin.com/company/frappe-tech</a></p>
					<p><i class='fa fa-facebook fa-fw'></i>
						Facebook: <a href='https://facebook.com/erpnext' target='_blank'>https://facebook.com/erpnext</a></p>
					<p><i class='fa fa-twitter fa-fw'></i>
						Twitter: <a href='https://twitter.com/frappetech' target='_blank'>https://twitter.com/frappetech</a></p>
					<p><i class='fa fa-youtube fa-fw'></i>
						YouTube: <a href='https://www.youtube.com/@frappetech' target='_blank'>https://www.youtube.com/@frappetech</a></p>
					<hr>
					<h4>${__("Installed Apps")}</h4>
					<div id='about-app-versions'>${__("Loading versions...")}</div>
					<hr>
					<p class='text-muted'>${__("&copy; Frappe Technologies Pvt. Ltd. and contributors")} </p>
					</div>`,
          frappe.app
        )
      );
      frappe.ui.misc.about_dialog = d3;
      frappe.ui.misc.about_dialog.on_page_show = function() {
        if (!frappe.versions) {
          frappe.call({
            method: "frappe.utils.change_log.get_versions",
            callback: function(r2) {
              show_versions(r2.message);
            }
          });
        } else {
          show_versions(frappe.versions);
        }
      };
      var show_versions = function(versions) {
        var $wrap = $("#about-app-versions").empty();
        $.each(Object.keys(versions).sort(), function(i3, key2) {
          var v2 = versions[key2];
          let text;
          if (v2.branch) {
            text = $.format("<p><b>{0}:</b> v{1} ({2})<br></p>", [
              v2.title,
              v2.branch_version || v2.version,
              v2.branch
            ]);
          } else {
            text = $.format("<p><b>{0}:</b> v{1}<br></p>", [v2.title, v2.version]);
          }
          $(text).appendTo($wrap);
        });
        frappe.versions = versions;
      };
    }
    frappe.ui.misc.about_dialog.show();
  };

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/navbar.html
  frappe.templates["navbar"] = `<header class="navbar navbar-expand sticky-top" role="navigation">
	<div class="container">
		<a class="navbar-brand navbar-home" href="/app">
			<img class="app-logo" style="width: {{ navbar_settings.logo_width || 48 }}px" src="{{ frappe.boot.app_logo_url }}">
		</a>
		<ul class="nav navbar-nav d-none d-sm-flex" id="navbar-breadcrumbs"></ul>
		<div class="collapse navbar-collapse justify-content-end">
			<form class="form-inline fill-width justify-content-end" role="search" onsubmit="return false;">
				{% if (frappe.boot.read_only) { %}
					<span class="indicator-pill yellow no-indicator-dot" title="{%= __("Your site is undergoing maintenance or being updated.") %}">
						{%= __("Read Only Mode") %}
					</span>
				{% } %}
				<div class="input-group search-bar text-muted hidden">
					<input
						id="navbar-search"
						type="text"
						class="form-control"
						placeholder="{%= __("Search or type a command (Ctrl + G)") %}"
						aria-haspopup="true"
					>
					<span class="search-icon">
						<svg class="icon icon-sm"><use href="#icon-search"></use></svg>
					</span>
				</div>
			</form>
			<ul class="navbar-nav">
				<li class="nav-item dropdown dropdown-notifications dropdown-mobile hidden">
					<a
						class="nav-link notifications-icon text-muted"
						data-toggle="dropdown"
						aria-haspopup="true"
						aria-expanded="true"
						href="#"
						onclick="return false;">
						<span class="notifications-seen">
							<svg class="es-icon icon-sm" style="stroke:none;"><use href="#es-line-notifications"></use></svg>
						</span>
						<span class="notifications-unseen">
							<svg class="es-icon icon-sm"><use href="#es-line-notifications-unseen"></use></svg>
						</span>
					</a>
					<div class="dropdown-menu notifications-list dropdown-menu-right" role="menu">
						<div class="notification-list-header">
							<div class="header-items"></div>
							<div class="header-actions"></div>
						</div>
						<div class="notification-list-body">
							<div class="panel-notifications"></div>
							<div class="panel-events"></div>
						</div>
					</div>
				</li>
				<li class="nav-item dropdown dropdown-message dropdown-mobile hidden">
					<a
						class="nav-link notifications-icon text-muted"
						data-toggle="dropdown"
						aria-haspopup="true"
						aria-expanded="true"
						href="#"
						onclick="return false;">
						<span>
							<svg class="es-icon icon-sm"><use href="#es-line-chat-alt"></use></svg>
						</span>
					</a>
				</li>
				<li class="vertical-bar d-none d-sm-block"></li>
				<li class="nav-item dropdown dropdown-help dropdown-mobile d-none d-lg-block">
					<a class="nav-link" data-toggle="dropdown" href="#" onclick="return false;">
						{{ __("Help") }}
						<span>
							<svg class="es-icon icon-xs"><use href="#es-line-down"></use></svg>
						</span>
					</a>
					<div class="dropdown-menu dropdown-menu-right" id="toolbar-help" role="menu">
						<div id="help-links"></div>
						<div class="dropdown-divider documentation-links"></div>
						{% for item in navbar_settings.help_dropdown %}
							{% if (!item.hidden) { %}
								{% if (item.route) { %}
									<a class="dropdown-item" href="{{ item.route }}">
										{%= __(item.item_label) %}
									</a>
								{% } else if (item.action) { %}
									<a class="dropdown-item" onclick="return {{ item.action }}">
										{%= __(item.item_label) %}
									</a>
								{% } else { %}
									<div class="dropdown-divider"></div>
								{% } %}
							{% } %}
						{% endfor %}
					</div>
				</li>
				<li class="nav-item dropdown dropdown-navbar-user dropdown-mobile">
					<a class="nav-link" data-toggle="dropdown" href="#" onclick="return false;">
						{{ avatar }}
					</a>
					<div class="dropdown-menu dropdown-menu-right" id="toolbar-user" role="menu">
						{% for item in navbar_settings.settings_dropdown %}
							{% if (!item.hidden) { %}
								{% if (item.route) { %}
									<a class="dropdown-item" href="{{ item.route }}">
										{%= __(item.item_label) %}
									</a>
								{% } else if (item.action) { %}
									<a class="dropdown-item" onclick="return {{ item.action }}">
										{%= __(item.item_label) %}
									</a>
								{% } else { %}
									<div class="dropdown-divider"></div>
								{% } %}
							{% } %}
						{% endfor %}
					</div>
				</li>
			</ul>
		</div>
	</div>
</header>
`;

  // frappe/public/js/frappe/ui/toolbar/toolbar.js
  frappe.provide("frappe.ui.toolbar");
  frappe.provide("frappe.search");
  frappe.ui.toolbar.Toolbar = class {
    constructor() {
      $("header").replaceWith(
        frappe.render_template("navbar", {
          avatar: frappe.avatar(frappe.session.user, "avatar-medium"),
          navbar_settings: frappe.boot.navbar_settings
        })
      );
      $(".dropdown-toggle").dropdown();
      $("#toolbar-user a[href]").click(function() {
        $(this).closest(".dropdown-menu").prev().dropdown("toggle");
      });
      this.setup_awesomebar();
      this.setup_notifications();
      this.setup_help();
      this.make();
    }
    make() {
      this.bind_events();
      $(document).trigger("toolbar_setup");
    }
    bind_events() {
      $(document).on("page-change", function() {
        $("header .navbar .custom-menu").remove();
      });
      $("#search-modal").on("shown.bs.modal", function() {
        var search_modal = $(this);
        setTimeout(function() {
          search_modal.find("#modal-search").focus();
        }, 300);
      });
      $(".navbar-toggle-full-width").click(() => {
        frappe.ui.toolbar.toggle_full_width();
      });
    }
    setup_help() {
      if (!frappe.boot.desk_settings.notifications) {
        $(".navbar .vertical-bar").removeClass("d-sm-block");
        $(".dropdown-help").removeClass("d-lg-block");
        return;
      }
      frappe.provide("frappe.help");
      frappe.help.show_results = show_results;
      this.search = new frappe.search.SearchDialog();
      frappe.provide("frappe.searchdialog");
      frappe.searchdialog.search = this.search;
      $(".dropdown-help .dropdown-toggle").on("click", function() {
        $(".dropdown-help input").focus();
      });
      $(".dropdown-help .dropdown-menu").on("click", "input, button", function(e2) {
        e2.stopPropagation();
      });
      $("#input-help").on("keydown", function(e2) {
        if (e2.which == 13) {
          $(this).val("");
        }
      });
      $(document).on("page-change", function() {
        var $help_links = $(".dropdown-help #help-links");
        $help_links.html("");
        var route = frappe.get_route_str();
        var breadcrumbs = route.split("/");
        var links = [];
        for (let i3 = 0; i3 < breadcrumbs.length; i3++) {
          var r2 = route.split("/", i3 + 1);
          var key2 = r2.join("/");
          var help_links = frappe.help.help_links[key2] || [];
          links = $.merge(links, help_links);
        }
        if (links.length === 0) {
          $help_links.next().hide();
        } else {
          $help_links.next().show();
        }
        for (let i3 = 0; i3 < links.length; i3++) {
          var link = links[i3];
          var url2 = link.url;
          $("<a>", {
            href: url2,
            class: "dropdown-item",
            text: __(link.label),
            target: "_blank"
          }).appendTo($help_links);
        }
        $(".dropdown-help .dropdown-menu").on("click", "a", show_results);
      });
      var $result_modal = frappe.get_modal("", "");
      $result_modal.addClass("help-modal");
      $(document).on("click", ".help-modal a", show_results);
      function show_results(e2) {
        var href = e2.target.href;
        if (href.indexOf("blob") > 0) {
          window.open(href, "_blank");
        }
        var path = $(e2.target).attr("data-path");
        if (path) {
          e2.preventDefault();
        }
      }
    }
    setup_awesomebar() {
      if (frappe.boot.desk_settings.search_bar) {
        let awesome_bar = new frappe.search.AwesomeBar();
        awesome_bar.setup("#navbar-search");
        frappe.search.utils.make_function_searchable(
          frappe.utils.generate_tracking_url,
          __("Generate Tracking URL")
        );
        if (frappe.model.can_read("RQ Job")) {
          frappe.search.utils.make_function_searchable(function() {
            frappe.set_route("List", "RQ Job");
          }, __("Background Jobs"));
        }
      }
    }
    setup_notifications() {
      if (frappe.boot.desk_settings.notifications && frappe.session.user !== "Guest") {
        this.notifications = new frappe.ui.Notifications();
      }
    }
  };
  $.extend(frappe.ui.toolbar, {
    add_dropdown_button: function(parent, label, click, icon) {
      var menu = frappe.ui.toolbar.get_menu(parent);
      if (menu.find("li:not(.custom-menu)").length && !menu.find(".divider").length) {
        frappe.ui.toolbar.add_menu_divider(menu);
      }
      return $(
        '<li class="custom-menu"><a><i class="fa-fw ' + icon + '"></i> ' + label + "</a></li>"
      ).insertBefore(menu.find(".divider")).find("a").click(function() {
        click.apply(this);
      });
    },
    get_menu: function(label) {
      return $("#navbar-" + label.toLowerCase());
    },
    add_menu_divider: function(menu) {
      menu = typeof menu == "string" ? frappe.ui.toolbar.get_menu(menu) : menu;
      $('<li class="divider custom-menu"></li>').prependTo(menu);
    },
    add_icon_link(route, icon, index, class_name) {
      let parent_element = $(".navbar-right").get(0);
      let new_element = $(`<li class="${class_name}">
			<a class="btn" href="${route}" title="${frappe.utils.to_title_case(
        class_name,
        true
      )}" aria-haspopup="true" aria-expanded="true">
				<div>
					<i class="octicon ${icon}"></i>
				</div>
			</a>
		</li>`).get(0);
      parent_element.insertBefore(new_element, parent_element.children[index]);
    },
    toggle_full_width() {
      let fullwidth = JSON.parse(localStorage.container_fullwidth || "false");
      fullwidth = !fullwidth;
      localStorage.container_fullwidth = fullwidth;
      frappe.ui.toolbar.set_fullwidth_if_enabled();
      $(document.body).trigger("toggleFullWidth");
    },
    set_fullwidth_if_enabled() {
      let fullwidth = JSON.parse(localStorage.container_fullwidth || "false");
      $(document.body).toggleClass("full-width", fullwidth);
    },
    show_shortcuts(e2) {
      e2.preventDefault();
      frappe.ui.keys.show_keyboard_shortcut_dialog();
      return false;
    }
  });
  frappe.ui.toolbar.clear_cache = frappe.utils.throttle(function() {
    frappe.assets.clear_local_storage();
    frappe.xcall("frappe.sessions.clear").then((message) => {
      frappe.show_alert({
        message,
        indicator: "info"
      });
      location.reload(true);
    });
  }, 1e4);
  frappe.ui.toolbar.show_about = function() {
    try {
      frappe.ui.misc.about();
    } catch (e2) {
      console.log(e2);
    }
    return false;
  };
  frappe.ui.toolbar.route_to_user = function() {
    frappe.set_route("Form", "User", frappe.session.user);
  };
  frappe.ui.toolbar.view_website = function() {
    let website_tab = window.open();
    website_tab.opener = null;
    website_tab.location = "/index";
  };
  frappe.ui.toolbar.setup_session_defaults = function() {
    let fields = [];
    frappe.call({
      method: "frappe.core.doctype.session_default_settings.session_default_settings.get_session_default_values",
      callback: function(data) {
        fields = JSON.parse(data.message);
        let perms = frappe.perm.get_perm("Session Default Settings");
        if (in_list(frappe.user_roles, "System Manager") || perms[0].read == 1) {
          fields[fields.length] = {
            fieldname: "settings",
            fieldtype: "Button",
            label: __("Settings"),
            click: () => {
              frappe.set_route(
                "Form",
                "Session Default Settings",
                "Session Default Settings"
              );
            }
          };
        }
        frappe.prompt(
          fields,
          function(values) {
            fields.forEach(function(d3) {
              if (!values[d3.fieldname]) {
                values[d3.fieldname] = "";
              }
            });
            frappe.call({
              method: "frappe.core.doctype.session_default_settings.session_default_settings.set_session_default_values",
              args: {
                default_values: values
              },
              callback: function(data2) {
                if (data2.message == "success") {
                  frappe.show_alert({
                    message: __("Session Defaults Saved"),
                    indicator: "green"
                  });
                  frappe.ui.toolbar.clear_cache();
                } else {
                  frappe.show_alert({
                    message: __(
                      "An error occurred while setting Session Defaults"
                    ),
                    indicator: "red"
                  });
                }
              }
            });
          },
          __("Session Defaults"),
          __("Save")
        );
      }
    });
  };

  // frappe/public/js/frappe/views/communication.js
  var import_localforage = __toESM(require_localforage());
  frappe.last_edited_communication = {};
  var separator_element = "<div>---</div>";
  frappe.views.CommunicationComposer = class {
    constructor(opts) {
      $.extend(this, opts);
      if (!this.doc) {
        this.doc = this.frm && this.frm.doc || {};
      }
      this.make();
    }
    make() {
      const me2 = this;
      this.dialog = new frappe.ui.Dialog({
        title: this.title || this.subject || __("New Email"),
        no_submit_on_enter: true,
        fields: this.get_fields(),
        primary_action_label: __("Send"),
        primary_action() {
          me2.send_action();
        },
        secondary_action_label: __("Discard"),
        secondary_action() {
          me2.dialog.hide();
          me2.clear_cache();
        },
        size: "large",
        minimizable: true
      });
      $(this.dialog.$wrapper.find(".form-section").get(0)).addClass("to_section");
      this.prepare();
      this.dialog.show();
      if (this.frm) {
        $(document).trigger("form-typing", [this.frm]);
      }
    }
    get_fields() {
      const fields = [
        {
          label: __("To"),
          fieldtype: "MultiSelect",
          reqd: 0,
          fieldname: "recipients"
        },
        {
          fieldtype: "Button",
          label: frappe.utils.icon("down", "xs"),
          fieldname: "option_toggle_button",
          click: () => {
            this.toggle_more_options();
          }
        },
        {
          fieldtype: "Section Break",
          hidden: 1,
          fieldname: "more_options"
        },
        {
          label: __("CC"),
          fieldtype: "MultiSelect",
          fieldname: "cc"
        },
        {
          label: __("BCC"),
          fieldtype: "MultiSelect",
          fieldname: "bcc"
        },
        {
          fieldtype: "Section Break",
          fieldname: "email_template_section_break",
          hidden: 1
        },
        {
          label: __("Email Template"),
          fieldtype: "Link",
          options: "Email Template",
          fieldname: "email_template"
        },
        {
          fieldtype: "HTML",
          label: __("Clear & Add template"),
          fieldname: "clear_and_add_template"
        },
        { fieldtype: "Section Break" },
        {
          label: __("Subject"),
          fieldtype: "Data",
          reqd: 1,
          fieldname: "subject",
          length: 524288
        },
        {
          label: __("Message"),
          fieldtype: "Text Editor",
          fieldname: "content",
          onchange: frappe.utils.debounce(this.save_as_draft.bind(this), 300)
        },
        {
          fieldtype: "Button",
          label: __("Add Signature"),
          fieldname: "add_signature",
          hidden: 1,
          click: async () => {
            let sender_email = this.dialog.get_value("sender") || "";
            this.content_set = false;
            await this.set_content(sender_email);
          }
        },
        { fieldtype: "Section Break" },
        {
          label: __("Send me a copy"),
          fieldtype: "Check",
          fieldname: "send_me_a_copy",
          default: frappe.boot.user.send_me_a_copy
        },
        {
          label: __("Send Read Receipt"),
          fieldtype: "Check",
          fieldname: "send_read_receipt"
        },
        {
          label: __("Attach Document Print"),
          fieldtype: "Check",
          fieldname: "attach_document_print"
        },
        {
          label: __("Select Print Format"),
          fieldtype: "Select",
          fieldname: "select_print_format"
        },
        { fieldtype: "Column Break" },
        {
          label: __("Select Attachments"),
          fieldtype: "HTML",
          fieldname: "select_attachments"
        }
      ];
      const email_accounts = frappe.boot.email_accounts.filter((account) => {
        return !in_list(["All Accounts", "Sent", "Spam", "Trash"], account.email_account) && account.enable_outgoing;
      });
      if (email_accounts.length) {
        this.user_email_accounts = email_accounts.map(function(e2) {
          return e2.email_id;
        });
        fields.unshift({
          label: __("From"),
          fieldtype: "Select",
          reqd: 1,
          fieldname: "sender",
          options: this.user_email_accounts
        });
        if (this.user_email_accounts.length == 1) {
          this["sender"] = this.user_email_accounts;
        }
      }
      return fields;
    }
    toggle_more_options(show_options) {
      show_options = show_options || this.dialog.fields_dict.more_options.df.hidden;
      this.dialog.set_df_property("more_options", "hidden", !show_options);
      this.dialog.set_df_property("email_template_section_break", "hidden", !show_options);
      const label = frappe.utils.icon(show_options ? "up-line" : "down", "xs");
      this.dialog.get_field("option_toggle_button").set_label(label);
    }
    prepare() {
      this.setup_multiselect_queries();
      this.setup_subject_and_recipients();
      this.setup_print();
      this.setup_attach();
      this.setup_email();
      this.setup_email_template();
      this.setup_last_edited_communication();
      this.setup_add_signature_button();
      this.set_values();
    }
    setup_add_signature_button() {
      let has_sender = this.dialog.has_field("sender");
      this.dialog.set_df_property("add_signature", "hidden", !has_sender);
    }
    setup_multiselect_queries() {
      ["recipients", "cc", "bcc"].forEach((field) => {
        this.dialog.fields_dict[field].get_data = () => {
          const data = this.dialog.fields_dict[field].get_value();
          const txt2 = data.match(/[^,\s*]*$/)[0] || "";
          frappe.call({
            method: "frappe.email.get_contact_list",
            args: { txt: txt2 },
            callback: (r2) => {
              this.dialog.fields_dict[field].set_data(r2.message);
            }
          });
        };
      });
    }
    setup_subject_and_recipients() {
      this.subject = this.subject || "";
      if (!this.forward && !this.recipients && this.last_email) {
        this.recipients = this.last_email.sender;
        this.cc = this.last_email.cc;
        this.bcc = this.last_email.bcc;
      }
      if (!this.forward && !this.recipients) {
        this.recipients = this.frm && this.frm.timeline.get_recipient();
      }
      if (!this.subject && this.frm) {
        const last = this.frm.timeline.get_last_email();
        if (last) {
          this.subject = last.subject;
          if (!this.recipients) {
            this.recipients = last.sender;
          }
          if (strip(this.subject.toLowerCase().split(":")[0]) != "re") {
            this.subject = __("Re: {0}", [this.subject]);
          }
        }
        if (!this.subject) {
          this.subject = this.frm.doc.name;
          if (this.frm.meta.subject_field && this.frm.doc[this.frm.meta.subject_field]) {
            this.subject = this.frm.doc[this.frm.meta.subject_field];
          } else if (this.frm.meta.title_field && this.frm.doc[this.frm.meta.title_field]) {
            this.subject = this.frm.doc[this.frm.meta.title_field];
          }
        }
        const identifier = `#${this.frm.doc.name}`;
        if (!cstr(this.subject).includes(identifier)) {
          this.subject = `${this.subject} (${identifier})`;
        }
      }
      if (this.frm && !this.recipients) {
        this.recipients = this.frm.doc[this.frm.email_field];
      }
    }
    setup_email_template() {
      const me2 = this;
      const fields = this.dialog.fields_dict;
      const clear_and_add_template = $(fields.clear_and_add_template.wrapper);
      function add_template() {
        const email_template = me2.dialog.fields_dict.email_template.get_value();
        if (!email_template)
          return;
        function prepend_reply(reply) {
          const content_field = me2.dialog.fields_dict.content;
          const subject_field = me2.dialog.fields_dict.subject;
          let content = content_field.get_value() || "";
          content_field.set_value(`${reply.message}<br>${content}`);
          subject_field.set_value(reply.subject);
        }
        frappe.call({
          method: "frappe.email.doctype.email_template.email_template.get_email_template",
          args: {
            template_name: email_template,
            doc: me2.doc
          },
          callback(r2) {
            prepend_reply(r2.message);
          }
        });
      }
      let email_template_actions = [
        {
          label: __("Add Template"),
          description: __("Prepend the template to the email message"),
          action: () => add_template()
        },
        {
          label: __("Clear & Add Template"),
          description: __("Clear the email message and add the template"),
          action: () => {
            me2.dialog.fields_dict.content.set_value("");
            add_template();
          }
        }
      ];
      frappe.utils.add_select_group_button(clear_and_add_template, email_template_actions);
    }
    setup_last_edited_communication() {
      if (this.frm) {
        this.doctype = this.frm.doctype;
        this.key = this.frm.docname;
      } else {
        this.doctype = this.key = "Inbox";
      }
      if (this.last_email) {
        this.key = this.key + ":" + this.last_email.name;
      }
      if (this.subject) {
        this.key = this.key + ":" + this.subject;
      }
      this.dialog.on_hide = () => {
        $.extend(this.get_last_edited_communication(true), this.dialog.get_values(true));
        if (this.frm) {
          $(document).trigger("form-stopped-typing", [this.frm]);
        }
      };
    }
    get_last_edited_communication(clear) {
      if (!frappe.last_edited_communication[this.doctype]) {
        frappe.last_edited_communication[this.doctype] = {};
      }
      if (clear || !frappe.last_edited_communication[this.doctype][this.key]) {
        frappe.last_edited_communication[this.doctype][this.key] = {};
      }
      return frappe.last_edited_communication[this.doctype][this.key];
    }
    async set_values() {
      for (const fieldname of ["recipients", "cc", "bcc", "sender"]) {
        await this.dialog.set_value(fieldname, this[fieldname] || "");
      }
      const subject = this.subject ? frappe.utils.html2text(this.subject) : "";
      await this.dialog.set_value("subject", subject);
      await this.set_values_from_last_edited_communication();
      await this.set_content();
      if (this.frm && !this.is_a_reply && !this.content_set) {
        const email_template = this.frm.meta.default_email_template || "";
        await this.dialog.set_value("email_template", email_template);
      }
      for (const fieldname of ["email_template", "cc", "bcc"]) {
        if (this.dialog.get_value(fieldname)) {
          this.toggle_more_options(true);
          break;
        }
      }
    }
    async set_values_from_last_edited_communication() {
      if (this.message)
        return;
      const last_edited = this.get_last_edited_communication();
      if (!last_edited.content)
        return;
      if (last_edited.email_template) {
        const template_field = this.dialog.fields_dict.email_template;
        await template_field.set_model_value(last_edited.email_template);
        delete last_edited.email_template;
      }
      await this.dialog.set_values(last_edited);
      this.content_set = true;
    }
    selected_format() {
      return this.dialog.fields_dict.select_print_format.input.value || this.frm && this.frm.meta.default_print_format || "Standard";
    }
    get_print_format(format2) {
      if (!format2) {
        format2 = this.selected_format();
      }
      if (locals["Print Format"] && locals["Print Format"][format2]) {
        return locals["Print Format"][format2];
      } else {
        return {};
      }
    }
    setup_print() {
      const fields = this.dialog.fields_dict;
      $(fields.attach_document_print.input).click(function() {
        $(fields.select_print_format.wrapper).toggle($(this).prop("checked"));
      });
      $(fields.select_print_format.wrapper).toggle(false);
      if (this.frm) {
        const print_formats = frappe.meta.get_print_formats(this.frm.meta.name);
        $(fields.select_print_format.input).empty().add_options(print_formats).val(print_formats[0]);
      } else {
        $(fields.attach_document_print.wrapper).toggle(false);
      }
    }
    setup_attach() {
      const fields = this.dialog.fields_dict;
      const attach = $(fields.select_attachments.wrapper);
      if (!this.attachments) {
        this.attachments = [];
      }
      let args = {
        folder: "Home/Attachments",
        on_success: (attachment) => {
          this.attachments.push(attachment);
          this.render_attachment_rows(attachment);
        }
      };
      if (this.frm) {
        args = {
          doctype: this.frm.doctype,
          docname: this.frm.docname,
          folder: "Home/Attachments",
          on_success: (attachment) => {
            this.frm.attachments.attachment_uploaded(attachment);
            this.render_attachment_rows(attachment);
          }
        };
      }
      $(`
			<label class="control-label">
				${__("Select Attachments")}
			</label>
			<div class='attach-list'></div>
			<p class='add-more-attachments'>
				<button class='btn btn-xs btn-default'>
					${frappe.utils.icon("small-add", "xs")}&nbsp;
					${__("Add Attachment")}
				</button>
			</p>
		`).appendTo(attach.empty());
      attach.find(".add-more-attachments button").on("click", () => new frappe.ui.FileUploader(args));
      this.render_attachment_rows();
    }
    render_attachment_rows(attachment) {
      const select_attachments = this.dialog.fields_dict.select_attachments;
      const attachment_rows = $(select_attachments.wrapper).find(".attach-list");
      if (attachment) {
        attachment_rows.append(this.get_attachment_row(attachment, true));
      } else {
        let files = [];
        if (this.attachments && this.attachments.length) {
          files = files.concat(this.attachments);
        }
        if (this.frm) {
          files = files.concat(this.frm.get_files());
        }
        if (files.length) {
          $.each(files, (i3, f3) => {
            if (!f3.file_name)
              return;
            if (!attachment_rows.find(`[data-file-name="${f3.name}"]`).length) {
              f3.file_url = frappe.urllib.get_full_url(f3.file_url);
              attachment_rows.append(this.get_attachment_row(f3));
            }
          });
        }
      }
    }
    get_attachment_row(attachment, checked) {
      return $(`<p class="checkbox flex">
			<label class="ellipsis" title="${attachment.file_name}">
				<input
					type="checkbox"
					data-file-name="${attachment.name}"
					${checked ? "checked" : ""}>
				</input>
				<span class="ellipsis">${attachment.file_name}</span>
			</label>
			&nbsp;
			<a href="${attachment.file_url}" target="_blank" class="btn-linkF">
				${frappe.utils.icon("link-url")}
			</a>
		</p>`);
    }
    setup_email() {
      const fields = this.dialog.fields_dict;
      if (this.attach_document_print) {
        $(fields.attach_document_print.input).click();
        $(fields.select_print_format.wrapper).toggle(true);
      }
      $(fields.send_me_a_copy.input).on("click", () => {
        const val2 = fields.send_me_a_copy.get_value();
        frappe.db.set_value("User", frappe.session.user, "send_me_a_copy", val2);
        frappe.boot.user.send_me_a_copy = val2;
      });
    }
    send_action() {
      const me2 = this;
      const btn = me2.dialog.get_primary_btn();
      const form_values = this.get_values();
      if (!form_values)
        return;
      const selected_attachments = $.map(
        $(me2.dialog.wrapper).find("[data-file-name]:checked"),
        function(element) {
          return $(element).attr("data-file-name");
        }
      );
      if (form_values.attach_document_print) {
        me2.send_email(
          btn,
          form_values,
          selected_attachments,
          null,
          form_values.select_print_format || ""
        );
      } else {
        me2.send_email(btn, form_values, selected_attachments);
      }
    }
    get_values() {
      const form_values = this.dialog.get_values();
      for (let i3 = 0, l2 = this.dialog.fields.length; i3 < l2; i3++) {
        const df = this.dialog.fields[i3];
        if (df.is_cc_checkbox) {
          if (form_values[df.fieldname]) {
            form_values.cc = (form_values.cc ? form_values.cc + ", " : "") + df.fieldname;
            form_values.bcc = (form_values.bcc ? form_values.bcc + ", " : "") + df.fieldname;
          }
          delete form_values[df.fieldname];
        }
      }
      return form_values;
    }
    save_as_draft() {
      if (this.dialog && this.frm) {
        let message = this.dialog.get_value("content");
        message = message.split(separator_element)[0];
        import_localforage.default.setItem(this.frm.doctype + this.frm.docname, message).catch((e2) => {
          if (e2) {
            console.log(e2);
            console.warn(
              "[Communication] IndexedDB is full. Cannot save message as draft"
            );
          }
        });
      }
    }
    clear_cache() {
      this.delete_saved_draft();
      this.get_last_edited_communication(true);
    }
    delete_saved_draft() {
      if (this.dialog && this.frm) {
        import_localforage.default.removeItem(this.frm.doctype + this.frm.docname).catch((e2) => {
          if (e2) {
            console.log(e2);
            console.warn(
              "[Communication] IndexedDB is full. Cannot save message as draft"
            );
          }
        });
      }
    }
    send_email(btn, form_values, selected_attachments, print_html, print_format) {
      const me2 = this;
      this.dialog.hide();
      if (!form_values.recipients) {
        frappe.msgprint(__("Enter Email Recipient(s)"));
        return;
      }
      if (!form_values.attach_document_print) {
        print_html = null;
        print_format = null;
      }
      if (this.frm && !frappe.model.can_email(this.doc.doctype, this.frm)) {
        frappe.msgprint(__("You are not allowed to send emails related to this document"));
        return;
      }
      return frappe.call({
        method: "frappe.core.doctype.communication.email.make",
        args: {
          recipients: form_values.recipients,
          cc: form_values.cc,
          bcc: form_values.bcc,
          subject: form_values.subject,
          content: form_values.content,
          doctype: me2.doc.doctype,
          name: me2.doc.name,
          send_email: 1,
          print_html,
          send_me_a_copy: form_values.send_me_a_copy,
          print_format,
          sender: form_values.sender,
          sender_full_name: form_values.sender ? frappe.user.full_name() : void 0,
          email_template: form_values.email_template,
          attachments: selected_attachments,
          read_receipt: form_values.send_read_receipt,
          print_letterhead: me2.is_print_letterhead_checked()
        },
        btn,
        callback(r2) {
          if (!r2.exc) {
            frappe.utils.play_sound("email");
            if (r2.message["emails_not_sent_to"]) {
              frappe.msgprint(
                __("Email not sent to {0} (unsubscribed / disabled)", [
                  frappe.utils.escape_html(r2.message["emails_not_sent_to"])
                ])
              );
            }
            me2.clear_cache();
            if (me2.frm) {
              me2.frm.reload_doc();
            }
            if (me2.success) {
              try {
                me2.success(r2);
              } catch (e2) {
                console.log(e2);
              }
            }
          } else {
            frappe.msgprint(
              __("There were errors while sending email. Please try again.")
            );
            if (me2.error) {
              try {
                me2.error(r2);
              } catch (e2) {
                console.log(e2);
              }
            }
          }
        }
      });
    }
    is_print_letterhead_checked() {
      if (this.frm && $(this.frm.wrapper).find(".form-print-wrapper").is(":visible")) {
        return $(this.frm.wrapper).find(".print-letterhead").prop("checked") ? 1 : 0;
      } else {
        return (frappe.model.get_doc(":Print Settings", "Print Settings") || { with_letterhead: 1 }).with_letterhead ? 1 : 0;
      }
    }
    async set_content(sender_email) {
      if (this.content_set)
        return;
      let message = this.message || "";
      if (!message && this.frm) {
        const { doctype, docname } = this.frm;
        message = await import_localforage.default.getItem(doctype + docname) || "";
      }
      if (message) {
        this.content_set = true;
      }
      const signature = await this.get_signature(sender_email || "");
      if (!this.content_set || !strip_html(message).includes(strip_html(signature))) {
        message += signature;
      }
      if (this.is_a_reply && !this.reply_set) {
        message += this.get_earlier_reply();
      }
      await this.dialog.set_value("content", message);
    }
    async get_signature(sender_email) {
      let signature = frappe.boot.user.email_signature;
      if (!signature) {
        let filters2 = {
          add_signature: 1
        };
        if (sender_email) {
          filters2["email_id"] = sender_email;
        } else {
          filters2["default_outgoing"] = 1;
        }
        const email_accounts = await frappe.db.get_list("Email Account", {
          filters: filters2,
          fields: ["signature", "email_id"],
          limit: 1
        });
        let filtered_email = null;
        if (email_accounts.length) {
          signature = email_accounts[0].signature;
          filtered_email = email_accounts[0].email_id;
        }
        if (!sender_email && filtered_email) {
          if (this.user_email_accounts && this.user_email_accounts.includes(filtered_email)) {
            this.dialog.set_value("sender", filtered_email);
          }
        }
      }
      if (!signature)
        return "";
      if (!frappe.utils.is_html(signature)) {
        signature = signature.replace(/\n/g, "<br>");
      }
      return "<br>" + signature;
    }
    get_earlier_reply() {
      this.reply_set = false;
      const last_email = this.last_email || this.frm && this.frm.timeline.get_last_email(true);
      if (!last_email)
        return "";
      let last_email_content = last_email.original_comment || last_email.content;
      last_email_content = this.html2text(last_email_content).replace(/\n/g, "<br>");
      if (last_email_content.length > 20 * 1024) {
        last_email_content += "<div>" + __("Message clipped") + "</div>" + last_email_content;
        last_email_content = last_email_content.slice(0, 20 * 1024);
      }
      const communication_date = frappe.datetime.global_date_format(
        last_email.communication_date || last_email.creation
      );
      this.reply_set = true;
      return `
			<div><br></div>
			${separator_element || ""}
			<p>
			${__("On {0}, {1} wrote:", [communication_date, last_email.sender])}
			</p>
			<blockquote>
			${last_email_content}
			</blockquote>
		`;
    }
    html2text(html) {
      html = html.replace(/<\/div>/g, "<br></div>").replace(/<\/p>/g, "<br></p>").replace(/<br>/g, "\n");
      const text = frappe.utils.html2text(html);
      return text.replace(/\n{3,}/g, "\n\n");
    }
  };

  // frappe/public/js/frappe/views/translation_manager.js
  frappe.views.TranslationManager = class TranslationManager {
    constructor(opts) {
      Object.assign(this, opts);
      this.make();
    }
    make() {
      this.data = [];
      this.dialog = new frappe.ui.Dialog({
        fields: this.get_fields(),
        title: __("Translate {0}", [this.df.label]),
        no_submit_on_enter: true,
        primary_action_label: __("Update Translations"),
        primary_action: (values) => this.update_translations(values).then(() => {
          this.dialog.hide();
          this.data = [];
          frappe.msgprint({
            title: __("Success"),
            message: __("Successfully updated translations"),
            indicator: "green"
          });
        })
      });
      this.get_translations_data().then((data) => {
        this.data.push(...data || []);
        this.dialog.refresh();
        this.dialog.show();
      });
    }
    get_fields() {
      var fields = [
        {
          label: __("Source Text"),
          fieldname: "source",
          fieldtype: "Data",
          read_only: 1,
          bold: 1,
          default: this.source_text
        },
        {
          label: __("Translations"),
          fieldname: "translation_data",
          fieldtype: "Table",
          fields: [
            {
              label: "Language",
              fieldname: "language",
              fieldtype: "Link",
              options: "Language",
              in_list_view: 1,
              columns: 3
            },
            {
              label: "Translation",
              fieldname: "translation",
              fieldtype: "Text",
              in_list_view: 1,
              columns: 7
            }
          ],
          data: this.data,
          get_data: () => {
            return this.data;
          }
        }
      ];
      return fields;
    }
    get_translations_data() {
      return frappe.db.get_list("Translation", {
        fields: ["name", "language", "translated_text as translation"],
        filters: {
          source_text: strip_html(this.source_text)
        }
      });
    }
    update_translations({ source, translation_data = [] }) {
      const translation_dict = {};
      translation_data.map((row) => {
        translation_dict[row.language] = row.translation;
      });
      return frappe.call({
        method: "frappe.translate.update_translations_for_source",
        btn: this.dialog.get_primary_btn(),
        args: {
          source,
          translation_dict
        }
      }).fail(() => {
        frappe.msgprint({
          title: __("Something went wrong"),
          message: __("Please try again"),
          indicator: "red"
        });
      });
    }
  };

  // node_modules/@editorjs/editorjs/dist/editorjs.mjs
  var Lt = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
  function xe(s2) {
    return s2 && s2.__esModule && Object.prototype.hasOwnProperty.call(s2, "default") ? s2.default : s2;
  }
  function Be() {
  }
  Object.assign(Be, {
    default: Be,
    register: Be,
    revert: function() {
    },
    __esModule: true
  });
  Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(s2) {
    const e2 = (this.document || this.ownerDocument).querySelectorAll(s2);
    let t3 = e2.length;
    for (; --t3 >= 0 && e2.item(t3) !== this; )
      ;
    return t3 > -1;
  });
  Element.prototype.closest || (Element.prototype.closest = function(s2) {
    let e2 = this;
    if (!document.documentElement.contains(e2))
      return null;
    do {
      if (e2.matches(s2))
        return e2;
      e2 = e2.parentElement || e2.parentNode;
    } while (e2 !== null);
    return null;
  });
  Element.prototype.prepend || (Element.prototype.prepend = function(e2) {
    const t3 = document.createDocumentFragment();
    Array.isArray(e2) || (e2 = [e2]), e2.forEach((o2) => {
      const i3 = o2 instanceof Node;
      t3.appendChild(i3 ? o2 : document.createTextNode(o2));
    }), this.insertBefore(t3, this.firstChild);
  });
  Element.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(s2) {
    s2 = arguments.length === 0 ? true : !!s2;
    const e2 = this.parentNode, t3 = window.getComputedStyle(e2, null), o2 = parseInt(t3.getPropertyValue("border-top-width")), i3 = parseInt(t3.getPropertyValue("border-left-width")), n2 = this.offsetTop - e2.offsetTop < e2.scrollTop, r2 = this.offsetTop - e2.offsetTop + this.clientHeight - o2 > e2.scrollTop + e2.clientHeight, a2 = this.offsetLeft - e2.offsetLeft < e2.scrollLeft, l2 = this.offsetLeft - e2.offsetLeft + this.clientWidth - i3 > e2.scrollLeft + e2.clientWidth, c2 = n2 && !r2;
    (n2 || r2) && s2 && (e2.scrollTop = this.offsetTop - e2.offsetTop - e2.clientHeight / 2 - o2 + this.clientHeight / 2), (a2 || l2) && s2 && (e2.scrollLeft = this.offsetLeft - e2.offsetLeft - e2.clientWidth / 2 - i3 + this.clientWidth / 2), (n2 || r2 || a2 || l2) && !s2 && this.scrollIntoView(c2);
  });
  var Ot = (s2 = 21) => crypto.getRandomValues(new Uint8Array(s2)).reduce((e2, t3) => (t3 &= 63, t3 < 36 ? e2 += t3.toString(36) : t3 < 62 ? e2 += (t3 - 26).toString(36).toUpperCase() : t3 > 62 ? e2 += "-" : e2 += "_", e2), "");
  var et = /* @__PURE__ */ ((s2) => (s2.VERBOSE = "VERBOSE", s2.INFO = "INFO", s2.WARN = "WARN", s2.ERROR = "ERROR", s2))(et || {});
  var B = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    DOWN: 40,
    RIGHT: 39,
    DELETE: 46,
    META: 91
  };
  var _t = {
    LEFT: 0,
    WHEEL: 1,
    RIGHT: 2,
    BACKWARD: 3,
    FORWARD: 4
  };
  function ge(s2, e2, t3 = "log", o2, i3 = "color: inherit") {
    if (!("console" in window) || !window.console[t3])
      return;
    const n2 = ["info", "log", "warn", "error"].includes(t3), r2 = [];
    switch (ge.logLevel) {
      case "ERROR":
        if (t3 !== "error")
          return;
        break;
      case "WARN":
        if (!["error", "warn"].includes(t3))
          return;
        break;
      case "INFO":
        if (!n2 || s2)
          return;
        break;
    }
    o2 && r2.push(o2);
    const a2 = "Editor.js 2.27.2", l2 = `line-height: 1em;
            color: #006FEA;
            display: inline-block;
            font-size: 11px;
            line-height: 1em;
            background-color: #fff;
            padding: 4px 9px;
            border-radius: 30px;
            border: 1px solid rgba(56, 138, 229, 0.16);
            margin: 4px 5px 4px 0;`;
    s2 && (n2 ? (r2.unshift(l2, i3), e2 = `%c${a2}%c ${e2}`) : e2 = `( ${a2} )${e2}`);
    try {
      n2 ? o2 ? console[t3](`${e2} %o`, ...r2) : console[t3](e2, ...r2) : console[t3](e2);
    } catch (e3) {
    }
  }
  ge.logLevel = "VERBOSE";
  function At(s2) {
    ge.logLevel = s2;
  }
  var T = ge.bind(window, false);
  var K = ge.bind(window, true);
  function te(s2) {
    return Object.prototype.toString.call(s2).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  }
  function D(s2) {
    return te(s2) === "function" || te(s2) === "asyncfunction";
  }
  function j(s2) {
    return te(s2) === "object";
  }
  function J(s2) {
    return te(s2) === "string";
  }
  function Nt(s2) {
    return te(s2) === "boolean";
  }
  function Ve(s2) {
    return te(s2) === "number";
  }
  function Ze(s2) {
    return te(s2) === "undefined";
  }
  function V(s2) {
    return s2 ? Object.keys(s2).length === 0 && s2.constructor === Object : true;
  }
  function tt(s2) {
    return s2 > 47 && s2 < 58 || s2 === 32 || s2 === 13 || s2 === 229 || s2 > 64 && s2 < 91 || s2 > 95 && s2 < 112 || s2 > 185 && s2 < 193 || s2 > 218 && s2 < 223;
  }
  async function ot(s2, e2 = () => {
  }, t3 = () => {
  }) {
    async function o2(i3, n2, r2) {
      try {
        await i3.function(i3.data), await n2(Ze(i3.data) ? {} : i3.data);
      } catch (e3) {
        r2(Ze(i3.data) ? {} : i3.data);
      }
    }
    return s2.reduce(async (i3, n2) => (await i3, o2(n2, e2, t3)), Promise.resolve());
  }
  function it(s2) {
    return Array.prototype.slice.call(s2);
  }
  function oe(s2, e2) {
    return function() {
      const t3 = this, o2 = arguments;
      window.setTimeout(() => s2.apply(t3, o2), e2);
    };
  }
  function Rt(s2) {
    return s2.name.split(".").pop();
  }
  function Dt(s2) {
    return /^[-\w]+\/([-+\w]+|\*)$/.test(s2);
  }
  function Pt(s2, e2, t3) {
    let o2;
    return (...i3) => {
      const n2 = this, r2 = () => {
        o2 = null, t3 || s2.apply(n2, i3);
      }, a2 = t3 && !o2;
      window.clearTimeout(o2), o2 = window.setTimeout(r2, e2), a2 && s2.apply(n2, i3);
    };
  }
  function Te(s2, e2, t3 = void 0) {
    let o2, i3, n2, r2 = null, a2 = 0;
    t3 || (t3 = {});
    const l2 = function() {
      a2 = t3.leading === false ? 0 : Date.now(), r2 = null, n2 = s2.apply(o2, i3), r2 || (o2 = i3 = null);
    };
    return function() {
      const c2 = Date.now();
      !a2 && t3.leading === false && (a2 = c2);
      const u2 = e2 - (c2 - a2);
      return o2 = this, i3 = arguments, u2 <= 0 || u2 > e2 ? (r2 && (clearTimeout(r2), r2 = null), a2 = c2, n2 = s2.apply(o2, i3), r2 || (o2 = i3 = null)) : !r2 && t3.trailing !== false && (r2 = setTimeout(l2, u2)), n2;
    };
  }
  function Ft() {
    const s2 = {
      win: false,
      mac: false,
      x11: false,
      linux: false
    }, e2 = Object.keys(s2).find((t3) => window.navigator.appVersion.toLowerCase().indexOf(t3) !== -1);
    return e2 && (s2[e2] = true), s2;
  }
  function ke(s2) {
    return s2[0].toUpperCase() + s2.slice(1);
  }
  function Se(s2, ...e2) {
    if (!e2.length)
      return s2;
    const t3 = e2.shift();
    if (j(s2) && j(t3))
      for (const o2 in t3)
        j(t3[o2]) ? (s2[o2] || Object.assign(s2, { [o2]: {} }), Se(s2[o2], t3[o2])) : Object.assign(s2, { [o2]: t3[o2] });
    return Se(s2, ...e2);
  }
  function nt(s2) {
    const e2 = Ft();
    return s2 = s2.replace(/shift/gi, "\u21E7").replace(/backspace/gi, "\u232B").replace(/enter/gi, "\u23CE").replace(/up/gi, "\u2191").replace(/left/gi, "\u2192").replace(/down/gi, "\u2193").replace(/right/gi, "\u2190").replace(/escape/gi, "\u238B").replace(/insert/gi, "Ins").replace(/delete/gi, "\u2421").replace(/\+/gi, " + "), e2.mac ? s2 = s2.replace(/ctrl|cmd/gi, "\u2318").replace(/alt/gi, "\u2325") : s2 = s2.replace(/cmd/gi, "Ctrl").replace(/windows/gi, "WIN"), s2;
  }
  function Ht(s2) {
    try {
      return new URL(s2).href;
    } catch (e2) {
    }
    return s2.substring(0, 2) === "//" ? window.location.protocol + s2 : window.location.origin + s2;
  }
  function zt() {
    return Ot(10);
  }
  function jt(s2) {
    window.open(s2, "_blank");
  }
  function Ut(s2 = "") {
    return `${s2}${Math.floor(Math.random() * 1e8).toString(16)}`;
  }
  function Ie(s2, e2, t3) {
    const o2 = `\xAB${e2}\xBB is deprecated and will be removed in the next major release. Please use the \xAB${t3}\xBB instead.`;
    s2 && K(o2, "warn");
  }
  function ae(s2, e2, t3) {
    const o2 = t3.value ? "value" : "get", i3 = t3[o2], n2 = `#${e2}Cache`;
    if (t3[o2] = function(...r2) {
      return this[n2] === void 0 && (this[n2] = i3.apply(this, ...r2)), this[n2];
    }, o2 === "get" && t3.set) {
      const r2 = t3.set;
      t3.set = function(a2) {
        delete s2[n2], r2.apply(this, a2);
      };
    }
    return t3;
  }
  var st = 650;
  function ee() {
    return window.matchMedia(`(max-width: ${st}px)`).matches;
  }
  var Ge = typeof window < "u" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === "MacIntel" && window.navigator.maxTouchPoints > 1);
  function $t(s2, e2) {
    const t3 = Array.isArray(s2) || j(s2), o2 = Array.isArray(e2) || j(e2);
    return t3 || o2 ? JSON.stringify(s2) === JSON.stringify(e2) : s2 === e2;
  }
  var d = class {
    static isSingleTag(e2) {
      return e2.tagName && [
        "AREA",
        "BASE",
        "BR",
        "COL",
        "COMMAND",
        "EMBED",
        "HR",
        "IMG",
        "INPUT",
        "KEYGEN",
        "LINK",
        "META",
        "PARAM",
        "SOURCE",
        "TRACK",
        "WBR"
      ].includes(e2.tagName);
    }
    static isLineBreakTag(e2) {
      return e2 && e2.tagName && [
        "BR",
        "WBR"
      ].includes(e2.tagName);
    }
    static make(e2, t3 = null, o2 = {}) {
      const i3 = document.createElement(e2);
      Array.isArray(t3) ? i3.classList.add(...t3) : t3 && i3.classList.add(t3);
      for (const n2 in o2)
        Object.prototype.hasOwnProperty.call(o2, n2) && (i3[n2] = o2[n2]);
      return i3;
    }
    static text(e2) {
      return document.createTextNode(e2);
    }
    static append(e2, t3) {
      Array.isArray(t3) ? t3.forEach((o2) => e2.appendChild(o2)) : e2.appendChild(t3);
    }
    static prepend(e2, t3) {
      Array.isArray(t3) ? (t3 = t3.reverse(), t3.forEach((o2) => e2.prepend(o2))) : e2.prepend(t3);
    }
    static swap(e2, t3) {
      const o2 = document.createElement("div"), i3 = e2.parentNode;
      i3.insertBefore(o2, e2), i3.insertBefore(e2, t3), i3.insertBefore(t3, o2), i3.removeChild(o2);
    }
    static find(e2 = document, t3) {
      return e2.querySelector(t3);
    }
    static get(e2) {
      return document.getElementById(e2);
    }
    static findAll(e2 = document, t3) {
      return e2.querySelectorAll(t3);
    }
    static get allInputsSelector() {
      return "[contenteditable=true], textarea, input:not([type]), " + ["text", "password", "email", "number", "search", "tel", "url"].map((t3) => `input[type="${t3}"]`).join(", ");
    }
    static findAllInputs(e2) {
      return it(e2.querySelectorAll(d.allInputsSelector)).reduce((t3, o2) => d.isNativeInput(o2) || d.containsOnlyInlineElements(o2) ? [...t3, o2] : [...t3, ...d.getDeepestBlockElements(o2)], []);
    }
    static getDeepestNode(e2, t3 = false) {
      const o2 = t3 ? "lastChild" : "firstChild", i3 = t3 ? "previousSibling" : "nextSibling";
      if (e2 && e2.nodeType === Node.ELEMENT_NODE && e2[o2]) {
        let n2 = e2[o2];
        if (d.isSingleTag(n2) && !d.isNativeInput(n2) && !d.isLineBreakTag(n2))
          if (n2[i3])
            n2 = n2[i3];
          else if (n2.parentNode[i3])
            n2 = n2.parentNode[i3];
          else
            return n2.parentNode;
        return this.getDeepestNode(n2, t3);
      }
      return e2;
    }
    static isElement(e2) {
      return Ve(e2) ? false : e2 && e2.nodeType && e2.nodeType === Node.ELEMENT_NODE;
    }
    static isFragment(e2) {
      return Ve(e2) ? false : e2 && e2.nodeType && e2.nodeType === Node.DOCUMENT_FRAGMENT_NODE;
    }
    static isContentEditable(e2) {
      return e2.contentEditable === "true";
    }
    static isNativeInput(e2) {
      const t3 = [
        "INPUT",
        "TEXTAREA"
      ];
      return e2 && e2.tagName ? t3.includes(e2.tagName) : false;
    }
    static canSetCaret(e2) {
      let t3 = true;
      if (d.isNativeInput(e2))
        switch (e2.type) {
          case "file":
          case "checkbox":
          case "radio":
          case "hidden":
          case "submit":
          case "button":
          case "image":
          case "reset":
            t3 = false;
            break;
        }
      else
        t3 = d.isContentEditable(e2);
      return t3;
    }
    static isNodeEmpty(e2) {
      let t3;
      return this.isSingleTag(e2) && !this.isLineBreakTag(e2) ? false : (this.isElement(e2) && this.isNativeInput(e2) ? t3 = e2.value : t3 = e2.textContent.replace("\u200B", ""), t3.trim().length === 0);
    }
    static isLeaf(e2) {
      return e2 ? e2.childNodes.length === 0 : false;
    }
    static isEmpty(e2) {
      e2.normalize();
      const t3 = [e2];
      for (; t3.length > 0; )
        if (e2 = t3.shift(), !!e2) {
          if (this.isLeaf(e2) && !this.isNodeEmpty(e2))
            return false;
          e2.childNodes && t3.push(...Array.from(e2.childNodes));
        }
      return true;
    }
    static isHTMLString(e2) {
      const t3 = d.make("div");
      return t3.innerHTML = e2, t3.childElementCount > 0;
    }
    static getContentLength(e2) {
      return d.isNativeInput(e2) ? e2.value.length : e2.nodeType === Node.TEXT_NODE ? e2.length : e2.textContent.length;
    }
    static get blockElements() {
      return [
        "address",
        "article",
        "aside",
        "blockquote",
        "canvas",
        "div",
        "dl",
        "dt",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "hr",
        "li",
        "main",
        "nav",
        "noscript",
        "ol",
        "output",
        "p",
        "pre",
        "ruby",
        "section",
        "table",
        "tbody",
        "thead",
        "tr",
        "tfoot",
        "ul",
        "video"
      ];
    }
    static containsOnlyInlineElements(e2) {
      let t3;
      J(e2) ? (t3 = document.createElement("div"), t3.innerHTML = e2) : t3 = e2;
      const o2 = (i3) => !d.blockElements.includes(i3.tagName.toLowerCase()) && Array.from(i3.children).every(o2);
      return Array.from(t3.children).every(o2);
    }
    static getDeepestBlockElements(e2) {
      return d.containsOnlyInlineElements(e2) ? [e2] : Array.from(e2.children).reduce((t3, o2) => [...t3, ...d.getDeepestBlockElements(o2)], []);
    }
    static getHolder(e2) {
      return J(e2) ? document.getElementById(e2) : e2;
    }
    static isAnchor(e2) {
      return e2.tagName.toLowerCase() === "a";
    }
    static offset(e2) {
      const t3 = e2.getBoundingClientRect(), o2 = window.pageXOffset || document.documentElement.scrollLeft, i3 = window.pageYOffset || document.documentElement.scrollTop, n2 = t3.top + i3, r2 = t3.left + o2;
      return {
        top: n2,
        left: r2,
        bottom: n2 + t3.height,
        right: r2 + t3.width
      };
    }
  };
  var Wt = {
    blockTunes: {
      toggler: {
        "Click to tune": "",
        "or drag to move": ""
      }
    },
    inlineToolbar: {
      converter: {
        "Convert to": ""
      }
    },
    toolbar: {
      toolbox: {
        Add: ""
      }
    },
    popover: {
      Filter: "",
      "Nothing found": ""
    }
  };
  var Yt = {
    Text: "",
    Link: "",
    Bold: "",
    Italic: ""
  };
  var Kt = {
    link: {
      "Add a link": ""
    },
    stub: {
      "The block can not be displayed correctly.": ""
    }
  };
  var Xt = {
    delete: {
      Delete: "",
      "Click to delete": ""
    },
    moveUp: {
      "Move up": ""
    },
    moveDown: {
      "Move down": ""
    }
  };
  var rt = {
    ui: Wt,
    toolNames: Yt,
    tools: Kt,
    blockTunes: Xt
  };
  var ie = class {
    static ui(s2, e2) {
      return ie._t(s2, e2);
    }
    static t(s2, e2) {
      return ie._t(s2, e2);
    }
    static setDictionary(s2) {
      ie.currentDictionary = s2;
    }
    static _t(s2, e2) {
      const t3 = ie.getNamespace(s2);
      return !t3 || !t3[e2] ? e2 : t3[e2];
    }
    static getNamespace(s2) {
      return s2.split(".").reduce((t3, o2) => !t3 || !Object.keys(t3).length ? {} : t3[o2], ie.currentDictionary);
    }
  };
  var $2 = ie;
  $2.currentDictionary = rt;
  var at = class extends Error {
  };
  var we = class {
    constructor() {
      this.subscribers = {};
    }
    on(e2, t3) {
      e2 in this.subscribers || (this.subscribers[e2] = []), this.subscribers[e2].push(t3);
    }
    once(e2, t3) {
      e2 in this.subscribers || (this.subscribers[e2] = []);
      const o2 = (i3) => {
        const n2 = t3(i3), r2 = this.subscribers[e2].indexOf(o2);
        return r2 !== -1 && this.subscribers[e2].splice(r2, 1), n2;
      };
      this.subscribers[e2].push(o2);
    }
    emit(e2, t3) {
      V(this.subscribers) || !this.subscribers[e2] || this.subscribers[e2].reduce((o2, i3) => {
        const n2 = i3(o2);
        return n2 !== void 0 ? n2 : o2;
      }, t3);
    }
    off(e2, t3) {
      for (let o2 = 0; o2 < this.subscribers[e2].length; o2++)
        if (this.subscribers[e2][o2] === t3) {
          delete this.subscribers[e2][o2];
          break;
        }
    }
    destroy() {
      this.subscribers = null;
    }
  };
  function he(s2) {
    Object.setPrototypeOf(this, {
      get id() {
        return s2.id;
      },
      get name() {
        return s2.name;
      },
      get config() {
        return s2.config;
      },
      get holder() {
        return s2.holder;
      },
      get isEmpty() {
        return s2.isEmpty;
      },
      get selected() {
        return s2.selected;
      },
      set stretched(t3) {
        s2.stretched = t3;
      },
      get stretched() {
        return s2.stretched;
      },
      call(t3, o2) {
        return s2.call(t3, o2);
      },
      save() {
        return s2.save();
      },
      validate(t3) {
        return s2.validate(t3);
      },
      dispatchChange() {
        s2.dispatchChange();
      }
    });
  }
  var Re = class {
    constructor() {
      this.allListeners = [];
    }
    on(e2, t3, o2, i3 = false) {
      const n2 = Ut("l"), r2 = {
        id: n2,
        element: e2,
        eventType: t3,
        handler: o2,
        options: i3
      };
      if (!this.findOne(e2, t3, o2))
        return this.allListeners.push(r2), e2.addEventListener(t3, o2, i3), n2;
    }
    off(e2, t3, o2, i3) {
      const n2 = this.findAll(e2, t3, o2);
      n2.forEach((r2, a2) => {
        const l2 = this.allListeners.indexOf(n2[a2]);
        l2 > -1 && (this.allListeners.splice(l2, 1), r2.element.removeEventListener(r2.eventType, r2.handler, r2.options));
      });
    }
    offById(e2) {
      const t3 = this.findById(e2);
      t3 && t3.element.removeEventListener(t3.eventType, t3.handler, t3.options);
    }
    findOne(e2, t3, o2) {
      const i3 = this.findAll(e2, t3, o2);
      return i3.length > 0 ? i3[0] : null;
    }
    findAll(e2, t3, o2) {
      let i3;
      const n2 = e2 ? this.findByEventTarget(e2) : [];
      return e2 && t3 && o2 ? i3 = n2.filter((r2) => r2.eventType === t3 && r2.handler === o2) : e2 && t3 ? i3 = n2.filter((r2) => r2.eventType === t3) : i3 = n2, i3;
    }
    removeAll() {
      this.allListeners.map((e2) => {
        e2.element.removeEventListener(e2.eventType, e2.handler, e2.options);
      }), this.allListeners = [];
    }
    destroy() {
      this.removeAll();
    }
    findByEventTarget(e2) {
      return this.allListeners.filter((t3) => {
        if (t3.element === e2)
          return t3;
      });
    }
    findByType(e2) {
      return this.allListeners.filter((t3) => {
        if (t3.eventType === e2)
          return t3;
      });
    }
    findByHandler(e2) {
      return this.allListeners.filter((t3) => {
        if (t3.handler === e2)
          return t3;
      });
    }
    findById(e2) {
      return this.allListeners.find((t3) => t3.id === e2);
    }
  };
  var S = class {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      if (this.nodes = {}, this.listeners = new Re(), this.readOnlyMutableListeners = {
        on: (o2, i3, n2, r2 = false) => {
          this.mutableListenerIds.push(
            this.listeners.on(o2, i3, n2, r2)
          );
        },
        clearAll: () => {
          for (const o2 of this.mutableListenerIds)
            this.listeners.offById(o2);
          this.mutableListenerIds = [];
        }
      }, this.mutableListenerIds = [], new.target === S)
        throw new TypeError("Constructors for abstract class Module are not allowed.");
      this.config = e2, this.eventsDispatcher = t3;
    }
    set state(e2) {
      this.Editor = e2;
    }
    removeAllNodes() {
      for (const e2 in this.nodes) {
        const t3 = this.nodes[e2];
        t3 instanceof HTMLElement && t3.remove();
      }
    }
    get isRtl() {
      return this.config.i18n.direction === "rtl";
    }
  };
  var m = class {
    constructor() {
      this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = false, this.commandBackground = "backColor", this.commandRemoveFormat = "removeFormat";
    }
    static get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorZone: "codex-editor__redactor"
      };
    }
    static get anchorNode() {
      const e2 = window.getSelection();
      return e2 ? e2.anchorNode : null;
    }
    static get anchorElement() {
      const e2 = window.getSelection();
      if (!e2)
        return null;
      const t3 = e2.anchorNode;
      return t3 ? d.isElement(t3) ? t3 : t3.parentElement : null;
    }
    static get anchorOffset() {
      const e2 = window.getSelection();
      return e2 ? e2.anchorOffset : null;
    }
    static get isCollapsed() {
      const e2 = window.getSelection();
      return e2 ? e2.isCollapsed : null;
    }
    static get isAtEditor() {
      return this.isSelectionAtEditor(m.get());
    }
    static isSelectionAtEditor(e2) {
      if (!e2)
        return false;
      let t3 = e2.anchorNode || e2.focusNode;
      t3 && t3.nodeType === Node.TEXT_NODE && (t3 = t3.parentNode);
      let o2 = null;
      return t3 && t3 instanceof Element && (o2 = t3.closest(`.${m.CSS.editorZone}`)), o2 ? o2.nodeType === Node.ELEMENT_NODE : false;
    }
    static isRangeAtEditor(e2) {
      if (!e2)
        return;
      let t3 = e2.startContainer;
      t3 && t3.nodeType === Node.TEXT_NODE && (t3 = t3.parentNode);
      let o2 = null;
      return t3 && t3 instanceof Element && (o2 = t3.closest(`.${m.CSS.editorZone}`)), o2 ? o2.nodeType === Node.ELEMENT_NODE : false;
    }
    static get isSelectionExists() {
      return !!m.get().anchorNode;
    }
    static get range() {
      return this.getRangeFromSelection(this.get());
    }
    static getRangeFromSelection(e2) {
      return e2 && e2.rangeCount ? e2.getRangeAt(0) : null;
    }
    static get rect() {
      let e2 = document.selection, t3, o2 = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      if (e2 && e2.type !== "Control")
        return e2 = e2, t3 = e2.createRange(), o2.x = t3.boundingLeft, o2.y = t3.boundingTop, o2.width = t3.boundingWidth, o2.height = t3.boundingHeight, o2;
      if (!window.getSelection)
        return T("Method window.getSelection is not supported", "warn"), o2;
      if (e2 = window.getSelection(), e2.rangeCount === null || isNaN(e2.rangeCount))
        return T("Method SelectionUtils.rangeCount is not supported", "warn"), o2;
      if (e2.rangeCount === 0)
        return o2;
      if (t3 = e2.getRangeAt(0).cloneRange(), t3.getBoundingClientRect && (o2 = t3.getBoundingClientRect()), o2.x === 0 && o2.y === 0) {
        const i3 = document.createElement("span");
        if (i3.getBoundingClientRect) {
          i3.appendChild(document.createTextNode("\u200B")), t3.insertNode(i3), o2 = i3.getBoundingClientRect();
          const n2 = i3.parentNode;
          n2.removeChild(i3), n2.normalize();
        }
      }
      return o2;
    }
    static get text() {
      return window.getSelection ? window.getSelection().toString() : "";
    }
    static get() {
      return window.getSelection();
    }
    static setCursor(e2, t3 = 0) {
      const o2 = document.createRange(), i3 = window.getSelection();
      return d.isNativeInput(e2) ? d.canSetCaret(e2) ? (e2.focus(), e2.selectionStart = e2.selectionEnd = t3, e2.getBoundingClientRect()) : void 0 : (o2.setStart(e2, t3), o2.setEnd(e2, t3), i3.removeAllRanges(), i3.addRange(o2), o2.getBoundingClientRect());
    }
    static isRangeInsideContainer(e2) {
      const t3 = m.range;
      return t3 === null ? false : e2.contains(t3.startContainer);
    }
    static addFakeCursor() {
      const e2 = m.range;
      if (e2 === null)
        return;
      const t3 = d.make("span", "codex-editor__fake-cursor");
      t3.dataset.mutationFree = "true", e2.collapse(), e2.insertNode(t3);
    }
    static isFakeCursorInsideContainer(e2) {
      return d.find(e2, ".codex-editor__fake-cursor") !== null;
    }
    static removeFakeCursor(e2 = document.body) {
      const t3 = d.find(e2, ".codex-editor__fake-cursor");
      t3 && t3.remove();
    }
    removeFakeBackground() {
      this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = false, document.execCommand(this.commandRemoveFormat));
    }
    setFakeBackground() {
      document.execCommand(this.commandBackground, false, "#a8d6ff"), this.isFakeBackgroundEnabled = true;
    }
    save() {
      this.savedSelectionRange = m.range;
    }
    restore() {
      if (!this.savedSelectionRange)
        return;
      const e2 = window.getSelection();
      e2.removeAllRanges(), e2.addRange(this.savedSelectionRange);
    }
    clearSaved() {
      this.savedSelectionRange = null;
    }
    collapseToEnd() {
      const e2 = window.getSelection(), t3 = document.createRange();
      t3.selectNodeContents(e2.focusNode), t3.collapse(false), e2.removeAllRanges(), e2.addRange(t3);
    }
    findParentTag(e2, t3, o2 = 10) {
      const i3 = window.getSelection();
      let n2 = null;
      return !i3 || !i3.anchorNode || !i3.focusNode ? null : ([
        i3.anchorNode,
        i3.focusNode
      ].forEach((a2) => {
        let l2 = o2;
        for (; l2 > 0 && a2.parentNode && !(a2.tagName === e2 && (n2 = a2, t3 && a2.classList && !a2.classList.contains(t3) && (n2 = null), n2)); )
          a2 = a2.parentNode, l2--;
      }), n2);
    }
    expandToTag(e2) {
      const t3 = window.getSelection();
      t3.removeAllRanges();
      const o2 = document.createRange();
      o2.selectNodeContents(e2), t3.addRange(o2);
    }
  };
  function Vt(s2, e2) {
    const { type: t3, target: o2, addedNodes: i3, removedNodes: n2 } = s2;
    if (o2 === e2)
      return true;
    if (["characterData", "attributes"].includes(t3)) {
      const l2 = o2.nodeType === Node.TEXT_NODE ? o2.parentNode : o2;
      return e2.contains(l2);
    }
    const r2 = Array.from(i3).some((l2) => e2.contains(l2)), a2 = Array.from(n2).some((l2) => e2.contains(l2));
    return r2 || a2;
  }
  var Me = "redactor dom changed";
  var lt = "block changed";
  var ct = "fake cursor is about to be toggled";
  var dt = "fake cursor have been set";
  var q = /* @__PURE__ */ ((s2) => (s2.APPEND_CALLBACK = "appendCallback", s2.RENDERED = "rendered", s2.MOVED = "moved", s2.UPDATED = "updated", s2.REMOVED = "removed", s2.ON_PASTE = "onPaste", s2))(q || {});
  var F = class extends we {
    constructor({
      id: e2 = zt(),
      data: t3,
      tool: o2,
      api: i3,
      readOnly: n2,
      tunesData: r2
    }, a2) {
      super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {
        this.dropInputsCache(), this.updateCurrentInput();
      }, this.didMutated = (l2 = void 0) => {
        const c2 = l2 === void 0, u2 = l2 instanceof InputEvent;
        !c2 && !u2 && this.detectToolRootChange(l2);
        let h2;
        c2 || u2 ? h2 = true : h2 = !(l2.length > 0 && l2.every((v2) => {
          const { addedNodes: p2, removedNodes: k2, target: _2 } = v2;
          return [
            ...Array.from(p2),
            ...Array.from(k2),
            _2
          ].some((A2) => d.isElement(A2) ? A2.dataset.mutationFree === "true" : false);
        })), h2 && (this.dropInputsCache(), this.updateCurrentInput(), this.call(
          "updated"
        ), this.emit("didMutated", this));
      }, this.name = o2.name, this.id = e2, this.settings = o2.settings, this.config = o2.settings.config || {}, this.api = i3, this.editorEventBus = a2 || null, this.blockAPI = new he(this), this.tool = o2, this.toolInstance = o2.create(t3, this.blockAPI, n2), this.tunes = o2.tunes, this.composeTunes(r2), this.holder = this.compose(), this.watchBlockMutations(), this.addInputEvents();
    }
    static get CSS() {
      return {
        wrapper: "ce-block",
        wrapperStretched: "ce-block--stretched",
        content: "ce-block__content",
        focused: "ce-block--focused",
        selected: "ce-block--selected",
        dropTarget: "ce-block--drop-target"
      };
    }
    get inputs() {
      if (this.cachedInputs.length !== 0)
        return this.cachedInputs;
      const e2 = d.findAllInputs(this.holder);
      return this.inputIndex > e2.length - 1 && (this.inputIndex = e2.length - 1), this.cachedInputs = e2, e2;
    }
    get currentInput() {
      return this.inputs[this.inputIndex];
    }
    set currentInput(e2) {
      const t3 = this.inputs.findIndex((o2) => o2 === e2 || o2.contains(e2));
      t3 !== -1 && (this.inputIndex = t3);
    }
    get firstInput() {
      return this.inputs[0];
    }
    get lastInput() {
      const e2 = this.inputs;
      return e2[e2.length - 1];
    }
    get nextInput() {
      return this.inputs[this.inputIndex + 1];
    }
    get previousInput() {
      return this.inputs[this.inputIndex - 1];
    }
    get data() {
      return this.save().then((e2) => e2 && !V(e2.data) ? e2.data : {});
    }
    get sanitize() {
      return this.tool.sanitizeConfig;
    }
    get mergeable() {
      return D(this.toolInstance.merge);
    }
    get isEmpty() {
      const e2 = d.isEmpty(this.pluginsContent), t3 = !this.hasMedia;
      return e2 && t3;
    }
    get hasMedia() {
      const e2 = [
        "img",
        "iframe",
        "video",
        "audio",
        "source",
        "input",
        "textarea",
        "twitterwidget"
      ];
      return !!this.holder.querySelector(e2.join(","));
    }
    set focused(e2) {
      this.holder.classList.toggle(F.CSS.focused, e2);
    }
    get focused() {
      return this.holder.classList.contains(F.CSS.focused);
    }
    set selected(e2) {
      var i3, n2;
      this.holder.classList.toggle(F.CSS.selected, e2);
      const t3 = e2 === true && m.isRangeInsideContainer(this.holder), o2 = e2 === false && m.isFakeCursorInsideContainer(this.holder);
      (t3 || o2) && ((i3 = this.editorEventBus) == null || i3.emit(ct, { state: e2 }), t3 ? m.addFakeCursor() : m.removeFakeCursor(this.holder), (n2 = this.editorEventBus) == null || n2.emit(dt, { state: e2 }));
    }
    get selected() {
      return this.holder.classList.contains(F.CSS.selected);
    }
    set stretched(e2) {
      this.holder.classList.toggle(F.CSS.wrapperStretched, e2);
    }
    get stretched() {
      return this.holder.classList.contains(F.CSS.wrapperStretched);
    }
    set dropTarget(e2) {
      this.holder.classList.toggle(F.CSS.dropTarget, e2);
    }
    get pluginsContent() {
      return this.toolRenderedElement;
    }
    call(e2, t3) {
      if (D(this.toolInstance[e2])) {
        e2 === "appendCallback" && T(
          "`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead",
          "warn"
        );
        try {
          this.toolInstance[e2].call(this.toolInstance, t3);
        } catch (o2) {
          T(`Error during '${e2}' call: ${o2.message}`, "error");
        }
      }
    }
    async mergeWith(e2) {
      await this.toolInstance.merge(e2);
    }
    async save() {
      const e2 = await this.toolInstance.save(this.pluginsContent), t3 = this.unavailableTunesData;
      [
        ...this.tunesInstances.entries(),
        ...this.defaultTunesInstances.entries()
      ].forEach(([n2, r2]) => {
        if (D(r2.save))
          try {
            t3[n2] = r2.save();
          } catch (a2) {
            T(`Tune ${r2.constructor.name} save method throws an Error %o`, "warn", a2);
          }
      });
      const o2 = window.performance.now();
      let i3;
      return Promise.resolve(e2).then((n2) => (i3 = window.performance.now(), {
        id: this.id,
        tool: this.name,
        data: n2,
        tunes: t3,
        time: i3 - o2
      })).catch((n2) => {
        T(`Saving process for ${this.name} tool failed due to the ${n2}`, "log", "red");
      });
    }
    async validate(e2) {
      let t3 = true;
      return this.toolInstance.validate instanceof Function && (t3 = await this.toolInstance.validate(e2)), t3;
    }
    getTunes() {
      const e2 = document.createElement("div"), t3 = [], o2 = typeof this.toolInstance.renderSettings == "function" ? this.toolInstance.renderSettings() : [], i3 = [
        ...this.tunesInstances.values(),
        ...this.defaultTunesInstances.values()
      ].map((n2) => n2.render());
      return [o2, i3].flat().forEach((n2) => {
        d.isElement(n2) ? e2.appendChild(n2) : Array.isArray(n2) ? t3.push(...n2) : t3.push(n2);
      }), [t3, e2];
    }
    updateCurrentInput() {
      this.currentInput = d.isNativeInput(document.activeElement) || !m.anchorNode ? document.activeElement : m.anchorNode;
    }
    dispatchChange() {
      this.didMutated();
    }
    destroy() {
      this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), D(this.toolInstance.destroy) && this.toolInstance.destroy();
    }
    async getActiveToolboxEntry() {
      const e2 = this.tool.toolbox;
      if (e2.length === 1)
        return Promise.resolve(this.tool.toolbox[0]);
      const t3 = await this.data;
      return e2.find((i3) => Object.entries(i3.data).some(([n2, r2]) => t3[n2] && $t(t3[n2], r2)));
    }
    compose() {
      const e2 = d.make("div", F.CSS.wrapper), t3 = d.make("div", F.CSS.content), o2 = this.toolInstance.render();
      this.toolRenderedElement = o2, t3.appendChild(this.toolRenderedElement);
      let i3 = t3;
      return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((n2) => {
        if (D(n2.wrap))
          try {
            i3 = n2.wrap(i3);
          } catch (r2) {
            T(`Tune ${n2.constructor.name} wrap method throws an Error %o`, "warn", r2);
          }
      }), e2.appendChild(i3), e2;
    }
    composeTunes(e2) {
      Array.from(this.tunes.values()).forEach((t3) => {
        (t3.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t3.name, t3.create(e2[t3.name], this.blockAPI));
      }), Object.entries(e2).forEach(([t3, o2]) => {
        this.tunesInstances.has(t3) || (this.unavailableTunesData[t3] = o2);
      });
    }
    addInputEvents() {
      this.inputs.forEach((e2) => {
        e2.addEventListener("focus", this.handleFocus), d.isNativeInput(e2) && e2.addEventListener("input", this.didMutated);
      });
    }
    removeInputEvents() {
      this.inputs.forEach((e2) => {
        e2.removeEventListener("focus", this.handleFocus), d.isNativeInput(e2) && e2.removeEventListener("input", this.didMutated);
      });
    }
    watchBlockMutations() {
      var e2;
      this.redactorDomChangedCallback = (t3) => {
        const { mutations: o2 } = t3;
        o2.some((n2) => Vt(n2, this.toolRenderedElement)) && this.didMutated(o2);
      }, (e2 = this.editorEventBus) == null || e2.on(Me, this.redactorDomChangedCallback);
    }
    unwatchBlockMutations() {
      var e2;
      (e2 = this.editorEventBus) == null || e2.off(Me, this.redactorDomChangedCallback);
    }
    detectToolRootChange(e2) {
      e2.forEach((t3) => {
        if (Array.from(t3.removedNodes).includes(this.toolRenderedElement)) {
          const i3 = t3.addedNodes[t3.addedNodes.length - 1];
          this.toolRenderedElement = i3;
        }
      });
    }
    dropInputsCache() {
      this.cachedInputs = [];
    }
  };
  var Zt = class extends S {
    constructor() {
      super(...arguments), this.insert = (e2 = this.config.defaultBlock, t3 = {}, o2 = {}, i3, n2, r2, a2) => {
        const l2 = this.Editor.BlockManager.insert({
          id: a2,
          tool: e2,
          data: t3,
          index: i3,
          needToFocus: n2,
          replace: r2
        });
        return new he(l2);
      }, this.composeBlockData = async (e2) => {
        const t3 = this.Editor.Tools.blockTools.get(e2);
        return new F({
          tool: t3,
          api: this.Editor.API,
          readOnly: true,
          data: {},
          tunesData: {}
        }).data;
      }, this.update = (e2, t3) => {
        const { BlockManager: o2 } = this.Editor, i3 = o2.getBlockById(e2);
        if (!i3) {
          T("blocks.update(): Block with passed id was not found", "warn");
          return;
        }
        const n2 = o2.getBlockIndex(i3);
        o2.insert({
          id: i3.id,
          tool: i3.name,
          data: t3,
          index: n2,
          replace: true,
          tunes: i3.tunes
        });
      };
    }
    get methods() {
      return {
        clear: () => this.clear(),
        render: (e2) => this.render(e2),
        renderFromHTML: (e2) => this.renderFromHTML(e2),
        delete: (e2) => this.delete(e2),
        swap: (e2, t3) => this.swap(e2, t3),
        move: (e2, t3) => this.move(e2, t3),
        getBlockByIndex: (e2) => this.getBlockByIndex(e2),
        getById: (e2) => this.getById(e2),
        getCurrentBlockIndex: () => this.getCurrentBlockIndex(),
        getBlockIndex: (e2) => this.getBlockIndex(e2),
        getBlocksCount: () => this.getBlocksCount(),
        stretchBlock: (e2, t3 = true) => this.stretchBlock(e2, t3),
        insertNewBlock: () => this.insertNewBlock(),
        insert: this.insert,
        update: this.update,
        composeBlockData: this.composeBlockData
      };
    }
    getBlocksCount() {
      return this.Editor.BlockManager.blocks.length;
    }
    getCurrentBlockIndex() {
      return this.Editor.BlockManager.currentBlockIndex;
    }
    getBlockIndex(e2) {
      const t3 = this.Editor.BlockManager.getBlockById(e2);
      if (!t3) {
        K("There is no block with id `" + e2 + "`", "warn");
        return;
      }
      return this.Editor.BlockManager.getBlockIndex(t3);
    }
    getBlockByIndex(e2) {
      const t3 = this.Editor.BlockManager.getBlockByIndex(e2);
      if (t3 === void 0) {
        K("There is no block at index `" + e2 + "`", "warn");
        return;
      }
      return new he(t3);
    }
    getById(e2) {
      const t3 = this.Editor.BlockManager.getBlockById(e2);
      return t3 === void 0 ? (K("There is no block with id `" + e2 + "`", "warn"), null) : new he(t3);
    }
    swap(e2, t3) {
      T(
        "`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead",
        "info"
      ), this.Editor.BlockManager.swap(e2, t3);
    }
    move(e2, t3) {
      this.Editor.BlockManager.move(e2, t3);
    }
    delete(e2) {
      try {
        this.Editor.BlockManager.removeBlock(e2);
      } catch (t3) {
        K(t3, "warn");
        return;
      }
      this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();
    }
    clear() {
      this.Editor.BlockManager.clear(true), this.Editor.InlineToolbar.close();
    }
    render(e2) {
      return this.Editor.BlockManager.clear(), this.Editor.Renderer.render(e2.blocks);
    }
    renderFromHTML(e2) {
      return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e2, true);
    }
    stretchBlock(e2, t3 = true) {
      Ie(
        true,
        "blocks.stretchBlock()",
        "BlockAPI"
      );
      const o2 = this.Editor.BlockManager.getBlockByIndex(e2);
      o2 && (o2.stretched = t3);
    }
    insertNewBlock() {
      T("Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.", "warn"), this.insert();
    }
  };
  var Gt = class extends S {
    constructor() {
      super(...arguments), this.setToFirstBlock = (e2 = this.Editor.Caret.positions.DEFAULT, t3 = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e2, t3), true) : false, this.setToLastBlock = (e2 = this.Editor.Caret.positions.DEFAULT, t3 = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e2, t3), true) : false, this.setToPreviousBlock = (e2 = this.Editor.Caret.positions.DEFAULT, t3 = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e2, t3), true) : false, this.setToNextBlock = (e2 = this.Editor.Caret.positions.DEFAULT, t3 = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e2, t3), true) : false, this.setToBlock = (e2, t3 = this.Editor.Caret.positions.DEFAULT, o2 = 0) => this.Editor.BlockManager.blocks[e2] ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.blocks[e2], t3, o2), true) : false, this.focus = (e2 = false) => e2 ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);
    }
    get methods() {
      return {
        setToFirstBlock: this.setToFirstBlock,
        setToLastBlock: this.setToLastBlock,
        setToPreviousBlock: this.setToPreviousBlock,
        setToNextBlock: this.setToNextBlock,
        setToBlock: this.setToBlock,
        focus: this.focus
      };
    }
  };
  var qt = class extends S {
    get methods() {
      return {
        emit: (e2, t3) => this.emit(e2, t3),
        off: (e2, t3) => this.off(e2, t3),
        on: (e2, t3) => this.on(e2, t3)
      };
    }
    on(e2, t3) {
      this.eventsDispatcher.on(e2, t3);
    }
    emit(e2, t3) {
      this.eventsDispatcher.emit(e2, t3);
    }
    off(e2, t3) {
      this.eventsDispatcher.off(e2, t3);
    }
  };
  var De = class extends S {
    static getNamespace(e2) {
      return e2.isTune() ? `blockTunes.${e2.name}` : `tools.${e2.name}`;
    }
    get methods() {
      return {
        t: () => {
          K("I18n.t() method can be accessed only from Tools", "warn");
        }
      };
    }
    getMethodsForTool(e2) {
      return Object.assign(
        this.methods,
        {
          t: (t3) => $2.t(De.getNamespace(e2), t3)
        }
      );
    }
  };
  var Jt = class extends S {
    get methods() {
      return {
        blocks: this.Editor.BlocksAPI.methods,
        caret: this.Editor.CaretAPI.methods,
        events: this.Editor.EventsAPI.methods,
        listeners: this.Editor.ListenersAPI.methods,
        notifier: this.Editor.NotifierAPI.methods,
        sanitizer: this.Editor.SanitizerAPI.methods,
        saver: this.Editor.SaverAPI.methods,
        selection: this.Editor.SelectionAPI.methods,
        styles: this.Editor.StylesAPI.classes,
        toolbar: this.Editor.ToolbarAPI.methods,
        inlineToolbar: this.Editor.InlineToolbarAPI.methods,
        tooltip: this.Editor.TooltipAPI.methods,
        i18n: this.Editor.I18nAPI.methods,
        readOnly: this.Editor.ReadOnlyAPI.methods,
        ui: this.Editor.UiAPI.methods
      };
    }
    getMethodsForTool(e2) {
      return Object.assign(
        this.methods,
        {
          i18n: this.Editor.I18nAPI.getMethodsForTool(e2)
        }
      );
    }
  };
  var Qt = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open()
      };
    }
    open() {
      this.Editor.InlineToolbar.tryToShow();
    }
    close() {
      this.Editor.InlineToolbar.close();
    }
  };
  var eo = class extends S {
    get methods() {
      return {
        on: (e2, t3, o2, i3) => this.on(e2, t3, o2, i3),
        off: (e2, t3, o2, i3) => this.off(e2, t3, o2, i3),
        offById: (e2) => this.offById(e2)
      };
    }
    on(e2, t3, o2, i3) {
      return this.listeners.on(e2, t3, o2, i3);
    }
    off(e2, t3, o2, i3) {
      this.listeners.off(e2, t3, o2, i3);
    }
    offById(e2) {
      this.listeners.offById(e2);
    }
  };
  var Le = {};
  var to = {
    get exports() {
      return Le;
    },
    set exports(s2) {
      Le = s2;
    }
  };
  (function(s2, e2) {
    (function(t3, o2) {
      s2.exports = o2();
    })(window, function() {
      return function(t3) {
        var o2 = {};
        function i3(n2) {
          if (o2[n2])
            return o2[n2].exports;
          var r2 = o2[n2] = { i: n2, l: false, exports: {} };
          return t3[n2].call(r2.exports, r2, r2.exports, i3), r2.l = true, r2.exports;
        }
        return i3.m = t3, i3.c = o2, i3.d = function(n2, r2, a2) {
          i3.o(n2, r2) || Object.defineProperty(n2, r2, { enumerable: true, get: a2 });
        }, i3.r = function(n2) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
        }, i3.t = function(n2, r2) {
          if (1 & r2 && (n2 = i3(n2)), 8 & r2 || 4 & r2 && typeof n2 == "object" && n2 && n2.__esModule)
            return n2;
          var a2 = /* @__PURE__ */ Object.create(null);
          if (i3.r(a2), Object.defineProperty(a2, "default", { enumerable: true, value: n2 }), 2 & r2 && typeof n2 != "string")
            for (var l2 in n2)
              i3.d(a2, l2, function(c2) {
                return n2[c2];
              }.bind(null, l2));
          return a2;
        }, i3.n = function(n2) {
          var r2 = n2 && n2.__esModule ? function() {
            return n2.default;
          } : function() {
            return n2;
          };
          return i3.d(r2, "a", r2), r2;
        }, i3.o = function(n2, r2) {
          return Object.prototype.hasOwnProperty.call(n2, r2);
        }, i3.p = "/", i3(i3.s = 0);
      }([function(t3, o2, i3) {
        i3(1), t3.exports = function() {
          var n2 = i3(6), r2 = "cdx-notify--bounce-in", a2 = null;
          return { show: function(l2) {
            if (l2.message) {
              (function() {
                if (a2)
                  return true;
                a2 = n2.getWrapper(), document.body.appendChild(a2);
              })();
              var c2 = null, u2 = l2.time || 8e3;
              switch (l2.type) {
                case "confirm":
                  c2 = n2.confirm(l2);
                  break;
                case "prompt":
                  c2 = n2.prompt(l2);
                  break;
                default:
                  c2 = n2.alert(l2), window.setTimeout(function() {
                    c2.remove();
                  }, u2);
              }
              a2.appendChild(c2), c2.classList.add(r2);
            }
          } };
        }();
      }, function(t3, o2, i3) {
        var n2 = i3(2);
        typeof n2 == "string" && (n2 = [[t3.i, n2, ""]]);
        var r2 = { hmr: true, transform: void 0, insertInto: void 0 };
        i3(4)(n2, r2), n2.locals && (t3.exports = n2.locals);
      }, function(t3, o2, i3) {
        (t3.exports = i3(3)(false)).push([t3.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, ""]);
      }, function(t3, o2) {
        t3.exports = function(i3) {
          var n2 = [];
          return n2.toString = function() {
            return this.map(function(r2) {
              var a2 = function(l2, c2) {
                var u2 = l2[1] || "", h2 = l2[3];
                if (!h2)
                  return u2;
                if (c2 && typeof btoa == "function") {
                  var f3 = (p2 = h2, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(p2)))) + " */"), v2 = h2.sources.map(function(k2) {
                    return "/*# sourceURL=" + h2.sourceRoot + k2 + " */";
                  });
                  return [u2].concat(v2).concat([f3]).join(`
`);
                }
                var p2;
                return [u2].join(`
`);
              }(r2, i3);
              return r2[2] ? "@media " + r2[2] + "{" + a2 + "}" : a2;
            }).join("");
          }, n2.i = function(r2, a2) {
            typeof r2 == "string" && (r2 = [[null, r2, ""]]);
            for (var l2 = {}, c2 = 0; c2 < this.length; c2++) {
              var u2 = this[c2][0];
              typeof u2 == "number" && (l2[u2] = true);
            }
            for (c2 = 0; c2 < r2.length; c2++) {
              var h2 = r2[c2];
              typeof h2[0] == "number" && l2[h2[0]] || (a2 && !h2[2] ? h2[2] = a2 : a2 && (h2[2] = "(" + h2[2] + ") and (" + a2 + ")"), n2.push(h2));
            }
          }, n2;
        };
      }, function(t3, o2, i3) {
        var n2, r2, a2 = {}, l2 = (n2 = function() {
          return window && document && document.all && !window.atob;
        }, function() {
          return r2 === void 0 && (r2 = n2.apply(this, arguments)), r2;
        }), c2 = function(b2) {
          var g2 = {};
          return function(E2) {
            if (typeof E2 == "function")
              return E2();
            if (g2[E2] === void 0) {
              var C2 = function(O2) {
                return document.querySelector(O2);
              }.call(this, E2);
              if (window.HTMLIFrameElement && C2 instanceof window.HTMLIFrameElement)
                try {
                  C2 = C2.contentDocument.head;
                } catch (e3) {
                  C2 = null;
                }
              g2[E2] = C2;
            }
            return g2[E2];
          };
        }(), u2 = null, h2 = 0, f3 = [], v2 = i3(5);
        function p2(b2, g2) {
          for (var E2 = 0; E2 < b2.length; E2++) {
            var C2 = b2[E2], O2 = a2[C2.id];
            if (O2) {
              O2.refs++;
              for (var I2 = 0; I2 < O2.parts.length; I2++)
                O2.parts[I2](C2.parts[I2]);
              for (; I2 < C2.parts.length; I2++)
                O2.parts.push(x2(C2.parts[I2], g2));
            } else {
              var H2 = [];
              for (I2 = 0; I2 < C2.parts.length; I2++)
                H2.push(x2(C2.parts[I2], g2));
              a2[C2.id] = { id: C2.id, refs: 1, parts: H2 };
            }
          }
        }
        function k2(b2, g2) {
          for (var E2 = [], C2 = {}, O2 = 0; O2 < b2.length; O2++) {
            var I2 = b2[O2], H2 = g2.base ? I2[0] + g2.base : I2[0], L2 = { css: I2[1], media: I2[2], sourceMap: I2[3] };
            C2[H2] ? C2[H2].parts.push(L2) : E2.push(C2[H2] = { id: H2, parts: [L2] });
          }
          return E2;
        }
        function _2(b2, g2) {
          var E2 = c2(b2.insertInto);
          if (!E2)
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
          var C2 = f3[f3.length - 1];
          if (b2.insertAt === "top")
            C2 ? C2.nextSibling ? E2.insertBefore(g2, C2.nextSibling) : E2.appendChild(g2) : E2.insertBefore(g2, E2.firstChild), f3.push(g2);
          else if (b2.insertAt === "bottom")
            E2.appendChild(g2);
          else {
            if (typeof b2.insertAt != "object" || !b2.insertAt.before)
              throw new Error(`[Style Loader]

 Invalid value for parameter 'insertAt' ('options.insertAt') found.
 Must be 'top', 'bottom', or Object.
 (https://github.com/webpack-contrib/style-loader#insertat)
`);
            var O2 = c2(b2.insertInto + " " + b2.insertAt.before);
            E2.insertBefore(g2, O2);
          }
        }
        function N2(b2) {
          if (b2.parentNode === null)
            return false;
          b2.parentNode.removeChild(b2);
          var g2 = f3.indexOf(b2);
          g2 >= 0 && f3.splice(g2, 1);
        }
        function A2(b2) {
          var g2 = document.createElement("style");
          return b2.attrs.type === void 0 && (b2.attrs.type = "text/css"), y2(g2, b2.attrs), _2(b2, g2), g2;
        }
        function y2(b2, g2) {
          Object.keys(g2).forEach(function(E2) {
            b2.setAttribute(E2, g2[E2]);
          });
        }
        function x2(b2, g2) {
          var E2, C2, O2, I2;
          if (g2.transform && b2.css) {
            if (!(I2 = g2.transform(b2.css)))
              return function() {
              };
            b2.css = I2;
          }
          if (g2.singleton) {
            var H2 = h2++;
            E2 = u2 || (u2 = A2(g2)), C2 = R2.bind(null, E2, H2, false), O2 = R2.bind(null, E2, H2, true);
          } else
            b2.sourceMap && typeof URL == "function" && typeof URL.createObjectURL == "function" && typeof URL.revokeObjectURL == "function" && typeof Blob == "function" && typeof btoa == "function" ? (E2 = function(L2) {
              var W2 = document.createElement("link");
              return L2.attrs.type === void 0 && (L2.attrs.type = "text/css"), L2.attrs.rel = "stylesheet", y2(W2, L2.attrs), _2(L2, W2), W2;
            }(g2), C2 = function(L2, W2, le) {
              var Q2 = le.css, Ee = le.sourceMap, It2 = W2.convertToAbsoluteUrls === void 0 && Ee;
              (W2.convertToAbsoluteUrls || It2) && (Q2 = v2(Q2)), Ee && (Q2 += `
/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(Ee)))) + " */");
              var Mt2 = new Blob([Q2], { type: "text/css" }), Xe = L2.href;
              L2.href = URL.createObjectURL(Mt2), Xe && URL.revokeObjectURL(Xe);
            }.bind(null, E2, g2), O2 = function() {
              N2(E2), E2.href && URL.revokeObjectURL(E2.href);
            }) : (E2 = A2(g2), C2 = function(L2, W2) {
              var le = W2.css, Q2 = W2.media;
              if (Q2 && L2.setAttribute("media", Q2), L2.styleSheet)
                L2.styleSheet.cssText = le;
              else {
                for (; L2.firstChild; )
                  L2.removeChild(L2.firstChild);
                L2.appendChild(document.createTextNode(le));
              }
            }.bind(null, E2), O2 = function() {
              N2(E2);
            });
          return C2(b2), function(L2) {
            if (L2) {
              if (L2.css === b2.css && L2.media === b2.media && L2.sourceMap === b2.sourceMap)
                return;
              C2(b2 = L2);
            } else
              O2();
          };
        }
        t3.exports = function(b2, g2) {
          if (typeof DEBUG < "u" && DEBUG && typeof document != "object")
            throw new Error("The style-loader cannot be used in a non-browser environment");
          (g2 = g2 || {}).attrs = typeof g2.attrs == "object" ? g2.attrs : {}, g2.singleton || typeof g2.singleton == "boolean" || (g2.singleton = l2()), g2.insertInto || (g2.insertInto = "head"), g2.insertAt || (g2.insertAt = "bottom");
          var E2 = k2(b2, g2);
          return p2(E2, g2), function(C2) {
            for (var O2 = [], I2 = 0; I2 < E2.length; I2++) {
              var H2 = E2[I2];
              (L2 = a2[H2.id]).refs--, O2.push(L2);
            }
            for (C2 && p2(k2(C2, g2), g2), I2 = 0; I2 < O2.length; I2++) {
              var L2;
              if ((L2 = O2[I2]).refs === 0) {
                for (var W2 = 0; W2 < L2.parts.length; W2++)
                  L2.parts[W2]();
                delete a2[L2.id];
              }
            }
          };
        };
        var w2, M2 = (w2 = [], function(b2, g2) {
          return w2[b2] = g2, w2.filter(Boolean).join(`
`);
        });
        function R2(b2, g2, E2, C2) {
          var O2 = E2 ? "" : C2.css;
          if (b2.styleSheet)
            b2.styleSheet.cssText = M2(g2, O2);
          else {
            var I2 = document.createTextNode(O2), H2 = b2.childNodes;
            H2[g2] && b2.removeChild(H2[g2]), H2.length ? b2.insertBefore(I2, H2[g2]) : b2.appendChild(I2);
          }
        }
      }, function(t3, o2) {
        t3.exports = function(i3) {
          var n2 = typeof window < "u" && window.location;
          if (!n2)
            throw new Error("fixUrls requires window.location");
          if (!i3 || typeof i3 != "string")
            return i3;
          var r2 = n2.protocol + "//" + n2.host, a2 = r2 + n2.pathname.replace(/\/[^\/]*$/, "/");
          return i3.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(l2, c2) {
            var u2, h2 = c2.trim().replace(/^"(.*)"$/, function(f3, v2) {
              return v2;
            }).replace(/^'(.*)'$/, function(f3, v2) {
              return v2;
            });
            return /^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(h2) ? l2 : (u2 = h2.indexOf("//") === 0 ? h2 : h2.indexOf("/") === 0 ? r2 + h2 : a2 + h2.replace(/^\.\//, ""), "url(" + JSON.stringify(u2) + ")");
          });
        };
      }, function(t3, o2, i3) {
        var n2, r2, a2, l2, c2, u2, h2, f3, v2;
        t3.exports = (n2 = "cdx-notifies", r2 = "cdx-notify", a2 = "cdx-notify__cross", l2 = "cdx-notify__button--confirm", c2 = "cdx-notify__button--cancel", u2 = "cdx-notify__input", h2 = "cdx-notify__button", f3 = "cdx-notify__btns-wrapper", { alert: v2 = function(p2) {
          var k2 = document.createElement("DIV"), _2 = document.createElement("DIV"), N2 = p2.message, A2 = p2.style;
          return k2.classList.add(r2), A2 && k2.classList.add(r2 + "--" + A2), k2.innerHTML = N2, _2.classList.add(a2), _2.addEventListener("click", k2.remove.bind(k2)), k2.appendChild(_2), k2;
        }, confirm: function(p2) {
          var k2 = v2(p2), _2 = document.createElement("div"), N2 = document.createElement("button"), A2 = document.createElement("button"), y2 = k2.querySelector("." + a2), x2 = p2.cancelHandler, w2 = p2.okHandler;
          return _2.classList.add(f3), N2.innerHTML = p2.okText || "Confirm", A2.innerHTML = p2.cancelText || "Cancel", N2.classList.add(h2), A2.classList.add(h2), N2.classList.add(l2), A2.classList.add(c2), x2 && typeof x2 == "function" && (A2.addEventListener("click", x2), y2.addEventListener("click", x2)), w2 && typeof w2 == "function" && N2.addEventListener("click", w2), N2.addEventListener("click", k2.remove.bind(k2)), A2.addEventListener("click", k2.remove.bind(k2)), _2.appendChild(N2), _2.appendChild(A2), k2.appendChild(_2), k2;
        }, prompt: function(p2) {
          var k2 = v2(p2), _2 = document.createElement("div"), N2 = document.createElement("button"), A2 = document.createElement("input"), y2 = k2.querySelector("." + a2), x2 = p2.cancelHandler, w2 = p2.okHandler;
          return _2.classList.add(f3), N2.innerHTML = p2.okText || "Ok", N2.classList.add(h2), N2.classList.add(l2), A2.classList.add(u2), p2.placeholder && A2.setAttribute("placeholder", p2.placeholder), p2.default && (A2.value = p2.default), p2.inputType && (A2.type = p2.inputType), x2 && typeof x2 == "function" && y2.addEventListener("click", x2), w2 && typeof w2 == "function" && N2.addEventListener("click", function() {
            w2(A2.value);
          }), N2.addEventListener("click", k2.remove.bind(k2)), _2.appendChild(A2), _2.appendChild(N2), k2.appendChild(_2), k2;
        }, getWrapper: function() {
          var p2 = document.createElement("DIV");
          return p2.classList.add(n2), p2;
        } });
      }]);
    });
  })(to);
  var oo = /* @__PURE__ */ xe(Le);
  var io = class {
    show(e2) {
      oo.show(e2);
    }
  };
  var no = class extends S {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      super({
        config: e2,
        eventsDispatcher: t3
      }), this.notifier = new io();
    }
    get methods() {
      return {
        show: (e2) => this.show(e2)
      };
    }
    show(e2) {
      return this.notifier.show(e2);
    }
  };
  var so = class extends S {
    get methods() {
      const e2 = () => this.isEnabled;
      return {
        toggle: (t3) => this.toggle(t3),
        get isEnabled() {
          return e2();
        }
      };
    }
    toggle(e2) {
      return this.Editor.ReadOnly.toggle(e2);
    }
    get isEnabled() {
      return this.Editor.ReadOnly.isEnabled;
    }
  };
  var Oe = {};
  var ro = {
    get exports() {
      return Oe;
    },
    set exports(s2) {
      Oe = s2;
    }
  };
  (function(s2, e2) {
    (function(t3, o2) {
      s2.exports = o2();
    })(Lt, function() {
      function t3(h2) {
        var f3 = h2.tags, v2 = Object.keys(f3), p2 = v2.map(function(k2) {
          return typeof f3[k2];
        }).every(function(k2) {
          return k2 === "object" || k2 === "boolean" || k2 === "function";
        });
        if (!p2)
          throw new Error("The configuration was invalid");
        this.config = h2;
      }
      var o2 = ["P", "LI", "TD", "TH", "DIV", "H1", "H2", "H3", "H4", "H5", "H6", "PRE"];
      function i3(h2) {
        return o2.indexOf(h2.nodeName) !== -1;
      }
      var n2 = ["A", "B", "STRONG", "I", "EM", "SUB", "SUP", "U", "STRIKE"];
      function r2(h2) {
        return n2.indexOf(h2.nodeName) !== -1;
      }
      t3.prototype.clean = function(h2) {
        const f3 = document.implementation.createHTMLDocument(), v2 = f3.createElement("div");
        return v2.innerHTML = h2, this._sanitize(f3, v2), v2.innerHTML;
      }, t3.prototype._sanitize = function(h2, f3) {
        var v2 = a2(h2, f3), p2 = v2.firstChild();
        if (p2)
          do {
            if (p2.nodeType === Node.TEXT_NODE)
              if (p2.data.trim() === "" && (p2.previousElementSibling && i3(p2.previousElementSibling) || p2.nextElementSibling && i3(p2.nextElementSibling))) {
                f3.removeChild(p2), this._sanitize(h2, f3);
                break;
              } else
                continue;
            if (p2.nodeType === Node.COMMENT_NODE) {
              f3.removeChild(p2), this._sanitize(h2, f3);
              break;
            }
            var k2 = r2(p2), _2;
            k2 && (_2 = Array.prototype.some.call(p2.childNodes, i3));
            var N2 = !!f3.parentNode, A2 = i3(f3) && i3(p2) && N2, y2 = p2.nodeName.toLowerCase(), x2 = l2(this.config, y2, p2), w2 = k2 && _2;
            if (w2 || c2(p2, x2) || !this.config.keepNestedBlockElements && A2) {
              if (!(p2.nodeName === "SCRIPT" || p2.nodeName === "STYLE"))
                for (; p2.childNodes.length > 0; )
                  f3.insertBefore(p2.childNodes[0], p2);
              f3.removeChild(p2), this._sanitize(h2, f3);
              break;
            }
            for (var M2 = 0; M2 < p2.attributes.length; M2 += 1) {
              var R2 = p2.attributes[M2];
              u2(R2, x2, p2) && (p2.removeAttribute(R2.name), M2 = M2 - 1);
            }
            this._sanitize(h2, p2);
          } while (p2 = v2.nextSibling());
      };
      function a2(h2, f3) {
        return h2.createTreeWalker(
          f3,
          NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,
          null,
          false
        );
      }
      function l2(h2, f3, v2) {
        return typeof h2.tags[f3] == "function" ? h2.tags[f3](v2) : h2.tags[f3];
      }
      function c2(h2, f3) {
        return typeof f3 > "u" ? true : typeof f3 == "boolean" ? !f3 : false;
      }
      function u2(h2, f3, v2) {
        var p2 = h2.name.toLowerCase();
        return f3 === true ? false : typeof f3[p2] == "function" ? !f3[p2](h2.value, v2) : typeof f3[p2] > "u" || f3[p2] === false ? true : typeof f3[p2] == "string" ? f3[p2] !== h2.value : false;
      }
      return t3;
    });
  })(ro);
  var ao = Oe;
  function ht(s2, e2) {
    return s2.map((t3) => {
      const o2 = D(e2) ? e2(t3.tool) : e2;
      return V(o2) || (t3.data = Pe(t3.data, o2)), t3;
    });
  }
  function Z(s2, e2 = {}) {
    const t3 = {
      tags: e2
    };
    return new ao(t3).clean(s2);
  }
  function Pe(s2, e2) {
    return Array.isArray(s2) ? lo(s2, e2) : j(s2) ? co(s2, e2) : J(s2) ? ho(s2, e2) : s2;
  }
  function lo(s2, e2) {
    return s2.map((t3) => Pe(t3, e2));
  }
  function co(s2, e2) {
    const t3 = {};
    for (const o2 in s2) {
      if (!Object.prototype.hasOwnProperty.call(s2, o2))
        continue;
      const i3 = s2[o2], n2 = uo(e2[o2]) ? e2[o2] : e2;
      t3[o2] = Pe(i3, n2);
    }
    return t3;
  }
  function ho(s2, e2) {
    return j(e2) ? Z(s2, e2) : e2 === false ? Z(s2, {}) : s2;
  }
  function uo(s2) {
    return j(s2) || Nt(s2) || D(s2);
  }
  var po = class extends S {
    get methods() {
      return {
        clean: (e2, t3) => this.clean(e2, t3)
      };
    }
    clean(e2, t3) {
      return Z(e2, t3);
    }
  };
  var fo = class extends S {
    get methods() {
      return {
        save: () => this.save()
      };
    }
    save() {
      const e2 = "Editor's content can not be saved in read-only mode";
      return this.Editor.ReadOnly.isEnabled ? (K(e2, "warn"), Promise.reject(new Error(e2))) : this.Editor.Saver.save();
    }
  };
  var go = class extends S {
    get methods() {
      return {
        findParentTag: (e2, t3) => this.findParentTag(e2, t3),
        expandToTag: (e2) => this.expandToTag(e2)
      };
    }
    findParentTag(e2, t3) {
      return new m().findParentTag(e2, t3);
    }
    expandToTag(e2) {
      new m().expandToTag(e2);
    }
  };
  var bo = class extends S {
    get classes() {
      return {
        block: "cdx-block",
        inlineToolButton: "ce-inline-tool",
        inlineToolButtonActive: "ce-inline-tool--active",
        input: "cdx-input",
        loader: "cdx-loader",
        button: "cdx-button",
        settingsButton: "cdx-settings-button",
        settingsButtonActive: "cdx-settings-button--active"
      };
    }
  };
  var mo = class extends S {
    get methods() {
      return {
        close: () => this.close(),
        open: () => this.open(),
        toggleBlockSettings: (e2) => this.toggleBlockSettings(e2),
        toggleToolbox: (e2) => this.toggleToolbox(e2)
      };
    }
    open() {
      this.Editor.Toolbar.moveAndOpen();
    }
    close() {
      this.Editor.Toolbar.close();
    }
    toggleBlockSettings(e2) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbar because there is no block selected ", "warn");
        return;
      }
      (e2 != null ? e2 : !this.Editor.BlockSettings.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();
    }
    toggleToolbox(e2) {
      if (this.Editor.BlockManager.currentBlockIndex === -1) {
        K("Could't toggle the Toolbox because there is no block selected ", "warn");
        return;
      }
      (e2 != null ? e2 : !this.Editor.Toolbar.toolbox.opened) ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();
    }
  };
  var _e = {};
  var ko = {
    get exports() {
      return _e;
    },
    set exports(s2) {
      _e = s2;
    }
  };
  (function(s2, e2) {
    (function(t3, o2) {
      s2.exports = o2();
    })(window, function() {
      return function(t3) {
        var o2 = {};
        function i3(n2) {
          if (o2[n2])
            return o2[n2].exports;
          var r2 = o2[n2] = { i: n2, l: false, exports: {} };
          return t3[n2].call(r2.exports, r2, r2.exports, i3), r2.l = true, r2.exports;
        }
        return i3.m = t3, i3.c = o2, i3.d = function(n2, r2, a2) {
          i3.o(n2, r2) || Object.defineProperty(n2, r2, { enumerable: true, get: a2 });
        }, i3.r = function(n2) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
        }, i3.t = function(n2, r2) {
          if (1 & r2 && (n2 = i3(n2)), 8 & r2 || 4 & r2 && typeof n2 == "object" && n2 && n2.__esModule)
            return n2;
          var a2 = /* @__PURE__ */ Object.create(null);
          if (i3.r(a2), Object.defineProperty(a2, "default", { enumerable: true, value: n2 }), 2 & r2 && typeof n2 != "string")
            for (var l2 in n2)
              i3.d(a2, l2, function(c2) {
                return n2[c2];
              }.bind(null, l2));
          return a2;
        }, i3.n = function(n2) {
          var r2 = n2 && n2.__esModule ? function() {
            return n2.default;
          } : function() {
            return n2;
          };
          return i3.d(r2, "a", r2), r2;
        }, i3.o = function(n2, r2) {
          return Object.prototype.hasOwnProperty.call(n2, r2);
        }, i3.p = "", i3(i3.s = 0);
      }([function(t3, o2, i3) {
        t3.exports = i3(1);
      }, function(t3, o2, i3) {
        i3.r(o2), i3.d(o2, "default", function() {
          return n2;
        });
        class n2 {
          constructor() {
            this.nodes = { wrapper: null, content: null }, this.showed = false, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {
              this.showed && this.hide(true);
            }, this.loadStyles(), this.prepare(), window.addEventListener("scroll", this.handleWindowScroll, { passive: true });
          }
          get CSS() {
            return { tooltip: "ct", tooltipContent: "ct__content", tooltipShown: "ct--shown", placement: { left: "ct--left", bottom: "ct--bottom", right: "ct--right", top: "ct--top" } };
          }
          show(a2, l2, c2) {
            this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);
            const u2 = Object.assign({ placement: "bottom", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c2);
            if (u2.hidingDelay && (this.hidingDelay = u2.hidingDelay), this.nodes.content.innerHTML = "", typeof l2 == "string")
              this.nodes.content.appendChild(document.createTextNode(l2));
            else {
              if (!(l2 instanceof Node))
                throw Error("[CodeX Tooltip] Wrong type of \xABcontent\xBB passed. It should be an instance of Node or String. But " + typeof l2 + " given.");
              this.nodes.content.appendChild(l2);
            }
            switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u2.placement) {
              case "top":
                this.placeTop(a2, u2);
                break;
              case "left":
                this.placeLeft(a2, u2);
                break;
              case "right":
                this.placeRight(a2, u2);
                break;
              case "bottom":
              default:
                this.placeBottom(a2, u2);
            }
            u2 && u2.delay ? this.showingTimeout = setTimeout(() => {
              this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true;
            }, u2.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = true);
          }
          hide(a2 = false) {
            if (this.hidingDelay && !a2)
              return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {
                this.hide(true);
              }, this.hidingDelay));
            this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = false, this.showingTimeout && clearTimeout(this.showingTimeout);
          }
          onHover(a2, l2, c2) {
            a2.addEventListener("mouseenter", () => {
              this.show(a2, l2, c2);
            }), a2.addEventListener("mouseleave", () => {
              this.hide();
            });
          }
          destroy() {
            this.nodes.wrapper.remove(), window.removeEventListener("scroll", this.handleWindowScroll);
          }
          prepare() {
            this.nodes.wrapper = this.make("div", this.CSS.tooltip), this.nodes.content = this.make("div", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);
          }
          loadStyles() {
            const a2 = "codex-tooltips-style";
            if (document.getElementById(a2))
              return;
            const l2 = i3(2), c2 = this.make("style", null, { textContent: l2.toString(), id: a2 });
            this.prepend(document.head, c2);
          }
          placeBottom(a2, l2) {
            const c2 = a2.getBoundingClientRect(), u2 = c2.left + a2.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h2 = c2.bottom + window.pageYOffset + this.offsetTop + l2.marginTop;
            this.applyPlacement("bottom", u2, h2);
          }
          placeTop(a2, l2) {
            const c2 = a2.getBoundingClientRect(), u2 = c2.left + a2.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h2 = c2.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;
            this.applyPlacement("top", u2, h2);
          }
          placeLeft(a2, l2) {
            const c2 = a2.getBoundingClientRect(), u2 = c2.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - l2.marginLeft, h2 = c2.top + window.pageYOffset + a2.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("left", u2, h2);
          }
          placeRight(a2, l2) {
            const c2 = a2.getBoundingClientRect(), u2 = c2.right + this.offsetRight + l2.marginRight, h2 = c2.top + window.pageYOffset + a2.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;
            this.applyPlacement("right", u2, h2);
          }
          applyPlacement(a2, l2, c2) {
            this.nodes.wrapper.classList.add(this.CSS.placement[a2]), this.nodes.wrapper.style.left = l2 + "px", this.nodes.wrapper.style.top = c2 + "px";
          }
          make(a2, l2 = null, c2 = {}) {
            const u2 = document.createElement(a2);
            Array.isArray(l2) ? u2.classList.add(...l2) : l2 && u2.classList.add(l2);
            for (const h2 in c2)
              c2.hasOwnProperty(h2) && (u2[h2] = c2[h2]);
            return u2;
          }
          append(a2, l2) {
            Array.isArray(l2) ? l2.forEach((c2) => a2.appendChild(c2)) : a2.appendChild(l2);
          }
          prepend(a2, l2) {
            Array.isArray(l2) ? (l2 = l2.reverse()).forEach((c2) => a2.prepend(c2)) : a2.prepend(l2);
          }
        }
      }, function(t3, o2) {
        t3.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:"";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url("")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:"";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;
      }]).default;
    });
  })(ko);
  var vo = /* @__PURE__ */ xe(_e);
  var Fe = class {
    constructor() {
      this.lib = new vo();
    }
    destroy() {
      this.lib.destroy();
    }
    show(e2, t3, o2) {
      this.lib.show(e2, t3, o2);
    }
    hide(e2 = false) {
      this.lib.hide(e2);
    }
    onHover(e2, t3, o2) {
      this.lib.onHover(e2, t3, o2);
    }
  };
  var xo = class extends S {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      super({
        config: e2,
        eventsDispatcher: t3
      }), this.tooltip = new Fe();
    }
    destroy() {
      this.tooltip.destroy();
    }
    get methods() {
      return {
        show: (e2, t3, o2) => this.show(e2, t3, o2),
        hide: () => this.hide(),
        onHover: (e2, t3, o2) => this.onHover(e2, t3, o2)
      };
    }
    show(e2, t3, o2) {
      this.tooltip.show(e2, t3, o2);
    }
    hide() {
      this.tooltip.hide();
    }
    onHover(e2, t3, o2) {
      this.tooltip.onHover(e2, t3, o2);
    }
  };
  var wo = class extends S {
    get methods() {
      return {
        nodes: this.editorNodes
      };
    }
    get editorNodes() {
      return {
        wrapper: this.Editor.UI.nodes.wrapper,
        redactor: this.Editor.UI.nodes.redactor
      };
    }
  };
  function ut(s2, e2) {
    const t3 = {};
    return Object.entries(s2).forEach(([o2, i3]) => {
      if (j(i3)) {
        const n2 = e2 ? `${e2}.${o2}` : o2;
        Object.values(i3).every((a2) => J(a2)) ? t3[o2] = n2 : t3[o2] = ut(i3, n2);
        return;
      }
      t3[o2] = i3;
    }), t3;
  }
  var X = ut(rt);
  function yo(s2, e2) {
    const t3 = {};
    return Object.keys(s2).forEach((o2) => {
      const i3 = e2[o2];
      i3 !== void 0 ? t3[i3] = s2[o2] : t3[o2] = s2[o2];
    }), t3;
  }
  var Eo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11"/></svg>';
  var pt = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10"/></svg>';
  var Bo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15"/></svg>';
  var Co = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16"/></svg>';
  var To = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/></svg>';
  var So = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13.34 10C12.4223 12.7337 11 17 11 17"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.21 7H14.2"/></svg>';
  var qe = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72"/></svg>';
  var Io = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 7.29999H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 7.29999H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.30999 12H9.3"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 12H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 16.7H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 16.7H14.59"/></svg>';
  var Mo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 7V12M12 17V12M17 12H12M12 12H7"/></svg>';
  var Lo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="10.5" cy="10.5" r="5.5" stroke="currentColor" stroke-width="2"/><line x1="15.4142" x2="19" y1="15" y2="18.5858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var Oo = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397"/><line x1="12.1142" x2="11.7" y1="12.2" y2="11.7858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>';
  var P = class {
    constructor(e2) {
      this.nodes = {
        root: null,
        icon: null
      }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noFocus);
      }, this.removeSpecialHoverBehavior = () => {
        this.nodes.root.classList.remove(P.CSS.noHover);
      }, this.onErrorAnimationEnd = () => {
        this.nodes.icon.classList.remove(P.CSS.wobbleAnimation), this.nodes.icon.removeEventListener("animationend", this.onErrorAnimationEnd);
      }, this.params = e2, this.nodes.root = this.make(e2);
    }
    get isDisabled() {
      return this.params.isDisabled;
    }
    get toggle() {
      return this.params.toggle;
    }
    get title() {
      return this.params.title;
    }
    get closeOnActivate() {
      return this.params.closeOnActivate;
    }
    get isConfirmationStateEnabled() {
      return this.confirmationState !== null;
    }
    get isFocused() {
      return this.nodes.root.classList.contains(P.CSS.focused);
    }
    static get CSS() {
      return {
        container: "ce-popover-item",
        title: "ce-popover-item__title",
        secondaryTitle: "ce-popover-item__secondary-title",
        icon: "ce-popover-item__icon",
        active: "ce-popover-item--active",
        disabled: "ce-popover-item--disabled",
        focused: "ce-popover-item--focused",
        hidden: "ce-popover-item--hidden",
        confirmationState: "ce-popover-item--confirmation",
        noHover: "ce-popover-item--no-hover",
        noFocus: "ce-popover-item--no-focus",
        wobbleAnimation: "wobble"
      };
    }
    getElement() {
      return this.nodes.root;
    }
    handleClick() {
      if (this.isConfirmationStateEnabled) {
        this.activateOrEnableConfirmationMode(this.confirmationState);
        return;
      }
      this.activateOrEnableConfirmationMode(this.params);
    }
    toggleActive(e2) {
      this.nodes.root.classList.toggle(P.CSS.active, e2);
    }
    toggleHidden(e2) {
      this.nodes.root.classList.toggle(P.CSS.hidden, e2);
    }
    reset() {
      this.isConfirmationStateEnabled && this.disableConfirmationMode();
    }
    onFocus() {
      this.disableSpecialHoverAndFocusBehavior();
    }
    make(e2) {
      const t3 = d.make("div", P.CSS.container);
      return e2.name && (t3.dataset.itemName = e2.name), this.nodes.icon = d.make("div", P.CSS.icon, {
        innerHTML: e2.icon || To
      }), t3.appendChild(this.nodes.icon), t3.appendChild(d.make("div", P.CSS.title, {
        innerHTML: e2.title || ""
      })), e2.secondaryLabel && t3.appendChild(d.make("div", P.CSS.secondaryTitle, {
        textContent: e2.secondaryLabel
      })), e2.isActive && t3.classList.add(P.CSS.active), e2.isDisabled && t3.classList.add(P.CSS.disabled), t3;
    }
    enableConfirmationMode(e2) {
      const t3 = __spreadProps(__spreadValues(__spreadValues({}, this.params), e2), {
        confirmation: e2.confirmation
      }), o2 = this.make(t3);
      this.nodes.root.innerHTML = o2.innerHTML, this.nodes.root.classList.add(P.CSS.confirmationState), this.confirmationState = e2, this.enableSpecialHoverAndFocusBehavior();
    }
    disableConfirmationMode() {
      const e2 = this.make(this.params);
      this.nodes.root.innerHTML = e2.innerHTML, this.nodes.root.classList.remove(P.CSS.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();
    }
    enableSpecialHoverAndFocusBehavior() {
      this.nodes.root.classList.add(P.CSS.noHover), this.nodes.root.classList.add(P.CSS.noFocus), this.nodes.root.addEventListener("mouseleave", this.removeSpecialHoverBehavior, { once: true });
    }
    disableSpecialHoverAndFocusBehavior() {
      this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), this.nodes.root.removeEventListener("mouseleave", this.removeSpecialHoverBehavior);
    }
    activateOrEnableConfirmationMode(e2) {
      if (e2.confirmation === void 0)
        try {
          e2.onActivate(e2), this.disableConfirmationMode();
        } catch (e3) {
          this.animateError();
        }
      else
        this.enableConfirmationMode(e2.confirmation);
    }
    animateError() {
      this.nodes.icon.classList.contains(P.CSS.wobbleAnimation) || (this.nodes.icon.classList.add(P.CSS.wobbleAnimation), this.nodes.icon.addEventListener("animationend", this.onErrorAnimationEnd));
    }
  };
  var ce = class {
    constructor(s2, e2) {
      this.cursor = -1, this.items = [], this.items = s2 || [], this.focusedCssClass = e2;
    }
    get currentItem() {
      return this.cursor === -1 ? null : this.items[this.cursor];
    }
    setCursor(s2) {
      s2 < this.items.length && s2 >= -1 && (this.dropCursor(), this.cursor = s2, this.items[this.cursor].classList.add(this.focusedCssClass));
    }
    setItems(s2) {
      this.items = s2;
    }
    next() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.RIGHT);
    }
    previous() {
      this.cursor = this.leafNodesAndReturnIndex(ce.directions.LEFT);
    }
    dropCursor() {
      this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);
    }
    leafNodesAndReturnIndex(s2) {
      if (this.items.length === 0)
        return this.cursor;
      let e2 = this.cursor;
      return e2 === -1 ? e2 = s2 === ce.directions.RIGHT ? -1 : 0 : this.items[e2].classList.remove(this.focusedCssClass), s2 === ce.directions.RIGHT ? e2 = (e2 + 1) % this.items.length : e2 = (this.items.length + e2 - 1) % this.items.length, d.canSetCaret(this.items[e2]) && oe(() => m.setCursor(this.items[e2]), 50)(), this.items[e2].classList.add(this.focusedCssClass), e2;
    }
  };
  var ne = ce;
  ne.directions = {
    RIGHT: "right",
    LEFT: "left"
  };
  var G = class {
    constructor(e2) {
      this.iterator = null, this.activated = false, this.flipCallbacks = [], this.onKeyDown = (t3) => {
        if (this.isEventReadyForHandling(t3))
          switch (G.usedKeys.includes(t3.keyCode) && t3.preventDefault(), t3.keyCode) {
            case B.TAB:
              this.handleTabPress(t3);
              break;
            case B.LEFT:
            case B.UP:
              this.flipLeft();
              break;
            case B.RIGHT:
            case B.DOWN:
              this.flipRight();
              break;
            case B.ENTER:
              this.handleEnterPress(t3);
              break;
          }
      }, this.iterator = new ne(e2.items, e2.focusedItemClass), this.activateCallback = e2.activateCallback, this.allowedKeys = e2.allowedKeys || G.usedKeys;
    }
    get isActivated() {
      return this.activated;
    }
    static get usedKeys() {
      return [
        B.TAB,
        B.LEFT,
        B.RIGHT,
        B.ENTER,
        B.UP,
        B.DOWN
      ];
    }
    activate(e2, t3) {
      this.activated = true, e2 && this.iterator.setItems(e2), t3 !== void 0 && this.iterator.setCursor(t3), document.addEventListener("keydown", this.onKeyDown, true);
    }
    deactivate() {
      this.activated = false, this.dropCursor(), document.removeEventListener("keydown", this.onKeyDown);
    }
    focusFirst() {
      this.dropCursor(), this.flipRight();
    }
    flipLeft() {
      this.iterator.previous(), this.flipCallback();
    }
    flipRight() {
      this.iterator.next(), this.flipCallback();
    }
    hasFocus() {
      return !!this.iterator.currentItem;
    }
    onFlip(e2) {
      this.flipCallbacks.push(e2);
    }
    removeOnFlip(e2) {
      this.flipCallbacks = this.flipCallbacks.filter((t3) => t3 !== e2);
    }
    dropCursor() {
      this.iterator.dropCursor();
    }
    isEventReadyForHandling(e2) {
      return this.activated && this.allowedKeys.includes(e2.keyCode);
    }
    handleTabPress(e2) {
      switch (e2.shiftKey ? ne.directions.LEFT : ne.directions.RIGHT) {
        case ne.directions.RIGHT:
          this.flipRight();
          break;
        case ne.directions.LEFT:
          this.flipLeft();
          break;
      }
    }
    handleEnterPress(e2) {
      this.activated && (this.iterator.currentItem && (e2.stopPropagation(), e2.preventDefault(), this.iterator.currentItem.click()), D(this.activateCallback) && this.activateCallback(this.iterator.currentItem));
    }
    flipCallback() {
      this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e2) => e2());
    }
  };
  var ue = class {
    static get CSS() {
      return {
        wrapper: "cdx-search-field",
        icon: "cdx-search-field__icon",
        input: "cdx-search-field__input"
      };
    }
    constructor({ items: e2, onSearch: t3, placeholder: o2 }) {
      this.listeners = new Re(), this.items = e2, this.onSearch = t3, this.render(o2);
    }
    getElement() {
      return this.wrapper;
    }
    focus() {
      this.input.focus();
    }
    clear() {
      this.input.value = "", this.searchQuery = "", this.onSearch("", this.foundItems);
    }
    destroy() {
      this.listeners.removeAll();
    }
    render(e2) {
      this.wrapper = d.make("div", ue.CSS.wrapper);
      const t3 = d.make("div", ue.CSS.icon, {
        innerHTML: Lo
      });
      this.input = d.make("input", ue.CSS.input, {
        placeholder: e2
      }), this.wrapper.appendChild(t3), this.wrapper.appendChild(this.input), this.listeners.on(this.input, "input", () => {
        this.searchQuery = this.input.value, this.onSearch(this.searchQuery, this.foundItems);
      });
    }
    get foundItems() {
      return this.items.filter((e2) => this.checkItem(e2));
    }
    checkItem(e2) {
      var i3;
      const t3 = ((i3 = e2.title) == null ? void 0 : i3.toLowerCase()) || "", o2 = this.searchQuery.toLowerCase();
      return t3.includes(o2);
    }
  };
  var de = class {
    lock() {
      Ge ? this.lockHard() : document.body.classList.add(de.CSS.scrollLocked);
    }
    unlock() {
      Ge ? this.unlockHard() : document.body.classList.remove(de.CSS.scrollLocked);
    }
    lockHard() {
      this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(
        "--window-scroll-offset",
        `${this.scrollPosition}px`
      ), document.body.classList.add(de.CSS.scrollLockedHard);
    }
    unlockHard() {
      document.body.classList.remove(de.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;
    }
  };
  var ft = de;
  ft.CSS = {
    scrollLocked: "ce-scroll-locked",
    scrollLockedHard: "ce-scroll-locked--hard"
  };
  var _o = Object.defineProperty;
  var Ao = Object.getOwnPropertyDescriptor;
  var No = (s2, e2, t3, o2) => {
    for (var i3 = o2 > 1 ? void 0 : o2 ? Ao(e2, t3) : e2, n2 = s2.length - 1, r2; n2 >= 0; n2--)
      (r2 = s2[n2]) && (i3 = (o2 ? r2(e2, t3, i3) : r2(i3)) || i3);
    return o2 && i3 && _o(e2, t3, i3), i3;
  };
  var fe = /* @__PURE__ */ ((s2) => (s2.Close = "close", s2))(fe || {});
  var z = class extends we {
    constructor(s2) {
      super(), this.scopeElement = document.body, this.listeners = new Re(), this.scrollLocker = new ft(), this.nodes = {
        wrapper: null,
        popover: null,
        nothingFoundMessage: null,
        customContent: null,
        items: null,
        overlay: null
      }, this.messages = {
        nothingFound: "Nothing found",
        search: "Search"
      }, this.onFlip = () => {
        this.items.find((t3) => t3.isFocused).onFocus();
      }, this.items = s2.items.map((e2) => new P(e2)), s2.scopeElement !== void 0 && (this.scopeElement = s2.scopeElement), s2.messages && (this.messages = __spreadValues(__spreadValues({}, this.messages), s2.messages)), s2.customContentFlippableItems && (this.customContentFlippableItems = s2.customContentFlippableItems), this.make(), s2.customContent && this.addCustomContent(s2.customContent), s2.searchable && this.addSearch(), this.initializeFlipper();
    }
    static get CSS() {
      return {
        popover: "ce-popover",
        popoverOpenTop: "ce-popover--open-top",
        popoverOpened: "ce-popover--opened",
        search: "ce-popover__search",
        nothingFoundMessage: "ce-popover__nothing-found-message",
        nothingFoundMessageDisplayed: "ce-popover__nothing-found-message--displayed",
        customContent: "ce-popover__custom-content",
        customContentHidden: "ce-popover__custom-content--hidden",
        items: "ce-popover__items",
        overlay: "ce-popover__overlay",
        overlayHidden: "ce-popover__overlay--hidden"
      };
    }
    getElement() {
      return this.nodes.wrapper;
    }
    hasFocus() {
      return this.flipper.hasFocus();
    }
    show() {
      this.shouldOpenBottom || (this.nodes.popover.style.setProperty("--popover-height", this.height + "px"), this.nodes.popover.classList.add(z.CSS.popoverOpenTop)), this.nodes.overlay.classList.remove(z.CSS.overlayHidden), this.nodes.popover.classList.add(z.CSS.popoverOpened), this.flipper.activate(this.flippableElements), this.search !== void 0 && setTimeout(() => {
        this.search.focus();
      }, 100), ee() && this.scrollLocker.lock();
    }
    hide() {
      this.nodes.popover.classList.remove(z.CSS.popoverOpened), this.nodes.popover.classList.remove(z.CSS.popoverOpenTop), this.nodes.overlay.classList.add(z.CSS.overlayHidden), this.flipper.deactivate(), this.items.forEach((s2) => s2.reset()), this.search !== void 0 && this.search.clear(), ee() && this.scrollLocker.unlock(), this.emit(
        "close"
      );
    }
    destroy() {
      this.flipper.deactivate(), this.listeners.removeAll(), ee() && this.scrollLocker.unlock();
    }
    make() {
      this.nodes.popover = d.make("div", [z.CSS.popover]), this.nodes.nothingFoundMessage = d.make("div", [z.CSS.nothingFoundMessage], {
        textContent: this.messages.nothingFound
      }), this.nodes.popover.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make("div", [z.CSS.items]), this.items.forEach((s2) => {
        this.nodes.items.appendChild(s2.getElement());
      }), this.nodes.popover.appendChild(this.nodes.items), this.listeners.on(this.nodes.popover, "click", (s2) => {
        const e2 = this.getTargetItem(s2);
        e2 !== void 0 && this.handleItemClick(e2);
      }), this.nodes.wrapper = d.make("div"), this.nodes.overlay = d.make("div", [z.CSS.overlay, z.CSS.overlayHidden]), this.listeners.on(this.nodes.overlay, "click", () => {
        this.hide();
      }), this.nodes.wrapper.appendChild(this.nodes.overlay), this.nodes.wrapper.appendChild(this.nodes.popover);
    }
    addSearch() {
      this.search = new ue({
        items: this.items,
        placeholder: this.messages.search,
        onSearch: (e2, t3) => {
          this.items.forEach((i3) => {
            const n2 = !t3.includes(i3);
            i3.toggleHidden(n2);
          }), this.toggleNothingFoundMessage(t3.length === 0), this.toggleCustomContent(e2 !== "");
          const o2 = e2 === "" ? this.flippableElements : t3.map((i3) => i3.getElement());
          this.flipper.isActivated && (this.flipper.deactivate(), this.flipper.activate(o2));
        }
      });
      const s2 = this.search.getElement();
      s2.classList.add(z.CSS.search), this.nodes.popover.insertBefore(s2, this.nodes.popover.firstChild);
    }
    addCustomContent(s2) {
      this.nodes.customContent = s2, this.nodes.customContent.classList.add(z.CSS.customContent), this.nodes.popover.insertBefore(s2, this.nodes.popover.firstChild);
    }
    getTargetItem(s2) {
      return this.items.find((e2) => s2.composedPath().includes(e2.getElement()));
    }
    handleItemClick(s2) {
      s2.isDisabled || (this.items.filter((e2) => e2 !== s2).forEach((e2) => e2.reset()), s2.handleClick(), this.toggleItemActivenessIfNeeded(s2), s2.closeOnActivate && this.hide());
    }
    initializeFlipper() {
      this.flipper = new G({
        items: this.flippableElements,
        focusedItemClass: P.CSS.focused,
        allowedKeys: [
          B.TAB,
          B.UP,
          B.DOWN,
          B.ENTER
        ]
      }), this.flipper.onFlip(this.onFlip);
    }
    get flippableElements() {
      const s2 = this.items.map((t3) => t3.getElement());
      return (this.customContentFlippableItems || []).concat(s2);
    }
    get height() {
      let s2 = 0;
      if (this.nodes.popover === null)
        return s2;
      const e2 = this.nodes.popover.cloneNode(true);
      return e2.style.visibility = "hidden", e2.style.position = "absolute", e2.style.top = "-1000px", e2.classList.add(z.CSS.popoverOpened), document.body.appendChild(e2), s2 = e2.offsetHeight, e2.remove(), s2;
    }
    get shouldOpenBottom() {
      const s2 = this.nodes.popover.getBoundingClientRect(), e2 = this.scopeElement.getBoundingClientRect(), t3 = this.height, o2 = s2.top + t3, i3 = s2.top - t3, n2 = Math.min(window.innerHeight, e2.bottom);
      return i3 < e2.top || o2 <= n2;
    }
    toggleNothingFoundMessage(s2) {
      this.nodes.nothingFoundMessage.classList.toggle(z.CSS.nothingFoundMessageDisplayed, s2);
    }
    toggleCustomContent(s2) {
      var e2;
      (e2 = this.nodes.customContent) == null || e2.classList.toggle(z.CSS.customContentHidden, s2);
    }
    toggleItemActivenessIfNeeded(s2) {
      if (s2.toggle === true && s2.toggleActive(), typeof s2.toggle == "string") {
        const e2 = this.items.filter((t3) => t3.toggle === s2.toggle);
        if (e2.length === 1) {
          s2.toggleActive();
          return;
        }
        e2.forEach((t3) => {
          t3.toggleActive(t3 === s2);
        });
      }
    }
  };
  var He = z;
  No([
    ae
  ], He.prototype, "height", 1);
  var Ro = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.selection = new m(), this.onPopoverClose = () => {
        this.close();
      };
    }
    get events() {
      return {
        opened: "block-settings-opened",
        closed: "block-settings-closed"
      };
    }
    get CSS() {
      return {
        settings: "ce-settings"
      };
    }
    get flipper() {
      var e2;
      return (e2 = this.popover) == null ? void 0 : e2.flipper;
    }
    make() {
      this.nodes.wrapper = d.make("div", [this.CSS.settings]);
    }
    destroy() {
      this.removeAllNodes();
    }
    open(e2 = this.Editor.BlockManager.currentBlock) {
      this.opened = true, this.selection.save(), e2.selected = true, this.Editor.BlockSelection.clearCache();
      const [t3, o2] = e2.getTunes();
      this.eventsDispatcher.emit(this.events.opened), this.popover = new He({
        searchable: true,
        items: t3.map((i3) => this.resolveTuneAliases(i3)),
        customContent: o2,
        customContentFlippableItems: this.getControls(o2),
        scopeElement: this.Editor.API.methods.ui.nodes.redactor,
        messages: {
          nothingFound: $2.ui(X.ui.popover, "Nothing found"),
          search: $2.ui(X.ui.popover, "Filter")
        }
      }), this.popover.on(fe.Close, this.onPopoverClose), this.nodes.wrapper.append(this.popover.getElement()), this.popover.show();
    }
    getElement() {
      return this.nodes.wrapper;
    }
    close() {
      this.opened = false, m.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && (this.Editor.BlockManager.currentBlock.selected = false), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(fe.Close, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null);
    }
    getControls(e2) {
      const { StylesAPI: t3 } = this.Editor, o2 = e2.querySelectorAll(
        `.${t3.classes.settingsButton}, ${d.allInputsSelector}`
      );
      return Array.from(o2);
    }
    resolveTuneAliases(e2) {
      const t3 = yo(e2, { label: "title" });
      return e2.confirmation && (t3.confirmation = this.resolveTuneAliases(e2.confirmation)), t3;
    }
  };
  var Y = class extends S {
    constructor() {
      super(...arguments), this.opened = false, this.tools = [], this.flipper = null, this.togglingCallback = null;
    }
    static get CSS() {
      return {
        conversionToolbarWrapper: "ce-conversion-toolbar",
        conversionToolbarShowed: "ce-conversion-toolbar--showed",
        conversionToolbarTools: "ce-conversion-toolbar__tools",
        conversionToolbarLabel: "ce-conversion-toolbar__label",
        conversionTool: "ce-conversion-tool",
        conversionToolHidden: "ce-conversion-tool--hidden",
        conversionToolIcon: "ce-conversion-tool__icon",
        conversionToolFocused: "ce-conversion-tool--focused",
        conversionToolActive: "ce-conversion-tool--active"
      };
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        Y.CSS.conversionToolbarWrapper,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.tools = d.make("div", Y.CSS.conversionToolbarTools);
      const e2 = d.make("div", Y.CSS.conversionToolbarLabel, {
        textContent: $2.ui(X.ui.inlineToolbar.converter, "Convert to")
      });
      return this.addTools(), this.enableFlipper(), d.append(this.nodes.wrapper, e2), d.append(this.nodes.wrapper, this.nodes.tools), this.nodes.wrapper;
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes();
    }
    toggle(e2) {
      this.opened ? this.close() : this.open(), D(e2) && (this.togglingCallback = e2);
    }
    open() {
      this.filterTools(), this.opened = true, this.nodes.wrapper.classList.add(Y.CSS.conversionToolbarShowed), window.requestAnimationFrame(() => {
        this.flipper.activate(this.tools.map((e2) => e2.button).filter((e2) => !e2.classList.contains(Y.CSS.conversionToolHidden))), this.flipper.focusFirst(), D(this.togglingCallback) && this.togglingCallback(true);
      });
    }
    close() {
      this.opened = false, this.flipper.deactivate(), this.nodes.wrapper.classList.remove(Y.CSS.conversionToolbarShowed), D(this.togglingCallback) && this.togglingCallback(false);
    }
    hasTools() {
      return this.tools.length === 1 ? this.tools[0].name !== this.config.defaultBlock : true;
    }
    async replaceWithBlock(e2, t3) {
      const o2 = this.Editor.BlockManager.currentBlock.tool, n2 = (await this.Editor.BlockManager.currentBlock.save()).data, r2 = this.Editor.Tools.blockTools.get(e2);
      let a2 = "";
      const l2 = o2.conversionConfig.export;
      if (D(l2))
        a2 = l2(n2);
      else if (J(l2))
        a2 = n2[l2];
      else {
        T("Conversion \xABexport\xBB property must be a string or function. String means key of saved data object to export. Function should export processed string to export.");
        return;
      }
      const c2 = Z(
        a2,
        r2.sanitizeConfig
      );
      let u2 = {};
      const h2 = r2.conversionConfig.import;
      if (D(h2))
        u2 = h2(c2);
      else if (J(h2))
        u2[h2] = c2;
      else {
        T("Conversion \xABimport\xBB property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.");
        return;
      }
      t3 && (u2 = Object.assign(u2, t3)), this.Editor.BlockManager.replace({
        tool: e2,
        data: u2
      }), this.Editor.BlockSelection.clearSelection(), this.close(), this.Editor.InlineToolbar.close(), oe(() => {
        this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock);
      }, 10)();
    }
    addTools() {
      const e2 = this.Editor.Tools.blockTools;
      Array.from(e2.entries()).forEach(([t3, o2]) => {
        const i3 = o2.conversionConfig;
        !i3 || !i3.import || o2.toolbox.forEach(
          (n2) => this.addToolIfValid(t3, n2)
        );
      });
    }
    addToolIfValid(e2, t3) {
      V(t3) || !t3.icon || this.addTool(e2, t3);
    }
    addTool(e2, t3) {
      const o2 = d.make("div", [Y.CSS.conversionTool]), i3 = d.make("div", [Y.CSS.conversionToolIcon]);
      o2.dataset.tool = e2, i3.innerHTML = t3.icon, d.append(o2, i3), d.append(o2, d.text($2.t(X.toolNames, t3.title || ke(e2)))), d.append(this.nodes.tools, o2), this.tools.push({
        name: e2,
        button: o2,
        toolboxItem: t3
      }), this.listeners.on(o2, "click", async () => {
        await this.replaceWithBlock(e2, t3.data);
      });
    }
    async filterTools() {
      const { currentBlock: e2 } = this.Editor.BlockManager, t3 = await e2.getActiveToolboxEntry();
      function o2(i3, n2) {
        return i3.icon === n2.icon && i3.title === n2.title;
      }
      this.tools.forEach((i3) => {
        let n2 = false;
        if (t3) {
          const r2 = o2(t3, i3.toolboxItem);
          n2 = i3.button.dataset.tool === e2.name && r2;
        }
        i3.button.hidden = n2, i3.button.classList.toggle(Y.CSS.conversionToolHidden, n2);
      });
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: Y.CSS.conversionToolFocused
      });
    }
  };
  var Ae = {};
  var Do = {
    get exports() {
      return Ae;
    },
    set exports(s2) {
      Ae = s2;
    }
  };
  (function(s2, e2) {
    (function(t3, o2) {
      s2.exports = o2();
    })(window, function() {
      return function(t3) {
        var o2 = {};
        function i3(n2) {
          if (o2[n2])
            return o2[n2].exports;
          var r2 = o2[n2] = { i: n2, l: false, exports: {} };
          return t3[n2].call(r2.exports, r2, r2.exports, i3), r2.l = true, r2.exports;
        }
        return i3.m = t3, i3.c = o2, i3.d = function(n2, r2, a2) {
          i3.o(n2, r2) || Object.defineProperty(n2, r2, { enumerable: true, get: a2 });
        }, i3.r = function(n2) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
        }, i3.t = function(n2, r2) {
          if (1 & r2 && (n2 = i3(n2)), 8 & r2 || 4 & r2 && typeof n2 == "object" && n2 && n2.__esModule)
            return n2;
          var a2 = /* @__PURE__ */ Object.create(null);
          if (i3.r(a2), Object.defineProperty(a2, "default", { enumerable: true, value: n2 }), 2 & r2 && typeof n2 != "string")
            for (var l2 in n2)
              i3.d(a2, l2, function(c2) {
                return n2[c2];
              }.bind(null, l2));
          return a2;
        }, i3.n = function(n2) {
          var r2 = n2 && n2.__esModule ? function() {
            return n2.default;
          } : function() {
            return n2;
          };
          return i3.d(r2, "a", r2), r2;
        }, i3.o = function(n2, r2) {
          return Object.prototype.hasOwnProperty.call(n2, r2);
        }, i3.p = "", i3(i3.s = 0);
      }([function(t3, o2, i3) {
        function n2(l2, c2) {
          for (var u2 = 0; u2 < c2.length; u2++) {
            var h2 = c2[u2];
            h2.enumerable = h2.enumerable || false, h2.configurable = true, "value" in h2 && (h2.writable = true), Object.defineProperty(l2, h2.key, h2);
          }
        }
        function r2(l2, c2, u2) {
          return c2 && n2(l2.prototype, c2), u2 && n2(l2, u2), l2;
        }
        i3.r(o2);
        var a2 = function() {
          function l2(c2) {
            var u2 = this;
            (function(h2, f3) {
              if (!(h2 instanceof f3))
                throw new TypeError("Cannot call a class as a function");
            })(this, l2), this.commands = {}, this.keys = {}, this.name = c2.name, this.parseShortcutName(c2.name), this.element = c2.on, this.callback = c2.callback, this.executeShortcut = function(h2) {
              u2.execute(h2);
            }, this.element.addEventListener("keydown", this.executeShortcut, false);
          }
          return r2(l2, null, [{ key: "supportedCommands", get: function() {
            return { SHIFT: ["SHIFT"], CMD: ["CMD", "CONTROL", "COMMAND", "WINDOWS", "CTRL"], ALT: ["ALT", "OPTION"] };
          } }, { key: "keyCodes", get: function() {
            return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, ".": 190 };
          } }]), r2(l2, [{ key: "parseShortcutName", value: function(c2) {
            c2 = c2.split("+");
            for (var u2 = 0; u2 < c2.length; u2++) {
              c2[u2] = c2[u2].toUpperCase();
              var h2 = false;
              for (var f3 in l2.supportedCommands)
                if (l2.supportedCommands[f3].includes(c2[u2])) {
                  h2 = this.commands[f3] = true;
                  break;
                }
              h2 || (this.keys[c2[u2]] = true);
            }
            for (var v2 in l2.supportedCommands)
              this.commands[v2] || (this.commands[v2] = false);
          } }, { key: "execute", value: function(c2) {
            var u2, h2 = { CMD: c2.ctrlKey || c2.metaKey, SHIFT: c2.shiftKey, ALT: c2.altKey }, f3 = true;
            for (u2 in this.commands)
              this.commands[u2] !== h2[u2] && (f3 = false);
            var v2, p2 = true;
            for (v2 in this.keys)
              p2 = p2 && c2.keyCode === l2.keyCodes[v2];
            f3 && p2 && this.callback(c2);
          } }, { key: "remove", value: function() {
            this.element.removeEventListener("keydown", this.executeShortcut);
          } }]), l2;
        }();
        o2.default = a2;
      }]).default;
    });
  })(Do);
  var Po = /* @__PURE__ */ xe(Ae);
  var Fo = class {
    constructor() {
      this.registeredShortcuts = /* @__PURE__ */ new Map();
    }
    add(e2) {
      if (this.findShortcut(e2.on, e2.name))
        throw Error(
          `Shortcut ${e2.name} is already registered for ${e2.on}. Please remove it before add a new handler.`
        );
      const o2 = new Po({
        name: e2.name,
        on: e2.on,
        callback: e2.handler
      }), i3 = this.registeredShortcuts.get(e2.on) || [];
      this.registeredShortcuts.set(e2.on, [...i3, o2]);
    }
    remove(e2, t3) {
      const o2 = this.findShortcut(e2, t3);
      if (!o2)
        return;
      o2.remove();
      const i3 = this.registeredShortcuts.get(e2);
      this.registeredShortcuts.set(e2, i3.filter((n2) => n2 !== o2));
    }
    findShortcut(e2, t3) {
      return (this.registeredShortcuts.get(e2) || []).find(({ name: i3 }) => i3 === t3);
    }
  };
  var re2 = new Fo();
  var Ho = Object.defineProperty;
  var zo = Object.getOwnPropertyDescriptor;
  var gt = (s2, e2, t3, o2) => {
    for (var i3 = o2 > 1 ? void 0 : o2 ? zo(e2, t3) : e2, n2 = s2.length - 1, r2; n2 >= 0; n2--)
      (r2 = s2[n2]) && (i3 = (o2 ? r2(e2, t3, i3) : r2(i3)) || i3);
    return o2 && i3 && Ho(e2, t3, i3), i3;
  };
  var be = /* @__PURE__ */ ((s2) => (s2.Opened = "toolbox-opened", s2.Closed = "toolbox-closed", s2.BlockAdded = "toolbox-block-added", s2))(be || {});
  var bt = class extends we {
    constructor({ api: s2, tools: e2, i18nLabels: t3 }) {
      super(), this.opened = false, this.nodes = {
        toolbox: null
      }, this.onPopoverClose = () => {
        this.opened = false, this.emit(
          "toolbox-closed"
        );
      }, this.api = s2, this.tools = e2, this.i18nLabels = t3;
    }
    get isEmpty() {
      return this.toolsToBeDisplayed.length === 0;
    }
    static get CSS() {
      return {
        toolbox: "ce-toolbox"
      };
    }
    make() {
      return this.popover = new He({
        scopeElement: this.api.ui.nodes.redactor,
        searchable: true,
        messages: {
          nothingFound: this.i18nLabels.nothingFound,
          search: this.i18nLabels.filter
        },
        items: this.toolboxItemsToBeDisplayed
      }), this.popover.on(fe.Close, this.onPopoverClose), this.enableShortcuts(), this.nodes.toolbox = this.popover.getElement(), this.nodes.toolbox.classList.add(bt.CSS.toolbox), this.nodes.toolbox;
    }
    hasFocus() {
      var s2;
      return (s2 = this.popover) == null ? void 0 : s2.hasFocus();
    }
    destroy() {
      var s2;
      super.destroy(), this.nodes && this.nodes.toolbox && (this.nodes.toolbox.remove(), this.nodes.toolbox = null), this.removeAllShortcuts(), (s2 = this.popover) == null || s2.off(fe.Close, this.onPopoverClose);
    }
    toolButtonActivated(s2, e2) {
      this.insertNewBlock(s2, e2);
    }
    open() {
      var s2;
      this.isEmpty || ((s2 = this.popover) == null || s2.show(), this.opened = true, this.emit(
        "toolbox-opened"
      ));
    }
    close() {
      var s2;
      (s2 = this.popover) == null || s2.hide(), this.opened = false, this.emit(
        "toolbox-closed"
      );
    }
    toggle() {
      this.opened ? this.close() : this.open();
    }
    get toolsToBeDisplayed() {
      const s2 = [];
      return this.tools.forEach((e2) => {
        e2.toolbox && s2.push(e2);
      }), s2;
    }
    get toolboxItemsToBeDisplayed() {
      const s2 = (e2, t3) => ({
        icon: e2.icon,
        title: $2.t(X.toolNames, e2.title || ke(t3.name)),
        name: t3.name,
        onActivate: () => {
          this.toolButtonActivated(t3.name, e2.data);
        },
        secondaryLabel: t3.shortcut ? nt(t3.shortcut) : ""
      });
      return this.toolsToBeDisplayed.reduce((e2, t3) => (Array.isArray(t3.toolbox) ? t3.toolbox.forEach((o2) => {
        e2.push(s2(o2, t3));
      }) : t3.toolbox !== void 0 && e2.push(s2(t3.toolbox, t3)), e2), []);
    }
    enableShortcuts() {
      this.toolsToBeDisplayed.forEach((s2) => {
        const e2 = s2.shortcut;
        e2 && this.enableShortcutForTool(s2.name, e2);
      });
    }
    enableShortcutForTool(s2, e2) {
      re2.add({
        name: e2,
        on: this.api.ui.nodes.redactor,
        handler: (t3) => {
          t3.preventDefault(), this.insertNewBlock(s2);
        }
      });
    }
    removeAllShortcuts() {
      this.toolsToBeDisplayed.forEach((s2) => {
        const e2 = s2.shortcut;
        e2 && re2.remove(this.api.ui.nodes.redactor, e2);
      });
    }
    async insertNewBlock(s2, e2) {
      const t3 = this.api.blocks.getCurrentBlockIndex(), o2 = this.api.blocks.getBlockByIndex(t3);
      if (!o2)
        return;
      const i3 = o2.isEmpty ? t3 : t3 + 1;
      let n2;
      if (e2) {
        const a2 = await this.api.blocks.composeBlockData(s2);
        n2 = Object.assign(a2, e2);
      }
      const r2 = this.api.blocks.insert(
        s2,
        n2,
        void 0,
        i3,
        void 0,
        o2.isEmpty
      );
      r2.call(q.APPEND_CALLBACK), this.api.caret.setToBlock(i3), this.emit("toolbox-block-added", {
        block: r2
      }), this.api.toolbar.close();
    }
  };
  var ze = bt;
  gt([
    ae
  ], ze.prototype, "toolsToBeDisplayed", 1);
  gt([
    ae
  ], ze.prototype, "toolboxItemsToBeDisplayed", 1);
  var mt = "block hovered";
  var jo = class extends S {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      super({
        config: e2,
        eventsDispatcher: t3
      }), this.tooltip = new Fe();
    }
    get CSS() {
      return {
        toolbar: "ce-toolbar",
        content: "ce-toolbar__content",
        actions: "ce-toolbar__actions",
        actionsOpened: "ce-toolbar__actions--opened",
        toolbarOpened: "ce-toolbar--opened",
        openedToolboxHolderModifier: "codex-editor--toolbox-opened",
        plusButton: "ce-toolbar__plus",
        plusButtonShortcut: "ce-toolbar__plus-shortcut",
        settingsToggler: "ce-toolbar__settings-btn",
        settingsTogglerHidden: "ce-toolbar__settings-btn--hidden"
      };
    }
    get opened() {
      return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);
    }
    get toolbox() {
      return {
        opened: this.toolboxInstance.opened,
        close: () => {
          this.toolboxInstance.close();
        },
        open: () => {
          this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();
        },
        toggle: () => this.toolboxInstance.toggle(),
        hasFocus: () => this.toolboxInstance.hasFocus()
      };
    }
    get blockActions() {
      return {
        hide: () => {
          this.nodes.actions.classList.remove(this.CSS.actionsOpened);
        },
        show: () => {
          this.nodes.actions.classList.add(this.CSS.actionsOpened);
        }
      };
    }
    get blockTunesToggler() {
      return {
        hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),
        show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)
      };
    }
    toggleReadOnly(e2) {
      e2 ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : (this.drawUI(), this.enableModuleBindings());
    }
    moveAndOpen(e2 = this.Editor.BlockManager.currentBlock) {
      if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e2)
        return;
      this.hoveredBlock = e2;
      const t3 = e2.holder, { isMobile: o2 } = this.Editor.UI, i3 = e2.pluginsContent, n2 = window.getComputedStyle(i3), r2 = parseInt(n2.paddingTop, 10), a2 = t3.offsetHeight;
      let l2;
      o2 ? l2 = t3.offsetTop + a2 : l2 = t3.offsetTop + r2, this.nodes.wrapper.style.top = `${Math.floor(l2)}px`, this.Editor.BlockManager.blocks.length === 1 && e2.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();
    }
    close() {
      this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), this.toolboxInstance.close(), this.Editor.BlockSettings.close());
    }
    open(e2 = true) {
      oe(() => {
        this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e2 ? this.blockActions.show() : this.blockActions.hide();
      }, 50)();
    }
    make() {
      this.nodes.wrapper = d.make("div", this.CSS.toolbar), ["content", "actions"].forEach((t3) => {
        this.nodes[t3] = d.make("div", this.CSS[t3]);
      }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make("div", this.CSS.plusButton, {
        innerHTML: Mo
      }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, "click", () => {
        this.tooltip.hide(true), this.plusButtonClicked();
      }, false);
      const e2 = d.make("div");
      e2.appendChild(document.createTextNode($2.ui(X.ui.toolbar.toolbox, "Add"))), e2.appendChild(d.make("div", this.CSS.plusButtonShortcut, {
        textContent: "\u21E5 Tab"
      })), this.tooltip.onHover(this.nodes.plusButton, e2, {
        hidingDelay: 400
      }), this.nodes.settingsToggler = d.make("span", this.CSS.settingsToggler, {
        innerHTML: Io
      }), d.append(this.nodes.actions, this.nodes.settingsToggler), this.tooltip.onHover(
        this.nodes.settingsToggler,
        $2.ui(X.ui.blockTunes.toggler, "Click to tune"),
        {
          hidingDelay: 400
        }
      ), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);
    }
    makeToolbox() {
      return this.toolboxInstance = new ze({
        api: this.Editor.API.methods,
        tools: this.Editor.Tools.blockTools,
        i18nLabels: {
          filter: $2.ui(X.ui.popover, "Filter"),
          nothingFound: $2.ui(X.ui.popover, "Nothing found")
        }
      }), this.toolboxInstance.on(be.Opened, () => {
        this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.Closed, () => {
        this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);
      }), this.toolboxInstance.on(be.BlockAdded, ({ block: e2 }) => {
        const { BlockManager: t3, Caret: o2 } = this.Editor, i3 = t3.getBlockById(e2.id);
        i3.inputs.length === 0 && (i3 === t3.lastBlock ? (t3.insertAtEnd(), o2.setToBlock(t3.lastBlock)) : o2.setToBlock(t3.nextBlock));
      }), this.toolboxInstance.make();
    }
    plusButtonClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.toggle();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.settingsToggler, "mousedown", (e2) => {
        e2.stopPropagation(), this.settingsTogglerClicked(), this.toolboxInstance.opened && this.toolboxInstance.close(), this.tooltip.hide(true);
      }, true), ee() || this.eventsDispatcher.on(mt, (e2) => {
        this.Editor.BlockSettings.opened || this.toolboxInstance.opened || this.moveAndOpen(e2.block);
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    settingsTogglerClicked() {
      this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);
    }
    drawUI() {
      this.Editor.BlockSettings.make(), this.make();
    }
    destroy() {
      this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy(), this.tooltip.destroy();
    }
  };
  var ye = /* @__PURE__ */ ((s2) => (s2[s2.Block = 0] = "Block", s2[s2.Inline = 1] = "Inline", s2[s2.Tune = 2] = "Tune", s2))(ye || {});
  var me = /* @__PURE__ */ ((s2) => (s2.Shortcut = "shortcut", s2.Toolbox = "toolbox", s2.EnabledInlineTools = "inlineToolbar", s2.EnabledBlockTunes = "tunes", s2.Config = "config", s2))(me || {});
  var kt = /* @__PURE__ */ ((s2) => (s2.Shortcut = "shortcut", s2.SanitizeConfig = "sanitize", s2))(kt || {});
  var se = /* @__PURE__ */ ((s2) => (s2.IsEnabledLineBreaks = "enableLineBreaks", s2.Toolbox = "toolbox", s2.ConversionConfig = "conversionConfig", s2.IsReadOnlySupported = "isReadOnlySupported", s2.PasteConfig = "pasteConfig", s2))(se || {});
  var je = /* @__PURE__ */ ((s2) => (s2.IsInline = "isInline", s2.Title = "title", s2))(je || {});
  var vt = /* @__PURE__ */ ((s2) => (s2.IsTune = "isTune", s2))(vt || {});
  var Ue = class {
    constructor({
      name: e2,
      constructable: t3,
      config: o2,
      api: i3,
      isDefault: n2,
      isInternal: r2 = false,
      defaultPlaceholder: a2
    }) {
      this.api = i3, this.name = e2, this.constructable = t3, this.config = o2, this.isDefault = n2, this.isInternal = r2, this.defaultPlaceholder = a2;
    }
    get settings() {
      const e2 = this.config.config || {};
      return this.isDefault && !("placeholder" in e2) && this.defaultPlaceholder && (e2.placeholder = this.defaultPlaceholder), e2;
    }
    reset() {
      if (D(this.constructable.reset))
        return this.constructable.reset();
    }
    prepare() {
      if (D(this.constructable.prepare))
        return this.constructable.prepare({
          toolName: this.name,
          config: this.settings
        });
    }
    get shortcut() {
      const e2 = this.constructable.shortcut;
      return this.config.shortcut || e2;
    }
    get sanitizeConfig() {
      return this.constructable.sanitize || {};
    }
    isInline() {
      return this.type === 1;
    }
    isBlock() {
      return this.type === 0;
    }
    isTune() {
      return this.type === 2;
    }
  };
  var Uo = class extends S {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      super({
        config: e2,
        eventsDispatcher: t3
      }), this.CSS = {
        inlineToolbar: "ce-inline-toolbar",
        inlineToolbarShowed: "ce-inline-toolbar--showed",
        inlineToolbarLeftOriented: "ce-inline-toolbar--left-oriented",
        inlineToolbarRightOriented: "ce-inline-toolbar--right-oriented",
        inlineToolbarShortcut: "ce-inline-toolbar__shortcut",
        buttonsWrapper: "ce-inline-toolbar__buttons",
        actionsWrapper: "ce-inline-toolbar__actions",
        inlineToolButton: "ce-inline-tool",
        inputField: "cdx-input",
        focusedButton: "ce-inline-tool--focused",
        conversionToggler: "ce-inline-toolbar__dropdown",
        conversionTogglerArrow: "ce-inline-toolbar__dropdown-arrow",
        conversionTogglerHidden: "ce-inline-toolbar__dropdown--hidden",
        conversionTogglerContent: "ce-inline-toolbar__dropdown-content",
        togglerAndButtonsWrapper: "ce-inline-toolbar__toggler-and-button-wrapper"
      }, this.opened = false, this.toolbarVerticalMargin = ee() ? 20 : 6, this.buttonsList = null, this.width = 0, this.flipper = null, this.tooltip = new Fe();
    }
    toggleReadOnly(e2) {
      e2 ? (this.destroy(), this.Editor.ConversionToolbar.destroy()) : this.make();
    }
    tryToShow(e2 = false, t3 = true) {
      if (!this.allowedToShow()) {
        e2 && this.close();
        return;
      }
      this.move(), this.open(t3), this.Editor.Toolbar.close();
    }
    move() {
      const e2 = m.rect, t3 = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), o2 = {
        x: e2.x - t3.left,
        y: e2.y + e2.height - t3.top + this.toolbarVerticalMargin
      };
      e2.width && (o2.x += Math.floor(e2.width / 2));
      const i3 = o2.x - this.width / 2, n2 = o2.x + this.width / 2;
      this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarLeftOriented,
        i3 < this.Editor.UI.contentRect.left
      ), this.nodes.wrapper.classList.toggle(
        this.CSS.inlineToolbarRightOriented,
        n2 > this.Editor.UI.contentRect.right
      ), this.nodes.wrapper.style.left = Math.floor(o2.x) + "px", this.nodes.wrapper.style.top = Math.floor(o2.y) + "px";
    }
    close() {
      this.opened && (this.Editor.ReadOnly.isEnabled || (this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed), Array.from(this.toolsInstances.entries()).forEach(([e2, t3]) => {
        const o2 = this.getToolShortcut(e2);
        o2 && re2.remove(this.Editor.UI.nodes.redactor, o2), D(t3.clear) && t3.clear();
      }), this.opened = false, this.flipper.deactivate(), this.Editor.ConversionToolbar.close()));
    }
    open(e2 = true) {
      if (this.opened)
        return;
      this.addToolsFiltered(), this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed), this.buttonsList = this.nodes.buttons.querySelectorAll(`.${this.CSS.inlineToolButton}`), this.opened = true, e2 && this.Editor.ConversionToolbar.hasTools() ? this.setConversionTogglerContent() : this.nodes.conversionToggler.hidden = true;
      let t3 = Array.from(this.buttonsList);
      t3.unshift(this.nodes.conversionToggler), t3 = t3.filter((o2) => !o2.hidden), this.flipper.activate(t3);
    }
    containsNode(e2) {
      return this.nodes.wrapper.contains(e2);
    }
    destroy() {
      this.flipper && (this.flipper.deactivate(), this.flipper = null), this.removeAllNodes(), this.tooltip.destroy();
    }
    make() {
      this.nodes.wrapper = d.make("div", [
        this.CSS.inlineToolbar,
        ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []
      ]), this.nodes.togglerAndButtonsWrapper = d.make("div", this.CSS.togglerAndButtonsWrapper), this.nodes.buttons = d.make("div", this.CSS.buttonsWrapper), this.nodes.actions = d.make("div", this.CSS.actionsWrapper), this.listeners.on(this.nodes.wrapper, "mousedown", (e2) => {
        e2.target.closest(`.${this.CSS.actionsWrapper}`) || e2.preventDefault();
      }), d.append(this.nodes.wrapper, [this.nodes.togglerAndButtonsWrapper, this.nodes.actions]), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper), this.addConversionToggler(), d.append(this.nodes.togglerAndButtonsWrapper, this.nodes.buttons), this.prepareConversionToolbar(), this.recalculateWidth(), this.enableFlipper();
    }
    allowedToShow() {
      const e2 = ["IMG", "INPUT"], t3 = m.get(), o2 = m.text;
      if (!t3 || !t3.anchorNode || t3.isCollapsed || o2.length < 1)
        return false;
      const i3 = d.isElement(t3.anchorNode) ? t3.anchorNode : t3.anchorNode.parentElement;
      if (t3 && e2.includes(i3.tagName) || i3.closest('[contenteditable="true"]') === null)
        return false;
      const r2 = this.Editor.BlockManager.getBlock(t3.anchorNode);
      return r2 ? r2.tool.inlineTools.size !== 0 : false;
    }
    recalculateWidth() {
      this.width = this.nodes.wrapper.offsetWidth;
    }
    addConversionToggler() {
      this.nodes.conversionToggler = d.make("div", this.CSS.conversionToggler), this.nodes.conversionTogglerContent = d.make("div", this.CSS.conversionTogglerContent);
      const e2 = d.make("div", this.CSS.conversionTogglerArrow, {
        innerHTML: pt
      });
      this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent), this.nodes.conversionToggler.appendChild(e2), this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler), this.listeners.on(this.nodes.conversionToggler, "click", () => {
        this.Editor.ConversionToolbar.toggle((t3) => {
          !t3 && this.opened ? this.flipper.activate() : this.opened && this.flipper.deactivate();
        });
      }), ee() === false && this.tooltip.onHover(this.nodes.conversionToggler, $2.ui(X.ui.inlineToolbar.converter, "Convert to"), {
        placement: "top",
        hidingDelay: 100
      });
    }
    async setConversionTogglerContent() {
      const { BlockManager: e2 } = this.Editor, { currentBlock: t3 } = e2, o2 = t3.name, i3 = t3.tool.conversionConfig, n2 = i3 && i3.export;
      this.nodes.conversionToggler.hidden = !n2, this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden, !n2);
      const r2 = await t3.getActiveToolboxEntry() || {};
      this.nodes.conversionTogglerContent.innerHTML = r2.icon || r2.title || ke(o2);
    }
    prepareConversionToolbar() {
      const e2 = this.Editor.ConversionToolbar.make();
      d.append(this.nodes.wrapper, e2);
    }
    addToolsFiltered() {
      const e2 = m.get(), t3 = this.Editor.BlockManager.getBlock(e2.anchorNode);
      this.nodes.buttons.innerHTML = "", this.nodes.actions.innerHTML = "", this.toolsInstances = /* @__PURE__ */ new Map(), Array.from(t3.tool.inlineTools.values()).forEach((o2) => {
        this.addTool(o2);
      }), this.recalculateWidth();
    }
    addTool(e2) {
      const t3 = e2.create(), o2 = t3.render();
      if (!o2) {
        T("Render method must return an instance of Node", "warn", e2.name);
        return;
      }
      if (o2.dataset.tool = e2.name, this.nodes.buttons.appendChild(o2), this.toolsInstances.set(e2.name, t3), D(t3.renderActions)) {
        const a2 = t3.renderActions();
        this.nodes.actions.appendChild(a2);
      }
      this.listeners.on(o2, "click", (a2) => {
        this.toolClicked(t3), a2.preventDefault();
      });
      const i3 = this.getToolShortcut(e2.name);
      if (i3)
        try {
          this.enableShortcuts(t3, i3);
        } catch (e3) {
        }
      const n2 = d.make("div"), r2 = $2.t(
        X.toolNames,
        e2.title || ke(e2.name)
      );
      n2.appendChild(d.text(r2)), i3 && n2.appendChild(d.make("div", this.CSS.inlineToolbarShortcut, {
        textContent: nt(i3)
      })), ee() === false && this.tooltip.onHover(o2, n2, {
        placement: "top",
        hidingDelay: 100
      }), t3.checkState(m.get());
    }
    getToolShortcut(e2) {
      const { Tools: t3 } = this.Editor, o2 = t3.inlineTools.get(e2), i3 = t3.internal.inlineTools;
      return Array.from(i3.keys()).includes(e2) ? this.inlineTools[e2][kt.Shortcut] : o2.shortcut;
    }
    enableShortcuts(e2, t3) {
      re2.add({
        name: t3,
        handler: (o2) => {
          const { currentBlock: i3 } = this.Editor.BlockManager;
          i3 && i3.tool.enabledInlineTools && (o2.preventDefault(), this.toolClicked(e2));
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toolClicked(e2) {
      const t3 = m.range;
      e2.surround(t3), this.checkToolsState(), e2.renderActions !== void 0 && this.flipper.deactivate();
    }
    checkToolsState() {
      this.toolsInstances.forEach((e2) => {
        e2.checkState(m.get());
      });
    }
    get inlineTools() {
      const e2 = {};
      return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t3, o2]) => {
        e2[t3] = o2.create();
      }), e2;
    }
    enableFlipper() {
      this.flipper = new G({
        focusedItemClass: this.CSS.focusedButton,
        allowedKeys: [
          B.ENTER,
          B.TAB
        ]
      });
    }
  };
  var $o = class extends S {
    keydown(e2) {
      switch (this.beforeKeydownProcessing(e2), e2.keyCode) {
        case B.BACKSPACE:
          this.backspace(e2);
          break;
        case B.ENTER:
          this.enter(e2);
          break;
        case B.DOWN:
        case B.RIGHT:
          this.arrowRightAndDown(e2);
          break;
        case B.UP:
        case B.LEFT:
          this.arrowLeftAndUp(e2);
          break;
        case B.TAB:
          this.tabPressed(e2);
          break;
      }
    }
    beforeKeydownProcessing(e2) {
      this.needToolbarClosing(e2) && tt(e2.keyCode) && (this.Editor.Toolbar.close(), this.Editor.ConversionToolbar.close(), e2.ctrlKey || e2.metaKey || e2.altKey || e2.shiftKey || (this.Editor.BlockManager.clearFocused(), this.Editor.BlockSelection.clearSelection(e2)));
    }
    keyup(e2) {
      e2.shiftKey || this.Editor.UI.checkEmptiness();
    }
    tabPressed(e2) {
      this.Editor.BlockSelection.clearSelection(e2);
      const { BlockManager: t3, InlineToolbar: o2, ConversionToolbar: i3 } = this.Editor, n2 = t3.currentBlock;
      if (!n2)
        return;
      const r2 = n2.isEmpty, a2 = n2.tool.isDefault && r2, l2 = !r2 && i3.opened, c2 = !r2 && !m.isCollapsed && o2.opened;
      a2 ? this.activateToolbox() : !l2 && !c2 && this.activateBlockSettings();
    }
    dragOver(e2) {
      const t3 = this.Editor.BlockManager.getBlockByChildNode(e2.target);
      t3.dropTarget = true;
    }
    dragLeave(e2) {
      const t3 = this.Editor.BlockManager.getBlockByChildNode(e2.target);
      t3.dropTarget = false;
    }
    handleCommandC(e2) {
      const { BlockSelection: t3 } = this.Editor;
      t3.anyBlockSelected && t3.copySelectedBlocks(e2);
    }
    handleCommandX(e2) {
      const { BlockSelection: t3, BlockManager: o2, Caret: i3 } = this.Editor;
      t3.anyBlockSelected && t3.copySelectedBlocks(e2).then(() => {
        const n2 = o2.removeSelectedBlocks(), r2 = o2.insertDefaultBlockAtIndex(n2, true);
        i3.setToBlock(r2, i3.positions.START), t3.clearSelection(e2);
      });
    }
    enter(e2) {
      const { BlockManager: t3, UI: o2 } = this.Editor;
      if (t3.currentBlock.tool.isLineBreaksEnabled || o2.someToolbarOpened && o2.someFlipperButtonFocused || e2.shiftKey)
        return;
      let n2 = this.Editor.BlockManager.currentBlock;
      this.Editor.Caret.isAtStart && !this.Editor.BlockManager.currentBlock.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : this.Editor.Caret.isAtEnd ? n2 = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : n2 = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(n2), this.Editor.Toolbar.moveAndOpen(n2), e2.preventDefault();
    }
    backspace(e2) {
      const { BlockManager: t3, BlockSelection: o2, Caret: i3 } = this.Editor, n2 = t3.currentBlock, r2 = n2.tool;
      if (n2.selected || n2.isEmpty && n2.currentInput === n2.firstInput) {
        e2.preventDefault();
        const c2 = t3.currentBlockIndex;
        t3.previousBlock && t3.previousBlock.inputs.length === 0 ? t3.removeBlock(c2 - 1) : t3.removeBlock(), i3.setToBlock(
          t3.currentBlock,
          c2 ? i3.positions.END : i3.positions.START
        ), this.Editor.Toolbar.close(), o2.clearSelection(e2);
        return;
      }
      if (r2.isLineBreaksEnabled && !i3.isAtStart)
        return;
      const a2 = t3.currentBlockIndex === 0;
      i3.isAtStart && m.isCollapsed && n2.currentInput === n2.firstInput && !a2 && (e2.preventDefault(), this.mergeBlocks());
    }
    mergeBlocks() {
      const { BlockManager: e2, Caret: t3, Toolbar: o2 } = this.Editor, i3 = e2.previousBlock, n2 = e2.currentBlock;
      if (n2.name !== i3.name || !i3.mergeable) {
        if (i3.inputs.length === 0 || i3.isEmpty) {
          e2.removeBlock(e2.currentBlockIndex - 1), t3.setToBlock(e2.currentBlock), o2.close();
          return;
        }
        t3.navigatePrevious() && o2.close();
        return;
      }
      t3.createShadow(i3.pluginsContent), e2.mergeBlocks(i3, n2).then(() => {
        t3.restoreCaret(i3.pluginsContent), i3.pluginsContent.normalize(), o2.close();
      });
    }
    arrowRightAndDown(e2) {
      const t3 = G.usedKeys.includes(e2.keyCode) && (!e2.shiftKey || e2.keyCode === B.TAB);
      if (this.Editor.UI.someToolbarOpened && t3)
        return;
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const o2 = this.Editor.Caret.isAtEnd || this.Editor.BlockSelection.anyBlockSelected;
      if (e2.shiftKey && e2.keyCode === B.DOWN && o2) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState();
        return;
      }
      (e2.keyCode === B.DOWN || e2.keyCode === B.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) ? e2.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e2);
    }
    arrowLeftAndUp(e2) {
      if (this.Editor.UI.someToolbarOpened) {
        if (G.usedKeys.includes(e2.keyCode) && (!e2.shiftKey || e2.keyCode === B.TAB))
          return;
        this.Editor.UI.closeAllToolbars();
      }
      this.Editor.BlockManager.clearFocused(), this.Editor.Toolbar.close();
      const t3 = this.Editor.Caret.isAtStart || this.Editor.BlockSelection.anyBlockSelected;
      if (e2.shiftKey && e2.keyCode === B.UP && t3) {
        this.Editor.CrossBlockSelection.toggleBlockSelectedState(false);
        return;
      }
      (e2.keyCode === B.UP || e2.keyCode === B.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) ? e2.preventDefault() : oe(() => {
        this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();
      }, 20)(), this.Editor.BlockSelection.clearSelection(e2);
    }
    needToolbarClosing(e2) {
      const t3 = e2.keyCode === B.ENTER && this.Editor.Toolbar.toolbox.opened, o2 = e2.keyCode === B.ENTER && this.Editor.BlockSettings.opened, i3 = e2.keyCode === B.ENTER && this.Editor.InlineToolbar.opened, n2 = e2.keyCode === B.ENTER && this.Editor.ConversionToolbar.opened, r2 = e2.keyCode === B.TAB;
      return !(e2.shiftKey || r2 || t3 || o2 || i3 || n2);
    }
    activateToolbox() {
      this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();
    }
    activateBlockSettings() {
      this.Editor.Toolbar.opened || (this.Editor.BlockManager.currentBlock.focused = true, this.Editor.Toolbar.moveAndOpen()), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();
    }
  };
  var Ce = class {
    constructor(e2) {
      this.blocks = [], this.workingArea = e2;
    }
    get length() {
      return this.blocks.length;
    }
    get array() {
      return this.blocks;
    }
    get nodes() {
      return it(this.workingArea.children);
    }
    static set(e2, t3, o2) {
      return isNaN(Number(t3)) ? (Reflect.set(e2, t3, o2), true) : (e2.insert(+t3, o2), true);
    }
    static get(e2, t3) {
      return isNaN(Number(t3)) ? Reflect.get(e2, t3) : e2.get(+t3);
    }
    push(e2) {
      this.blocks.push(e2), this.insertToDOM(e2);
    }
    swap(e2, t3) {
      const o2 = this.blocks[t3];
      d.swap(this.blocks[e2].holder, o2.holder), this.blocks[t3] = this.blocks[e2], this.blocks[e2] = o2;
    }
    move(e2, t3) {
      const o2 = this.blocks.splice(t3, 1)[0], i3 = e2 - 1, n2 = Math.max(0, i3), r2 = this.blocks[n2];
      e2 > 0 ? this.insertToDOM(o2, "afterend", r2) : this.insertToDOM(o2, "beforebegin", r2), this.blocks.splice(e2, 0, o2);
      const a2 = this.composeBlockEvent("move", {
        fromIndex: t3,
        toIndex: e2
      });
      o2.call(q.MOVED, a2);
    }
    insert(e2, t3, o2 = false) {
      if (!this.length) {
        this.push(t3);
        return;
      }
      e2 > this.length && (e2 = this.length), o2 && (this.blocks[e2].holder.remove(), this.blocks[e2].call(q.REMOVED));
      const i3 = o2 ? 1 : 0;
      if (this.blocks.splice(e2, i3, t3), e2 > 0) {
        const n2 = this.blocks[e2 - 1];
        this.insertToDOM(t3, "afterend", n2);
      } else {
        const n2 = this.blocks[e2 + 1];
        n2 ? this.insertToDOM(t3, "beforebegin", n2) : this.insertToDOM(t3);
      }
    }
    remove(e2) {
      isNaN(e2) && (e2 = this.length - 1), this.blocks[e2].holder.remove(), this.blocks[e2].call(q.REMOVED), this.blocks.splice(e2, 1);
    }
    removeAll() {
      this.workingArea.innerHTML = "", this.blocks.forEach((e2) => e2.call(q.REMOVED)), this.blocks.length = 0;
    }
    insertAfter(e2, t3) {
      const o2 = this.blocks.indexOf(e2);
      this.insert(o2 + 1, t3);
    }
    get(e2) {
      return this.blocks[e2];
    }
    indexOf(e2) {
      return this.blocks.indexOf(e2);
    }
    insertToDOM(e2, t3, o2) {
      t3 ? o2.holder.insertAdjacentElement(t3, e2.holder) : this.workingArea.appendChild(e2.holder), e2.call(q.RENDERED);
    }
    composeBlockEvent(e2, t3) {
      return new CustomEvent(e2, {
        detail: t3
      });
    }
  };
  var Je = "block-removed";
  var Qe = "block-added";
  var Wo = "block-moved";
  var Yo = "block-changed";
  var Ko = class extends S {
    constructor() {
      super(...arguments), this._currentBlockIndex = -1, this._blocks = null;
    }
    get currentBlockIndex() {
      return this._currentBlockIndex;
    }
    set currentBlockIndex(e2) {
      this._currentBlockIndex = e2;
    }
    get firstBlock() {
      return this._blocks[0];
    }
    get lastBlock() {
      return this._blocks[this._blocks.length - 1];
    }
    get currentBlock() {
      return this._blocks[this.currentBlockIndex];
    }
    set currentBlock(e2) {
      this.currentBlockIndex = this.getBlockIndex(e2);
    }
    get nextBlock() {
      return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];
    }
    get nextContentfulBlock() {
      return this.blocks.slice(this.currentBlockIndex + 1).find((t3) => !!t3.inputs.length);
    }
    get previousContentfulBlock() {
      return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t3) => !!t3.inputs.length);
    }
    get previousBlock() {
      return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];
    }
    get blocks() {
      return this._blocks.array;
    }
    get isEditorEmpty() {
      return this.blocks.every((e2) => e2.isEmpty);
    }
    prepare() {
      const e2 = new Ce(this.Editor.UI.nodes.redactor);
      this._blocks = new Proxy(e2, {
        set: Ce.set,
        get: Ce.get
      }), this.listeners.on(
        document,
        "copy",
        (t3) => this.Editor.BlockEvents.handleCommandC(t3)
      );
    }
    toggleReadOnly(e2) {
      e2 ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    composeBlock({
      tool: e2,
      data: t3 = {},
      id: o2 = void 0,
      tunes: i3 = {}
    }) {
      const n2 = this.Editor.ReadOnly.isEnabled, r2 = this.Editor.Tools.blockTools.get(e2), a2 = new F({
        id: o2,
        data: t3,
        tool: r2,
        api: this.Editor.API,
        readOnly: n2,
        tunesData: i3
      }, this.eventsDispatcher);
      return n2 || this.bindBlockEvents(a2), a2;
    }
    insert({
      id: e2 = void 0,
      tool: t3 = this.config.defaultBlock,
      data: o2 = {},
      index: i3,
      needToFocus: n2 = true,
      replace: r2 = false,
      tunes: a2 = {}
    } = {}) {
      let l2 = i3;
      l2 === void 0 && (l2 = this.currentBlockIndex + (r2 ? 0 : 1));
      const c2 = this.composeBlock({
        id: e2,
        tool: t3,
        data: o2,
        tunes: a2
      });
      return r2 && this.blockDidMutated(Je, this.getBlockByIndex(l2), {
        index: l2
      }), this._blocks.insert(l2, c2, r2), this.blockDidMutated(Qe, c2, {
        index: l2
      }), n2 ? this.currentBlockIndex = l2 : l2 <= this.currentBlockIndex && this.currentBlockIndex++, c2;
    }
    replace({
      tool: e2 = this.config.defaultBlock,
      data: t3 = {}
    }) {
      return this.insert({
        tool: e2,
        data: t3,
        index: this.currentBlockIndex,
        replace: true
      });
    }
    paste(e2, t3, o2 = false) {
      const i3 = this.insert({
        tool: e2,
        replace: o2
      });
      try {
        i3.call(q.ON_PASTE, t3);
      } catch (n2) {
        T(`${e2}: onPaste callback call is failed`, "error", n2);
      }
      return i3;
    }
    insertDefaultBlockAtIndex(e2, t3 = false) {
      const o2 = this.composeBlock({ tool: this.config.defaultBlock });
      return this._blocks[e2] = o2, this.blockDidMutated(Qe, o2, {
        index: e2
      }), t3 ? this.currentBlockIndex = e2 : e2 <= this.currentBlockIndex && this.currentBlockIndex++, o2;
    }
    insertAtEnd() {
      return this.currentBlockIndex = this.blocks.length - 1, this.insert();
    }
    async mergeBlocks(e2, t3) {
      const o2 = this._blocks.indexOf(t3);
      if (t3.isEmpty)
        return;
      const i3 = await t3.data;
      V(i3) || await e2.mergeWith(i3), this.removeBlock(o2), this.currentBlockIndex = this._blocks.indexOf(e2);
    }
    removeBlock(e2 = this.currentBlockIndex) {
      if (!this.validateIndex(e2))
        throw new Error("Can't find a Block to remove");
      const t3 = this._blocks[e2];
      t3.destroy(), this._blocks.remove(e2), this.blockDidMutated(Je, t3, {
        index: e2
      }), this.currentBlockIndex >= e2 && this.currentBlockIndex--, this.blocks.length ? e2 === 0 && (this.currentBlockIndex = 0) : (this.currentBlockIndex = -1, this.insert());
    }
    removeSelectedBlocks() {
      let e2;
      for (let t3 = this.blocks.length - 1; t3 >= 0; t3--)
        this.blocks[t3].selected && (this.removeBlock(t3), e2 = t3);
      return e2;
    }
    removeAllBlocks() {
      for (let e2 = this.blocks.length - 1; e2 >= 0; e2--)
        this._blocks.remove(e2);
      this.currentBlockIndex = -1, this.insert(), this.currentBlock.firstInput.focus();
    }
    split() {
      const e2 = this.Editor.Caret.extractFragmentFromCaretPosition(), t3 = d.make("div");
      t3.appendChild(e2);
      const o2 = {
        text: d.isEmpty(t3) ? "" : t3.innerHTML
      };
      return this.insert({ data: o2 });
    }
    getBlockByIndex(e2) {
      return e2 === -1 && (e2 = this._blocks.length - 1), this._blocks[e2];
    }
    getBlockIndex(e2) {
      return this._blocks.indexOf(e2);
    }
    getBlockById(e2) {
      return this._blocks.array.find((t3) => t3.id === e2);
    }
    getBlock(e2) {
      d.isElement(e2) || (e2 = e2.parentNode);
      const t3 = this._blocks.nodes, o2 = e2.closest(`.${F.CSS.wrapper}`), i3 = t3.indexOf(o2);
      if (i3 >= 0)
        return this._blocks[i3];
    }
    highlightCurrentNode() {
      this.clearFocused(), this.currentBlock.focused = true;
    }
    clearFocused() {
      this.blocks.forEach((e2) => {
        e2.focused = false;
      });
    }
    setCurrentBlockByChildNode(e2) {
      d.isElement(e2) || (e2 = e2.parentNode);
      const t3 = e2.closest(`.${F.CSS.wrapper}`);
      if (!t3)
        return;
      const o2 = t3.closest(`.${this.Editor.UI.CSS.editorWrapper}`);
      if (o2 != null && o2.isEqualNode(this.Editor.UI.nodes.wrapper))
        return this.currentBlockIndex = this._blocks.nodes.indexOf(t3), this.currentBlock.updateCurrentInput(), this.currentBlock;
    }
    getBlockByChildNode(e2) {
      d.isElement(e2) || (e2 = e2.parentNode);
      const t3 = e2.closest(`.${F.CSS.wrapper}`);
      return this.blocks.find((o2) => o2.holder === t3);
    }
    swap(e2, t3) {
      this._blocks.swap(e2, t3), this.currentBlockIndex = t3;
    }
    move(e2, t3 = this.currentBlockIndex) {
      if (isNaN(e2) || isNaN(t3)) {
        T("Warning during 'move' call: incorrect indices provided.", "warn");
        return;
      }
      if (!this.validateIndex(e2) || !this.validateIndex(t3)) {
        T("Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.", "warn");
        return;
      }
      this._blocks.move(e2, t3), this.currentBlockIndex = e2, this.blockDidMutated(Wo, this.currentBlock, {
        fromIndex: t3,
        toIndex: e2
      });
    }
    dropPointer() {
      this.currentBlockIndex = -1, this.clearFocused();
    }
    clear(e2 = false) {
      this._blocks.removeAll(), this.dropPointer(), e2 && this.insert(), this.Editor.UI.checkEmptiness();
    }
    async destroy() {
      await Promise.all(this.blocks.map((e2) => e2.destroy()));
    }
    bindBlockEvents(e2) {
      const { BlockEvents: t3 } = this.Editor;
      this.readOnlyMutableListeners.on(e2.holder, "keydown", (o2) => {
        t3.keydown(o2);
      }), this.readOnlyMutableListeners.on(e2.holder, "keyup", (o2) => {
        t3.keyup(o2);
      }), this.readOnlyMutableListeners.on(e2.holder, "dragover", (o2) => {
        t3.dragOver(o2);
      }), this.readOnlyMutableListeners.on(e2.holder, "dragleave", (o2) => {
        t3.dragLeave(o2);
      }), e2.on("didMutated", (o2) => this.blockDidMutated(Yo, o2, {
        index: this.getBlockIndex(o2)
      }));
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(
        document,
        "cut",
        (e2) => this.Editor.BlockEvents.handleCommandX(e2)
      ), this.blocks.forEach((e2) => {
        this.bindBlockEvents(e2);
      });
    }
    validateIndex(e2) {
      return !(e2 < 0 || e2 >= this._blocks.length);
    }
    blockDidMutated(e2, t3, o2) {
      const i3 = new CustomEvent(e2, {
        detail: __spreadValues({
          target: new he(t3)
        }, o2)
      });
      return this.eventsDispatcher.emit(lt, {
        event: i3
      }), t3;
    }
  };
  var Xo = class extends S {
    constructor() {
      super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
    }
    get sanitizerConfig() {
      return {
        p: {},
        h1: {},
        h2: {},
        h3: {},
        h4: {},
        h5: {},
        h6: {},
        ol: {},
        ul: {},
        li: {},
        br: true,
        img: {
          src: true,
          width: true,
          height: true
        },
        a: {
          href: true
        },
        b: {},
        i: {},
        u: {}
      };
    }
    get allBlocksSelected() {
      const { BlockManager: e2 } = this.Editor;
      return e2.blocks.every((t3) => t3.selected === true);
    }
    set allBlocksSelected(e2) {
      const { BlockManager: t3 } = this.Editor;
      t3.blocks.forEach((o2) => {
        o2.selected = e2;
      }), this.clearCache();
    }
    get anyBlockSelected() {
      const { BlockManager: e2 } = this.Editor;
      return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e2.blocks.some((t3) => t3.selected === true)), this.anyBlockSelectedCache;
    }
    get selectedBlocks() {
      return this.Editor.BlockManager.blocks.filter((e2) => e2.selected);
    }
    prepare() {
      this.selection = new m(), re2.add({
        name: "CMD+A",
        handler: (e2) => {
          const { BlockManager: t3, ReadOnly: o2 } = this.Editor;
          if (o2.isEnabled) {
            e2.preventDefault(), this.selectAllBlocks();
            return;
          }
          t3.currentBlock && this.handleCommandA(e2);
        },
        on: this.Editor.UI.nodes.redactor
      });
    }
    toggleReadOnly() {
      m.get().removeAllRanges(), this.allBlocksSelected = false;
    }
    unSelectBlockByIndex(e2) {
      const { BlockManager: t3 } = this.Editor;
      let o2;
      isNaN(e2) ? o2 = t3.currentBlock : o2 = t3.getBlockByIndex(e2), o2.selected = false, this.clearCache();
    }
    clearSelection(e2, t3 = false) {
      const { BlockManager: o2, Caret: i3, RectangleSelection: n2 } = this.Editor;
      this.needToSelectAll = false, this.nativeInputSelected = false, this.readyToBlockSelection = false;
      const r2 = e2 && e2 instanceof KeyboardEvent, a2 = r2 && tt(e2.keyCode);
      if (this.anyBlockSelected && r2 && a2 && !m.isSelectionExists) {
        const l2 = o2.removeSelectedBlocks();
        o2.insertDefaultBlockAtIndex(l2, true), i3.setToBlock(o2.currentBlock), oe(() => {
          const c2 = e2.key;
          i3.insertContentAtCaretPosition(c2.length > 1 ? "" : c2);
        }, 20)();
      }
      if (this.Editor.CrossBlockSelection.clear(e2), !this.anyBlockSelected || n2.isRectActivated()) {
        this.Editor.RectangleSelection.clearSelection();
        return;
      }
      t3 && this.selection.restore(), this.allBlocksSelected = false;
    }
    copySelectedBlocks(e2) {
      e2.preventDefault();
      const t3 = d.make("div");
      this.selectedBlocks.forEach((n2) => {
        const r2 = Z(n2.holder.innerHTML, this.sanitizerConfig), a2 = d.make("p");
        a2.innerHTML = r2, t3.appendChild(a2);
      });
      const o2 = Array.from(t3.childNodes).map((n2) => n2.textContent).join(`

`), i3 = t3.innerHTML;
      return e2.clipboardData.setData("text/plain", o2), e2.clipboardData.setData("text/html", i3), Promise.all(this.selectedBlocks.map((n2) => n2.save())).then((n2) => {
        try {
          e2.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(n2));
        } catch (e3) {
        }
      });
    }
    selectBlockByIndex(e2) {
      const { BlockManager: t3 } = this.Editor;
      t3.clearFocused();
      let o2;
      isNaN(e2) ? o2 = t3.currentBlock : o2 = t3.getBlockByIndex(e2), this.selection.save(), m.get().removeAllRanges(), o2.selected = true, this.clearCache(), this.Editor.InlineToolbar.close();
    }
    clearCache() {
      this.anyBlockSelectedCache = null;
    }
    destroy() {
      re2.remove(this.Editor.UI.nodes.redactor, "CMD+A");
    }
    handleCommandA(e2) {
      if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e2.target) && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      const o2 = this.Editor.BlockManager.getBlock(e2.target).inputs;
      if (o2.length > 1 && !this.readyToBlockSelection) {
        this.readyToBlockSelection = true;
        return;
      }
      if (o2.length === 1 && !this.needToSelectAll) {
        this.needToSelectAll = true;
        return;
      }
      this.needToSelectAll ? (e2.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = false, this.readyToBlockSelection = false, this.Editor.ConversionToolbar.close()) : this.readyToBlockSelection && (e2.preventDefault(), this.selectBlockByIndex(), this.needToSelectAll = true);
    }
    selectAllBlocks() {
      this.selection.save(), m.get().removeAllRanges(), this.allBlocksSelected = true, this.Editor.InlineToolbar.close();
    }
  };
  var ve = class extends S {
    get positions() {
      return {
        START: "start",
        END: "end",
        DEFAULT: "default"
      };
    }
    static get CSS() {
      return {
        shadowCaret: "cdx-shadow-caret"
      };
    }
    get isAtStart() {
      const e2 = m.get(), t3 = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput);
      let o2 = e2.focusNode;
      if (d.isNativeInput(t3))
        return t3.selectionEnd === 0;
      if (!e2.anchorNode)
        return false;
      let i3 = o2.textContent.search(/\S/);
      i3 === -1 && (i3 = 0);
      let n2 = e2.focusOffset;
      return o2.nodeType !== Node.TEXT_NODE && o2.childNodes.length && (o2.childNodes[n2] ? (o2 = o2.childNodes[n2], n2 = 0) : (o2 = o2.childNodes[n2 - 1], n2 = o2.textContent.length)), (d.isLineBreakTag(t3) || d.isEmpty(t3)) && this.getHigherLevelSiblings(o2, "left").every((l2) => {
        const c2 = d.isLineBreakTag(l2), u2 = l2.children.length === 1 && d.isLineBreakTag(l2.children[0]), h2 = c2 || u2;
        return d.isEmpty(l2) && !h2;
      }) && n2 === i3 ? true : t3 === null || o2 === t3 && n2 <= i3;
    }
    get isAtEnd() {
      const e2 = m.get();
      let t3 = e2.focusNode;
      const o2 = d.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput, true);
      if (d.isNativeInput(o2))
        return o2.selectionEnd === o2.value.length;
      if (!e2.focusNode)
        return false;
      let i3 = e2.focusOffset;
      if (t3.nodeType !== Node.TEXT_NODE && t3.childNodes.length && (t3.childNodes[i3 - 1] ? (t3 = t3.childNodes[i3 - 1], i3 = t3.textContent.length) : (t3 = t3.childNodes[0], i3 = 0)), d.isLineBreakTag(o2) || d.isEmpty(o2)) {
        const r2 = this.getHigherLevelSiblings(t3, "right");
        if (r2.every((l2, c2) => c2 === r2.length - 1 && d.isLineBreakTag(l2) || d.isEmpty(l2) && !d.isLineBreakTag(l2)) && i3 === t3.textContent.length)
          return true;
      }
      const n2 = o2.textContent.replace(/\s+$/, "");
      return t3 === o2 && i3 >= n2.length;
    }
    setToBlock(e2, t3 = this.positions.DEFAULT, o2 = 0) {
      const { BlockManager: i3 } = this.Editor;
      let n2;
      switch (t3) {
        case this.positions.START:
          n2 = e2.firstInput;
          break;
        case this.positions.END:
          n2 = e2.lastInput;
          break;
        default:
          n2 = e2.currentInput;
      }
      if (!n2)
        return;
      const r2 = d.getDeepestNode(n2, t3 === this.positions.END), a2 = d.getContentLength(r2);
      switch (true) {
        case t3 === this.positions.START:
          o2 = 0;
          break;
        case t3 === this.positions.END:
        case o2 > a2:
          o2 = a2;
          break;
      }
      oe(() => {
        this.set(r2, o2);
      }, 20)(), i3.setCurrentBlockByChildNode(e2.holder), i3.currentBlock.currentInput = n2;
    }
    setToInput(e2, t3 = this.positions.DEFAULT, o2 = 0) {
      const { currentBlock: i3 } = this.Editor.BlockManager, n2 = d.getDeepestNode(e2);
      switch (t3) {
        case this.positions.START:
          this.set(n2, 0);
          break;
        case this.positions.END:
          this.set(n2, d.getContentLength(n2));
          break;
        default:
          o2 && this.set(n2, o2);
      }
      i3.currentInput = e2;
    }
    set(e2, t3 = 0) {
      const { top: o2, bottom: i3 } = m.setCursor(e2, t3), { innerHeight: n2 } = window;
      o2 < 0 && window.scrollBy(0, o2), i3 > n2 && window.scrollBy(0, i3 - n2);
    }
    setToTheLastBlock() {
      const e2 = this.Editor.BlockManager.lastBlock;
      if (e2)
        if (e2.tool.isDefault && e2.isEmpty)
          this.setToBlock(e2);
        else {
          const t3 = this.Editor.BlockManager.insertAtEnd();
          this.setToBlock(t3);
        }
    }
    extractFragmentFromCaretPosition() {
      const e2 = m.get();
      if (e2.rangeCount) {
        const t3 = e2.getRangeAt(0), o2 = this.Editor.BlockManager.currentBlock.currentInput;
        if (t3.deleteContents(), o2)
          if (d.isNativeInput(o2)) {
            const i3 = o2, n2 = document.createDocumentFragment(), r2 = i3.value.substring(0, i3.selectionStart), a2 = i3.value.substring(i3.selectionStart);
            return n2.textContent = a2, i3.value = r2, n2;
          } else {
            const i3 = t3.cloneRange();
            return i3.selectNodeContents(o2), i3.setStart(t3.endContainer, t3.endOffset), i3.extractContents();
          }
      }
    }
    navigateNext() {
      const { BlockManager: e2 } = this.Editor, { currentBlock: t3, nextContentfulBlock: o2 } = e2, { nextInput: i3 } = t3, n2 = this.isAtEnd;
      let r2 = o2;
      if (!r2 && !i3) {
        if (t3.tool.isDefault || !n2)
          return false;
        r2 = e2.insertAtEnd();
      }
      return n2 ? (i3 ? this.setToInput(i3, this.positions.START) : this.setToBlock(r2, this.positions.START), true) : false;
    }
    navigatePrevious() {
      const { currentBlock: e2, previousContentfulBlock: t3 } = this.Editor.BlockManager;
      if (!e2)
        return false;
      const { previousInput: o2 } = e2;
      return !t3 && !o2 ? false : this.isAtStart ? (o2 ? this.setToInput(o2, this.positions.END) : this.setToBlock(t3, this.positions.END), true) : false;
    }
    createShadow(e2) {
      const t3 = document.createElement("span");
      t3.classList.add(ve.CSS.shadowCaret), e2.insertAdjacentElement("beforeend", t3);
    }
    restoreCaret(e2) {
      const t3 = e2.querySelector(`.${ve.CSS.shadowCaret}`);
      if (!t3)
        return;
      new m().expandToTag(t3), setTimeout(() => {
        const i3 = document.createRange();
        i3.selectNode(t3), i3.extractContents();
      }, 50);
    }
    insertContentAtCaretPosition(e2) {
      const t3 = document.createDocumentFragment(), o2 = document.createElement("div"), i3 = m.get(), n2 = m.range;
      o2.innerHTML = e2, Array.from(o2.childNodes).forEach((l2) => t3.appendChild(l2)), t3.childNodes.length === 0 && t3.appendChild(new Text());
      const r2 = t3.lastChild;
      n2.deleteContents(), n2.insertNode(t3);
      const a2 = document.createRange();
      a2.setStart(r2, r2.textContent.length), i3.removeAllRanges(), i3.addRange(a2);
    }
    getHigherLevelSiblings(e2, t3) {
      let o2 = e2;
      const i3 = [];
      for (; o2.parentNode && o2.parentNode.contentEditable !== "true"; )
        o2 = o2.parentNode;
      const n2 = t3 === "left" ? "previousSibling" : "nextSibling";
      for (; o2[n2]; )
        o2 = o2[n2], i3.push(o2);
      return i3;
    }
  };
  var Vo = class extends S {
    constructor() {
      super(...arguments), this.onMouseUp = () => {
        this.listeners.off(document, "mouseover", this.onMouseOver), this.listeners.off(document, "mouseup", this.onMouseUp);
      }, this.onMouseOver = (e2) => {
        const { BlockManager: t3, BlockSelection: o2 } = this.Editor, i3 = t3.getBlockByChildNode(e2.relatedTarget) || this.lastSelectedBlock, n2 = t3.getBlockByChildNode(e2.target);
        if (!(!i3 || !n2) && n2 !== i3) {
          if (i3 === this.firstSelectedBlock) {
            m.get().removeAllRanges(), i3.selected = true, n2.selected = true, o2.clearCache();
            return;
          }
          if (n2 === this.firstSelectedBlock) {
            i3.selected = false, n2.selected = false, o2.clearCache();
            return;
          }
          this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i3, n2), this.lastSelectedBlock = n2;
        }
      };
    }
    async prepare() {
      this.listeners.on(document, "mousedown", (e2) => {
        this.enableCrossBlockSelection(e2);
      });
    }
    watchSelection(e2) {
      if (e2.button !== _t.LEFT)
        return;
      const { BlockManager: t3 } = this.Editor;
      this.firstSelectedBlock = t3.getBlock(e2.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, "mouseover", this.onMouseOver), this.listeners.on(document, "mouseup", this.onMouseUp);
    }
    get isCrossBlockSelectionStarted() {
      return !!this.firstSelectedBlock && !!this.lastSelectedBlock;
    }
    toggleBlockSelectedState(e2 = true) {
      const { BlockManager: t3, BlockSelection: o2 } = this.Editor;
      this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t3.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = true, o2.clearCache(), m.get().removeAllRanges());
      const i3 = t3.blocks.indexOf(this.lastSelectedBlock) + (e2 ? 1 : -1), n2 = t3.blocks[i3];
      n2 && (this.lastSelectedBlock.selected !== n2.selected ? (n2.selected = true, o2.clearCache()) : (this.lastSelectedBlock.selected = false, o2.clearCache()), this.lastSelectedBlock = n2, this.Editor.InlineToolbar.close(), n2.holder.scrollIntoView({
        block: "nearest"
      }));
    }
    clear(e2) {
      const { BlockManager: t3, BlockSelection: o2, Caret: i3 } = this.Editor, n2 = t3.blocks.indexOf(this.firstSelectedBlock), r2 = t3.blocks.indexOf(this.lastSelectedBlock);
      if (o2.anyBlockSelected && n2 > -1 && r2 > -1)
        if (e2 && e2 instanceof KeyboardEvent)
          switch (e2.keyCode) {
            case B.DOWN:
            case B.RIGHT:
              i3.setToBlock(t3.blocks[Math.max(n2, r2)], i3.positions.END);
              break;
            case B.UP:
            case B.LEFT:
              i3.setToBlock(t3.blocks[Math.min(n2, r2)], i3.positions.START);
              break;
            default:
              i3.setToBlock(t3.blocks[Math.max(n2, r2)], i3.positions.END);
          }
        else
          i3.setToBlock(t3.blocks[Math.max(n2, r2)], i3.positions.END);
      this.firstSelectedBlock = this.lastSelectedBlock = null;
    }
    enableCrossBlockSelection(e2) {
      const { UI: t3 } = this.Editor;
      m.isCollapsed || this.Editor.BlockSelection.clearSelection(e2), t3.nodes.redactor.contains(e2.target) ? this.watchSelection(e2) : this.Editor.BlockSelection.clearSelection(e2);
    }
    toggleBlocksSelectedState(e2, t3) {
      const { BlockManager: o2, BlockSelection: i3 } = this.Editor, n2 = o2.blocks.indexOf(e2), r2 = o2.blocks.indexOf(t3), a2 = e2.selected !== t3.selected;
      for (let l2 = Math.min(n2, r2); l2 <= Math.max(n2, r2); l2++) {
        const c2 = o2.blocks[l2];
        c2 !== this.firstSelectedBlock && c2 !== (a2 ? e2 : t3) && (o2.blocks[l2].selected = !o2.blocks[l2].selected, i3.clearCache());
      }
    }
  };
  var Zo = class extends S {
    constructor() {
      super(...arguments), this.isStartedAtEditor = false;
    }
    toggleReadOnly(e2) {
      e2 ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    enableModuleBindings() {
      const { UI: e2 } = this.Editor;
      this.readOnlyMutableListeners.on(e2.nodes.holder, "drop", async (t3) => {
        await this.processDrop(t3);
      }, true), this.readOnlyMutableListeners.on(e2.nodes.holder, "dragstart", () => {
        this.processDragStart();
      }), this.readOnlyMutableListeners.on(e2.nodes.holder, "dragover", (t3) => {
        this.processDragOver(t3);
      }, true);
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    async processDrop(e2) {
      const {
        BlockManager: t3,
        Caret: o2,
        Paste: i3
      } = this.Editor;
      e2.preventDefault(), t3.blocks.forEach((r2) => {
        r2.dropTarget = false;
      }), m.isAtEditor && !m.isCollapsed && this.isStartedAtEditor && document.execCommand("delete"), this.isStartedAtEditor = false;
      const n2 = t3.setCurrentBlockByChildNode(e2.target);
      if (n2)
        this.Editor.Caret.setToBlock(n2, o2.positions.END);
      else {
        const r2 = t3.setCurrentBlockByChildNode(t3.lastBlock.holder);
        this.Editor.Caret.setToBlock(r2, o2.positions.END);
      }
      await i3.processDataTransfer(e2.dataTransfer, true);
    }
    processDragStart() {
      m.isAtEditor && !m.isCollapsed && (this.isStartedAtEditor = true), this.Editor.InlineToolbar.close();
    }
    processDragOver(e2) {
      e2.preventDefault();
    }
  };
  var Go = class extends S {
    constructor({ config: e2, eventsDispatcher: t3 }) {
      super({
        config: e2,
        eventsDispatcher: t3
      }), this.disabled = false, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = 400, this.mutationObserver = new MutationObserver((o2) => {
        this.redactorChanged(o2);
      }), this.eventsDispatcher.on(lt, (o2) => {
        this.particularBlockChanged(o2.event);
      }), this.eventsDispatcher.on(ct, () => {
        this.disable();
      }), this.eventsDispatcher.on(dt, () => {
        this.enable();
      });
    }
    enable() {
      this.mutationObserver.observe(
        this.Editor.UI.nodes.redactor,
        {
          childList: true,
          subtree: true,
          characterData: true,
          attributes: true
        }
      ), this.disabled = false;
    }
    disable() {
      this.mutationObserver.disconnect(), this.disabled = true;
    }
    particularBlockChanged(e2) {
      this.disabled || !D(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e2.detail.target.id}:event:${e2.type}`, e2), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {
        let t3;
        this.batchingOnChangeQueue.size === 1 ? t3 = this.batchingOnChangeQueue.values().next().value : t3 = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t3), this.batchingOnChangeQueue.clear();
      }, this.batchTime));
    }
    redactorChanged(e2) {
      this.eventsDispatcher.emit(Me, {
        mutations: e2
      });
    }
  };
  var xt = class extends S {
    constructor() {
      super(...arguments), this.MIME_TYPE = "application/x-editor-js", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (s2) => {
        try {
          const e2 = s2.create({}, {}, false);
          if (s2.pasteConfig === false) {
            this.exceptionList.push(s2.name);
            return;
          }
          if (!D(e2.onPaste))
            return;
          this.getTagsConfig(s2), this.getFilesConfig(s2), this.getPatternsConfig(s2);
        } catch (e2) {
          T(
            `Paste handling for \xAB${s2.name}\xBB Tool hasn't been set up because of the error`,
            "warn",
            e2
          );
        }
      }, this.handlePasteEvent = async (s2) => {
        const { BlockManager: e2, Toolbar: t3 } = this.Editor;
        !e2.currentBlock || this.isNativeBehaviour(s2.target) && !s2.clipboardData.types.includes("Files") || e2.currentBlock && this.exceptionList.includes(e2.currentBlock.name) || (s2.preventDefault(), this.processDataTransfer(s2.clipboardData), e2.clearFocused(), t3.close());
      };
    }
    async prepare() {
      this.processTools();
    }
    toggleReadOnly(s2) {
      s2 ? this.unsetCallback() : this.setCallback();
    }
    async processDataTransfer(s2, e2 = false) {
      const { Tools: t3 } = this.Editor, o2 = s2.types;
      if ((o2.includes ? o2.includes("Files") : o2.contains("Files")) && !V(this.toolsFiles)) {
        await this.processFiles(s2.files);
        return;
      }
      const n2 = s2.getData(this.MIME_TYPE), r2 = s2.getData("text/plain");
      let a2 = s2.getData("text/html");
      if (n2)
        try {
          this.insertEditorJSData(JSON.parse(n2));
          return;
        } catch (e3) {
        }
      e2 && r2.trim() && a2.trim() && (a2 = "<p>" + (a2.trim() ? a2 : r2) + "</p>");
      const l2 = Object.keys(this.toolsTags).reduce((h2, f3) => {
        var _a;
        return h2[f3.toLowerCase()] = (_a = this.toolsTags[f3].sanitizationConfig) != null ? _a : {}, h2;
      }, {}), c2 = Object.assign({}, l2, t3.getAllInlineToolsSanitizeConfig(), { br: {} }), u2 = Z(a2, c2);
      !u2.trim() || u2.trim() === r2 || !d.isHTMLString(u2) ? await this.processText(r2) : await this.processText(u2, true);
    }
    async processText(s2, e2 = false) {
      const { Caret: t3, BlockManager: o2 } = this.Editor, i3 = e2 ? this.processHTML(s2) : this.processPlain(s2);
      if (!i3.length)
        return;
      if (i3.length === 1) {
        i3[0].isBlock ? this.processSingleBlock(i3.pop()) : this.processInlinePaste(i3.pop());
        return;
      }
      const r2 = o2.currentBlock && o2.currentBlock.tool.isDefault && o2.currentBlock.isEmpty;
      i3.map(
        async (a2, l2) => this.insertBlock(a2, l2 === 0 && r2)
      ), o2.currentBlock && t3.setToBlock(o2.currentBlock, t3.positions.END);
    }
    setCallback() {
      this.listeners.on(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    unsetCallback() {
      this.listeners.off(this.Editor.UI.nodes.holder, "paste", this.handlePasteEvent);
    }
    processTools() {
      const s2 = this.Editor.Tools.blockTools;
      Array.from(s2.values()).forEach(this.processTool);
    }
    collectTagNames(s2) {
      return J(s2) ? [s2] : j(s2) ? Object.keys(s2) : [];
    }
    getTagsConfig(s2) {
      if (s2.pasteConfig === false)
        return;
      const e2 = s2.pasteConfig.tags || [], t3 = [];
      e2.forEach((o2) => {
        const i3 = this.collectTagNames(o2);
        t3.push(...i3), i3.forEach((n2) => {
          if (Object.prototype.hasOwnProperty.call(this.toolsTags, n2)) {
            T(
              `Paste handler for \xAB${s2.name}\xBB Tool on \xAB${n2}\xBB tag is skipped because it is already used by \xAB${this.toolsTags[n2].tool.name}\xBB Tool.`,
              "warn"
            );
            return;
          }
          const r2 = j(o2) ? o2[n2] : null;
          this.toolsTags[n2.toUpperCase()] = {
            tool: s2,
            sanitizationConfig: r2
          };
        });
      }), this.tagsByTool[s2.name] = t3.map((o2) => o2.toUpperCase());
    }
    getFilesConfig(s2) {
      if (s2.pasteConfig === false)
        return;
      const { files: e2 = {} } = s2.pasteConfig;
      let { extensions: t3, mimeTypes: o2 } = e2;
      !t3 && !o2 || (t3 && !Array.isArray(t3) && (T(`\xABextensions\xBB property of the onDrop config for \xAB${s2.name}\xBB Tool should be an array`), t3 = []), o2 && !Array.isArray(o2) && (T(`\xABmimeTypes\xBB property of the onDrop config for \xAB${s2.name}\xBB Tool should be an array`), o2 = []), o2 && (o2 = o2.filter((i3) => Dt(i3) ? true : (T(`MIME type value \xAB${i3}\xBB for the \xAB${s2.name}\xBB Tool is not a valid MIME type`, "warn"), false))), this.toolsFiles[s2.name] = {
        extensions: t3 || [],
        mimeTypes: o2 || []
      });
    }
    getPatternsConfig(s2) {
      s2.pasteConfig === false || !s2.pasteConfig.patterns || V(s2.pasteConfig.patterns) || Object.entries(s2.pasteConfig.patterns).forEach(([e2, t3]) => {
        t3 instanceof RegExp || T(
          `Pattern ${t3} for \xAB${s2.name}\xBB Tool is skipped because it should be a Regexp instance.`,
          "warn"
        ), this.toolsPatterns.push({
          key: e2,
          pattern: t3,
          tool: s2
        });
      });
    }
    isNativeBehaviour(s2) {
      return d.isNativeInput(s2);
    }
    async processFiles(s2) {
      const { BlockManager: e2 } = this.Editor;
      let t3;
      t3 = await Promise.all(
        Array.from(s2).map((n2) => this.processFile(n2))
      ), t3 = t3.filter((n2) => !!n2);
      const i3 = e2.currentBlock.tool.isDefault && e2.currentBlock.isEmpty;
      t3.forEach(
        (n2, r2) => {
          e2.paste(n2.type, n2.event, r2 === 0 && i3);
        }
      );
    }
    async processFile(s2) {
      const e2 = Rt(s2), t3 = Object.entries(this.toolsFiles).find(([n2, { mimeTypes: r2, extensions: a2 }]) => {
        const [l2, c2] = s2.type.split("/"), u2 = a2.find((f3) => f3.toLowerCase() === e2.toLowerCase()), h2 = r2.find((f3) => {
          const [v2, p2] = f3.split("/");
          return v2 === l2 && (p2 === c2 || p2 === "*");
        });
        return !!u2 || !!h2;
      });
      if (!t3)
        return;
      const [o2] = t3;
      return {
        event: this.composePasteEvent("file", {
          file: s2
        }),
        type: o2
      };
    }
    processHTML(s2) {
      const { Tools: e2 } = this.Editor, t3 = d.make("DIV");
      return t3.innerHTML = s2, this.getNodes(t3).map((i3) => {
        let n2, r2 = e2.defaultTool, a2 = false;
        switch (i3.nodeType) {
          case Node.DOCUMENT_FRAGMENT_NODE:
            n2 = d.make("div"), n2.appendChild(i3);
            break;
          case Node.ELEMENT_NODE:
            n2 = i3, a2 = true, this.toolsTags[n2.tagName] && (r2 = this.toolsTags[n2.tagName].tool);
            break;
        }
        const { tags: l2 } = r2.pasteConfig || { tags: [] }, c2 = l2.reduce((f3, v2) => (this.collectTagNames(v2).forEach((k2) => {
          const _2 = j(v2) ? v2[k2] : null;
          f3[k2.toLowerCase()] = _2 || {};
        }), f3), {}), u2 = Object.assign({}, c2, r2.baseSanitizeConfig);
        if (n2.tagName.toLowerCase() === "table") {
          const f3 = Z(n2.outerHTML, u2);
          n2 = d.make("div", void 0, {
            innerHTML: f3
          }).firstChild;
        } else
          n2.innerHTML = Z(n2.innerHTML, u2);
        const h2 = this.composePasteEvent("tag", {
          data: n2
        });
        return {
          content: n2,
          isBlock: a2,
          tool: r2.name,
          event: h2
        };
      }).filter((i3) => {
        const n2 = d.isEmpty(i3.content), r2 = d.isSingleTag(i3.content);
        return !n2 || r2;
      });
    }
    processPlain(s2) {
      const { defaultBlock: e2 } = this.config;
      if (!s2)
        return [];
      const t3 = e2;
      return s2.split(/\r?\n/).filter((o2) => o2.trim()).map((o2) => {
        const i3 = d.make("div");
        i3.textContent = o2;
        const n2 = this.composePasteEvent("tag", {
          data: i3
        });
        return {
          content: i3,
          tool: t3,
          isBlock: false,
          event: n2
        };
      });
    }
    async processSingleBlock(s2) {
      const { Caret: e2, BlockManager: t3 } = this.Editor, { currentBlock: o2 } = t3;
      if (!o2 || s2.tool !== o2.name || !d.containsOnlyInlineElements(s2.content.innerHTML)) {
        this.insertBlock(s2, (o2 == null ? void 0 : o2.tool.isDefault) && o2.isEmpty);
        return;
      }
      e2.insertContentAtCaretPosition(s2.content.innerHTML);
    }
    async processInlinePaste(s2) {
      const { BlockManager: e2, Caret: t3 } = this.Editor, { content: o2 } = s2;
      if (e2.currentBlock && e2.currentBlock.tool.isDefault && o2.textContent.length < xt.PATTERN_PROCESSING_MAX_LENGTH) {
        const n2 = await this.processPattern(o2.textContent);
        if (n2) {
          const r2 = e2.currentBlock && e2.currentBlock.tool.isDefault && e2.currentBlock.isEmpty, a2 = e2.paste(n2.tool, n2.event, r2);
          t3.setToBlock(a2, t3.positions.END);
          return;
        }
      }
      if (e2.currentBlock && e2.currentBlock.currentInput) {
        const n2 = e2.currentBlock.tool.baseSanitizeConfig;
        document.execCommand(
          "insertHTML",
          false,
          Z(o2.innerHTML, n2)
        );
      } else
        this.insertBlock(s2);
    }
    async processPattern(s2) {
      const e2 = this.toolsPatterns.find((o2) => {
        const i3 = o2.pattern.exec(s2);
        return i3 ? s2 === i3.shift() : false;
      });
      return e2 ? {
        event: this.composePasteEvent("pattern", {
          key: e2.key,
          data: s2
        }),
        tool: e2.tool.name
      } : void 0;
    }
    insertBlock(s2, e2 = false) {
      const { BlockManager: t3, Caret: o2 } = this.Editor, { currentBlock: i3 } = t3;
      let n2;
      if (e2 && i3 && i3.isEmpty) {
        n2 = t3.paste(s2.tool, s2.event, true), o2.setToBlock(n2, o2.positions.END);
        return;
      }
      n2 = t3.paste(s2.tool, s2.event), o2.setToBlock(n2, o2.positions.END);
    }
    insertEditorJSData(s2) {
      const { BlockManager: e2, Caret: t3, Tools: o2 } = this.Editor;
      ht(
        s2,
        (n2) => o2.blockTools.get(n2).sanitizeConfig
      ).forEach(({ tool: n2, data: r2 }, a2) => {
        let l2 = false;
        a2 === 0 && (l2 = e2.currentBlock && e2.currentBlock.tool.isDefault && e2.currentBlock.isEmpty);
        const c2 = e2.insert({
          tool: n2,
          data: r2,
          replace: l2
        });
        t3.setToBlock(c2, t3.positions.END);
      });
    }
    processElementNode(s2, e2, t3) {
      const o2 = Object.keys(this.toolsTags), i3 = s2, { tool: n2 } = this.toolsTags[i3.tagName] || {}, r2 = this.tagsByTool[n2 == null ? void 0 : n2.name] || [], a2 = o2.includes(i3.tagName), l2 = d.blockElements.includes(i3.tagName.toLowerCase()), c2 = Array.from(i3.children).some(
        ({ tagName: h2 }) => o2.includes(h2) && !r2.includes(h2)
      ), u2 = Array.from(i3.children).some(
        ({ tagName: h2 }) => d.blockElements.includes(h2.toLowerCase())
      );
      if (!l2 && !a2 && !c2)
        return t3.appendChild(i3), [...e2, t3];
      if (a2 && !c2 || l2 && !u2 && !c2)
        return [...e2, t3, i3];
    }
    getNodes(s2) {
      const e2 = Array.from(s2.childNodes);
      let t3;
      const o2 = (i3, n2) => {
        if (d.isEmpty(n2) && !d.isSingleTag(n2))
          return i3;
        const r2 = i3[i3.length - 1];
        let a2 = new DocumentFragment();
        switch (r2 && d.isFragment(r2) && (a2 = i3.pop()), n2.nodeType) {
          case Node.ELEMENT_NODE:
            if (t3 = this.processElementNode(n2, i3, a2), t3)
              return t3;
            break;
          case Node.TEXT_NODE:
            return a2.appendChild(n2), [...i3, a2];
          default:
            return [...i3, a2];
        }
        return [...i3, ...Array.from(n2.childNodes).reduce(o2, [])];
      };
      return e2.reduce(o2, []);
    }
    composePasteEvent(s2, e2) {
      return new CustomEvent(s2, {
        detail: e2
      });
    }
  };
  var wt = xt;
  wt.PATTERN_PROCESSING_MAX_LENGTH = 450;
  var qo = class extends S {
    constructor() {
      super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = false;
    }
    get isEnabled() {
      return this.readOnlyEnabled;
    }
    async prepare() {
      const { Tools: e2 } = this.Editor, { blockTools: t3 } = e2, o2 = [];
      Array.from(t3.entries()).forEach(([i3, n2]) => {
        n2.isReadOnlySupported || o2.push(i3);
      }), this.toolsDontSupportReadOnly = o2, this.config.readOnly && o2.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly);
    }
    async toggle(e2 = !this.readOnlyEnabled) {
      e2 && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();
      const t3 = this.readOnlyEnabled;
      this.readOnlyEnabled = e2;
      for (const i3 in this.Editor)
        this.Editor[i3].toggleReadOnly && this.Editor[i3].toggleReadOnly(e2);
      if (t3 === e2)
        return this.readOnlyEnabled;
      const o2 = await this.Editor.Saver.save();
      return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(o2.blocks), this.readOnlyEnabled;
    }
    throwCriticalError() {
      throw new at(
        `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(", ")} don't support read-only mode.`
      );
    }
  };
  var pe = class extends S {
    constructor() {
      super(...arguments), this.isRectSelectionActivated = false, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = false, this.isScrolling = false, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];
    }
    static get CSS() {
      return {
        overlay: "codex-editor-overlay",
        overlayContainer: "codex-editor-overlay__container",
        rect: "codex-editor-overlay__rectangle",
        topScrollZone: "codex-editor-overlay__scroll-zone--top",
        bottomScrollZone: "codex-editor-overlay__scroll-zone--bottom"
      };
    }
    prepare() {
      this.enableModuleBindings();
    }
    startSelection(e2, t3) {
      const o2 = document.elementFromPoint(e2 - window.pageXOffset, t3 - window.pageYOffset);
      o2.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = false, this.clearSelection(), this.stackOfSelected = []);
      const n2 = [
        `.${F.CSS.content}`,
        `.${this.Editor.Toolbar.CSS.toolbar}`,
        `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`
      ], r2 = o2.closest("." + this.Editor.UI.CSS.editorWrapper), a2 = n2.some((l2) => !!o2.closest(l2));
      !r2 || a2 || (this.mousedown = true, this.startX = e2, this.startY = t3);
    }
    endSelection() {
      this.mousedown = false, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = "none";
    }
    isRectActivated() {
      return this.isRectSelectionActivated;
    }
    clearSelection() {
      this.isRectSelectionActivated = false;
    }
    enableModuleBindings() {
      const { container: e2 } = this.genHTML();
      this.listeners.on(e2, "mousedown", (t3) => {
        this.processMouseDown(t3);
      }, false), this.listeners.on(document.body, "mousemove", Te((t3) => {
        this.processMouseMove(t3);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseleave", () => {
        this.processMouseLeave();
      }), this.listeners.on(window, "scroll", Te((t3) => {
        this.processScroll(t3);
      }, 10), {
        passive: true
      }), this.listeners.on(document.body, "mouseup", () => {
        this.processMouseUp();
      }, false);
    }
    processMouseDown(e2) {
      if (e2.button !== this.MAIN_MOUSE_BUTTON)
        return;
      e2.target.closest(d.allInputsSelector) !== null || this.startSelection(e2.pageX, e2.pageY);
    }
    processMouseMove(e2) {
      this.changingRectangle(e2), this.scrollByZones(e2.clientY);
    }
    processMouseLeave() {
      this.clearSelection(), this.endSelection();
    }
    processScroll(e2) {
      this.changingRectangle(e2);
    }
    processMouseUp() {
      this.clearSelection(), this.endSelection();
    }
    scrollByZones(e2) {
      if (this.inScrollZone = null, e2 <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e2 <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {
        this.isScrolling = false;
        return;
      }
      this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = true);
    }
    genHTML() {
      const { UI: e2 } = this.Editor, t3 = e2.nodes.holder.querySelector("." + e2.CSS.editorWrapper), o2 = d.make("div", pe.CSS.overlay, {}), i3 = d.make("div", pe.CSS.overlayContainer, {}), n2 = d.make("div", pe.CSS.rect, {});
      return i3.appendChild(n2), o2.appendChild(i3), t3.appendChild(o2), this.overlayRectangle = n2, {
        container: t3,
        overlay: o2
      };
    }
    scrollVertical(e2) {
      if (!(this.inScrollZone && this.mousedown))
        return;
      const t3 = window.pageYOffset;
      window.scrollBy(0, e2), this.mouseY += window.pageYOffset - t3, setTimeout(() => {
        this.scrollVertical(e2);
      }, 0);
    }
    changingRectangle(e2) {
      if (!this.mousedown)
        return;
      e2.pageY !== void 0 && (this.mouseX = e2.pageX, this.mouseY = e2.pageY);
      const { rightPos: t3, leftPos: o2, index: i3 } = this.genInfoForMouseSelection(), n2 = this.startX > t3 && this.mouseX > t3, r2 = this.startX < o2 && this.mouseX < o2;
      this.rectCrossesBlocks = !(n2 || r2), this.isRectSelectionActivated || (this.rectCrossesBlocks = false, this.isRectSelectionActivated = true, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = "block"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i3 !== void 0 && (this.trySelectNextBlock(i3), this.inverseSelection(), m.get().removeAllRanges());
    }
    shrinkRectangleToPoint() {
      this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;
    }
    inverseSelection() {
      const t3 = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;
      if (this.rectCrossesBlocks && !t3)
        for (const o2 of this.stackOfSelected)
          this.Editor.BlockSelection.selectBlockByIndex(o2);
      if (!this.rectCrossesBlocks && t3)
        for (const o2 of this.stackOfSelected)
          this.Editor.BlockSelection.unSelectBlockByIndex(o2);
    }
    updateRectangleSize() {
      this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);
    }
    genInfoForMouseSelection() {
      const t3 = document.body.offsetWidth / 2, o2 = this.mouseY - window.pageYOffset, i3 = document.elementFromPoint(t3, o2), n2 = this.Editor.BlockManager.getBlockByChildNode(i3);
      let r2;
      n2 !== void 0 && (r2 = this.Editor.BlockManager.blocks.findIndex((h2) => h2.holder === n2.holder));
      const a2 = this.Editor.BlockManager.lastBlock.holder.querySelector("." + F.CSS.content), l2 = Number.parseInt(window.getComputedStyle(a2).width, 10) / 2, c2 = t3 - l2, u2 = t3 + l2;
      return {
        index: r2,
        leftPos: c2,
        rightPos: u2
      };
    }
    addBlockInSelection(e2) {
      this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e2), this.stackOfSelected.push(e2);
    }
    trySelectNextBlock(e2) {
      const t3 = this.stackOfSelected[this.stackOfSelected.length - 1] === e2, o2 = this.stackOfSelected.length, i3 = 1, n2 = -1, r2 = 0;
      if (t3)
        return;
      const a2 = this.stackOfSelected[o2 - 1] - this.stackOfSelected[o2 - 2] > 0;
      let l2 = r2;
      o2 > 1 && (l2 = a2 ? i3 : n2);
      const c2 = e2 > this.stackOfSelected[o2 - 1] && l2 === i3, u2 = e2 < this.stackOfSelected[o2 - 1] && l2 === n2, f3 = !(c2 || u2 || l2 === r2);
      if (!f3 && (e2 > this.stackOfSelected[o2 - 1] || this.stackOfSelected[o2 - 1] === void 0)) {
        let k2 = this.stackOfSelected[o2 - 1] + 1 || e2;
        for (k2; k2 <= e2; k2++)
          this.addBlockInSelection(k2);
        return;
      }
      if (!f3 && e2 < this.stackOfSelected[o2 - 1]) {
        for (let k2 = this.stackOfSelected[o2 - 1] - 1; k2 >= e2; k2--)
          this.addBlockInSelection(k2);
        return;
      }
      if (!f3)
        return;
      let v2 = o2 - 1, p2;
      for (e2 > this.stackOfSelected[o2 - 1] ? p2 = () => e2 > this.stackOfSelected[v2] : p2 = () => e2 < this.stackOfSelected[v2]; p2(); )
        this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[v2]), this.stackOfSelected.pop(), v2--;
    }
  };
  var Jo = class extends S {
    async render(e2) {
      const t3 = e2.map((i3) => ({ function: () => this.insertBlock(i3) }));
      this.Editor.ModificationsObserver.disable();
      const o2 = await ot(t3);
      return this.Editor.ModificationsObserver.enable(), this.Editor.UI.checkEmptiness(), o2;
    }
    async insertBlock(e2) {
      var l2;
      const { Tools: t3, BlockManager: o2 } = this.Editor, { type: i3, data: n2, tunes: r2, id: a2 } = e2;
      if (t3.available.has(i3))
        try {
          o2.insert({
            id: a2,
            tool: i3,
            data: n2,
            tunes: r2
          });
        } catch (c2) {
          throw T(`Block \xAB${i3}\xBB skipped because of plugins error`, "warn", {
            data: n2,
            error: c2
          }), Error(c2);
        }
      else {
        const c2 = {
          savedData: {
            id: a2,
            type: i3,
            data: n2
          },
          title: i3
        };
        if (t3.unavailable.has(i3)) {
          const f3 = (l2 = t3.unavailable.get(i3).toolbox[0]) == null ? void 0 : l2.title;
          c2.title = f3 || c2.title;
        }
        const u2 = o2.insert({
          id: a2,
          tool: t3.stubTool,
          data: c2
        });
        u2.stretched = true, T(`Tool \xAB${i3}\xBB is not found. Check 'tools' property at your initial Editor.js config.`, "warn");
      }
    }
  };
  var Qo = class extends S {
    async save() {
      const { BlockManager: e2, Tools: t3 } = this.Editor, o2 = e2.blocks, i3 = [];
      try {
        o2.forEach((a2) => {
          i3.push(this.getSavedData(a2));
        });
        const n2 = await Promise.all(i3), r2 = await ht(n2, (a2) => t3.blockTools.get(a2).sanitizeConfig);
        return this.makeOutput(r2);
      } catch (n2) {
        K("Saving failed due to the Error %o", "error", n2);
      }
    }
    async getSavedData(e2) {
      const t3 = await e2.save(), o2 = t3 && await e2.validate(t3.data);
      return __spreadProps(__spreadValues({}, t3), {
        isValid: o2
      });
    }
    makeOutput(e2) {
      let t3 = 0;
      const o2 = [];
      return T("[Editor.js saving]:", "groupCollapsed"), e2.forEach(({ id: i3, tool: n2, data: r2, tunes: a2, time: l2, isValid: c2 }) => {
        if (t3 += l2, T(`${n2.charAt(0).toUpperCase() + n2.slice(1)}`, "group"), c2)
          T(r2), T(void 0, "groupEnd");
        else {
          T(`Block \xAB${n2}\xBB skipped because saved data is invalid`), T(void 0, "groupEnd");
          return;
        }
        if (n2 === this.Editor.Tools.stubTool) {
          o2.push(r2);
          return;
        }
        const u2 = __spreadValues({
          id: i3,
          type: n2,
          data: r2
        }, !V(a2) && {
          tunes: a2
        });
        o2.push(u2);
      }), T("Total", "log", t3), T(void 0, "groupEnd"), {
        time: +/* @__PURE__ */ new Date(),
        blocks: o2,
        version: "2.27.2"
      };
    }
  };
  var Ne = {};
  var ei = {
    get exports() {
      return Ne;
    },
    set exports(s2) {
      Ne = s2;
    }
  };
  (function(s2, e2) {
    (function(t3, o2) {
      s2.exports = o2();
    })(window, function() {
      return function(t3) {
        var o2 = {};
        function i3(n2) {
          if (o2[n2])
            return o2[n2].exports;
          var r2 = o2[n2] = { i: n2, l: false, exports: {} };
          return t3[n2].call(r2.exports, r2, r2.exports, i3), r2.l = true, r2.exports;
        }
        return i3.m = t3, i3.c = o2, i3.d = function(n2, r2, a2) {
          i3.o(n2, r2) || Object.defineProperty(n2, r2, { enumerable: true, get: a2 });
        }, i3.r = function(n2) {
          typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(n2, "__esModule", { value: true });
        }, i3.t = function(n2, r2) {
          if (1 & r2 && (n2 = i3(n2)), 8 & r2 || 4 & r2 && typeof n2 == "object" && n2 && n2.__esModule)
            return n2;
          var a2 = /* @__PURE__ */ Object.create(null);
          if (i3.r(a2), Object.defineProperty(a2, "default", { enumerable: true, value: n2 }), 2 & r2 && typeof n2 != "string")
            for (var l2 in n2)
              i3.d(a2, l2, function(c2) {
                return n2[c2];
              }.bind(null, l2));
          return a2;
        }, i3.n = function(n2) {
          var r2 = n2 && n2.__esModule ? function() {
            return n2.default;
          } : function() {
            return n2;
          };
          return i3.d(r2, "a", r2), r2;
        }, i3.o = function(n2, r2) {
          return Object.prototype.hasOwnProperty.call(n2, r2);
        }, i3.p = "/", i3(i3.s = 4);
      }([function(t3, o2, i3) {
        var n2 = i3(1), r2 = i3(2);
        typeof (r2 = r2.__esModule ? r2.default : r2) == "string" && (r2 = [[t3.i, r2, ""]]);
        var a2 = { insert: "head", singleton: false };
        n2(r2, a2), t3.exports = r2.locals || {};
      }, function(t3, o2, i3) {
        var n2, r2 = function() {
          return n2 === void 0 && (n2 = !!(window && document && document.all && !window.atob)), n2;
        }, a2 = function() {
          var y2 = {};
          return function(x2) {
            if (y2[x2] === void 0) {
              var w2 = document.querySelector(x2);
              if (window.HTMLIFrameElement && w2 instanceof window.HTMLIFrameElement)
                try {
                  w2 = w2.contentDocument.head;
                } catch (e3) {
                  w2 = null;
                }
              y2[x2] = w2;
            }
            return y2[x2];
          };
        }(), l2 = [];
        function c2(y2) {
          for (var x2 = -1, w2 = 0; w2 < l2.length; w2++)
            if (l2[w2].identifier === y2) {
              x2 = w2;
              break;
            }
          return x2;
        }
        function u2(y2, x2) {
          for (var w2 = {}, M2 = [], R2 = 0; R2 < y2.length; R2++) {
            var b2 = y2[R2], g2 = x2.base ? b2[0] + x2.base : b2[0], E2 = w2[g2] || 0, C2 = "".concat(g2, " ").concat(E2);
            w2[g2] = E2 + 1;
            var O2 = c2(C2), I2 = { css: b2[1], media: b2[2], sourceMap: b2[3] };
            O2 !== -1 ? (l2[O2].references++, l2[O2].updater(I2)) : l2.push({ identifier: C2, updater: A2(I2, x2), references: 1 }), M2.push(C2);
          }
          return M2;
        }
        function h2(y2) {
          var x2 = document.createElement("style"), w2 = y2.attributes || {};
          if (w2.nonce === void 0) {
            var M2 = i3.nc;
            M2 && (w2.nonce = M2);
          }
          if (Object.keys(w2).forEach(function(b2) {
            x2.setAttribute(b2, w2[b2]);
          }), typeof y2.insert == "function")
            y2.insert(x2);
          else {
            var R2 = a2(y2.insert || "head");
            if (!R2)
              throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            R2.appendChild(x2);
          }
          return x2;
        }
        var f3, v2 = (f3 = [], function(y2, x2) {
          return f3[y2] = x2, f3.filter(Boolean).join(`
`);
        });
        function p2(y2, x2, w2, M2) {
          var R2 = w2 ? "" : M2.media ? "@media ".concat(M2.media, " {").concat(M2.css, "}") : M2.css;
          if (y2.styleSheet)
            y2.styleSheet.cssText = v2(x2, R2);
          else {
            var b2 = document.createTextNode(R2), g2 = y2.childNodes;
            g2[x2] && y2.removeChild(g2[x2]), g2.length ? y2.insertBefore(b2, g2[x2]) : y2.appendChild(b2);
          }
        }
        function k2(y2, x2, w2) {
          var M2 = w2.css, R2 = w2.media, b2 = w2.sourceMap;
          if (R2 ? y2.setAttribute("media", R2) : y2.removeAttribute("media"), b2 && btoa && (M2 += `
/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(b2)))), " */")), y2.styleSheet)
            y2.styleSheet.cssText = M2;
          else {
            for (; y2.firstChild; )
              y2.removeChild(y2.firstChild);
            y2.appendChild(document.createTextNode(M2));
          }
        }
        var _2 = null, N2 = 0;
        function A2(y2, x2) {
          var w2, M2, R2;
          if (x2.singleton) {
            var b2 = N2++;
            w2 = _2 || (_2 = h2(x2)), M2 = p2.bind(null, w2, b2, false), R2 = p2.bind(null, w2, b2, true);
          } else
            w2 = h2(x2), M2 = k2.bind(null, w2, x2), R2 = function() {
              (function(g2) {
                if (g2.parentNode === null)
                  return false;
                g2.parentNode.removeChild(g2);
              })(w2);
            };
          return M2(y2), function(g2) {
            if (g2) {
              if (g2.css === y2.css && g2.media === y2.media && g2.sourceMap === y2.sourceMap)
                return;
              M2(y2 = g2);
            } else
              R2();
          };
        }
        t3.exports = function(y2, x2) {
          (x2 = x2 || {}).singleton || typeof x2.singleton == "boolean" || (x2.singleton = r2());
          var w2 = u2(y2 = y2 || [], x2);
          return function(M2) {
            if (M2 = M2 || [], Object.prototype.toString.call(M2) === "[object Array]") {
              for (var R2 = 0; R2 < w2.length; R2++) {
                var b2 = c2(w2[R2]);
                l2[b2].references--;
              }
              for (var g2 = u2(M2, x2), E2 = 0; E2 < w2.length; E2++) {
                var C2 = c2(w2[E2]);
                l2[C2].references === 0 && (l2[C2].updater(), l2.splice(C2, 1));
              }
              w2 = g2;
            }
          };
        };
      }, function(t3, o2, i3) {
        (o2 = i3(3)(false)).push([t3.i, `.ce-paragraph {
    line-height: 1.6em;
    outline: none;
}

.ce-paragraph[data-placeholder]:empty::before{
  content: attr(data-placeholder);
  color: #707684;
  font-weight: normal;
  opacity: 0;
}

/** Show placeholder at the first paragraph if Editor is empty */
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {
  opacity: 1;
}

.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,
.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {
  opacity: 0;
}

.ce-paragraph p:first-of-type{
    margin-top: 0;
}

.ce-paragraph p:last-of-type{
    margin-bottom: 0;
}
`, ""]), t3.exports = o2;
      }, function(t3, o2, i3) {
        t3.exports = function(n2) {
          var r2 = [];
          return r2.toString = function() {
            return this.map(function(a2) {
              var l2 = function(c2, u2) {
                var h2 = c2[1] || "", f3 = c2[3];
                if (!f3)
                  return h2;
                if (u2 && typeof btoa == "function") {
                  var v2 = (k2 = f3, _2 = btoa(unescape(encodeURIComponent(JSON.stringify(k2)))), N2 = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(_2), "/*# ".concat(N2, " */")), p2 = f3.sources.map(function(A2) {
                    return "/*# sourceURL=".concat(f3.sourceRoot || "").concat(A2, " */");
                  });
                  return [h2].concat(p2).concat([v2]).join(`
`);
                }
                var k2, _2, N2;
                return [h2].join(`
`);
              }(a2, n2);
              return a2[2] ? "@media ".concat(a2[2], " {").concat(l2, "}") : l2;
            }).join("");
          }, r2.i = function(a2, l2, c2) {
            typeof a2 == "string" && (a2 = [[null, a2, ""]]);
            var u2 = {};
            if (c2)
              for (var h2 = 0; h2 < this.length; h2++) {
                var f3 = this[h2][0];
                f3 != null && (u2[f3] = true);
              }
            for (var v2 = 0; v2 < a2.length; v2++) {
              var p2 = [].concat(a2[v2]);
              c2 && u2[p2[0]] || (l2 && (p2[2] ? p2[2] = "".concat(l2, " and ").concat(p2[2]) : p2[2] = l2), r2.push(p2));
            }
          }, r2;
        };
      }, function(t3, o2, i3) {
        i3.r(o2), i3.d(o2, "default", function() {
          return a2;
        }), i3(0);
        function n2(l2, c2) {
          for (var u2 = 0; u2 < c2.length; u2++) {
            var h2 = c2[u2];
            h2.enumerable = h2.enumerable || false, h2.configurable = true, "value" in h2 && (h2.writable = true), Object.defineProperty(l2, h2.key, h2);
          }
        }
        function r2(l2, c2, u2) {
          return c2 && n2(l2.prototype, c2), u2 && n2(l2, u2), l2;
        }
        var a2 = function() {
          function l2(c2) {
            var u2 = c2.data, h2 = c2.config, f3 = c2.api, v2 = c2.readOnly;
            (function(p2, k2) {
              if (!(p2 instanceof k2))
                throw new TypeError("Cannot call a class as a function");
            })(this, l2), this.api = f3, this.readOnly = v2, this._CSS = { block: this.api.styles.block, wrapper: "ce-paragraph" }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = h2.placeholder ? h2.placeholder : l2.DEFAULT_PLACEHOLDER, this._data = {}, this._element = this.drawView(), this._preserveBlank = h2.preserveBlank !== void 0 && h2.preserveBlank, this.data = u2;
          }
          return r2(l2, null, [{ key: "DEFAULT_PLACEHOLDER", get: function() {
            return "";
          } }]), r2(l2, [{ key: "onKeyUp", value: function(c2) {
            c2.code !== "Backspace" && c2.code !== "Delete" || this._element.textContent === "" && (this._element.innerHTML = "");
          } }, { key: "drawView", value: function() {
            var c2 = document.createElement("DIV");
            return c2.classList.add(this._CSS.wrapper, this._CSS.block), c2.contentEditable = false, c2.dataset.placeholder = this.api.i18n.t(this._placeholder), this.readOnly || (c2.contentEditable = true, c2.addEventListener("keyup", this.onKeyUp)), c2;
          } }, { key: "render", value: function() {
            return this._element;
          } }, { key: "merge", value: function(c2) {
            var u2 = { text: this.data.text + c2.text };
            this.data = u2;
          } }, { key: "validate", value: function(c2) {
            return !(c2.text.trim() === "" && !this._preserveBlank);
          } }, { key: "save", value: function(c2) {
            return { text: c2.innerHTML };
          } }, { key: "onPaste", value: function(c2) {
            var u2 = { text: c2.detail.data.innerHTML };
            this.data = u2;
          } }, { key: "data", get: function() {
            var c2 = this._element.innerHTML;
            return this._data.text = c2, this._data;
          }, set: function(c2) {
            this._data = c2 || {}, this._element.innerHTML = this._data.text || "";
          } }], [{ key: "conversionConfig", get: function() {
            return { export: "text", import: "text" };
          } }, { key: "sanitize", get: function() {
            return { text: { br: true } };
          } }, { key: "isReadOnlySupported", get: function() {
            return true;
          } }, { key: "pasteConfig", get: function() {
            return { tags: ["P"] };
          } }, { key: "toolbox", get: function() {
            return { icon: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14"/></svg>', title: "Text" };
          } }]), l2;
        }();
      }]).default;
    });
  })(ei);
  var ti = /* @__PURE__ */ xe(Ne);
  var $e = class {
    constructor() {
      this.commandName = "bold", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--bold"
      }, this.nodes = {
        button: void 0
      };
    }
    static get sanitize() {
      return {
        b: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Eo, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e2 = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e2), e2;
    }
    get shortcut() {
      return "CMD+B";
    }
  };
  $e.isInline = true;
  $e.title = "Bold";
  var We = class {
    constructor() {
      this.commandName = "italic", this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--italic"
      }, this.nodes = {
        button: null
      };
    }
    static get sanitize() {
      return {
        i: {}
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = So, this.nodes.button;
    }
    surround() {
      document.execCommand(this.commandName);
    }
    checkState() {
      const e2 = document.queryCommandState(this.commandName);
      return this.nodes.button.classList.toggle(this.CSS.buttonActive, e2), e2;
    }
    get shortcut() {
      return "CMD+I";
    }
  };
  We.isInline = true;
  We.title = "Italic";
  var Ye = class {
    constructor({ api: e2 }) {
      this.commandLink = "createLink", this.commandUnlink = "unlink", this.ENTER_KEY = 13, this.CSS = {
        button: "ce-inline-tool",
        buttonActive: "ce-inline-tool--active",
        buttonModifier: "ce-inline-tool--link",
        buttonUnlink: "ce-inline-tool--unlink",
        input: "ce-inline-tool-input",
        inputShowed: "ce-inline-tool-input--showed"
      }, this.nodes = {
        button: null,
        input: null
      }, this.inputOpened = false, this.toolbar = e2.toolbar, this.inlineToolbar = e2.inlineToolbar, this.notifier = e2.notifier, this.i18n = e2.i18n, this.selection = new m();
    }
    static get sanitize() {
      return {
        a: {
          href: true,
          target: "_blank",
          rel: "nofollow"
        }
      };
    }
    render() {
      return this.nodes.button = document.createElement("button"), this.nodes.button.type = "button", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = qe, this.nodes.button;
    }
    renderActions() {
      return this.nodes.input = document.createElement("input"), this.nodes.input.placeholder = this.i18n.t("Add a link"), this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener("keydown", (e2) => {
        e2.keyCode === this.ENTER_KEY && this.enterPressed(e2);
      }), this.nodes.input;
    }
    surround(e2) {
      if (e2) {
        this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());
        const t3 = this.selection.findParentTag("A");
        if (t3) {
          this.selection.expandToTag(t3), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();
          return;
        }
      }
      this.toggleActions();
    }
    checkState() {
      const e2 = this.selection.findParentTag("A");
      if (e2) {
        this.nodes.button.innerHTML = Oo, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();
        const t3 = e2.getAttribute("href");
        this.nodes.input.value = t3 !== "null" ? t3 : "", this.selection.save();
      } else
        this.nodes.button.innerHTML = qe, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);
      return !!e2;
    }
    clear() {
      this.closeActions();
    }
    get shortcut() {
      return "CMD+K";
    }
    toggleActions() {
      this.inputOpened ? this.closeActions(false) : this.openActions(true);
    }
    openActions(e2 = false) {
      this.nodes.input.classList.add(this.CSS.inputShowed), e2 && this.nodes.input.focus(), this.inputOpened = true;
    }
    closeActions(e2 = true) {
      if (this.selection.isFakeBackgroundEnabled) {
        const t3 = new m();
        t3.save(), this.selection.restore(), this.selection.removeFakeBackground(), t3.restore();
      }
      this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = "", e2 && this.selection.clearSaved(), this.inputOpened = false;
    }
    enterPressed(e2) {
      let t3 = this.nodes.input.value || "";
      if (!t3.trim()) {
        this.selection.restore(), this.unlink(), e2.preventDefault(), this.closeActions();
        return;
      }
      if (!this.validateURL(t3)) {
        this.notifier.show({
          message: "Pasted link is not valid.",
          style: "error"
        }), T("Incorrect Link pasted", "warn", t3);
        return;
      }
      t3 = this.prepareLink(t3), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t3), e2.preventDefault(), e2.stopPropagation(), e2.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();
    }
    validateURL(e2) {
      return !/\s/.test(e2);
    }
    prepareLink(e2) {
      return e2 = e2.trim(), e2 = this.addProtocol(e2), e2;
    }
    addProtocol(e2) {
      if (/^(\w+):(\/\/)?/.test(e2))
        return e2;
      const t3 = /^\/[^/\s]/.test(e2), o2 = e2.substring(0, 1) === "#", i3 = /^\/\/[^/\s]/.test(e2);
      return !t3 && !o2 && !i3 && (e2 = "http://" + e2), e2;
    }
    insertLink(e2) {
      const t3 = this.selection.findParentTag("A");
      t3 && this.selection.expandToTag(t3), document.execCommand(this.commandLink, false, e2);
    }
    unlink() {
      document.execCommand(this.commandUnlink);
    }
  };
  Ye.isInline = true;
  Ye.title = "Link";
  var yt = class {
    constructor({ data: e2, api: t3 }) {
      this.CSS = {
        wrapper: "ce-stub",
        info: "ce-stub__info",
        title: "ce-stub__title",
        subtitle: "ce-stub__subtitle"
      }, this.api = t3, this.title = e2.title || this.api.i18n.t("Error"), this.subtitle = this.api.i18n.t("The block can not be displayed correctly."), this.savedData = e2.savedData, this.wrapper = this.make();
    }
    render() {
      return this.wrapper;
    }
    save() {
      return this.savedData;
    }
    make() {
      const e2 = d.make("div", this.CSS.wrapper), t3 = '<svg xmlns="http://www.w3.org/2000/svg" width="52" height="52" viewBox="0 0 52 52"><path fill="#D76B6B" fill-rule="nonzero" d="M26 52C11.64 52 0 40.36 0 26S11.64 0 26 0s26 11.64 26 26-11.64 26-26 26zm0-3.25c12.564 0 22.75-10.186 22.75-22.75S38.564 3.25 26 3.25 3.25 13.436 3.25 26 13.436 48.75 26 48.75zM15.708 33.042a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm23.834 0a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm-15.875 5.452a1.083 1.083 0 1 1-1.834-1.155c1.331-2.114 3.49-3.179 6.334-3.179 2.844 0 5.002 1.065 6.333 3.18a1.083 1.083 0 1 1-1.833 1.154c-.913-1.45-2.366-2.167-4.5-2.167s-3.587.717-4.5 2.167z"/></svg>', o2 = d.make("div", this.CSS.info), i3 = d.make("div", this.CSS.title, {
        textContent: this.title
      }), n2 = d.make("div", this.CSS.subtitle, {
        textContent: this.subtitle
      });
      return e2.innerHTML = t3, o2.appendChild(i3), o2.appendChild(n2), e2.appendChild(o2), e2;
    }
  };
  yt.isReadOnlySupported = true;
  var oi = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Inline;
    }
    get title() {
      return this.constructable[je.Title];
    }
    create() {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
  };
  var ii = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Tune;
    }
    create(e2, t3) {
      return new this.constructable({
        api: this.api.getMethodsForTool(this),
        config: this.settings,
        block: t3,
        data: e2
      });
    }
  };
  var U = class extends Map {
    get blockTools() {
      const e2 = Array.from(this.entries()).filter(([, t3]) => t3.isBlock());
      return new U(e2);
    }
    get inlineTools() {
      const e2 = Array.from(this.entries()).filter(([, t3]) => t3.isInline());
      return new U(e2);
    }
    get blockTunes() {
      const e2 = Array.from(this.entries()).filter(([, t3]) => t3.isTune());
      return new U(e2);
    }
    get internalTools() {
      const e2 = Array.from(this.entries()).filter(([, t3]) => t3.isInternal);
      return new U(e2);
    }
    get externalTools() {
      const e2 = Array.from(this.entries()).filter(([, t3]) => !t3.isInternal);
      return new U(e2);
    }
  };
  var ni = Object.defineProperty;
  var si = Object.getOwnPropertyDescriptor;
  var Et = (s2, e2, t3, o2) => {
    for (var i3 = o2 > 1 ? void 0 : o2 ? si(e2, t3) : e2, n2 = s2.length - 1, r2; n2 >= 0; n2--)
      (r2 = s2[n2]) && (i3 = (o2 ? r2(e2, t3, i3) : r2(i3)) || i3);
    return o2 && i3 && ni(e2, t3, i3), i3;
  };
  var Ke = class extends Ue {
    constructor() {
      super(...arguments), this.type = ye.Block, this.inlineTools = new U(), this.tunes = new U();
    }
    create(e2, t3, o2) {
      return new this.constructable({
        data: e2,
        block: t3,
        readOnly: o2,
        api: this.api.getMethodsForTool(this),
        config: this.settings
      });
    }
    get isReadOnlySupported() {
      return this.constructable[se.IsReadOnlySupported] === true;
    }
    get isLineBreaksEnabled() {
      return this.constructable[se.IsEnabledLineBreaks];
    }
    get toolbox() {
      const e2 = this.constructable[se.Toolbox], t3 = this.config[me.Toolbox];
      if (!V(e2) && t3 !== false)
        return t3 ? Array.isArray(e2) ? Array.isArray(t3) ? t3.map((o2, i3) => {
          const n2 = e2[i3];
          return n2 ? __spreadValues(__spreadValues({}, n2), o2) : o2;
        }) : [t3] : Array.isArray(t3) ? t3 : [
          __spreadValues(__spreadValues({}, e2), t3)
        ] : Array.isArray(e2) ? e2 : [e2];
    }
    get conversionConfig() {
      return this.constructable[se.ConversionConfig];
    }
    get enabledInlineTools() {
      return this.config[me.EnabledInlineTools] || false;
    }
    get enabledBlockTunes() {
      return this.config[me.EnabledBlockTunes];
    }
    get pasteConfig() {
      var _a;
      return (_a = this.constructable[se.PasteConfig]) != null ? _a : {};
    }
    get sanitizeConfig() {
      const e2 = super.sanitizeConfig, t3 = this.baseSanitizeConfig;
      if (V(e2))
        return t3;
      const o2 = {};
      for (const i3 in e2)
        if (Object.prototype.hasOwnProperty.call(e2, i3)) {
          const n2 = e2[i3];
          j(n2) ? o2[i3] = Object.assign({}, t3, n2) : o2[i3] = n2;
        }
      return o2;
    }
    get baseSanitizeConfig() {
      const e2 = {};
      return Array.from(this.inlineTools.values()).forEach((t3) => Object.assign(e2, t3.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t3) => Object.assign(e2, t3.sanitizeConfig)), e2;
    }
  };
  Et([
    ae
  ], Ke.prototype, "sanitizeConfig", 1);
  Et([
    ae
  ], Ke.prototype, "baseSanitizeConfig", 1);
  var ri = class {
    constructor(e2, t3, o2) {
      this.api = o2, this.config = e2, this.editorConfig = t3;
    }
    get(e2) {
      const _a = this.config[e2], { class: t3, isInternal: o2 = false } = _a, i3 = __objRest(_a, ["class", "isInternal"]), n2 = this.getConstructor(t3);
      return new n2({
        name: e2,
        constructable: t3,
        config: i3,
        api: this.api,
        isDefault: e2 === this.editorConfig.defaultBlock,
        defaultPlaceholder: this.editorConfig.placeholder,
        isInternal: o2
      });
    }
    getConstructor(e2) {
      switch (true) {
        case e2[je.IsInline]:
          return oi;
        case e2[vt.IsTune]:
          return ii;
        default:
          return Ke;
      }
    }
  };
  var Bt = class {
    constructor({ api: e2 }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e2;
    }
    render() {
      return {
        icon: pt,
        title: this.api.i18n.t("Move down"),
        onActivate: () => this.handleClick(),
        name: "move-down"
      };
    }
    handleClick() {
      const e2 = this.api.blocks.getCurrentBlockIndex(), t3 = this.api.blocks.getBlockByIndex(e2 + 1);
      if (!t3)
        throw new Error("Unable to move Block down since it is already the last");
      const o2 = t3.holder, i3 = o2.getBoundingClientRect();
      let n2 = Math.abs(window.innerHeight - o2.offsetHeight);
      i3.top < window.innerHeight && (n2 = window.scrollY + o2.offsetHeight), window.scrollTo(0, n2), this.api.blocks.move(e2 + 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Bt.isTune = true;
  var Ct = class {
    constructor({ api: e2 }) {
      this.api = e2;
    }
    render() {
      return {
        icon: Co,
        title: this.api.i18n.t("Delete"),
        name: "delete",
        confirmation: {
          title: this.api.i18n.t("Click to delete"),
          onActivate: () => this.handleClick()
        }
      };
    }
    handleClick() {
      this.api.blocks.delete();
    }
  };
  Ct.isTune = true;
  var Tt = class {
    constructor({ api: e2 }) {
      this.CSS = {
        animation: "wobble"
      }, this.api = e2;
    }
    render() {
      return {
        icon: Bo,
        title: this.api.i18n.t("Move up"),
        onActivate: () => this.handleClick(),
        name: "move-up"
      };
    }
    handleClick() {
      const e2 = this.api.blocks.getCurrentBlockIndex(), t3 = this.api.blocks.getBlockByIndex(e2), o2 = this.api.blocks.getBlockByIndex(e2 - 1);
      if (e2 === 0 || !t3 || !o2)
        throw new Error("Unable to move Block up since it is already the first");
      const i3 = t3.holder, n2 = o2.holder, r2 = i3.getBoundingClientRect(), a2 = n2.getBoundingClientRect();
      let l2;
      a2.top > 0 ? l2 = Math.abs(r2.top) - Math.abs(a2.top) : l2 = Math.abs(r2.top) + a2.height, window.scrollBy(0, -1 * l2), this.api.blocks.move(e2 - 1), this.api.toolbar.toggleBlockSettings(true);
    }
  };
  Tt.isTune = true;
  var ai = Object.defineProperty;
  var li = Object.getOwnPropertyDescriptor;
  var ci = (s2, e2, t3, o2) => {
    for (var i3 = o2 > 1 ? void 0 : o2 ? li(e2, t3) : e2, n2 = s2.length - 1, r2; n2 >= 0; n2--)
      (r2 = s2[n2]) && (i3 = (o2 ? r2(e2, t3, i3) : r2(i3)) || i3);
    return o2 && i3 && ai(e2, t3, i3), i3;
  };
  var St = class extends S {
    constructor() {
      super(...arguments), this.stubTool = "stub", this.toolsAvailable = new U(), this.toolsUnavailable = new U();
    }
    get available() {
      return this.toolsAvailable;
    }
    get unavailable() {
      return this.toolsUnavailable;
    }
    get inlineTools() {
      return this.available.inlineTools;
    }
    get blockTools() {
      return this.available.blockTools;
    }
    get blockTunes() {
      return this.available.blockTunes;
    }
    get defaultTool() {
      return this.blockTools.get(this.config.defaultBlock);
    }
    get internal() {
      return this.available.internalTools;
    }
    async prepare() {
      if (this.validateTools(), this.config.tools = Se({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, "tools") || Object.keys(this.config.tools).length === 0)
        throw Error("Can't start without tools");
      const e2 = this.prepareConfig();
      this.factory = new ri(e2, this.config, this.Editor.API);
      const t3 = this.getListOfPrepareFunctions(e2);
      if (t3.length === 0)
        return Promise.resolve();
      await ot(t3, (o2) => {
        this.toolPrepareMethodSuccess(o2);
      }, (o2) => {
        this.toolPrepareMethodFallback(o2);
      }), this.prepareBlockTools();
    }
    getAllInlineToolsSanitizeConfig() {
      const e2 = {};
      return Array.from(this.inlineTools.values()).forEach((t3) => {
        Object.assign(e2, t3.sanitizeConfig);
      }), e2;
    }
    destroy() {
      Object.values(this.available).forEach(async (e2) => {
        D(e2.reset) && await e2.reset();
      });
    }
    get internalTools() {
      return {
        bold: {
          class: $e,
          isInternal: true
        },
        italic: {
          class: We,
          isInternal: true
        },
        link: {
          class: Ye,
          isInternal: true
        },
        paragraph: {
          class: ti,
          inlineToolbar: true,
          isInternal: true
        },
        stub: {
          class: yt,
          isInternal: true
        },
        moveUp: {
          class: Tt,
          isInternal: true
        },
        delete: {
          class: Ct,
          isInternal: true
        },
        moveDown: {
          class: Bt,
          isInternal: true
        }
      };
    }
    toolPrepareMethodSuccess(e2) {
      const t3 = this.factory.get(e2.toolName);
      if (t3.isInline()) {
        const i3 = ["render", "surround", "checkState"].filter((n2) => !t3.create()[n2]);
        if (i3.length) {
          T(
            `Incorrect Inline Tool: ${t3.name}. Some of required methods is not implemented %o`,
            "warn",
            i3
          ), this.toolsUnavailable.set(t3.name, t3);
          return;
        }
      }
      this.toolsAvailable.set(t3.name, t3);
    }
    toolPrepareMethodFallback(e2) {
      this.toolsUnavailable.set(e2.toolName, this.factory.get(e2.toolName));
    }
    getListOfPrepareFunctions(e2) {
      const t3 = [];
      return Object.entries(e2).forEach(([o2, i3]) => {
        t3.push({
          function: D(i3.class.prepare) ? i3.class.prepare : () => {
          },
          data: {
            toolName: o2,
            config: i3.config
          }
        });
      }), t3;
    }
    prepareBlockTools() {
      Array.from(this.blockTools.values()).forEach((e2) => {
        this.assignInlineToolsToBlockTool(e2), this.assignBlockTunesToBlockTool(e2);
      });
    }
    assignInlineToolsToBlockTool(e2) {
      if (this.config.inlineToolbar !== false) {
        if (e2.enabledInlineTools === true) {
          e2.inlineTools = new U(
            Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t3) => [t3, this.inlineTools.get(t3)]) : Array.from(this.inlineTools.entries())
          );
          return;
        }
        Array.isArray(e2.enabledInlineTools) && (e2.inlineTools = new U(
          e2.enabledInlineTools.map((t3) => [t3, this.inlineTools.get(t3)])
        ));
      }
    }
    assignBlockTunesToBlockTool(e2) {
      if (e2.enabledBlockTunes !== false) {
        if (Array.isArray(e2.enabledBlockTunes)) {
          const t3 = new U(
            e2.enabledBlockTunes.map((o2) => [o2, this.blockTunes.get(o2)])
          );
          e2.tunes = new U([...t3, ...this.blockTunes.internalTools]);
          return;
        }
        if (Array.isArray(this.config.tunes)) {
          const t3 = new U(
            this.config.tunes.map((o2) => [o2, this.blockTunes.get(o2)])
          );
          e2.tunes = new U([...t3, ...this.blockTunes.internalTools]);
          return;
        }
        e2.tunes = this.blockTunes.internalTools;
      }
    }
    validateTools() {
      for (const e2 in this.config.tools)
        if (Object.prototype.hasOwnProperty.call(this.config.tools, e2)) {
          if (e2 in this.internalTools)
            return;
          const t3 = this.config.tools[e2];
          if (!D(t3) && !D(t3.class))
            throw Error(
              `Tool \xAB${e2}\xBB must be a constructor function or an object with function in the \xABclass\xBB property`
            );
        }
    }
    prepareConfig() {
      const e2 = {};
      for (const t3 in this.config.tools)
        j(this.config.tools[t3]) ? e2[t3] = this.config.tools[t3] : e2[t3] = { class: this.config.tools[t3] };
      return e2;
    }
  };
  ci([
    ae
  ], St.prototype, "getAllInlineToolsSanitizeConfig", 1);
  var di = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide,.codex-editor__redactor--hidden{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:"\\feff"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor__loader{position:relative;height:30vh}.codex-editor__loader:before{content:"";position:absolute;left:50%;top:50%;width:30px;height:30px;margin-top:-15px;margin-left:-15px;border-radius:50%;border:2px solid rgba(201,201,204,.48);border-top-color:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-animation:editor-loader-spin .8s infinite linear;animation:editor-loader-spin .8s infinite linear;will-change:transform}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}::-moz-selection{background-color:#d4ecff}::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}@-webkit-keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;-webkit-transform:translateX(-50%) translateY(8px) scale(.94);transform:translate(-50%) translateY(8px) scale(.94);opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease,-webkit-transform .15s ease;transition:opacity .25s ease,-webkit-transform .15s ease;transition:transform .15s ease,opacity .25s ease;transition:transform .15s ease,opacity .25s ease,-webkit-transform .15s ease;will-change:transform,opacity;top:0;left:0;z-index:3}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:translateX(-50%);transform:translate(-50%)}.ce-inline-toolbar--left-oriented{-webkit-transform:translateX(-23px) translateY(8px) scale(.94);transform:translate(-23px) translateY(8px) scale(.94)}.ce-inline-toolbar--left-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-23px);transform:translate(-23px)}.ce-inline-toolbar--right-oriented{-webkit-transform:translateX(-100%) translateY(8px) scale(.94);transform:translate(-100%) translateY(8px) scale(.94);margin-left:23px}.ce-inline-toolbar--right-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-100%);transform:translate(-100%)}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;border-radius:0;line-height:normal}.ce-inline-tool svg{width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#eff2f5}}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48);-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:150px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px rgba(201,201,204,.48);box-shadow:0 0 0 1px #c9c9cc7a;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background:#fff;-webkit-box-sizing:content-box;box-sizing:content-box;-ms-flex-negative:0;flex-shrink:0;margin-right:10px}.ce-conversion-tool__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-conversion-tool__icon{width:36px;height:36px;border-radius:8px}.ce-conversion-tool__icon svg{width:28px;height:28px}}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important}.ce-conversion-tool--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;line-height:32px}.ce-settings__button svg{width:20px;height:20px}@media (max-width: 650px){.ce-settings__button svg{width:28px;height:28px}}@media (hover: hover){.ce-settings__button:hover{background-color:#eff2f5}}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{background:rgba(34,186,255,.08)!important}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button--disabled{cursor:not-allowed!important}.ce-settings__button--disabled{opacity:.3}.ce-settings__button--selected{color:#388ae5}@media (min-width: 651px){.codex-editor--narrow .ce-settings .ce-popover{right:0;left:auto;left:initial}}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:"";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:"";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@media (min-width: 651px){.codex-editor--narrow .ce-block--focused{margin-right:-50px;padding-right:50px}}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button svg{width:20px;height:20px}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:"";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:3.5em 0;margin:17px 0;border-radius:3px;background:#fcf7f7;color:#b46262}.ce-stub__info{margin-left:20px}.ce-stub__title{margin-bottom:3px;font-weight:600;font-size:18px;text-transform:capitalize}.ce-stub__subtitle{font-size:16px}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0px;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:rgba(232,232,235,.49);border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #e8e8eb;--color-shadow: rgba(13,20,33,.13);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #eff2f5;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:0;top:calc(100% + var(--offset-from-target));background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}.ce-popover--open-top{top:calc(-1 * (var(--offset-from-target) + var(--popover-height)))}@media (max-width: 650px){.ce-popover{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}.ce-popover .ce-popover__search{display:none}}.ce-popover__search,.ce-popover__custom-content:not(:empty){margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover__custom-content:not(:empty){padding:4px}@media (min-width: 651px){.ce-popover__custom-content:not(:empty){padding:0}}.ce-popover__custom-content--hidden{display:none}.ce-popover-item{--border-radius: 6px;--icon-size: 20px;--icon-size-mobile: 28px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{border-radius:5px;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px var(--color-border-icon);box-shadow:0 0 0 1px var(--color-border-icon);background:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:var(--icon-size-mobile);height:var(--icon-size-mobile)}}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--active .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--disabled .ce-popover-item__icon{-webkit-box-shadow:0 0 0 1px var(--color-border-icon-disabled);box-shadow:0 0 0 1px var(--color-border-icon-disabled)}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--focused:not(.ce-popover-item--no-focus){-webkit-box-shadow:inset 0 0 0px 1px var(--color-shadow-item-focus);box-shadow:inset 0 0 0 1px var(--color-shadow-item-focus)}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}.ce-popover-item:hover .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__icon{color:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}.ce-popover-item--confirmation .ce-popover-item__icon,.ce-popover-item--active .ce-popover-item__icon,.ce-popover-item--focused .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}
`;
  var hi = class extends S {
    constructor() {
      super(...arguments), this.isMobile = false, this.contentRectCache = void 0, this.resizeDebouncer = Pt(() => {
        this.windowResize();
      }, 200);
    }
    get CSS() {
      return {
        editorWrapper: "codex-editor",
        editorWrapperNarrow: "codex-editor--narrow",
        editorZone: "codex-editor__redactor",
        editorZoneHidden: "codex-editor__redactor--hidden",
        editorLoader: "codex-editor__loader",
        editorEmpty: "codex-editor--empty",
        editorRtlFix: "codex-editor--rtl"
      };
    }
    get contentRect() {
      if (this.contentRectCache)
        return this.contentRectCache;
      const e2 = this.nodes.wrapper.querySelector(`.${F.CSS.content}`);
      return e2 ? (this.contentRectCache = e2.getBoundingClientRect(), this.contentRectCache) : {
        width: 650,
        left: 0,
        right: 0
      };
    }
    addLoader() {
      this.nodes.loader = d.make("div", this.CSS.editorLoader), this.nodes.wrapper.prepend(this.nodes.loader), this.nodes.redactor.classList.add(this.CSS.editorZoneHidden);
    }
    removeLoader() {
      this.nodes.loader.remove(), this.nodes.redactor.classList.remove(this.CSS.editorZoneHidden);
    }
    async prepare() {
      this.checkIsMobile(), this.make(), this.addLoader(), this.loadStyles();
    }
    toggleReadOnly(e2) {
      e2 ? this.disableModuleBindings() : this.enableModuleBindings();
    }
    checkEmptiness() {
      const { BlockManager: e2 } = this.Editor;
      this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e2.isEditorEmpty);
    }
    get someToolbarOpened() {
      const { Toolbar: e2, BlockSettings: t3, InlineToolbar: o2, ConversionToolbar: i3 } = this.Editor;
      return t3.opened || o2.opened || i3.opened || e2.toolbox.opened;
    }
    get someFlipperButtonFocused() {
      return this.Editor.Toolbar.toolbox.hasFocus() ? true : Object.entries(this.Editor).filter(([e2, t3]) => t3.flipper instanceof G).some(([e2, t3]) => t3.flipper.hasFocus());
    }
    destroy() {
      this.nodes.holder.innerHTML = "";
    }
    closeAllToolbars() {
      const { Toolbar: e2, BlockSettings: t3, InlineToolbar: o2, ConversionToolbar: i3 } = this.Editor;
      t3.close(), o2.close(), i3.close(), e2.toolbox.close();
    }
    checkIsMobile() {
      this.isMobile = window.innerWidth < st;
    }
    make() {
      this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make("div", [
        this.CSS.editorWrapper,
        ...this.isRtl ? [this.CSS.editorRtlFix] : []
      ]), this.nodes.redactor = d.make("div", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + "px", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper);
    }
    loadStyles() {
      const e2 = "editor-js-styles";
      if (d.get(e2))
        return;
      const t3 = d.make("style", null, {
        id: e2,
        textContent: di.toString()
      });
      d.prepend(document.head, t3);
    }
    enableModuleBindings() {
      this.readOnlyMutableListeners.on(this.nodes.redactor, "click", (e2) => {
        this.redactorClicked(e2);
      }, false), this.readOnlyMutableListeners.on(this.nodes.redactor, "mousedown", (e2) => {
        this.documentTouched(e2);
      }, true), this.readOnlyMutableListeners.on(this.nodes.redactor, "touchstart", (e2) => {
        this.documentTouched(e2);
      }, true), this.readOnlyMutableListeners.on(document, "keydown", (e2) => {
        this.documentKeydown(e2);
      }, true), this.readOnlyMutableListeners.on(document, "mousedown", (e2) => {
        this.documentClicked(e2);
      }, true), this.readOnlyMutableListeners.on(document, "selectionchange", () => {
        this.selectionChanged();
      }, true), this.readOnlyMutableListeners.on(window, "resize", () => {
        this.resizeDebouncer();
      }, {
        passive: true
      }), this.watchBlockHoveredEvents();
    }
    watchBlockHoveredEvents() {
      let e2;
      this.readOnlyMutableListeners.on(this.nodes.redactor, "mousemove", Te((t3) => {
        const o2 = t3.target.closest(".ce-block");
        this.Editor.BlockSelection.anyBlockSelected || o2 && e2 !== o2 && (e2 = o2, this.eventsDispatcher.emit(mt, {
          block: this.Editor.BlockManager.getBlockByChildNode(o2)
        }));
      }, 20), {
        passive: true
      });
    }
    disableModuleBindings() {
      this.readOnlyMutableListeners.clearAll();
    }
    windowResize() {
      this.contentRectCache = null, this.checkIsMobile();
    }
    documentKeydown(e2) {
      switch (e2.keyCode) {
        case B.ENTER:
          this.enterPressed(e2);
          break;
        case B.BACKSPACE:
          this.backspacePressed(e2);
          break;
        case B.ESC:
          this.escapePressed(e2);
          break;
        default:
          this.defaultBehaviour(e2);
          break;
      }
    }
    defaultBehaviour(e2) {
      const { currentBlock: t3 } = this.Editor.BlockManager, o2 = e2.target.closest(`.${this.CSS.editorWrapper}`), i3 = e2.altKey || e2.ctrlKey || e2.metaKey || e2.shiftKey;
      if (t3 !== void 0 && o2 === null) {
        this.Editor.BlockEvents.keydown(e2);
        return;
      }
      o2 || t3 && i3 || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
    }
    backspacePressed(e2) {
      const { BlockManager: t3, BlockSelection: o2, Caret: i3 } = this.Editor;
      if (o2.anyBlockSelected && !m.isSelectionExists) {
        const n2 = t3.removeSelectedBlocks();
        i3.setToBlock(t3.insertDefaultBlockAtIndex(n2, true), i3.positions.START), o2.clearSelection(e2), e2.preventDefault(), e2.stopPropagation(), e2.stopImmediatePropagation();
      }
    }
    escapePressed(e2) {
      this.Editor.BlockSelection.clearSelection(e2), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.ConversionToolbar.opened ? this.Editor.ConversionToolbar.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();
    }
    enterPressed(e2) {
      const { BlockManager: t3, BlockSelection: o2 } = this.Editor, i3 = t3.currentBlockIndex >= 0;
      if (o2.anyBlockSelected && !m.isSelectionExists) {
        o2.clearSelection(e2), e2.preventDefault(), e2.stopImmediatePropagation(), e2.stopPropagation();
        return;
      }
      if (!this.someToolbarOpened && i3 && e2.target.tagName === "BODY") {
        const n2 = this.Editor.BlockManager.insert();
        this.Editor.Caret.setToBlock(n2), this.Editor.BlockManager.highlightCurrentNode(), this.Editor.Toolbar.moveAndOpen(n2);
      }
      this.Editor.BlockSelection.clearSelection(e2);
    }
    documentClicked(e2) {
      if (!e2.isTrusted)
        return;
      const t3 = e2.target;
      this.nodes.holder.contains(t3) || m.isAtEditor || (this.Editor.BlockManager.dropPointer(), this.Editor.Toolbar.close());
      const i3 = this.Editor.BlockSettings.nodes.wrapper.contains(t3), n2 = this.Editor.Toolbar.nodes.settingsToggler.contains(t3), r2 = i3 || n2;
      if (this.Editor.BlockSettings.opened && !r2) {
        this.Editor.BlockSettings.close();
        const a2 = this.Editor.BlockManager.getBlockByChildNode(t3);
        this.Editor.Toolbar.moveAndOpen(a2);
      }
      this.Editor.BlockSelection.clearSelection(e2);
    }
    documentTouched(e2) {
      let t3 = e2.target;
      if (t3 === this.nodes.redactor) {
        const o2 = e2 instanceof MouseEvent ? e2.clientX : e2.touches[0].clientX, i3 = e2 instanceof MouseEvent ? e2.clientY : e2.touches[0].clientY;
        t3 = document.elementFromPoint(o2, i3);
      }
      try {
        this.Editor.BlockManager.setCurrentBlockByChildNode(t3), this.Editor.BlockManager.highlightCurrentNode();
      } catch (e3) {
        this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();
      }
      this.Editor.Toolbar.moveAndOpen();
    }
    redactorClicked(e2) {
      const { BlockSelection: t3 } = this.Editor;
      if (!m.isCollapsed)
        return;
      const o2 = () => {
        e2.stopImmediatePropagation(), e2.stopPropagation();
      }, i3 = e2.target, n2 = e2.metaKey || e2.ctrlKey;
      if (d.isAnchor(i3) && n2) {
        o2();
        const u2 = i3.getAttribute("href"), h2 = Ht(u2);
        jt(h2);
        return;
      }
      const r2 = this.Editor.BlockManager.getBlockByIndex(-1), a2 = d.offset(r2.holder).bottom, l2 = e2.pageY;
      if (e2.target instanceof Element && e2.target.isEqualNode(this.nodes.redactor) && !t3.anyBlockSelected && a2 < l2) {
        o2();
        const { BlockManager: u2, Caret: h2, Toolbar: f3 } = this.Editor;
        (!u2.lastBlock.tool.isDefault || !u2.lastBlock.isEmpty) && u2.insertAtEnd(), h2.setToTheLastBlock(), f3.moveAndOpen(u2.lastBlock);
      }
    }
    selectionChanged() {
      const { CrossBlockSelection: e2, BlockSelection: t3 } = this.Editor, o2 = m.anchorElement;
      if (e2.isCrossBlockSelectionStarted && t3.anyBlockSelected && m.get().removeAllRanges(), !o2) {
        m.range || this.Editor.InlineToolbar.close();
        return;
      }
      const i3 = o2.closest(`.${F.CSS.content}`) === null;
      if (i3 && (this.Editor.InlineToolbar.containsNode(o2) || this.Editor.InlineToolbar.close(), !(o2.dataset.inlineToolbar === "true")))
        return;
      this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o2);
      const n2 = i3 !== true;
      this.Editor.InlineToolbar.tryToShow(true, n2);
    }
  };
  var ui = {
    BlocksAPI: Zt,
    CaretAPI: Gt,
    EventsAPI: qt,
    I18nAPI: De,
    API: Jt,
    InlineToolbarAPI: Qt,
    ListenersAPI: eo,
    NotifierAPI: no,
    ReadOnlyAPI: so,
    SanitizerAPI: po,
    SaverAPI: fo,
    SelectionAPI: go,
    StylesAPI: bo,
    ToolbarAPI: mo,
    TooltipAPI: xo,
    UiAPI: wo,
    BlockSettings: Ro,
    ConversionToolbar: Y,
    Toolbar: jo,
    InlineToolbar: Uo,
    BlockEvents: $o,
    BlockManager: Ko,
    BlockSelection: Xo,
    Caret: ve,
    CrossBlockSelection: Vo,
    DragNDrop: Zo,
    ModificationsObserver: Go,
    Paste: wt,
    ReadOnly: qo,
    RectangleSelection: pe,
    Renderer: Jo,
    Saver: Qo,
    Tools: St,
    UI: hi
  };
  var pi = class {
    constructor(e2) {
      this.moduleInstances = {}, this.eventsDispatcher = new we();
      let t3, o2;
      this.isReady = new Promise((i3, n2) => {
        t3 = i3, o2 = n2;
      }), Promise.resolve().then(async () => {
        this.configuration = e2, await this.validate(), await this.init(), await this.start(), K("I'm ready! (\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727", "log", "", "color: #E24A75"), setTimeout(async () => {
          if (await this.render(), this.configuration.autofocus) {
            const { BlockManager: i3, Caret: n2 } = this.moduleInstances;
            n2.setToBlock(i3.blocks[0], n2.positions.START), i3.highlightCurrentNode();
          }
          this.moduleInstances.UI.removeLoader(), t3();
        }, 500);
      }).catch((i3) => {
        T(`Editor.js is not ready because of ${i3}`, "error"), o2(i3);
      });
    }
    set configuration(e2) {
      var o2, i3;
      j(e2) ? this.config = __spreadValues({}, e2) : this.config = {
        holder: e2
      }, Ie(!!this.config.holderId, "config.holderId", "config.holder"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = "editorjs"), this.config.logLevel || (this.config.logLevel = et.VERBOSE), At(this.config.logLevel), Ie(!!this.config.initialBlock, "config.initialBlock", "config.defaultBlock"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || "paragraph", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;
      const t3 = {
        type: this.config.defaultBlock,
        data: {}
      };
      this.config.placeholder = this.config.placeholder || false, this.config.sanitizer = this.config.sanitizer || {
        p: true,
        b: true,
        a: true
      }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : false, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {
      }), this.config.onChange = this.config.onChange || (() => {
      }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : true, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t3] }), this.config.readOnly = this.config.readOnly || false, (o2 = this.config.i18n) != null && o2.messages && $2.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i3 = this.config.i18n) == null ? void 0 : i3.direction) || "ltr";
    }
    get configuration() {
      return this.config;
    }
    async validate() {
      const { holderId: e2, holder: t3 } = this.config;
      if (e2 && t3)
        throw Error("\xABholderId\xBB and \xABholder\xBB param can't assign at the same time.");
      if (J(t3) && !d.get(t3))
        throw Error(`element with ID \xAB${t3}\xBB is missing. Pass correct holder's ID.`);
      if (t3 && j(t3) && !d.isElement(t3))
        throw Error("\xABholder\xBB value must be an Element node");
    }
    init() {
      this.constructModules(), this.configureModules();
    }
    async start() {
      await [
        "Tools",
        "UI",
        "BlockManager",
        "Paste",
        "BlockSelection",
        "RectangleSelection",
        "CrossBlockSelection",
        "ReadOnly"
      ].reduce(
        (t3, o2) => t3.then(async () => {
          try {
            await this.moduleInstances[o2].prepare();
          } catch (i3) {
            if (i3 instanceof at)
              throw new Error(i3.message);
            T(`Module ${o2} was skipped because of %o`, "warn", i3);
          }
        }),
        Promise.resolve()
      );
    }
    render() {
      return this.moduleInstances.Renderer.render(this.config.data.blocks);
    }
    constructModules() {
      Object.entries(ui).forEach(([e2, t3]) => {
        try {
          this.moduleInstances[e2] = new t3({
            config: this.configuration,
            eventsDispatcher: this.eventsDispatcher
          });
        } catch (o2) {
          T("[constructModules]", `Module ${e2} skipped because`, "error", o2);
        }
      });
    }
    configureModules() {
      for (const e2 in this.moduleInstances)
        Object.prototype.hasOwnProperty.call(this.moduleInstances, e2) && (this.moduleInstances[e2].state = this.getModulesDiff(e2));
    }
    getModulesDiff(e2) {
      const t3 = {};
      for (const o2 in this.moduleInstances)
        o2 !== e2 && (t3[o2] = this.moduleInstances[o2]);
      return t3;
    }
  };
  var fi = class {
    static get version() {
      return "2.27.2";
    }
    constructor(e2) {
      let t3 = () => {
      };
      j(e2) && D(e2.onReady) && (t3 = e2.onReady);
      const o2 = new pi(e2);
      this.isReady = o2.isReady.then(() => {
        this.exportAPI(o2), t3();
      });
    }
    exportAPI(e2) {
      const t3 = ["configuration"], o2 = () => {
        Object.values(e2.moduleInstances).forEach((n2) => {
          D(n2.destroy) && n2.destroy(), n2.listeners.removeAll();
        }), e2 = null;
        for (const n2 in this)
          Object.prototype.hasOwnProperty.call(this, n2) && delete this[n2];
        Object.setPrototypeOf(this, null);
      };
      t3.forEach((n2) => {
        this[n2] = e2[n2];
      }), this.destroy = o2, Object.setPrototypeOf(this, e2.moduleInstances.API.methods), delete this.exportAPI, Object.entries({
        blocks: {
          clear: "clear",
          render: "render"
        },
        caret: {
          focus: "focus"
        },
        events: {
          on: "on",
          off: "off",
          emit: "emit"
        },
        saver: {
          save: "save"
        }
      }).forEach(([n2, r2]) => {
        Object.entries(r2).forEach(([a2, l2]) => {
          this[l2] = e2.moduleInstances.API.methods[n2][a2];
        });
      });
    }
  };

  // frappe/public/js/frappe/views/workspace/workspace.js
  var import_editorjs_undo = __toESM(require_bundle());
  frappe.standard_pages["Workspaces"] = function() {
    var wrapper = frappe.container.add_page("Workspaces");
    frappe.ui.make_app_page({
      parent: wrapper,
      name: "Workspaces",
      title: __("Workspace")
    });
    frappe.workspace = new frappe.views.Workspace(wrapper);
    $(wrapper).bind("show", function() {
      frappe.workspace.show();
    });
  };
  frappe.views.Workspace = class Workspace {
    constructor(wrapper) {
      this.wrapper = $(wrapper);
      this.page = wrapper.page;
      this.blocks = frappe.workspace_block.blocks;
      this.is_read_only = true;
      this.pages = {};
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.current_page = {};
      this.sidebar_items = {
        public: {},
        private: {}
      };
      this.sidebar_categories = ["My Workspaces", "Public"];
      this.indicator_colors = [
        "green",
        "cyan",
        "blue",
        "orange",
        "yellow",
        "gray",
        "grey",
        "red",
        "pink",
        "darkgrey",
        "purple",
        "light-blue"
      ];
      this.prepare_container();
      this.setup_pages();
      this.register_awesomebar_shortcut();
    }
    prepare_container() {
      let list_sidebar = $(`
			<div class="list-sidebar overlay-sidebar hidden-xs hidden-sm">
				<div class="desk-sidebar list-unstyled sidebar-menu"></div>
			</div>
		`).appendTo(this.wrapper.find(".layout-side-section"));
      this.sidebar = list_sidebar.find(".desk-sidebar");
      this.body = this.wrapper.find(".layout-main-section");
    }
    async setup_pages(reload) {
      !this.discard && this.create_page_skeleton();
      !this.discard && this.create_sidebar_skeleton();
      this.sidebar_pages = !this.discard ? await this.get_pages() : this.sidebar_pages;
      this.cached_pages = $.extend(true, {}, this.sidebar_pages);
      this.all_pages = this.sidebar_pages.pages;
      this.has_access = this.sidebar_pages.has_access;
      this.all_pages.forEach((page) => {
        page.is_editable = !page.public || this.has_access;
      });
      this.public_pages = this.all_pages.filter((page) => page.public);
      this.private_pages = this.all_pages.filter((page) => !page.public);
      if (this.all_pages) {
        frappe.workspaces = {};
        for (let page of this.all_pages) {
          frappe.workspaces[frappe.router.slug(page.name)] = {
            title: page.title,
            public: page.public
          };
        }
        this.make_sidebar();
        reload && this.show();
      }
    }
    get_pages() {
      return frappe.xcall("frappe.desk.desktop.get_workspace_sidebar_items");
    }
    sidebar_item_container(item) {
      item.indicator_color = item.indicator_color || this.indicator_colors[Math.floor(Math.random() * 12)];
      return $(`
			<div
				class="sidebar-item-container ${item.is_editable ? "is-draggable" : ""}"
				item-parent="${item.parent_page}"
				item-name="${item.title}"
				item-public="${item.public || 0}"
				item-is-hidden="${item.is_hidden || 0}"
			>
				<div class="desk-sidebar-item standard-sidebar-item ${item.selected ? "selected" : ""}">
					<a
						href="/app/${item.public ? frappe.router.slug(item.title) : "private/" + frappe.router.slug(item.title)}"
						class="item-anchor ${item.is_editable ? "" : "block-click"}" title="${__(item.title)}"
					>
						<span class="sidebar-item-icon" item-icon=${item.icon || "folder-normal"}>
							${item.public ? frappe.utils.icon(item.icon || "folder-normal", "md") : `<span class="indicator ${item.indicator_color}"></span>`}
						</span>
						<span class="sidebar-item-label">${__(item.title)}<span>
					</a>
					<div class="sidebar-item-control"></div>
				</div>
				<div class="sidebar-child-item nested-container"></div>
			</div>
		`);
    }
    make_sidebar() {
      if (this.sidebar.find(".standard-sidebar-section")[0]) {
        this.sidebar.find(".standard-sidebar-section").remove();
      }
      this.sidebar_categories.forEach((category) => {
        let root_pages = this.public_pages.filter(
          (page) => page.parent_page == "" || page.parent_page == null
        );
        if (category != "Public") {
          root_pages = this.private_pages.filter(
            (page) => page.parent_page == "" || page.parent_page == null
          );
        }
        root_pages = root_pages.uniqBy((d3) => d3.title);
        this.build_sidebar_section(category, root_pages);
      });
      this.sidebar.find(".selected").length && !frappe.dom.is_element_in_viewport(this.sidebar.find(".selected")) && this.sidebar.find(".selected")[0].scrollIntoView();
      this.remove_sidebar_skeleton();
    }
    build_sidebar_section(title, root_pages) {
      let sidebar_section = $(
        `<div class="standard-sidebar-section nested-container" data-title="${title}"></div>`
      );
      let $title = $(`<div class="standard-sidebar-label">
			<span>${frappe.utils.icon("es-line-down", "xs")}</span>
			<span class="section-title">${__(title)}<span>
		</div>`).appendTo(sidebar_section);
      this.prepare_sidebar(root_pages, sidebar_section, this.sidebar);
      $title.on("click", (e2) => {
        let icon = $(e2.target).find("span use").attr("href") === "#es-line-down" ? "#es-line-right-chevron" : "#es-line-down";
        $(e2.target).find("span use").attr("href", icon);
        $(e2.target).parent().find(".sidebar-item-container").toggleClass("hidden");
      });
      if (Object.keys(root_pages).length === 0) {
        sidebar_section.addClass("hidden");
      }
      if (sidebar_section.find(".sidebar-item-container").length && sidebar_section.find("> [item-is-hidden='0']").length == 0) {
        sidebar_section.addClass("hidden show-in-edit-mode");
      }
    }
    prepare_sidebar(items, child_container, item_container) {
      items.forEach((item) => this.append_item(item, child_container));
      child_container.appendTo(item_container);
    }
    append_item(item, container) {
      let is_current_page = frappe.router.slug(item.title) == frappe.router.slug(this.get_page_to_show().name) && item.public == this.get_page_to_show().public;
      item.selected = is_current_page;
      if (is_current_page) {
        this.current_page = { name: item.title, public: item.public };
      }
      let $item_container = this.sidebar_item_container(item);
      let sidebar_control = $item_container.find(".sidebar-item-control");
      this.add_sidebar_actions(item, sidebar_control);
      let pages = item.public ? this.public_pages : this.private_pages;
      let child_items = pages.filter((page) => page.parent_page == item.title);
      if (child_items.length > 0) {
        let child_container = $item_container.find(".sidebar-child-item");
        child_container.addClass("hidden");
        this.prepare_sidebar(child_items, child_container, $item_container);
      }
      $item_container.appendTo(container);
      this.sidebar_items[item.public ? "public" : "private"][item.title] = $item_container;
      if ($item_container.parent().hasClass("hidden") && is_current_page) {
        $item_container.parent().toggleClass("hidden");
      }
      this.add_drop_icon(item, sidebar_control, $item_container);
      if (child_items.length > 0) {
        $item_container.find(".drop-icon").first().addClass("show-in-edit-mode");
      }
    }
    add_drop_icon(item, sidebar_control, item_container) {
      let drop_icon = "es-line-down";
      if (item_container.find(`[item-name="${this.current_page.name}"]`).length) {
        drop_icon = "small-up";
      }
      let $child_item_section = item_container.find(".sidebar-child-item");
      let $drop_icon = $(
        `<span class="drop-icon hidden">${frappe.utils.icon(drop_icon, "sm")}</span>`
      ).appendTo(sidebar_control);
      let pages = item.public ? this.public_pages : this.private_pages;
      if (pages.some(
        (e2) => e2.parent_page == item.title && (e2.is_hidden == 0 || !this.is_read_only)
      )) {
        $drop_icon.removeClass("hidden");
      }
      $drop_icon.on("click", () => {
        let icon = $drop_icon.find("use").attr("href") === "#es-line-down" ? "#es-line-up" : "#es-line-down";
        $drop_icon.find("use").attr("href", icon);
        $child_item_section.toggleClass("hidden");
      });
    }
    show() {
      if (!this.all_pages) {
        setTimeout(() => this.show(), 100);
        return;
      }
      let page = this.get_page_to_show();
      if (!frappe.router.current_route[0]) {
        frappe.route_flags.replace_route = true;
        frappe.set_route(frappe.router.slug(page.public ? page.name : "private/" + page.name));
        return;
      }
      this.page.set_title(__(page.name));
      this.update_selected_sidebar(this.current_page, false);
      this.update_selected_sidebar(page, true);
      this.show_page(page);
    }
    update_selected_sidebar(page, add) {
      let section = page.public ? "public" : "private";
      if (this.sidebar && this.sidebar_items[section] && this.sidebar_items[section][page.name]) {
        let $sidebar = this.sidebar_items[section][page.name];
        let pages = page.public ? this.public_pages : this.private_pages;
        let sidebar_page = pages.find((p2) => p2.title == page.name);
        if (add) {
          $sidebar[0].firstElementChild.classList.add("selected");
          if (sidebar_page)
            sidebar_page.selected = true;
          $sidebar.parent().hasClass("sidebar-child-item") && $sidebar.parent().hasClass("hidden") && $sidebar.parent().removeClass("hidden");
          this.current_page = { name: page.name, public: page.public };
          localStorage.current_page = page.name;
          localStorage.is_current_page_public = page.public;
        } else {
          $sidebar[0].firstElementChild.classList.remove("selected");
          if (sidebar_page)
            sidebar_page.selected = false;
        }
      }
    }
    get_data(page) {
      return frappe.call("frappe.desk.desktop.get_desktop_page", {
        page
      }).then((data) => {
        this.page_data = data.message;
        this.pages[page.name] && delete this.pages[page.name];
        this.pages[page.name] = data.message;
        if (!this.page_data || Object.keys(this.page_data).length === 0)
          return;
        if (this.page_data.charts && this.page_data.charts.items.length === 0)
          return;
        return frappe.dashboard_utils.get_dashboard_settings().then((settings) => {
          if (settings) {
            let chart_config = settings.chart_config ? JSON.parse(settings.chart_config) : {};
            this.page_data.charts.items.map((chart) => {
              chart.chart_settings = chart_config[chart.chart_name] || {};
            });
            this.pages[page.name] = this.page_data;
          }
        });
      });
    }
    get_page_to_show() {
      let default_page;
      if (localStorage.current_page && this.all_pages.filter((page2) => page2.title == localStorage.current_page).length != 0) {
        default_page = {
          name: localStorage.current_page,
          public: localStorage.is_current_page_public == "true"
        };
      } else if (Object.keys(this.all_pages).length !== 0) {
        default_page = { name: this.all_pages[0].title, public: this.all_pages[0].public };
      } else {
        default_page = { name: "Build", public: true };
      }
      const route = frappe.get_route();
      const page = (route[1] == "private" ? route[2] : route[1]) || default_page.name;
      const is_public = route[1] ? route[1] != "private" : default_page.public;
      return { name: page, public: is_public };
    }
    async show_page(page) {
      if (!this.body.find("#editorjs")[0]) {
        this.$page = $(`
				<div id="editorjs" class="desk-page page-main-content"></div>
			`).appendTo(this.body);
      }
      if (this.all_pages.length) {
        this.create_page_skeleton();
        let pages = page.public && this.public_pages.length ? this.public_pages : this.private_pages;
        let current_page = pages.filter((p2) => p2.title == page.name)[0];
        this.content = current_page && JSON.parse(current_page.content);
        this.content && this.add_custom_cards_in_content();
        $(".item-anchor").addClass("disable-click");
        if (this.pages && this.pages[current_page.name]) {
          this.page_data = this.pages[current_page.name];
        } else {
          await frappe.after_ajax(() => this.get_data(current_page));
        }
        this.setup_actions(page);
        this.prepare_editorjs();
        $(".item-anchor").removeClass("disable-click");
        this.remove_page_skeleton();
      }
    }
    add_custom_cards_in_content() {
      let index = -1;
      this.content.find((item, i3) => {
        if (item.type == "card")
          index = i3;
      });
      if (index !== -1) {
        this.content.splice(index + 1, 0, {
          type: "card",
          data: { card_name: "Custom Documents", col: 4 }
        });
        this.content.splice(index + 2, 0, {
          type: "card",
          data: { card_name: "Custom Reports", col: 4 }
        });
      }
    }
    prepare_editorjs() {
      if (this.editor) {
        this.editor.isReady.then(() => {
          this.editor.configuration.tools.chart.config.page_data = this.page_data;
          this.editor.configuration.tools.shortcut.config.page_data = this.page_data;
          this.editor.configuration.tools.card.config.page_data = this.page_data;
          this.editor.configuration.tools.onboarding.config.page_data = this.page_data;
          this.editor.configuration.tools.quick_list.config.page_data = this.page_data;
          this.editor.configuration.tools.number_card.config.page_data = this.page_data;
          this.editor.configuration.tools.custom_block.config.page_data = this.page_data;
          this.editor.render({ blocks: this.content || [] });
        });
      } else {
        this.initialize_editorjs(this.content);
      }
    }
    setup_actions(page) {
      let pages = page.public ? this.public_pages : this.private_pages;
      let current_page = pages.filter((p2) => p2.title == page.name)[0];
      if (!this.is_read_only) {
        this.setup_customization_buttons(current_page);
        return;
      }
      this.clear_page_actions();
      this.page.set_secondary_action(
        __("Edit"),
        async () => {
          if (!this.editor || !this.editor.readOnly)
            return;
          this.is_read_only = false;
          this.toggle_hidden_workspaces(true);
          await this.editor.readOnly.toggle();
          this.editor.isReady.then(() => {
            this.body.addClass("edit-mode");
            this.initialize_editorjs_undo();
            this.setup_customization_buttons(current_page);
            this.show_sidebar_actions();
            this.make_blocks_sortable();
          });
        },
        "es-line-edit"
      );
      this.page.add_inner_button(__("Create Workspace"), () => {
        this.initialize_new_page();
      });
    }
    initialize_editorjs_undo() {
      this.undo = new import_editorjs_undo.default({ editor: this.editor });
      this.undo.initialize({ blocks: this.content || [] });
      this.undo.readOnly = false;
    }
    clear_page_actions() {
      this.page.clear_primary_action();
      this.page.clear_secondary_action();
      this.page.clear_inner_toolbar();
    }
    setup_customization_buttons(page) {
      this.clear_page_actions();
      page.is_editable && this.page.set_primary_action(
        __("Save"),
        () => {
          this.clear_page_actions();
          this.body.removeClass("edit-mode");
          this.save_page(page).then((saved) => {
            if (!saved)
              return;
            this.undo.readOnly = true;
            this.editor.readOnly.toggle();
            this.is_read_only = true;
          });
        },
        null,
        __("Saving")
      );
      this.page.set_secondary_action(__("Discard"), async () => {
        this.body.removeClass("edit-mode");
        this.discard = true;
        this.clear_page_actions();
        this.toggle_hidden_workspaces(false);
        await this.editor.readOnly.toggle();
        this.is_read_only = true;
        this.sidebar_pages = this.cached_pages;
        this.reload();
        frappe.show_alert({ message: __("Customizations Discarded"), indicator: "info" });
      });
      if (page.name && this.has_access) {
        this.page.add_inner_button(__("Settings"), () => {
          frappe.set_route(`workspace/${page.name}`);
        });
      }
    }
    toggle_hidden_workspaces(show) {
      $(".desk-sidebar").toggleClass("show-hidden-workspaces", show);
    }
    show_sidebar_actions() {
      this.sidebar.find(".standard-sidebar-section").addClass("show-control");
      this.make_sidebar_sortable();
    }
    add_sidebar_actions(item, sidebar_control, is_new) {
      if (!item.is_editable) {
        sidebar_control.parent().click(() => {
          !this.is_read_only && frappe.show_alert(
            {
              message: __("Only Workspace Manager can sort or edit this page"),
              indicator: "info"
            },
            5
          );
        });
        frappe.utils.add_custom_button(
          frappe.utils.icon("es-line-duplicate", "sm"),
          () => this.duplicate_page(item),
          "duplicate-page",
          __("Duplicate Workspace"),
          null,
          sidebar_control
        );
      } else if (item.is_hidden) {
        frappe.utils.add_custom_button(
          frappe.utils.icon("es-line-preview", "sm"),
          (e2) => this.unhide_workspace(item, e2),
          "unhide-workspace-btn",
          __("Unhide Workspace"),
          null,
          sidebar_control
        );
      } else {
        frappe.utils.add_custom_button(
          frappe.utils.icon("es-line-drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          sidebar_control
        );
        !is_new && this.add_settings_button(item, sidebar_control);
      }
    }
    get_parent_pages(page) {
      this.public_parent_pages = [
        "",
        ...this.public_pages.filter((p2) => !p2.parent_page).map((p2) => p2.title)
      ];
      this.private_parent_pages = [
        "",
        ...this.private_pages.filter((p2) => !p2.parent_page).map((p2) => p2.title)
      ];
      if (page) {
        return page.public ? this.public_parent_pages : this.private_parent_pages;
      }
    }
    edit_page(item) {
      var me2 = this;
      let old_item = item;
      let parent_pages = this.get_parent_pages(item);
      let idx = parent_pages.findIndex((x2) => x2 == item.title);
      if (idx !== -1)
        parent_pages.splice(idx, 1);
      const d3 = new frappe.ui.Dialog({
        title: __("Update Details"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1,
            default: item.title
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: item.parent_page
          },
          {
            label: __("Public"),
            fieldtype: "Check",
            fieldname: "is_public",
            depends_on: `eval:${this.has_access}`,
            default: item.public,
            onchange: function() {
              d3.set_df_property(
                "parent",
                "options",
                this.get_value() ? me2.public_parent_pages : me2.private_parent_pages
              );
            }
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: item.icon,
            change: function() {
              d3.set_df_property("indicator_color", "hidden", this.get_value() ? 1 : 0);
            }
          },
          {
            label: __("Indicator color"),
            fieldtype: "Select",
            fieldname: "indicator_color",
            options: this.indicator_colors,
            default: item.indicator_color
          }
        ],
        primary_action_label: __("Update"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(values.title);
          let is_title_changed = values.title != old_item.title;
          let is_section_changed = values.is_public != old_item.public;
          if ((is_title_changed || is_section_changed) && !this.validate_page(values, old_item))
            return;
          d3.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.update_page",
            args: {
              name: old_item.name,
              title: values.title,
              icon: values.icon || "",
              indicator_color: values.indicator_color || "",
              parent: values.parent || "",
              public: values.is_public || 0
            },
            callback: function(res) {
              if (res.message) {
                let message = __("Workspace {0} Edited Successfully", [
                  old_item.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.update_sidebar(old_item, values);
          if (this.make_page_selected) {
            let pre_url = values.is_public ? "" : "private/";
            let route = pre_url + frappe.router.slug(values.title);
            frappe.set_route(route);
            this.make_page_selected = false;
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      });
      d3.show();
    }
    update_sidebar(old_item, new_item) {
      let is_section_changed = old_item.public != (new_item.is_public || 0);
      let is_title_changed = old_item.title != new_item.title;
      let new_updated_item = __spreadValues({}, old_item);
      let pages = old_item.public ? this.public_pages : this.private_pages;
      let child_items = pages.filter((page) => page.parent_page == old_item.title);
      this.make_page_selected = old_item.selected;
      new_updated_item.title = new_item.title;
      new_updated_item.icon = new_item.icon;
      new_updated_item.indicator_color = new_item.indicator_color;
      new_updated_item.parent_page = new_item.parent || "";
      new_updated_item.public = new_item.is_public;
      if (is_title_changed || is_section_changed) {
        if (new_item.is_public) {
          new_updated_item.name = new_item.title;
          new_updated_item.label = new_item.title;
          new_updated_item.for_user = "";
        } else {
          let user = frappe.session.user;
          new_updated_item.name = `${new_item.title}-${user}`;
          new_updated_item.label = `${new_item.title}-${user}`;
          new_updated_item.for_user = user;
        }
      }
      this.update_cached_values(old_item, new_updated_item);
      if (child_items.length) {
        child_items.forEach((child) => {
          child.parent_page = new_item.title;
          is_section_changed && this.update_child_sidebar(child, new_item);
        });
      }
    }
    update_child_sidebar(child, new_item) {
      let old_child = __spreadValues({}, child);
      this.make_page_selected = child.selected;
      child.public = new_item.is_public;
      if (new_item.is_public) {
        child.name = child.title;
        child.label = child.title;
        child.for_user = "";
      } else {
        let user = frappe.session.user;
        child.name = `${child.title}-${user}`;
        child.label = `${child.title}-${user}`;
        child.for_user = user;
      }
      this.update_cached_values(old_child, child);
    }
    update_cached_values(old_item, new_item, duplicate, new_page) {
      let [from_pages, to_pages] = old_item.public ? [this.public_pages, this.private_pages] : [this.private_pages, this.public_pages];
      let old_item_index = from_pages.findIndex((page) => page.title == old_item.title);
      duplicate && old_item_index++;
      if (frappe.workspaces[frappe.router.slug(old_item.name)] || new_page) {
        !duplicate && delete frappe.workspaces[frappe.router.slug(old_item.name)];
        if (new_item) {
          frappe.workspaces[frappe.router.slug(new_item.name)] = { title: new_item.title };
        }
      }
      if (this.pages && this.pages[old_item.name] || new_page) {
        if (new_item) {
          this.pages[new_item.name] = this.pages[old_item.name] || {};
        }
        !duplicate && delete this.pages[old_item.name];
      }
      if (new_item) {
        let is_section_changed = old_item.public != (new_item.is_public || new_item.public || 0);
        if (is_section_changed) {
          !duplicate && from_pages.splice(old_item_index, 1);
          to_pages.push(new_item);
        } else if (new_page) {
          from_pages.push(new_item);
        } else {
          from_pages.splice(old_item_index, duplicate ? 0 : 1, new_item);
        }
      } else {
        from_pages.splice(old_item_index, 1);
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    add_settings_button(item, sidebar_control) {
      this.dropdown_list = [
        {
          label: __("Edit"),
          title: __("Edit Workspace"),
          icon: frappe.utils.icon("es-line-edit", "sm"),
          action: () => this.edit_page(item)
        },
        {
          label: __("Duplicate"),
          title: __("Duplicate Workspace"),
          icon: frappe.utils.icon("es-line-duplicate", "sm"),
          action: () => this.duplicate_page(item)
        },
        {
          label: __("Hide"),
          title: __("Hide Workspace"),
          icon: frappe.utils.icon("es-line-hide", "sm"),
          action: (e2) => this.hide_workspace(item, e2)
        }
      ];
      if (this.is_item_deletable(item)) {
        this.dropdown_list.push({
          label: __("Delete"),
          title: __("Delete Workspace"),
          icon: frappe.utils.icon("delete-active", "sm"),
          action: () => this.delete_page(item)
        });
      }
      let $button = $(`
			<div class="btn btn-xs setting-btn dropdown-btn" title="${__("Setting")}">
				${frappe.utils.icon("es-line-dot-horizontal", "xs")}
			</div>
			<div class="dropdown-list hidden"></div>
		`);
      let dropdown_item = function(label, title, icon, action) {
        let html = $(`
				<div class="dropdown-item" title="${title}">
					<span class="dropdown-item-icon">${icon}</span>
					<span class="dropdown-item-label">${label}</span>
				</div>
			`);
        html.click((event2) => {
          event2.stopPropagation();
          action && action(event2);
        });
        return html;
      };
      $button.filter(".dropdown-btn").click((event2) => {
        event2.stopPropagation();
        if ($button.filter(".dropdown-list.hidden").length) {
          $(".dropdown-list:not(.hidden)").addClass("hidden");
        }
        $button.filter(".dropdown-list").toggleClass("hidden");
      });
      sidebar_control.append($button);
      this.dropdown_list.forEach((i3) => {
        $button.filter(".dropdown-list").append(dropdown_item(i3.label, i3.title, i3.icon, i3.action));
      });
    }
    is_item_deletable(item) {
      if (!item.public || item.public && (!item.module || item.module && frappe.boot.developer_mode))
        return true;
      return false;
    }
    delete_page(page) {
      frappe.confirm(
        __("Are you sure you want to delete page {0}?", [page.title.bold()]),
        () => {
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.delete_page",
            args: { page },
            callback: function(res) {
              if (res.message) {
                let page2 = res.message;
                let message = __("Workspace {0} Deleted Successfully", [
                  page2.title.bold()
                ]);
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          this.page.clear_primary_action();
          this.update_cached_values(page);
          if (this.current_page.name == page.title && this.current_page.public == page.public) {
            frappe.set_route("/");
          }
          this.make_sidebar();
          this.show_sidebar_actions();
        }
      );
    }
    duplicate_page(page) {
      var me2 = this;
      let new_page = __spreadValues({}, page);
      if (!this.has_access && new_page.public) {
        new_page.public = 0;
      }
      let parent_pages = this.get_parent_pages({ public: new_page.public });
      const d3 = new frappe.ui.Dialog({
        title: __("Create Duplicate"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: parent_pages,
            default: new_page.parent_page
          },
          {
            label: __("Public"),
            fieldtype: "Check",
            fieldname: "is_public",
            depends_on: `eval:${this.has_access}`,
            default: new_page.public,
            onchange: function() {
              d3.set_df_property(
                "parent",
                "options",
                this.get_value() ? me2.public_parent_pages : me2.private_parent_pages
              );
            }
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            default: new_page.icon,
            change: function() {
              d3.set_df_property("indicator_color", "hidden", this.get_value() ? 1 : 0);
            }
          },
          {
            label: __("Indicator color"),
            fieldtype: "Select",
            fieldname: "indicator_color",
            options: this.indicator_colors,
            default: new_page.indicator_color
          }
        ],
        primary_action_label: __("Duplicate"),
        primary_action: (values) => {
          if (!this.validate_page(values))
            return;
          d3.hide();
          frappe.call({
            method: "frappe.desk.doctype.workspace.workspace.duplicate_page",
            args: {
              page_name: page.name,
              new_page: values
            },
            callback: function(res) {
              if (res.message) {
                let new_page2 = res.message;
                let message = __(
                  "Duplicate of {0} named as {1} is created successfully",
                  [page.title.bold(), new_page2.title.bold()]
                );
                frappe.show_alert({ message, indicator: "green" });
              }
            }
          });
          new_page.title = values.title;
          new_page.public = values.is_public || 0;
          new_page.name = values.title + (new_page.public ? "" : "-" + frappe.session.user);
          new_page.label = new_page.name;
          new_page.icon = values.icon;
          new_page.indicator_color = values.indicator_color;
          new_page.parent_page = values.parent || "";
          new_page.for_user = new_page.public ? "" : frappe.session.user;
          new_page.is_editable = !new_page.public;
          new_page.selected = true;
          this.update_cached_values(page, new_page, true);
          let pre_url = values.is_public ? "" : "private/";
          let route = pre_url + frappe.router.slug(values.title);
          frappe.set_route(route);
          me2.make_sidebar();
          me2.show_sidebar_actions();
        }
      });
      d3.show();
    }
    hide_unhide_workspace(page, event2, hide) {
      page.is_hidden = hide;
      let sidebar_control = event2.target.closest(".sidebar-item-control");
      let sidebar_item_container = sidebar_control.closest(".sidebar-item-container");
      $(sidebar_item_container).attr("item-is-hidden", hide);
      $(sidebar_control).empty();
      this.add_sidebar_actions(page, $(sidebar_control));
      this.add_drop_icon(page, $(sidebar_control), $(sidebar_item_container));
      let cached_page = this.cached_pages.pages.findIndex((p2) => p2.name === page.name);
      if (cached_page !== -1) {
        this.cached_pages.pages[cached_page].is_hidden = hide;
      }
      let method = hide ? "hide_page" : "unhide_page";
      frappe.call({
        method: "frappe.desk.doctype.workspace.workspace." + method,
        args: {
          page_name: page.name
        },
        callback: (r2) => {
          if (!r2.message)
            return;
          let message = hide ? "{0} is hidden successfully" : "{0} is unhidden successfully";
          message = __(message, [page.title.bold()]);
          frappe.show_alert({ message, indicator: "green" });
        }
      });
    }
    hide_workspace(page, event2) {
      this.hide_unhide_workspace(page, event2, 1);
    }
    unhide_workspace(page, event2) {
      this.hide_unhide_workspace(page, event2, 0);
    }
    make_sidebar_sortable() {
      let me2 = this;
      $(".nested-container").each(function() {
        new Sortable(this, {
          handle: ".drag-handle",
          draggable: ".sidebar-item-container.is-draggable",
          group: "nested",
          animation: 150,
          fallbackOnBody: true,
          swapThreshold: 0.65,
          onEnd: function(evt) {
            let is_public = $(evt.item).attr("item-public") == "1";
            me2.prepare_sorted_sidebar(is_public);
            me2.update_sorted_sidebar();
          }
        });
      });
    }
    prepare_sorted_sidebar(is_public) {
      let pages = is_public ? this.public_pages : this.private_pages;
      if (is_public) {
        this.sorted_public_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").last(),
          pages
        );
      } else {
        this.sorted_private_items = this.sort_sidebar(
          this.sidebar.find(".standard-sidebar-section").first(),
          pages
        );
      }
      this.sidebar_pages.pages = [...this.public_pages, ...this.private_pages];
      this.cached_pages = this.sidebar_pages;
    }
    sort_sidebar($sidebar_section, pages) {
      let sorted_items = [];
      Array.from($sidebar_section.find(".sidebar-item-container")).forEach((page, i3) => {
        let parent_page = "";
        if (page.closest(".nested-container").classList.contains("sidebar-child-item")) {
          parent_page = page.parentElement.parentElement.attributes["item-name"].value;
        }
        sorted_items.push({
          title: page.attributes["item-name"].value,
          parent_page,
          public: page.attributes["item-public"].value
        });
        let $drop_icon = $(page).find(".sidebar-item-control .drop-icon").first();
        if ($(page).find(".sidebar-child-item > *").length != 0) {
          $drop_icon.removeClass("hidden");
        } else {
          $drop_icon.addClass("hidden");
        }
        let from_index = pages.findIndex((p2) => p2.title == page.attributes["item-name"].value);
        let element = pages[from_index];
        element.parent_page = parent_page;
        if (from_index != i3) {
          pages.splice(from_index, 1);
          pages.splice(i3, 0, element);
        }
      });
      return sorted_items;
    }
    update_sorted_sidebar() {
      if (this.sorted_public_items || this.sorted_private_items) {
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.sort_pages",
          args: {
            sb_public_items: this.sorted_public_items,
            sb_private_items: this.sorted_private_items
          },
          callback: function(res) {
            if (res.message) {
              let message = `Sidebar Updated Successfully`;
              frappe.show_alert({ message: __(message), indicator: "green" });
            }
          }
        });
      }
    }
    make_blocks_sortable() {
      let me2 = this;
      this.page_sortable = Sortable.create(
        this.page.main.find(".codex-editor__redactor").get(0),
        {
          handle: ".drag-handle",
          draggable: ".ce-block",
          animation: 150,
          onEnd: function(evt) {
            me2.editor.blocks.move(evt.newIndex, evt.oldIndex);
          },
          setData: function() {
          }
        }
      );
    }
    initialize_new_page() {
      var me2 = this;
      this.get_parent_pages();
      const d3 = new frappe.ui.Dialog({
        title: __("New Workspace"),
        fields: [
          {
            label: __("Title"),
            fieldtype: "Data",
            fieldname: "title",
            reqd: 1
          },
          {
            label: __("Parent"),
            fieldtype: "Select",
            fieldname: "parent",
            options: this.private_parent_pages
          },
          {
            label: __("Public"),
            fieldtype: "Check",
            fieldname: "is_public",
            depends_on: `eval:${this.has_access}`,
            onchange: function() {
              d3.set_df_property(
                "parent",
                "options",
                this.get_value() ? me2.public_parent_pages : me2.private_parent_pages
              );
            }
          },
          {
            fieldtype: "Column Break"
          },
          {
            label: __("Icon"),
            fieldtype: "Icon",
            fieldname: "icon",
            change: function() {
              d3.set_df_property("indicator_color", "hidden", this.get_value() ? 1 : 0);
            }
          },
          {
            label: __("Indicator color"),
            fieldtype: "Select",
            fieldname: "indicator_color",
            options: this.indicator_colors
          }
        ],
        primary_action_label: __("Create"),
        primary_action: (values) => {
          values.title = frappe.utils.escape_html(values.title);
          if (!this.validate_page(values))
            return;
          d3.hide();
          this.initialize_editorjs_undo();
          this.setup_customization_buttons({ is_editable: true });
          let name2 = values.title + (values.is_public ? "" : "-" + frappe.session.user);
          let blocks = [
            {
              type: "header",
              data: { text: values.title }
            }
          ];
          let new_page = {
            content: JSON.stringify(blocks),
            name: name2,
            label: name2,
            title: values.title,
            public: values.is_public || 0,
            for_user: values.is_public ? "" : frappe.session.user,
            icon: values.icon,
            indicator_color: values.indicator_color,
            parent_page: values.parent || "",
            is_editable: true,
            selected: true
          };
          this.editor.render({
            blocks
          }).then(async () => {
            if (this.editor.configuration.readOnly) {
              this.is_read_only = false;
              await this.editor.readOnly.toggle();
            }
            frappe.call({
              method: "frappe.desk.doctype.workspace.workspace.new_page",
              args: {
                new_page
              },
              callback: function(res) {
                if (res.message) {
                  let message = __("Workspace {0} Created Successfully", [
                    new_page.title.bold()
                  ]);
                  frappe.show_alert({
                    message,
                    indicator: "green"
                  });
                }
              }
            });
            this.update_cached_values(new_page, new_page, true, true);
            let pre_url = new_page.public ? "" : "private/";
            let route = pre_url + frappe.router.slug(new_page.title);
            frappe.set_route(route);
            this.make_sidebar();
            this.show_sidebar_actions();
            localStorage.setItem("new_workspace", JSON.stringify(new_page));
          });
        }
      });
      d3.show();
    }
    validate_page(new_page, old_page) {
      let message = "";
      let [from_pages, to_pages] = new_page.is_public ? [this.private_pages, this.public_pages] : [this.public_pages, this.private_pages];
      let section = this.sidebar_categories[new_page.is_public];
      if (to_pages && to_pages.filter((p2) => p2.title == new_page.title)[0]) {
        message = __("Page with title {0} already exist.", [new_page.title.bold()]);
      }
      if (frappe.router.doctype_route_exist(frappe.router.slug(new_page.title))) {
        message = __("Doctype with same route already exist. Please choose different title.");
      }
      let child_pages = old_page && from_pages.filter((p2) => p2.parent_page == old_page.title);
      if (child_pages) {
        child_pages.every((child_page) => {
          if (to_pages && to_pages.find((p2) => p2.title == child_page.title)) {
            message = __(
              "One of the child page with name {0} already exist in {1} Section. Please update the name of the child page first before moving",
              [child_page.title.bold(), section.bold()]
            );
            cur_dialog.hide();
            return false;
          }
          return true;
        });
      }
      if (message) {
        frappe.throw(__(message));
        return false;
      }
      return true;
    }
    add_page_to_sidebar(page) {
      let $sidebar = $(".standard-sidebar-section");
      let item = __spreadValues({}, page);
      item.selected = true;
      item.is_editable = true;
      let $sidebar_item = this.sidebar_item_container(item);
      this.add_sidebar_actions(item, $sidebar_item.find(".sidebar-item-control"), true);
      $sidebar_item.find(".sidebar-item-control .drag-handle").css("margin-right", "8px");
      let sidebar_section = item.is_public ? $sidebar[1] : $sidebar[0];
      if (!item.parent) {
        !item.is_public && $sidebar.first().removeClass("hidden");
        $sidebar_item.appendTo(sidebar_section);
      } else {
        let $item_container = $(sidebar_section).find(`[item-name="${item.parent}"]`);
        let $child_section = $item_container.find(".sidebar-child-item");
        let $drop_icon = $item_container.find(".drop-icon");
        if (!$child_section[0]) {
          $child_section = $(
            `<div class="sidebar-child-item hidden nested-container"></div>`
          ).appendTo($item_container);
          $drop_icon.toggleClass("hidden");
        }
        $sidebar_item.appendTo($child_section);
        $child_section.removeClass("hidden");
        $item_container.find(".drop-icon.hidden").removeClass("hidden");
        $item_container.find(".drop-icon use").attr("href", "#es-line-up");
      }
      let section = item.is_public ? "public" : "private";
      if (this.sidebar_items && this.sidebar_items[section] && !this.sidebar_items[section][item.title]) {
        this.sidebar_items[section][item.title] = $sidebar_item;
      }
    }
    initialize_editorjs(blocks) {
      this.tools = {
        header: {
          class: this.blocks["header"],
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            default_size: 4
          }
        },
        paragraph: {
          class: this.blocks["paragraph"],
          inlineToolbar: ["HeaderSize", "bold", "italic", "link"],
          config: {
            placeholder: __("Choose a block or continue typing")
          }
        },
        chart: {
          class: this.blocks["chart"],
          config: {
            page_data: this.page_data || []
          }
        },
        card: {
          class: this.blocks["card"],
          config: {
            page_data: this.page_data || []
          }
        },
        shortcut: {
          class: this.blocks["shortcut"],
          config: {
            page_data: this.page_data || []
          }
        },
        onboarding: {
          class: this.blocks["onboarding"],
          config: {
            page_data: this.page_data || []
          }
        },
        quick_list: {
          class: this.blocks["quick_list"],
          config: {
            page_data: this.page_data || []
          }
        },
        number_card: {
          class: this.blocks["number_card"],
          config: {
            page_data: this.page_data || []
          }
        },
        custom_block: {
          class: this.blocks["custom_block"],
          config: {
            page_data: this.page_data || []
          }
        },
        spacer: this.blocks["spacer"],
        HeaderSize: frappe.workspace_block.tunes["header_size"]
      };
      this.editor = new fi({
        data: {
          blocks: blocks || []
        },
        tools: this.tools,
        autofocus: false,
        readOnly: true,
        logLevel: "ERROR"
      });
    }
    save_page(page) {
      let me2 = this;
      this.current_page = { name: page.title, public: page.public };
      return this.editor.save().then((outputData) => {
        let new_widgets = {};
        outputData.blocks.forEach((item) => {
          if (item.data.new) {
            if (!new_widgets[item.type]) {
              new_widgets[item.type] = [];
            }
            new_widgets[item.type].push(item.data.new);
            delete item.data["new"];
          }
        });
        let blocks = outputData.blocks.filter(
          (item) => item.type != "card" || item.data.card_name !== "Custom Documents" && item.data.card_name !== "Custom Reports"
        );
        if (page.content == JSON.stringify(blocks) && Object.keys(new_widgets).length === 0) {
          this.setup_customization_buttons(page);
          frappe.show_alert({
            message: __("No changes made on the page"),
            indicator: "warning"
          });
          return false;
        }
        this.create_page_skeleton();
        page.content = JSON.stringify(blocks);
        frappe.call({
          method: "frappe.desk.doctype.workspace.workspace.save_page",
          args: {
            title: page.title,
            public: page.public || 0,
            new_widgets,
            blocks: JSON.stringify(blocks)
          },
          callback: function(res) {
            if (res.message) {
              me2.discard = true;
              me2.update_cached_values(page, page);
              me2.reload();
              frappe.show_alert({
                message: __("Page Saved Successfully"),
                indicator: "green"
              });
            }
          }
        });
        return true;
      }).catch((error) => {
        error;
      });
    }
    reload() {
      this.sorted_public_items = [];
      this.sorted_private_items = [];
      this.setup_pages(true);
      this.discard = false;
      this.undo.readOnly = true;
    }
    create_page_skeleton() {
      if (this.body.find(".workspace-skeleton").length)
        return;
      this.body.prepend(frappe.render_template("workspace_loading_skeleton"));
      this.body.find(".codex-editor").addClass("hidden");
    }
    remove_page_skeleton() {
      this.body.find(".codex-editor").removeClass("hidden");
      this.body.find(".workspace-skeleton").remove();
    }
    create_sidebar_skeleton() {
      if ($(".workspace-sidebar-skeleton").length)
        return;
      $(frappe.render_template("workspace_sidebar_loading_skeleton")).insertBefore(this.sidebar);
      this.sidebar.addClass("hidden");
    }
    remove_sidebar_skeleton() {
      this.sidebar.removeClass("hidden");
      $(".workspace-sidebar-skeleton").remove();
    }
    register_awesomebar_shortcut() {
      "abcdefghijklmnopqrstuvwxyz".split("").forEach((letter) => {
        const default_shortcut = {
          action: (e2) => {
            $("#navbar-search").focus();
            return false;
          },
          page: this.page
        };
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: letter }, default_shortcut));
        frappe.ui.keys.add_shortcut(__spreadValues({ shortcut: `shift+${letter}` }, default_shortcut));
      });
    }
  };

  // frappe/public/js/frappe/widgets/widget_dialog.js
  var WidgetDialog = class {
    constructor(opts) {
      Object.assign(this, opts);
      this.editing = Boolean(this.values && Object.keys(this.values).length);
    }
    make() {
      this.make_dialog();
      this.setup_dialog_events();
      this.dialog.show();
      window.cur_dialog = this.dialog;
      this.editing && this.set_default_values();
    }
    make_dialog() {
      this.dialog = new frappe.ui.Dialog({
        title: this.get_title(),
        fields: this.get_fields(),
        primary_action: (data) => {
          data = this.process_data(data);
          if (!this.editing && !data.name) {
            data.name = `${this.type}-${this.label}-${frappe.utils.get_random(20)}`;
          }
          this.dialog.hide();
          this.primary_action(data);
        },
        primary_action_label: this.primary_action_label || __("Add")
      });
    }
    get_title() {
      let action = this.editing ? "Edit" : "Add";
      let label = action = action + " " + frappe.model.unscrub(this.type);
      return __(label);
    }
    get_fields() {
    }
    set_default_values() {
      return this.dialog.set_values(this.values);
    }
    process_data(data) {
      return data;
    }
    setup_dialog_events() {
    }
    hide_field(fieldname) {
      this.dialog.set_df_property(fieldname, "hidden", true);
    }
    show_field(fieldname) {
      this.dialog.set_df_property(fieldname, "hidden", false);
    }
    setup_filter(doctype) {
      if (this.filter_group) {
        this.filter_group.wrapper.empty();
        delete this.filter_group;
      }
      let $loading = this.dialog.get_field("filter_area_loading").$wrapper;
      $(`<span class="text-muted">${__("Loading Filters...")}</span>`).appendTo($loading);
      this.filters = [];
      this.generate_filter_from_json && this.generate_filter_from_json();
      this.filter_group = new frappe.ui.FilterGroup({
        parent: this.dialog.get_field("filter_area").$wrapper,
        doctype,
        on_change: () => {
        }
      });
      frappe.model.with_doctype(doctype, () => {
        this.filter_group.add_filters_to_filter_group(this.filters);
        this.hide_field("filter_area_loading");
        this.show_field("filter_area");
      });
    }
  };
  var ChartDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      return [
        {
          fieldtype: "Link",
          fieldname: "chart_name",
          label: "Chart Name",
          options: "Dashboard Chart",
          reqd: 1
        },
        {
          fieldtype: "Data",
          fieldname: "label",
          label: "Label"
        }
      ];
    }
    process_data(data) {
      data.label = data.label ? data.label : data.chart_name;
      return data;
    }
  };
  var QuickListDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      return [
        {
          fieldtype: "Link",
          fieldname: "document_type",
          label: "DocType",
          options: "DocType",
          reqd: 1,
          onchange: () => {
            this.document_type = this.dialog.get_value("document_type");
            this.document_type && this.setup_filter(this.document_type);
          },
          get_query: () => {
            return {
              filters: {
                issingle: 0,
                istable: 0
              }
            };
          }
        },
        {
          fieldtype: "Column Break",
          fieldname: "column_break_4"
        },
        {
          fieldtype: "Data",
          fieldname: "label",
          label: "Label"
        },
        {
          fieldtype: "Section Break",
          fieldname: "filter_section",
          label: __("Add Filters"),
          depends_on: "eval: doc.document_type"
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area_loading"
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area"
        }
      ];
    }
    generate_filter_from_json() {
      if (this.values && this.values.quick_list_filter) {
        this.filters = frappe.utils.get_filter_from_json(
          this.values.quick_list_filter,
          this.values.document_type
        );
      }
    }
    process_data(data) {
      if (this.filter_group) {
        let filters2 = this.filter_group.get_filters();
        data.quick_list_filter = JSON.stringify(filters2);
      }
      data.label = data.label ? data.label : data.document_type;
      return data;
    }
  };
  var OnboardingDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      return [
        {
          fieldtype: "Link",
          fieldname: "onboarding_name",
          label: "Onboarding Name",
          options: "Module Onboarding",
          reqd: 1
        }
      ];
    }
  };
  var CardDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      let me2 = this;
      return [
        {
          fieldtype: "Data",
          fieldname: "label",
          label: "Label"
        },
        {
          fieldname: "links",
          fieldtype: "Table",
          label: __("Card Links"),
          editable_grid: 1,
          data: me2.values ? JSON.parse(me2.values.links) : [],
          get_data: () => {
            return me2.values ? JSON.parse(me2.values.links) : [];
          },
          fields: [
            {
              fieldname: "label",
              fieldtype: "Data",
              in_list_view: 1,
              label: "Label"
            },
            {
              fieldname: "icon",
              fieldtype: "Icon",
              label: "Icon"
            },
            {
              fieldname: "link_type",
              fieldtype: "Select",
              in_list_view: 1,
              label: "Link Type",
              reqd: 1,
              options: ["DocType", "Page", "Report"]
            },
            {
              fieldname: "link_to",
              fieldtype: "Dynamic Link",
              in_list_view: 1,
              label: "Link To",
              reqd: 1,
              get_options: (df) => {
                return df.doc.link_type;
              }
            },
            {
              fieldname: "column_break_7",
              fieldtype: "Column Break"
            },
            {
              fieldname: "dependencies",
              fieldtype: "Data",
              label: "Dependencies"
            },
            {
              fieldname: "only_for",
              fieldtype: "Link",
              label: "Only for",
              options: "Country"
            },
            {
              default: "0",
              fieldname: "onboard",
              fieldtype: "Check",
              label: "Onboard"
            },
            {
              default: "0",
              fieldname: "is_query_report",
              fieldtype: "Check",
              label: "Is Query Report"
            }
          ]
        }
      ];
    }
    process_data(data) {
      let message = "";
      if (!data.links) {
        message = __("You must add atleast one link.");
      } else {
        data.links.map((item, idx) => {
          let row = idx + 1;
          if (!item.link_type) {
            message = __("Following fields have missing values") + ": <br><br><ul>";
            message += `<li>${__("Link Type in Row")} ${row}</li>`;
          }
          if (!item.link_to) {
            message += `<li>${__("Link To in Row")} ${row}</li>`;
          }
          item.label = item.label ? item.label : item.link_to;
        });
      }
      if (message) {
        message += "</ul>";
        frappe.throw({
          message: __(message),
          title: __("Missing Values Required"),
          indicator: "orange"
        });
      }
      data.label = data.label ? data.label : data.chart_name;
      return data;
    }
  };
  var ShortcutDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    hide_filters() {
      this.hide_field("count_section_break");
      this.hide_field("filters_section_break");
    }
    show_filters() {
      this.show_field("count_section_break");
      this.show_field("filters_section_break");
    }
    get_fields() {
      return [
        {
          fieldtype: "Select",
          fieldname: "type",
          label: "Type",
          reqd: 1,
          options: "DocType\nReport\nPage\nDashboard\nURL",
          onchange: () => {
            if (this.dialog.get_value("type") == "DocType") {
              this.dialog.fields_dict.link_to.get_query = () => {
                return {
                  query: "frappe.core.report.permitted_documents_for_user.permitted_documents_for_user.query_doctypes",
                  filters: {
                    user: frappe.session.user,
                    include_single_doctypes: true
                  }
                };
              };
            } else {
              this.dialog.fields_dict.link_to.get_query = null;
            }
          }
        },
        {
          fieldtype: "Data",
          fieldname: "label",
          label: "Label"
        },
        {
          fieldtype: "Column Break",
          fieldname: "column_break_4"
        },
        {
          fieldtype: "Dynamic Link",
          fieldname: "link_to",
          label: "Link To",
          options: "type",
          onchange: () => {
            const doctype = this.dialog.get_value("link_to");
            if (doctype && this.dialog.get_value("type") == "DocType") {
              frappe.model.with_doctype(doctype, async () => {
                var _a;
                let meta = frappe.get_meta(doctype);
                if (doctype && frappe.boot.single_types.includes(doctype)) {
                  this.hide_filters();
                } else if (doctype) {
                  this.setup_filter(doctype);
                  this.show_filters();
                }
                const views = ["List", "Report Builder", "Dashboard", "New"];
                if (meta.is_tree === 1)
                  views.push("Tree");
                if (frappe.boot.calendars.includes(doctype))
                  views.push("Calendar");
                const response = await frappe.db.get_value(
                  "Kanban Board",
                  { reference_doctype: doctype },
                  "name"
                );
                if ((_a = response == null ? void 0 : response.message) == null ? void 0 : _a.name)
                  views.push("Kanban");
                this.dialog.set_df_property("doc_view", "options", views.join("\n"));
              });
            } else {
              this.hide_filters();
            }
          },
          depends_on: (s2) => s2.type != "URL",
          mandatory_depends_on: (s2) => s2.type != "URL"
        },
        {
          fieldtype: "Data",
          fieldname: "url",
          label: "URL",
          options: "URL",
          default: "",
          depends_on: (s2) => s2.type == "URL",
          mandatory_depends_on: (s2) => s2.type == "URL"
        },
        {
          fieldtype: "Select",
          fieldname: "doc_view",
          label: "DocType View",
          options: "List\nReport Builder\nDashboard\nTree\nNew\nCalendar\nKanban",
          description: __(
            "Which view of the associated DocType should this shortcut take you to?"
          ),
          default: "List",
          depends_on: (state) => {
            if (this.dialog) {
              let doctype = this.dialog.get_value("link_to");
              let is_single = frappe.boot.single_types.includes(doctype);
              return doctype && state.type == "DocType" && !is_single;
            }
            return false;
          },
          onchange: () => {
            if (this.dialog.get_value("doc_view") == "Kanban") {
              this.dialog.fields_dict.kanban_board.get_query = () => {
                return {
                  filters: {
                    reference_doctype: this.dialog.get_value("link_to")
                  }
                };
              };
            } else {
              this.dialog.fields_dict.link_to.get_query = null;
            }
          }
        },
        {
          fieldtype: "Link",
          fieldname: "kanban_board",
          label: "Kanban Board",
          options: "Kanban Board",
          depends_on: () => {
            var _a;
            let doc_view = (_a = this.dialog) == null ? void 0 : _a.get_value("doc_view");
            return doc_view == "Kanban";
          },
          mandatory_depends_on: () => {
            var _a;
            let doc_view = (_a = this.dialog) == null ? void 0 : _a.get_value("doc_view");
            return doc_view == "Kanban";
          }
        },
        {
          fieldtype: "Section Break",
          fieldname: "filters_section_break",
          label: __("Count Filter"),
          hidden: 1
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area_loading"
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area",
          hidden: 1
        },
        {
          fieldtype: "Section Break",
          fieldname: "count_section_break",
          label: __("Count Customizations"),
          hidden: 1
        },
        {
          fieldtype: "Select",
          fieldname: "color",
          label: __("Color"),
          options: ["Grey", "Green", "Red", "Orange", "Pink", "Yellow", "Blue", "Cyan"],
          default: "Grey",
          input_class: "color-select",
          onchange: () => {
            let color = this.dialog.fields_dict.color.value.toLowerCase();
            let $select = this.dialog.fields_dict.color.$input;
            if (!$select.parent().find(".color-box").get(0)) {
              $(`<div class="color-box"></div>`).insertBefore($select.get(0));
            }
            $select.parent().find(".color-box").get(0).style.backgroundColor = `var(--text-on-${color})`;
          }
        },
        {
          fieldtype: "Column Break",
          fieldname: "column_break_3"
        },
        {
          fieldtype: "Data",
          fieldname: "format",
          label: __("Format"),
          description: __("For Example: {} Open")
        }
      ];
    }
    set_default_values() {
      super.set_default_values().then(() => {
        this.dialog.fields_dict.link_to.df.onchange();
      });
    }
    generate_filter_from_json() {
      if (this.values && this.values.stats_filter) {
        this.filters = frappe.utils.get_filter_from_json(
          this.values.stats_filter,
          this.values.link_to
        );
      }
    }
    process_data(data) {
      if (this.dialog.get_value("type") == "DocType" && this.filter_group) {
        let filters2 = this.filter_group.get_filters();
        data.stats_filter = JSON.stringify(filters2);
      }
      data.label = data.label ? data.label : frappe.model.unscrub(data.link_to);
      if (data.url) {
        !validate_url(data.url) && frappe.throw({
          message: __("<b>{0}</b> is not a valid URL", [data.url]),
          title: __("Invalid URL"),
          indicator: "red"
        });
        if (!data.label) {
          data.label = "No Label (URL)";
        }
      }
      return data;
    }
  };
  var NumberCardDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      let fields;
      if (this.for_workspace) {
        return [
          {
            fieldtype: "Link",
            fieldname: "number_card_name",
            label: __("Number Card"),
            options: "Number Card",
            reqd: 1,
            get_query: () => {
              return {
                query: "frappe.desk.doctype.number_card.number_card.get_cards_for_user",
                filters: {
                  document_type: this.document_type
                }
              };
            }
          },
          {
            fieldtype: "Data",
            fieldname: "label",
            label: __("Label")
          }
        ];
      }
      fields = [
        {
          fieldtype: "Select",
          label: __("Choose Existing Card or create New Card"),
          fieldname: "new_or_existing",
          options: ["New Card", "Existing Card"]
        },
        {
          fieldtype: "Link",
          fieldname: "card",
          label: __("Number Cards"),
          options: "Number Card",
          get_query: () => {
            return {
              query: "frappe.desk.doctype.number_card.number_card.get_cards_for_user",
              filters: {
                document_type: this.document_type
              }
            };
          },
          depends_on: 'eval: doc.new_or_existing == "Existing Card"'
        },
        {
          fieldtype: "Section Break",
          fieldname: "sb_1",
          depends_on: 'eval: doc.new_or_existing == "New Card"'
        },
        {
          label: __("Label"),
          fieldname: "label",
          fieldtype: "Data",
          mandatory_depends_on: 'eval: doc.new_or_existing == "New Card"'
        },
        {
          label: __("Doctype"),
          fieldname: "document_type",
          fieldtype: "Link",
          options: "DocType",
          onchange: () => {
            this.document_type = this.dialog.get_value("document_type");
            this.set_aggregate_function_fields(this.dialog.get_values());
            this.setup_filter(this.document_type);
          },
          hidden: 1
        },
        {
          label: __("Color"),
          fieldname: "color",
          fieldtype: "Color"
        },
        {
          fieldtype: "Column Break",
          fieldname: "cb_1"
        },
        {
          label: __("Function"),
          fieldname: "function",
          fieldtype: "Select",
          options: ["Count", "Sum", "Average", "Minimum", "Maximum"],
          mandatory_depends_on: 'eval: doc.new_or_existing == "New Card"'
        },
        {
          label: __("Function Based On"),
          fieldname: "aggregate_function_based_on",
          fieldtype: "Select",
          depends_on: "eval: doc.function !== 'Count'",
          mandatory_depends_on: 'eval: doc.function !== "Count" && doc.new_or_existing == "New Card"'
        },
        {
          fieldtype: "Section Break",
          fieldname: "sb_1",
          label: __("Add Filters"),
          depends_on: 'eval: doc.new_or_existing == "New Card"'
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area_loading"
        },
        {
          fieldtype: "HTML",
          fieldname: "filter_area",
          hidden: 1
        },
        {
          fieldtype: "Section Break",
          fieldname: "sb_1"
        }
      ];
      return fields;
    }
    setup_dialog_events() {
      if (!this.document_type && !this.for_workspace) {
        if (this.default_values && this.default_values["doctype"]) {
          this.document_type = this.default_values["doctype"];
          this.setup_filter(this.default_values["doctype"]);
          this.set_aggregate_function_fields();
        } else {
          this.show_field("document_type");
        }
      }
    }
    set_aggregate_function_fields() {
      let aggregate_function_fields = [];
      if (this.document_type && frappe.get_meta(this.document_type)) {
        frappe.get_meta(this.document_type).fields.map((df) => {
          if (frappe.model.numeric_fieldtypes.includes(df.fieldtype)) {
            if (df.fieldtype == "Currency") {
              if (!df.options || df.options !== "Company:company:default_currency") {
                return;
              }
            }
            aggregate_function_fields.push({ label: df.label, value: df.fieldname });
          }
        });
      }
      this.dialog.set_df_property(
        "aggregate_function_based_on",
        "options",
        aggregate_function_fields
      );
    }
    process_data(data) {
      if (this.for_workspace) {
        data.label = data.label ? data.label : data.number_card_name;
        return data;
      }
      if (data.new_or_existing == "Existing Card") {
        data.name = data.card;
      }
      data.stats_filter = this.filter_group && JSON.stringify(this.filter_group.get_filters());
      data.document_type = this.document_type;
      return data;
    }
  };
  var CustomBlockDialog = class extends WidgetDialog {
    constructor(opts) {
      super(opts);
    }
    get_fields() {
      return [
        {
          fieldtype: "Link",
          fieldname: "custom_block_name",
          label: "Custom Block Name",
          options: "Custom HTML Block",
          reqd: 1,
          get_query: () => {
            return {
              query: "frappe.desk.doctype.custom_html_block.custom_html_block.get_custom_blocks_for_user"
            };
          }
        }
      ];
    }
  };
  function get_dialog_constructor(type) {
    const widget_map = {
      chart: ChartDialog,
      shortcut: ShortcutDialog,
      links: CardDialog,
      onboarding: OnboardingDialog,
      quick_list: QuickListDialog,
      number_card: NumberCardDialog,
      custom_block: CustomBlockDialog
    };
    return widget_map[type] || WidgetDialog;
  }

  // frappe/public/js/frappe/views/workspace/blocks/block.js
  var Block = class {
    constructor(opts) {
      Object.assign(this, opts);
    }
    make(block, block_name, widget_type = block) {
      let block_data = this.config.page_data[block + "s"].items.find((obj) => {
        return frappe.utils.unescape_html(obj.label) == frappe.utils.unescape_html(__(block_name));
      });
      if (!block_data)
        return false;
      this.wrapper.innerHTML = "";
      block_data.in_customize_mode = !this.readOnly;
      this.block_widget = new frappe.widget.SingleWidgetGroup({
        container: this.wrapper,
        type: widget_type,
        class_name: block == "chart" ? "widget-charts" : "",
        options: this.options,
        widgets: block_data,
        api: this.api,
        block: this.block
      });
      this.wrapper.setAttribute(block + "_name", block_name);
      if (!this.readOnly) {
        this.block_widget.customize();
      }
      return true;
    }
    rendered(wrapper) {
      if (wrapper)
        this.wrapper = wrapper;
      !this.readOnly && this.resizer();
      let block = this.wrapper.closest(".ce-block");
      this.set_col_class(block, this.get_col());
    }
    resizer() {
      this.wrapper.className = this.wrapper.className + " resizable";
      var resizer = document.createElement("div");
      resizer.className = "resizer";
      this.wrapper.parentElement.appendChild(resizer);
      resizer.addEventListener("mousedown", init_drag, false);
      let me2 = this;
      var startX, startWidth;
      function init_drag(e2) {
        startX = e2.clientX;
        startWidth = this.parentElement.offsetWidth;
        document.documentElement.addEventListener("mousemove", do_drag, false);
        document.documentElement.addEventListener("mouseup", stop_drag, false);
      }
      function do_drag(e2) {
        $(this).css("cursor", "col-resize");
        $(".widget").css("pointer-events", "none");
        $(me2.wrapper.parentElement).find(".resizer").css("border-right", "3px solid var(--gray-400)");
        un_focus();
        if (startWidth + e2.clientX - startX - startWidth > 60) {
          startX = e2.clientX;
          me2.increase_width();
        } else if (startWidth + e2.clientX - startX - startWidth < -60) {
          startX = e2.clientX;
          me2.decrease_width();
        }
      }
      function un_focus() {
        if (document.selection) {
          document.selection.empty();
        } else {
          window.getSelection().removeAllRanges();
        }
      }
      function stop_drag() {
        $(this).css("cursor", "default");
        $(".widget").css("pointer-events", "auto");
        $(me2.wrapper.parentElement).find(".resizer").css("border-right", "0px solid transparent");
        document.documentElement.removeEventListener("mousemove", do_drag, false);
        document.documentElement.removeEventListener("mouseup", stop_drag, false);
      }
    }
    new(block, widget_type = block) {
      let me2 = this;
      const dialog_class = get_dialog_constructor(widget_type);
      let block_name = block + "_name";
      this.dialog = new dialog_class({
        for_workspace: true,
        label: this.label,
        type: widget_type,
        primary_action: (widget) => {
          widget.in_customize_mode = 1;
          this.block_widget = frappe.widget.make_widget(__spreadProps(__spreadValues({}, widget), {
            widget_type,
            container: this.wrapper,
            options: __spreadProps(__spreadValues({}, this.options), {
              on_delete: () => this.api.blocks.delete(),
              on_edit: () => this.on_edit(this.block_widget)
            })
          }));
          this.block_widget.customize(this.options);
          this.wrapper.setAttribute(block_name, this.block_widget.label);
          $(this.wrapper).find(".widget").addClass(`${widget_type}`);
          this.new_block_widget = this.block_widget.get_config();
          this.add_settings_button();
        }
      });
      if (!this.readOnly && this.data && !this.data[block_name]) {
        this.dialog.make();
        this.dialog.dialog.get_close_btn().click(() => {
          me2.wrapper.closest(".ce-block").remove();
        });
      }
    }
    on_edit(block_obj) {
      let block_name = block_obj.edit_dialog.type + "_name";
      if (block_obj.edit_dialog.type == "links") {
        block_name = "card_name";
      }
      let block = block_obj.get_config();
      this.block_widget.widgets = block;
      this.wrapper.setAttribute(block_name, block.label);
      this.new_block_widget = block_obj.get_config();
    }
    add_new_block_button() {
      let $new_button = $(`
			<div class="new-block-button">${frappe.utils.icon("add-round", "lg")}</div>
		`);
      $new_button.appendTo(this.wrapper);
      $new_button.click((event2) => {
        event2.stopPropagation();
        let index = this.api.blocks.getCurrentBlockIndex() + 1;
        this.api.blocks.insert("paragraph", {}, {}, index);
        this.api.caret.setToBlock(index);
      });
    }
    add_settings_button() {
      let me2 = this;
      this.dropdown_list = [
        {
          label: "Delete",
          title: "Delete Block",
          icon: frappe.utils.icon("delete-active", "sm"),
          action: () => this.api.blocks.delete()
        },
        {
          label: "Expand",
          title: "Expand Block",
          icon: frappe.utils.icon("expand-alt", "sm"),
          action: () => this.increase_width()
        },
        {
          label: "Shrink",
          title: "Shrink Block",
          icon: frappe.utils.icon("shrink", "sm"),
          action: () => this.decrease_width()
        },
        {
          label: "Move Up",
          title: "Move Up",
          icon: frappe.utils.icon("up-arrow", "sm"),
          action: () => this.move_block("up")
        },
        {
          label: "Move Down",
          title: "Move Down",
          icon: frappe.utils.icon("down-arrow", "sm"),
          action: () => this.move_block("down")
        }
      ];
      let $widget_control = $(this.wrapper).find(".widget-control");
      let $button = $(`
			<div class="dropdown-btn">
				<button class="btn btn-secondary btn-xs setting-btn" title="${__("Setting")}">
					${frappe.utils.icon("dot-horizontal", "xs")}
				</button>
				<div class="dropdown-list hidden"></div>
			</div>
		`);
      let dropdown_item = function(label, title, icon, action) {
        let html = $(`
				<div class="dropdown-item" title="${__(title)}">
					<span class="dropdown-item-icon">${icon}</span>
					<span class="dropdown-item-label">${__(label)}</span>
				</div>
			`);
        html.click((event2) => {
          event2.stopPropagation();
          action && action();
        });
        return html;
      };
      $button.click((event2) => {
        event2.stopPropagation();
        $button.find(".dropdown-list").toggleClass("hidden");
      });
      $widget_control.prepend($button);
      this.dropdown_list.forEach((item) => {
        if ((item.label == "Expand" || item.label == "Shrink") && me2.options && !me2.options.allow_resize) {
          return;
        }
        $button.find(".dropdown-list").append(dropdown_item(item.label, item.title, item.icon, item.action));
      });
    }
    get_col() {
      let col = this.col || 12;
      let class_name = "col-xs-12";
      let wrapper = this.wrapper.closest(".ce-block");
      const col_class = new RegExp(/\bcol-.+?\b/, "g");
      if (wrapper && wrapper.className.match(col_class)) {
        wrapper.classList.forEach(function(cn) {
          if (cn.match(col_class)) {
            class_name = cn;
          }
        });
        let parts2 = class_name.split("-");
        col = parseInt(parts2[2]);
      }
      return col;
    }
    decrease_width() {
      this.update_width("decrease");
    }
    increase_width() {
      this.update_width("increase");
    }
    update_width(action) {
      let min_width = this.options && this.options.min_width || 3;
      const current_block_index = this.api.blocks.getCurrentBlockIndex();
      if (current_block_index < 0) {
        return;
      }
      let current_block = this.api.blocks.getBlockByIndex(current_block_index);
      if (!current_block) {
        return;
      }
      const current_block_element = current_block.holder;
      let className = "col-xs-12";
      const colClass = new RegExp(/\bcol-.+?\b/, "g");
      if (current_block_element.className.match(colClass)) {
        current_block_element.classList.forEach((cn) => {
          if (cn.match(colClass)) {
            className = cn;
          }
        });
        let parts2 = className.split("-");
        let width = parseInt(parts2[2]);
        let condition = true;
        if (action == "increase") {
          condition = width <= 11;
          width = width + 1;
        } else if (action == "decrease") {
          condition = width > min_width;
          width = width - 1;
        }
        if (condition) {
          this.set_col_class(current_block_element, width);
        }
      }
    }
    set_col_class(node, width) {
      let classes = $.grep(node.classList, function(item) {
        return item.indexOf("col-") !== 0;
      });
      node.classList = "";
      classes.forEach((cl) => {
        node.classList.add(cl);
      });
      let col = "col-xs-12";
      if (width <= 12 && width >= 7) {
        col = "col-xs-" + width;
      } else if (width == 6 || width == 5) {
        node.classList.add("col-xs-12");
        col = "col-sm-" + width;
      } else if (width == 4) {
        node.classList.add("col-xs-12");
        node.classList.add("col-sm-6");
        col = "col-md-" + width;
      } else if (width == 3 || width == 2) {
        node.classList.add("col-xs-12");
        node.classList.add("col-sm-6");
        node.classList.add("col-md-4");
        col = "col-lg-" + width;
      }
      node.classList.add(col);
    }
    move_block(direction) {
      let current_index = this.api.blocks.getCurrentBlockIndex();
      let new_index = current_index + (direction == "down" ? 1 : -1);
      this.api.blocks.move(new_index, current_index);
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/header.js
  var Header = class extends Block {
    constructor({ data, config, api, readOnly }) {
      super({ config, api, readOnly });
      this._settings = this.config;
      this._data = this.normalizeData(data);
      this._element = this.getTag();
      this.data = data;
      this.col = this.data.col ? this.data.col : "12";
    }
    normalizeData(data) {
      const newData = {};
      if (typeof data !== "object") {
        data = {};
      }
      newData.text = data.text || "";
      newData.col = parseInt(data.col) || 12;
      return newData;
    }
    render() {
      this.wrapper = document.createElement("div");
      if (!this.readOnly) {
        let $widget_head = $(`<div class="widget-head"></div>`);
        let $widget_control = $(`<div class="widget-control"></div>`);
        $widget_head[0].appendChild(this._element);
        $widget_control.appendTo($widget_head);
        $widget_head.appendTo(this.wrapper);
        this.wrapper.classList.add("widget", "header", "edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
        frappe.utils.add_custom_button(
          frappe.utils.icon("drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          $widget_control
        );
        return this.wrapper;
      }
      return this._element;
    }
    merge(data) {
      const newData = {
        text: this.data.text + data.text
      };
      this.data = newData;
    }
    validate(blockData) {
      return blockData.text.trim() !== "";
    }
    save() {
      this.wrapper = this._element;
      return {
        text: this.wrapper.innerHTML.replace(/&nbsp;/gi, ""),
        col: this.get_col()
      };
    }
    rendered() {
      super.rendered(this._element);
    }
    static get sanitize() {
      return {
        level: false,
        text: {
          br: true,
          b: true,
          i: true,
          a: true,
          span: true
        }
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    get data() {
      this._data.text = this._element.innerHTML;
      return this._data;
    }
    set data(data) {
      this._data = this.normalizeData(data);
      if (data.text !== void 0) {
        let text = this._data.text || "";
        const contains_html_tag = /<[a-z][\s\S]*>/i.test(text);
        this._element.innerHTML = contains_html_tag ? text : `<span class="h${this._settings.default_size}">${text}</span>`;
      }
      if (!this.readOnly && this.wrapper) {
        this.wrapper.classList.add("widget", "header");
      }
    }
    getTag() {
      const tag = document.createElement("DIV");
      let text = this._data.text || "&nbsp";
      tag.innerHTML = `<span class="h${this._settings.default_size}"><b>${text}</b></span>`;
      tag.classList.add("ce-header");
      if (!this.readOnly) {
        tag.contentEditable = true;
      }
      tag.dataset.placeholder = this.api.i18n.t(this._settings.placeholder || "");
      return tag;
    }
    static get toolbox() {
      return {
        title: "Heading",
        icon: frappe.utils.icon("header", "sm")
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/paragraph.js
  var Paragraph = class extends Block {
    static get DEFAULT_PLACEHOLDER() {
      return "";
    }
    constructor({ data, config, api, readOnly }) {
      super({ config, api, readOnly });
      this._CSS = {
        block: this.api.styles.block,
        wrapper: "ce-paragraph"
      };
      if (!this.readOnly) {
        this.onKeyUp = this.onKeyUp.bind(this);
      }
      this._placeholder = this.config.placeholder ? this.config.placeholder : Paragraph.DEFAULT_PLACEHOLDER;
      this._data = {};
      this._element = this.drawView();
      this._preserveBlank = this.config.preserveBlank !== void 0 ? this.config.preserveBlank : false;
      this.data = data;
      this.col = this.data.col ? this.data.col : "12";
    }
    onKeyUp(e2) {
      if (!this.wrapper)
        return;
      this.show_hide_block_list(true);
      if (e2.code !== "Backspace" && e2.code !== "Delete") {
        return;
      }
      const { textContent } = this._element;
      if (textContent === "") {
        this.show_hide_block_list();
        this._element.innerHTML = "";
      }
    }
    show_hide_block_list(hide) {
      let $wrapper = $(this.wrapper).hasClass("ce-paragraph") ? $(this.wrapper.parentElement) : $(this.wrapper);
      let $block_list_container = $wrapper.find(".block-list-container.dropdown-list");
      $block_list_container.removeClass("hidden");
      hide && $block_list_container.addClass("hidden");
    }
    drawView() {
      let div = document.createElement("DIV");
      div.classList.add(this._CSS.wrapper, this._CSS.block, "widget");
      div.contentEditable = false;
      if (!this.readOnly) {
        div.contentEditable = true;
        div.addEventListener("focus", () => {
          const { textContent } = this._element;
          if (textContent !== "")
            return;
          this.show_hide_block_list();
        });
        div.addEventListener("blur", () => {
          !this.over_block_list_item && this.show_hide_block_list(true);
        });
        div.dataset.placeholder = this.api.i18n.t(this._placeholder);
        div.addEventListener("keyup", this.onKeyUp);
      }
      return div;
    }
    open_block_list() {
      let dropdown_title = __("Templates");
      let $block_list_container = $(`
			<div class="block-list-container dropdown-list">
				<div class="dropdown-title">${dropdown_title.toUpperCase()}</div>
			</div>
		`);
      let all_blocks = frappe.workspace_block.blocks;
      Object.keys(all_blocks).forEach((key2) => {
        let $block_list_item = $(`
				<div class="block-list-item dropdown-item">
					<span class="dropdown-item-icon">${all_blocks[key2].toolbox.icon}</span>
					<span class="dropdown-item-label">${__(all_blocks[key2].toolbox.title)}</span>
				</div>
			`);
        $block_list_item.click((event2) => {
          event2.stopPropagation();
          const index = this.api.blocks.getCurrentBlockIndex();
          this.api.blocks.delete();
          this.api.blocks.insert(key2, {}, {}, index);
          this.api.caret.setToBlock(index);
        });
        $block_list_item.mouseenter(() => {
          this.over_block_list_item = true;
        }).mouseleave(() => {
          this.over_block_list_item = false;
        });
        $block_list_container.append($block_list_item);
      });
      $block_list_container.addClass("hidden");
      $block_list_container.appendTo(this.wrapper);
    }
    render() {
      this.wrapper = document.createElement("div");
      if (!this.readOnly) {
        let $para_control = $(`<div class="widget-control paragraph-control"></div>`);
        this.wrapper.appendChild(this._element);
        this._element.classList.remove("widget");
        $para_control.appendTo(this.wrapper);
        this.wrapper.classList.add("widget", "paragraph", "edit-mode");
        this.open_block_list();
        this.add_new_block_button();
        this.add_settings_button();
        frappe.utils.add_custom_button(
          frappe.utils.icon("drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          $para_control
        );
        return this.wrapper;
      }
      return this._element;
    }
    merge(data) {
      let newData = {
        text: this.data.text + data.text
      };
      this.data = newData;
    }
    validate(savedData) {
      if (savedData.text.trim() === "" && !this._preserveBlank) {
        return false;
      }
      return true;
    }
    save() {
      this.wrapper = this._element;
      return {
        text: this.wrapper.innerHTML,
        col: this.get_col()
      };
    }
    rendered() {
      super.rendered(this._element);
    }
    onPaste(event2) {
      const data = {
        text: event2.detail.data.innerHTML
      };
      this.data = data;
    }
    static get sanitize() {
      return {
        text: {
          br: true,
          b: true,
          i: true,
          a: true,
          span: true
        }
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    get data() {
      let text = this._element.innerHTML;
      this._data.text = text;
      return this._data;
    }
    set data(data) {
      this._data = data || {};
      this._element.innerHTML = __(this._data.text) || "";
    }
    static get pasteConfig() {
      return {
        tags: ["P"]
      };
    }
    static get toolbox() {
      return {
        title: "Text",
        icon: frappe.utils.icon("text", "sm")
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/card.js
  var Card = class extends Block {
    static get toolbox() {
      return {
        title: "Card",
        icon: frappe.utils.icon("card", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.sections = {};
      this.col = this.data.col ? this.data.col : "4";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true
      };
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("card", "links");
      if (this.data && this.data.card_name) {
        let has_data = this.make("card", this.data.card_name, "links");
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("links edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.card_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        card_name: this.wrapper.getAttribute("card_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/chart.js
  var Chart = class extends Block {
    static get toolbox() {
      return {
        title: "Chart",
        icon: frappe.utils.icon("chart", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.col = this.data.col ? this.data.col : "12";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true,
        min_width: 6,
        max_widget_count: 2
      };
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("chart");
      if (this.data && this.data.chart_name) {
        let has_data = this.make("chart", this.data.chart_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("chart edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.chart_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        chart_name: this.wrapper.getAttribute("chart_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/shortcut.js
  var Shortcut = class extends Block {
    static get toolbox() {
      return {
        title: "Shortcut",
        icon: frappe.utils.icon("shortcut", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.col = this.data.col ? this.data.col : "3";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true
      };
    }
    rendered() {
      super.rendered();
      this.remove_last_divider();
      $(window).resize(() => {
        this.remove_last_divider();
      });
    }
    remove_last_divider() {
      let block = this.wrapper.closest(".ce-block");
      let container_offset_right = $(".layout-main-section")[0].offsetWidth;
      let block_offset_right = block.offsetLeft + block.offsetWidth;
      if (container_offset_right - block_offset_right <= 110) {
        $(block).find(".divider").addClass("hidden");
      } else {
        $(block).find(".divider").removeClass("hidden");
      }
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("shortcut");
      if (this.data && this.data.shortcut_name) {
        let has_data = this.make("shortcut", this.data.shortcut_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("shortcut edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.shortcut_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        shortcut_name: this.wrapper.getAttribute("shortcut_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/spacer.js
  var Spacer = class extends Block {
    static get toolbox() {
      return {
        title: "Spacer",
        icon: frappe.utils.icon("spacer", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly }) {
      super({ data, api, config, readOnly });
      this.col = this.data.col ? this.data.col : "12";
    }
    render() {
      this.wrapper = document.createElement("div");
      this.wrapper.classList.add("widget", "spacer");
      if (!this.readOnly) {
        let $spacer = $(`
				<div class="widget-head">
					<div class="spacer-left"></div>
					<div>${__("Spacer")}</div>
					<div class="widget-control"></div>
				</div>
			`);
        $spacer.appendTo(this.wrapper);
        this.wrapper.classList.add("edit-mode");
        this.wrapper.style.minHeight = 40 + "px";
        let $widget_control = $spacer.find(".widget-control");
        this.add_settings_button();
        this.add_new_block_button();
        frappe.utils.add_custom_button(
          frappe.utils.icon("drag", "xs"),
          null,
          "drag-handle",
          __("Drag"),
          null,
          $widget_control
        );
      }
      return this.wrapper;
    }
    save() {
      return {
        col: this.get_col()
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/onboarding.js
  var Onboarding = class extends Block {
    static get toolbox() {
      return {
        title: "Onboarding",
        icon: frappe.utils.icon("onboarding", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.col = this.data.col ? this.data.col : "12";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: false
      };
    }
    rendered() {
      let block = this.wrapper.closest(".ce-block");
      if (this.readOnly && !$(this.wrapper).find(".onboarding-widget-box").is(":visible")) {
        $(block).hide();
      }
      this.set_col_class(block, this.get_col());
    }
    new(block, widget_type = block) {
      let me2 = this;
      const dialog_class = get_dialog_constructor(widget_type);
      let block_name = block + "_name";
      this.dialog = new dialog_class({
        label: this.label,
        type: widget_type,
        primary_action: (widget) => {
          widget.in_customize_mode = 1;
          this.block_widget = frappe.widget.make_widget(__spreadProps(__spreadValues({}, widget), {
            widget_type,
            container: this.wrapper,
            options: __spreadProps(__spreadValues({}, this.options), {
              on_delete: () => this.api.blocks.delete(),
              on_edit: () => this.on_edit(this.block_widget)
            }),
            new: true
          }));
          this.block_widget.customize(this.options);
          this.wrapper.setAttribute(
            block_name,
            this.block_widget.label || this.block_widget.onboarding_name
          );
          $(this.wrapper).find(".widget").addClass(`${widget_type} edit-mode`);
          this.new_block_widget = this.block_widget.get_config();
          this.add_settings_button();
        }
      });
      if (!this.readOnly && this.data && !this.data[block_name]) {
        this.dialog.make();
        this.dialog.dialog.get_close_btn().click(() => {
          me2.wrapper.closest(".ce-block").remove();
        });
      }
    }
    make(block, block_name) {
      let block_data = this.config.page_data["onboardings"].items.find((obj) => {
        return obj.label == __(block_name);
      });
      if (!block_data)
        return false;
      this.wrapper.innerHTML = "";
      block_data.in_customize_mode = !this.readOnly;
      this.block_widget = frappe.widget.make_widget({
        container: this.wrapper,
        widget_type: "onboarding",
        in_customize_mode: block_data.in_customize_mode,
        options: __spreadProps(__spreadValues({}, this.options), {
          on_delete: () => this.api.blocks.delete(),
          on_edit: () => this.on_edit(this.block_widget)
        }),
        label: block_data.label,
        title: block_data.title || __("Let's Get Started"),
        subtitle: block_data.subtitle,
        steps: block_data.items,
        success: block_data.success,
        docs_url: block_data.docs_url,
        user_can_dismiss: block_data.user_can_dismiss
      });
      this.wrapper.setAttribute(block + "_name", block_name);
      if (!this.readOnly) {
        this.block_widget.customize(this.options);
      }
      return true;
    }
    render() {
      if (frappe.is_mobile())
        return;
      this.wrapper = document.createElement("div");
      this.new("onboarding");
      if (this.data && this.data.onboarding_name) {
        let has_data = this.make("onboarding", this.data.onboarding_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("onboarding edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      $(this.wrapper).css("padding-bottom", "20px");
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.onboarding_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        onboarding_name: this.wrapper.getAttribute("onboarding_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/quick_list.js
  var QuickList = class extends Block {
    static get toolbox() {
      return {
        title: "Quick List",
        icon: frappe.utils.icon("list", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.col = this.data.col ? this.data.col : "4";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true,
        min_width: 4,
        max_widget_count: 2
      };
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("quick_list");
      if (this.data && this.data.quick_list_name) {
        let has_data = this.make("quick_list", this.data.quick_list_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("quick_list edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.quick_list_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        quick_list_name: this.wrapper.getAttribute("quick_list_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/number_card.js
  var NumberCard = class extends Block {
    static get toolbox() {
      return {
        title: "Number Card",
        icon: frappe.utils.icon("number-card", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.sections = {};
      this.col = this.data.col ? this.data.col : "4";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true,
        for_workspace: true
      };
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("number_card");
      if (this.data && this.data.number_card_name) {
        let has_data = this.make("number_card", this.data.number_card_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("number_card edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.number_card_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        number_card_name: this.wrapper.getAttribute("number_card_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/custom_block.js
  var CustomBlock = class extends Block {
    static get toolbox() {
      return {
        title: "Custom Block",
        icon: frappe.utils.icon("edit", "sm")
      };
    }
    static get isReadOnlySupported() {
      return true;
    }
    constructor({ data, api, config, readOnly, block }) {
      super({ data, api, config, readOnly, block });
      this.col = this.data.col ? this.data.col : "12";
      this.allow_customization = !this.readOnly;
      this.options = {
        allow_sorting: this.allow_customization,
        allow_create: this.allow_customization,
        allow_delete: this.allow_customization,
        allow_hiding: false,
        allow_edit: true,
        allow_resize: true,
        min_width: 2
      };
    }
    render() {
      this.wrapper = document.createElement("div");
      this.new("custom_block");
      if (this.data && this.data.custom_block_name) {
        let has_data = this.make("custom_block", this.data.custom_block_name);
        if (!has_data)
          return;
      }
      if (!this.readOnly) {
        $(this.wrapper).find(".widget").addClass("custom_block edit-mode");
        this.add_settings_button();
        this.add_new_block_button();
      }
      return this.wrapper;
    }
    validate(savedData) {
      if (!savedData.custom_block_name) {
        return false;
      }
      return true;
    }
    save() {
      return {
        custom_block_name: this.wrapper.getAttribute("custom_block_name"),
        col: this.get_col(),
        new: this.new_block_widget
      };
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/header_size.js
  var HeaderSize = class {
    static get isInline() {
      return true;
    }
    get state() {
      return this._state;
    }
    set state(state) {
      this._state = state;
    }
    get title() {
      return "Header Size";
    }
    constructor({ api }) {
      this.api = api;
      this.button = null;
      this._state = true;
      this.selectedText = null;
      this.range = null;
      this.headerLevels = [];
    }
    render() {
      this.button = document.createElement("button");
      this.button.type = "button";
      this.button.innerHTML = `${frappe.utils.icon("header", "sm")}${frappe.utils.icon(
        "small-down",
        "xs"
      )}`;
      this.button.classList = "header-inline-tool";
      return this.button;
    }
    checkState(selection) {
      let termWrapper = this.api.selection.findParentTag("SPAN");
      for (const h2 of ["h1", "h2", "h3", "h4", "h5", "h6"]) {
        if (termWrapper && termWrapper.classList.contains(h2)) {
          let num = h2.match(/\d+/)[0];
          $(".header-inline-tool svg:first-child").replaceWith(
            frappe.utils.icon(`header-${num}`, "md")
          );
        }
      }
      const text = selection.anchorNode;
      if (!text)
        return;
    }
    change_size(range, size) {
      if (!range)
        return;
      let span = document.createElement("SPAN");
      span.classList.add(`h${size}`);
      span.innerText = range.toString();
      this.remove_parent_tag(range, range.commonAncestorContainer, span);
      range.extractContents();
      range.insertNode(span);
      this.api.inlineToolbar.close();
    }
    remove_parent_tag(range, parent_node, span) {
      let diff = range.startContainer.data;
      let selected_text = span.innerText;
      let parent_tag = parent_node.parentElement;
      if (diff !== selected_text) {
        parent_tag = parent_node;
      }
      if (parent_tag.innerText == selected_text) {
        if (!parent_tag.classList.contains("ce-header") && !parent_tag.classList.contains("ce-paragraph")) {
          this.remove_parent_tag(range, parent_node.parentElement, span);
          parent_tag.remove();
        }
      }
    }
    surround(range) {
      this.selectedText = range.cloneContents();
      this.actions.hidden = !this.actions.hidden;
      this.range = !this.actions.hidden ? range : null;
      this.state = !this.actions.hidden;
    }
    renderActions() {
      this.actions = document.createElement("div");
      this.actions.classList = "header-level-select";
      this.headerLevels = new Array(6).fill().map((_2, idx) => {
        const $header_level = document.createElement("div");
        $header_level.classList.add(`h${idx + 1}`, "header-level");
        $header_level.innerText = `Header ${idx + 1}`;
        return $header_level;
      });
      for (const [i3, headerLevel] of this.headerLevels.entries()) {
        this.actions.appendChild(headerLevel);
        this.api.listeners.on(headerLevel, "click", () => {
          this.change_size(this.range, i3 + 1);
        });
      }
      this.actions.hidden = true;
      return this.actions;
    }
    destroy() {
      for (const headerLevel of this.headerLevels) {
        this.api.listeners.off(headerLevel, "click");
      }
    }
  };

  // frappe/public/js/frappe/views/workspace/blocks/index.js
  frappe.provide("frappe.workspace_block");
  frappe.workspace_block.blocks = {
    header: Header,
    paragraph: Paragraph,
    card: Card,
    chart: Chart,
    shortcut: Shortcut,
    spacer: Spacer,
    onboarding: Onboarding,
    quick_list: QuickList,
    number_card: NumberCard,
    custom_block: CustomBlock
  };
  frappe.workspace_block.tunes = {
    header_size: HeaderSize
  };

  // frappe/public/js/frappe/widgets/base_widget.js
  var Widget = class {
    constructor(opts) {
      Object.assign(this, opts);
      this.make();
    }
    refresh() {
      this.set_title();
      this.set_actions();
      this.set_body();
      this.setup_events();
      this.set_footer();
    }
    get_config() {
      return {
        name: this.name,
        label: this.label
      };
    }
    customize(options) {
      this.in_customize_mode = true;
      this.action_area.empty();
      options.allow_sorting && frappe.utils.add_custom_button(
        frappe.utils.icon("es-line-drag", "xs"),
        null,
        "drag-handle",
        __("Drag"),
        null,
        this.action_area
      );
      if (options.allow_hiding) {
        if (this.hidden) {
          this.widget.removeClass("hidden");
          this.body.css("opacity", 0.5);
          this.title_field.css("opacity", 0.5);
          this.footer.css("opacity", 0.5);
        }
        const classname = this.hidden ? "fa fa-eye" : "fa fa-eye-slash";
        const title = this.hidden ? __("Show") : __("Hide");
        frappe.utils.add_custom_button(
          `<i class="${classname}" aria-hidden="true"></i>`,
          () => this.hide_or_show(),
          "show-or-hide-button",
          title,
          null,
          this.action_area
        );
        this.show_or_hide_button = this.action_area.find(".show-or-hide-button");
      }
      options.allow_edit && frappe.utils.add_custom_button(
        frappe.utils.icon("es-line-edit-alt", "xs"),
        () => this.edit(),
        "edit-button",
        __("Edit"),
        null,
        this.action_area
      );
    }
    make() {
      this.make_widget();
      this.widget.appendTo(this.container);
    }
    make_widget() {
      this.widget = $(`<div class="widget" data-widget-name="${this.name ? this.name : ""}">
			<div class="widget-head">
				<div class="widget-label">
					<div class="widget-title"></div>
					<div class="widget-subtitle"></div>
				</div>
				<div class="widget-control"></div>
			</div>
			<div class="widget-body"></div>
			<div class="widget-footer"></div>
		</div>`);
      this.title_field = this.widget.find(".widget-title");
      this.subtitle_field = this.widget.find(".widget-subtitle");
      this.body = this.widget.find(".widget-body");
      this.action_area = this.widget.find(".widget-control");
      this.head = this.widget.find(".widget-head");
      this.footer = this.widget.find(".widget-footer");
      this.refresh();
    }
    set_title(max_chars) {
      let base = this.title || this.label || this.name;
      let title = max_chars ? frappe.ellipsis(base, max_chars) : base;
      this.title_field[0].innerHTML = `<span class="ellipsis" title="${title}">${title}</span>`;
      if (max_chars) {
        this.title_field[0].setAttribute("title", this.title || this.label);
      }
      this.subtitle && this.subtitle_field.html(this.subtitle);
    }
    delete(animate = true, dismissed = false) {
      let remove_widget = (setup_new) => {
        this.widget.remove();
        !dismissed && this.options.on_delete && this.options.on_delete(this.name, setup_new);
      };
      if (animate) {
        this.widget.addClass("zoom-out");
        setTimeout(() => {
          remove_widget(true);
        }, 300);
      } else {
        remove_widget(false);
      }
    }
    edit() {
      var _a;
      const dialog_class = get_dialog_constructor(this.widget_type);
      this.edit_dialog = new dialog_class({
        for_workspace: (_a = this.options) == null ? void 0 : _a.for_workspace,
        label: this.label,
        type: this.widget_type,
        values: this.get_config(),
        primary_action: (data) => {
          Object.assign(this, data);
          data.name = this.name;
          this.new = true;
          this.refresh();
          this.options.on_edit && this.options.on_edit(data);
        },
        primary_action_label: __("Save")
      });
      this.edit_dialog.make();
    }
    toggle_width() {
      if (this.width == "Full") {
        this.widget.removeClass("full-width");
        this.width = null;
        this.refresh();
      } else {
        this.widget.addClass("full-width");
        this.width = "Full";
        this.refresh();
      }
      const title = this.width == "Full" ? __("Collapse") : __("Expand");
      this.resize_button.attr("title", title);
    }
    hide_or_show() {
      if (!this.hidden) {
        this.body.css("opacity", 0.5);
        this.title_field.css("opacity", 0.5);
        this.footer.css("opacity", 0.5);
        this.hidden = true;
      } else {
        this.body.css("opacity", 1);
        this.title_field.css("opacity", 1);
        this.footer.css("opacity", 1);
        this.hidden = false;
      }
      this.show_or_hide_button.empty();
      const classname = this.hidden ? "fa fa-eye" : "fa fa-eye-slash";
      const title = this.hidden ? __("Show") : __("Hide");
      $(`<i class="${classname}" aria-hidden="true" title="${title}"></i>`).appendTo(
        this.show_or_hide_button
      );
    }
    setup_events() {
    }
    set_actions() {
    }
    set_body() {
    }
    set_footer() {
    }
  };

  // frappe/public/js/frappe/widgets/chart_widget.js
  frappe.provide("frappe.widget.utils");
  frappe.provide("frappe.dashboards");
  frappe.provide("frappe.dashboards.chart_sources");
  var ChartWidget = class extends Widget {
    constructor(opts) {
      opts.shadow = true;
      super(opts);
      this.height = this.height || 240;
    }
    get_config() {
      return {
        name: this.name,
        chart_name: this.chart_name,
        label: this.label,
        hidden: this.hidden,
        width: this.width
      };
    }
    refresh() {
      delete this.dashboard_chart;
      this.set_body();
      this.make_chart();
    }
    set_chart_title() {
      const max_chars = this.widget.width() < 600 ? 40 : 60;
      this.set_title(max_chars);
    }
    set_body() {
      this.widget.addClass("dashboard-widget-box");
      if (this.width == "Full") {
        this.widget.addClass("full-width");
      }
    }
    setup_container() {
      this.body.empty();
      if (this.chart_doc.type == "Heatmap") {
        this.setup_heatmap_container();
      }
      this.loading = $(
        `<div class="chart-loading-state text-muted" style="height: ${this.height}px;">${__(
          "Loading..."
        )}</div>`
      );
      this.loading.appendTo(this.body);
      this.empty = $(
        `<div class="chart-loading-state text-muted" style="height: ${this.height}px;">${__(
          "No Data"
        )}</div>`
      );
      this.empty.hide().appendTo(this.body);
      this.chart_wrapper = $(`<div></div>`);
      this.chart_wrapper.appendTo(this.body);
      this.$heatmap_legend = null;
      this.set_chart_title();
    }
    setup_heatmap_container() {
      this.widget.addClass("heatmap-chart");
      this.widget.removeClass("full-width").addClass("full-width");
      this.width = "Full";
    }
    set_summary() {
      if (!this.$summary) {
        this.$summary = $(`<div class="report-summary"></div>`).hide();
        this.head.after(this.$summary);
      } else {
        this.$summary.empty();
      }
      this.summary.forEach((summary) => {
        frappe.utils.build_summary_item(summary).appendTo(this.$summary);
      });
      this.summary.length && this.$summary.show();
    }
    make_chart() {
      this.get_settings().then(() => {
        if (!this.settings) {
          this.deleted = true;
          this.widget.remove();
          return;
        }
        if (!this.chart_settings) {
          this.chart_settings = {};
        }
        this.setup_container();
        if (!this.in_customize_mode) {
          this.action_area.empty();
          this.prepare_chart_actions();
          if (this.chart_doc.timeseries) {
            this.render_time_series_filters();
          }
        }
        frappe.run_serially([
          () => this.prepare_chart_object(),
          () => this.setup_filter_button(),
          () => this.fetch_and_update_chart()
        ]);
      });
    }
    render_time_series_filters() {
      let filters2 = this.get_time_series_filters();
      frappe.dashboard_utils.render_chart_filters(filters2, "chart-actions", this.action_area, 0);
    }
    get_time_series_filters() {
      let filters2;
      if (this.chart_doc.type == "Heatmap") {
        filters2 = [
          {
            label: this.chart_settings.heatmap_year || this.chart_doc.heatmap_year,
            options: frappe.dashboard_utils.get_years_since_creation(
              frappe.boot.user.creation
            ),
            action: (selected_item) => {
              this.selected_heatmap_year = selected_item;
              this.save_chart_config_for_user({
                heatmap_year: this.selected_heatmap_year
              });
              this.fetch_and_update_chart();
            }
          }
        ];
      } else {
        filters2 = [
          {
            label: this.chart_settings.time_interval || this.chart_doc.time_interval,
            options: ["Yearly", "Quarterly", "Monthly", "Weekly", "Daily"],
            icon: "calendar",
            class: "time-interval-filter",
            action: (selected_item) => {
              this.selected_time_interval = selected_item;
              this.save_chart_config_for_user({
                time_interval: this.selected_time_interval
              });
              this.fetch_and_update_chart();
            }
          },
          {
            label: this.chart_settings.timespan || this.chart_doc.timespan,
            options: [
              "Select Date Range",
              "Last Year",
              "Last Quarter",
              "Last Month",
              "Last Week"
            ],
            class: "timespan-filter",
            action: (selected_item) => {
              this.selected_timespan = selected_item;
              if (this.selected_timespan === "Select Date Range") {
                this.render_date_range_field();
              } else {
                this.selected_from_date = null;
                this.selected_to_date = null;
                if (this.date_field_wrapper) {
                  this.date_field_wrapper.hide();
                  this.title_field.show();
                  this.subtitle_field.show();
                  this.head.css("flex-direction", "row");
                }
                this.save_chart_config_for_user({
                  timespan: this.selected_timespan,
                  from_date: null,
                  to_date: null
                });
                this.fetch_and_update_chart();
              }
            }
          }
        ];
      }
      return filters2;
    }
    fetch_and_update_chart() {
      this.args = {
        timespan: this.selected_timespan || this.chart_settings.timespan,
        time_interval: this.selected_time_interval || this.chart_settings.time_interval,
        from_date: this.selected_from_date || this.chart_settings.from_date,
        to_date: this.selected_to_date || this.chart_settings.to_date,
        heatmap_year: this.selected_heatmap_year || this.chart_settings.heatmap_year
      };
      this.fetch(this.filters, true, this.args).then((data) => {
        if (this.chart_doc.chart_type == "Report") {
          this.report_result = data;
          this.summary = data.report_summary;
          data = this.get_report_chart_data(data);
        }
        this.update_chart_object();
        this.data = data;
        this.render();
      });
    }
    render_date_range_field() {
      if (!this.date_field_wrapper || !this.date_field_wrapper.is(":visible")) {
        this.date_field_wrapper = $(
          `<div class="dashboard-date-field pull-right"></div>`
        ).insertAfter(this.action_area.find(".timespan-filter"));
        if (this.width !== "Full" && this.widget.width() < 700) {
          this.title_field.hide();
          this.subtitle_field.hide();
          this.head.css("flex-direction", "row-reverse");
        }
        this.date_range_field = frappe.ui.form.make_control({
          df: {
            fieldtype: "DateRange",
            fieldname: "from_date",
            placeholder: "Date Range",
            input_class: "input-xs",
            default: [this.chart_settings.from_date, this.chart_settings.to_date],
            value: [this.chart_settings.from_date, this.chart_settings.to_date],
            reqd: 1,
            change: () => {
              let selected_date_range = this.date_range_field.get_value();
              this.selected_from_date = selected_date_range[0];
              this.selected_to_date = selected_date_range[1];
              if (selected_date_range && selected_date_range.length == 2) {
                this.save_chart_config_for_user({
                  timespan: this.selected_timespan,
                  from_date: this.selected_from_date,
                  to_date: this.selected_to_date
                });
                this.fetch_and_update_chart();
              }
            }
          },
          parent: this.date_field_wrapper,
          render_input: 1
        });
        this.date_range_field.$input.focus();
      }
    }
    get_report_chart_data(result) {
      if (result.chart && this.chart_doc.use_report_chart) {
        return result.chart.data;
      } else {
        let y_fields = [];
        this.chart_doc.y_axis.map((field) => {
          y_fields.push(field.y_field);
        });
        let chart_fields = {
          y_fields,
          x_field: this.chart_doc.x_field,
          chart_type: this.chart_doc.type,
          color: this.chart_doc.color
        };
        let columns = result.columns.map((col) => {
          return frappe.report_utils.prepare_field_from_column(col);
        });
        return frappe.report_utils.make_chart_options(columns, result, chart_fields).data;
      }
    }
    prepare_chart_actions() {
      let actions = [
        {
          label: __("Refresh"),
          action: "action-refresh",
          handler: () => {
            delete this.dashboard_chart;
            this.make_chart();
          }
        },
        {
          label: __("Edit"),
          action: "action-edit",
          handler: () => {
            frappe.set_route("Form", "Dashboard Chart", this.chart_doc.name);
          }
        },
        {
          label: __("Reset Chart"),
          action: "action-reset",
          handler: () => {
            this.reset_chart();
            delete this.dashboard_chart;
            this.make_chart();
          }
        }
      ];
      if (this.chart_doc.document_type) {
        actions.push({
          label: __("{0} List", [this.chart_doc.document_type]),
          action: "action-list",
          handler: () => {
            frappe.set_route("List", this.chart_doc.document_type);
          }
        });
      } else if (this.chart_doc.chart_type === "Report") {
        actions.push({
          label: __("{0} Report", [this.chart_doc.report_name]),
          action: "action-list",
          handler: () => {
            frappe.set_route("query-report", this.chart_doc.report_name, this.filters);
          }
        });
      }
      this.set_chart_actions(actions);
    }
    setup_filter_button() {
      if (this.in_customize_mode)
        return;
      this.is_document_type = this.chart_doc.chart_type !== "Report" && this.chart_doc.chart_type !== "Custom";
      this.filter_button = $(
        `<div class="filter-chart btn btn-xs pull-right">
				${frappe.utils.icon("filter", "sm")}
			</div>`
      );
      this.filter_button.appendTo(this.action_area);
      if (this.is_document_type) {
        if (this.filter_group) {
          this.filters = this.filter_group.get_filters();
        }
        this.create_filter_group_and_add_filters();
      } else {
        this.filter_button.on("click", () => {
          let fields;
          frappe.dashboard_utils.get_filters_for_chart_type(this.chart_doc).then((filters2) => {
            if (!this.is_document_type) {
              if (!filters2) {
                fields = [
                  {
                    fieldtype: "HTML",
                    options: __("No Filters Set")
                  }
                ];
              } else {
                fields = filters2.filter((df) => df.fieldname).map((df) => {
                  Object.assign(df, df.dashboard_config || {});
                  return df;
                });
              }
            } else {
              fields = [
                {
                  fieldtype: "HTML",
                  fieldname: "filter_area"
                }
              ];
            }
            this.setup_filter_dialog(fields);
          });
        });
      }
    }
    setup_filter_dialog(fields) {
      let me2 = this;
      let dialog = new frappe.ui.Dialog({
        title: __("Set Filters for {0}", [this.chart_doc.chart_name]),
        fields,
        primary_action: function() {
          let values = this.get_values();
          if (values) {
            this.hide();
            me2.filters = values;
            me2.save_chart_config_for_user({ filters: me2.filters });
            me2.fetch_and_update_chart();
          }
        },
        primary_action_label: "Set"
      });
      dialog.show();
      if (this.chart_doc.chart_type == "Report") {
        frappe.query_report = new frappe.views.QueryReport({ filters: dialog.fields_list });
        frappe.query_reports[this.chart_doc.report_name].onload && frappe.query_reports[this.chart_doc.report_name].onload(frappe.query_report);
      }
      dialog.set_values(this.filters);
    }
    reset_chart() {
      this.save_chart_config_for_user(null, 1);
      this.chart_settings = {};
      this.filters = null;
      this.selected_time_interval = null;
      this.selected_timespan = null;
      this.selected_heatmap_year = null;
    }
    save_chart_config_for_user(config, reset = 0) {
      Object.assign(this.chart_settings, config);
      frappe.xcall(
        "frappe.desk.doctype.dashboard_settings.dashboard_settings.save_chart_config",
        {
          reset,
          config: this.chart_settings,
          chart_name: this.chart_doc.chart_name
        }
      );
    }
    create_filter_group_and_add_filters() {
      this.filter_group = new frappe.ui.FilterGroup({
        doctype: this.chart_doc.document_type,
        parent_doctype: this.chart_doc.parent_document_type,
        filter_button: this.filter_button,
        on_change: () => {
          this.filters = this.filter_group.get_filters();
          this.save_chart_config_for_user({
            filters: this.filters
          });
          this.fetch_and_update_chart();
        }
      });
      this.filters && frappe.model.with_doctype(this.chart_doc.document_type, () => {
        this.filter_group.add_filters_to_filter_group(this.filters);
      });
    }
    set_chart_actions(actions) {
      this.chart_actions = $(`<div class="chart-actions dropdown pull-right">
			<button data-toggle="dropdown"
				aria-haspopup="true"aria-expanded="false"
				class="btn btn-xs btn-secondary chart-menu"
			>
				<svg class="icon icon-sm">
					<use href="#icon-dot-horizontal">
					</use>
				</svg>
			</button>
			<ul class="dropdown-menu dropdown-menu-right">
				${actions.map(
        (action) => `<li><a class="dropdown-item" data-action="${action.action}">${action.label}</a></li>`
      ).join("")}
			</ul>
		</div>
		`);
      this.chart_actions.find("a[data-action]").each((i3, o2) => {
        const action = o2.dataset.action;
        $(o2).click(actions.find((a2) => a2.action === action));
      });
      this.chart_actions.appendTo(this.action_area);
    }
    fetch(filters2, refresh = false, args) {
      let method = this.settings.method;
      if (this.chart_doc.chart_type == "Report") {
        args = {
          report_name: this.chart_doc.report_name,
          filters: filters2,
          ignore_prepared_report: 1
        };
      } else {
        args = {
          chart_name: this.chart_doc.name,
          filters: filters2,
          refresh: refresh ? 1 : 0,
          time_interval: args && args.time_interval ? args.time_interval : null,
          timespan: args && args.timespan ? args.timespan : null,
          from_date: args && args.from_date ? args.from_date : null,
          to_date: args && args.to_date ? args.to_date : null,
          heatmap_year: args && args.heatmap_year ? args.heatmap_year : null
        };
      }
      return frappe.xcall(method, args);
    }
    async get_source_doctype() {
      if (this.chart_doc.document_type) {
        return this.chart_doc.document_type;
      }
      if (this.chart_doc.chart_type == "Report" && this.chart_doc.report_name) {
        return await frappe.db.get_value("Report", this.chart_doc.report_name, "ref_doctype").then((r2) => r2.message.ref_doctype);
      }
    }
    async render() {
      let setup_dashboard_chart = () => {
        const chart_args = this.get_chart_args();
        if (!this.dashboard_chart) {
          this.dashboard_chart = frappe.utils.make_chart(this.chart_wrapper[0], chart_args);
        } else {
          this.dashboard_chart.update(this.data);
        }
      };
      if (!this.data || !this.data.labels || !Object.keys(this.data).length) {
        this.chart_wrapper.hide();
        this.loading.hide();
        this.$summary && this.$summary.hide();
        this.empty.show();
      } else {
        this.loading.hide();
        this.empty.hide();
        this.chart_wrapper.show();
        this.chart_doc.document_type = await this.get_source_doctype();
        if (this.chart_doc.document_type) {
          frappe.model.with_doctype(this.chart_doc.document_type, setup_dashboard_chart);
        } else {
          setup_dashboard_chart();
        }
        this.width == "Full" && this.summary && this.set_summary();
        this.chart_doc.type == "Heatmap" && this.render_heatmap_legend();
      }
    }
    get_chart_args() {
      var _a, _b;
      let colors = this.get_chart_colors();
      let fieldtype, options;
      const chart_type_map = {
        Line: "line",
        Bar: "bar",
        Percentage: "percentage",
        Pie: "pie",
        Donut: "donut",
        Heatmap: "heatmap"
      };
      let max_slices = ["Pie", "Donut"].includes(this.chart_doc.type) ? 6 : 9;
      let chart_args = {
        data: this.data,
        type: chart_type_map[this.chart_doc.type],
        colors,
        height: this.height,
        maxSlices: this.chart_doc.number_of_groups || max_slices,
        axisOptions: {
          xIsSeries: this.chart_doc.timeseries,
          shortenYAxisNumbers: 1
        }
      };
      if (this.chart_doc.document_type) {
        let doctype_meta = frappe.get_meta(this.chart_doc.document_type);
        let field = doctype_meta.fields.find(
          (x2) => x2.fieldname == this.chart_doc.value_based_on
        );
        fieldtype = field == null ? void 0 : field.fieldtype;
        options = field == null ? void 0 : field.options;
      }
      if (this.chart_doc.chart_type == "Report" && ((_b = (_a = this.report_result) == null ? void 0 : _a.chart) == null ? void 0 : _b.fieldtype)) {
        fieldtype = this.report_result.chart.fieldtype;
        options = this.report_result.chart.options;
      }
      chart_args.tooltipOptions = {
        formatTooltipY: (value2) => frappe.format(
          value2,
          { fieldtype, options },
          { always_show_decimals: true, inline: true }
        )
      };
      if (this.chart_doc.type == "Heatmap") {
        const heatmap_year = parseInt(
          this.selected_heatmap_year || this.chart_settings.heatmap_year || this.chart_doc.heatmap_year
        );
        chart_args.data.start = new Date(`${heatmap_year}-01-01`);
        chart_args.data.end = new Date(`${heatmap_year + 1}-01-01`);
      }
      let set_options = (options2) => {
        let custom_options = JSON.parse(options2);
        for (let key2 in custom_options) {
          if (typeof chart_args[key2] === "object" && typeof custom_options[key2] === "object") {
            chart_args[key2] = Object.assign(chart_args[key2], custom_options[key2]);
          } else {
            chart_args[key2] = custom_options[key2];
          }
        }
      };
      if (this.custom_options) {
        set_options(this.custom_options);
      }
      if (this.chart_doc.custom_options) {
        set_options(this.chart_doc.custom_options);
      }
      return chart_args;
    }
    get_chart_colors() {
      let colors = [];
      if (this.chart_doc.y_axis.length) {
        this.chart_doc.y_axis.map((field) => {
          colors.push(field.color);
        });
      } else if (["Line", "Bar"].includes(this.chart_doc.type)) {
        colors = [this.chart_doc.color || []];
      } else if (this.chart_doc.type == "Heatmap") {
        colors = [];
      }
      return colors;
    }
    render_heatmap_legend() {
      let legend_colors;
      let set_legend_color = (options) => {
        legend_colors = JSON.parse(options).colors;
      };
      if (this.custom_options) {
        set_legend_color(this.custom_options);
      }
      if (this.chart_doc.custom_options) {
        set_legend_color(this.chart_doc.custom_options);
      }
      if (!this.$heatmap_legend && this.widget.width() > 991) {
        this.$heatmap_legend = $(`
				<div class="heatmap-legend">
					<ul class="legend-colors">
						<li style="background-color: ${legend_colors[0] || "#ebedf0"}"></li>
						<li style="background-color: ${legend_colors[1] || "#c6e48b"}"></li>
						<li style="background-color: ${legend_colors[2] || "#7bc96f"}"></li>
						<li style="background-color: ${legend_colors[3] || "#239a3b"}"></li>
						<li style="background-color: ${legend_colors[4] || "#196127"}"></li>
					</ul>
					<div class="legend-label">
						<div style="margin-bottom: 45px">${__("Less")}</div>
						<div>${__("More")}</div>
					</div>
				</div>
				`);
        this.body.append(this.$heatmap_legend);
      }
    }
    update_last_synced() {
      if (!this.chart_doc.last_synced_on) {
        return;
      }
      let last_synced_text = __("Last synced {0}", [
        comment_when(this.chart_doc.last_synced_on)
      ]);
      this.subtitle_field.html(last_synced_text);
    }
    update_chart_object() {
      frappe.db.get_doc("Dashboard Chart", this.chart_doc.name).then((doc2) => {
        this.chart_doc = doc2;
        this.update_last_synced();
      });
    }
    prepare_chart_object() {
      if (this.chart_doc.type == "Heatmap" && !this.chart_doc.heatmap_year) {
        this.chart_doc.heatmap_year = frappe.dashboard_utils.get_year(
          frappe.datetime.now_date()
        );
      }
      return this.set_chart_filters();
    }
    set_chart_filters() {
      let user_saved_filters = this.chart_settings.filters || null;
      let chart_saved_filters = frappe.dashboard_utils.get_all_filters(this.chart_doc);
      if (this.chart_doc.chart_type == "Report") {
        return frappe.dashboard_utils.get_filters_for_chart_type(this.chart_doc).then((filters2) => {
          chart_saved_filters = this.update_default_date_filters(
            filters2,
            chart_saved_filters
          );
          this.filters = frappe.utils.parse_array(user_saved_filters) || frappe.utils.parse_array(this.filters) || frappe.utils.parse_array(chart_saved_filters);
        });
      } else {
        this.filters = frappe.utils.parse_array(user_saved_filters) || frappe.utils.parse_array(this.filters) || frappe.utils.parse_array(chart_saved_filters);
        return Promise.resolve();
      }
    }
    update_default_date_filters(report_filters, chart_filters) {
      if (report_filters) {
        report_filters.map((f3) => {
          if (["Date", "DateRange"].includes(f3.fieldtype) && f3.default) {
            if (f3.reqd || chart_filters[f3.fieldname]) {
              chart_filters[f3.fieldname] = f3.default;
            }
          }
        });
      }
      return chart_filters;
    }
    get_settings() {
      return frappe.model.with_doc("Dashboard Chart", this.chart_name).then((chart_doc) => {
        if (chart_doc) {
          this.chart_doc = chart_doc;
          if (this.chart_doc.chart_type == "Custom") {
            if (frappe.dashboards.chart_sources[this.chart_doc.source]) {
              this.settings = frappe.dashboards.chart_sources[this.chart_doc.source];
              return Promise.resolve();
            } else {
              const method = "frappe.desk.doctype.dashboard_chart_source.dashboard_chart_source.get_config";
              return frappe.xcall(method, { name: this.chart_doc.source }).then((config) => {
                frappe.dom.eval(config);
                this.settings = frappe.dashboards.chart_sources[this.chart_doc.source];
              });
            }
          } else if (this.chart_doc.chart_type == "Report") {
            this.settings = {
              method: "frappe.desk.query_report.run"
            };
            return Promise.resolve();
          } else {
            this.settings = {
              method: "frappe.desk.doctype.dashboard_chart.dashboard_chart.get"
            };
            return Promise.resolve();
          }
        }
      });
    }
  };

  // frappe/public/js/frappe/widgets/shortcut_widget.js
  frappe.provide("frappe.utils");
  var ShortcutWidget = class extends Widget {
    constructor(opts) {
      opts.shadow = true;
      super(opts);
    }
    get_config() {
      return {
        name: this.name,
        icon: this.icon,
        label: this.label,
        format: this.format,
        link_to: this.link_to,
        doc_view: this.doc_view,
        color: this.color,
        restrict_to_domain: this.restrict_to_domain,
        stats_filter: this.stats_filter,
        type: this.type,
        url: this.url,
        kanban_board: this.kanban_board
      };
    }
    setup_events() {
      this.widget.click((e2) => {
        if (this.in_customize_mode)
          return;
        let route = frappe.utils.generate_route({
          route: this.route,
          name: this.link_to,
          type: this.type,
          is_query_report: this.is_query_report,
          doctype: this.ref_doctype,
          doc_view: this.doc_view,
          kanban_board: this.kanban_board
        });
        let filters2 = frappe.utils.get_filter_from_json(this.stats_filter);
        if (this.type == "DocType" && filters2) {
          frappe.route_options = filters2;
        }
        if (e2.ctrlKey || e2.metaKey) {
          frappe.open_in_new_tab = true;
        }
        if (this.type == "URL") {
          if (frappe.open_in_new_tab) {
            window.open(this.url, "_blank");
            frappe.open_in_new_tab = false;
          } else {
            window.location.href = this.url;
          }
          return;
        }
        frappe.set_route(route);
      });
    }
    set_actions() {
      if (this.in_customize_mode)
        return;
      $(frappe.utils.icon("es-line-arrow-up-right", "xs", "", "", "ml-2")).appendTo(
        this.action_area
      );
      this.widget.addClass("shortcut-widget-box");
      let filters2 = frappe.utils.process_filter_expression(this.stats_filter);
      if (this.type == "DocType" && filters2) {
        frappe.db.count(this.link_to, {
          filters: filters2
        }).then((count) => this.set_count(count));
      }
    }
    set_count(count) {
      const get_label = () => {
        if (this.format) {
          return __(this.format).replace(/{}/g, count);
        }
        return count;
      };
      this.action_area.empty();
      const label = get_label();
      let color = this.color && count ? this.color.toLowerCase() : "gray";
      $(
        `<div class="indicator-pill no-indicator-dot ellipsis ${color}">${label}</div>`
      ).appendTo(this.action_area);
      $(frappe.utils.icon("es-line-arrow-up-right", "xs", "", "", "ml-2")).appendTo(
        this.action_area
      );
    }
  };

  // frappe/public/js/frappe/widgets/links_widget.js
  frappe.provide("frappe.utils");
  var LinksWidget = class extends Widget {
    constructor(opts) {
      opts.icon = opts.icon || "es-line-filetype";
      super(opts);
    }
    get_config() {
      return {
        name: this.name,
        links: JSON.stringify(this.links),
        link_count: this.links.length,
        label: this.label,
        hidden: this.hidden
      };
    }
    set_body() {
      if (!this.options) {
        this.options = {};
        this.options.links = this.links;
      }
      this.widget.addClass("links-widget-box");
      const is_link_disabled = (item) => {
        return item.dependencies && item.incomplete_dependencies;
      };
      const disabled_dependent = (item) => {
        return is_link_disabled(item) ? "disabled-link" : "";
      };
      const get_indicator_color = (item) => {
        if (item.open_count) {
          return "red";
        }
        if (item.onboard) {
          return item.count ? "blue" : "yellow";
        }
        return "gray";
      };
      const get_link_for_item = (item) => {
        if (is_link_disabled(item)) {
          return `<span class="link-content ellipsis disabled-link">${item.label ? item.label : item.name}</span>
					<div class="module-link-popover popover fade top in" role="tooltip" style="display: none;">
						<div class="arrow"></div>
						<h3 class="popover-title" style="display: none;"></h3>
						<div class="popover-content" style="padding: 12px;">
							<div class="small text-muted">${__("You need to create these first: ")}</div>
							<div class="small">${item.incomplete_dependencies.join(", ")}</div>
						</div>
					</div>`;
        }
        if (item.youtube_id)
          return `<span class="link-content help-video-link ellipsis" data-youtubeid="${item.youtube_id}">
						${item.label ? item.label : item.name}</span>`;
        return `<span class="link-content ellipsis">${item.label ? item.label : item.name} ${frappe.utils.icon("es-line-arrow-up-right", "xs", "", "", "ml-2")} </span>`;
      };
      this.link_list = this.links.map((item) => {
        const opts = {
          name: item.link_to,
          type: item.link_type,
          doctype: item.doctype,
          is_query_report: item.is_query_report
        };
        if (item.link_type.toLowerCase() == "report" && !item.is_query_report) {
          opts.doctype = item.dependencies;
        }
        const route = frappe.utils.generate_route(opts);
        return $(`<a href="${route}" class="link-item ellipsis ${item.onboard ? "onboard-spotlight" : ""} ${disabled_dependent(item)}" type="${item.type}" title="${item.label ? item.label : item.name}">
					${get_link_for_item(item)}
			</a>`);
      });
      if (this.in_customize_mode) {
        this.body.empty();
      }
      this.link_list.forEach((link) => link.appendTo(this.body));
    }
    setup_events() {
      this.link_list.forEach((link) => {
        const link_label = link.find(".link-content");
        if (link.hasClass("disabled-link")) {
          const popover = link.find(".module-link-popover");
          link_label.mouseover(() => {
            if (this.in_customize_mode)
              return;
            popover.show();
          });
          link_label.mouseout(() => popover.hide());
        } else {
          link_label.click((event2) => {
            if (this.in_customize_mode)
              return;
            if (link_label.hasClass("help-video-link")) {
              let yt_id = event2.currentTarget.dataset.youtubeid;
              frappe.help.show_video(yt_id);
            }
          });
        }
      });
    }
  };

  // frappe/public/js/frappe/widgets/onboarding_widget.js
  frappe.provide("frappe.utils");
  var OnboardingWidget = class extends Widget {
    async refresh() {
      frappe.utils.load_video_player();
      this.new && await this.get_onboarding_data();
      this.set_title();
      this.set_actions();
      this.set_body();
      this.setup_events();
    }
    get_config() {
      return {
        label: this.onboarding_name
      };
    }
    make_body() {
      this.body.empty();
      this.steps_wrapper = $(`<div class="onboarding-steps-wrapper"></div>`).appendTo(this.body);
      this.step_preview = $(`<div class="onboarding-step-preview">
			<div class="onboarding-step-body"></div>
			<div class="onboarding-step-footer"></div>
		</div>`).appendTo(this.body);
      this.step_body = this.step_preview.find(".onboarding-step-body");
      this.step_footer = this.step_preview.find(".onboarding-step-footer");
      this.steps.forEach((step, index) => {
        this.add_step(step, index);
      });
      let first_incomplete_step = this.steps.findIndex((s2) => !s2.is_skipped && !s2.is_complete);
      if (first_incomplete_step == -1) {
        first_incomplete_step = 0;
      }
      this.show_step(this.steps[first_incomplete_step]);
    }
    add_step(step, index) {
      let status = "pending";
      if (step.is_skipped)
        status = "skipped";
      if (step.is_complete)
        status = "complete";
      let $step = $(`<a class="onboarding-step ${status}">
				<div class="step-title">
					<div class="step-index step-pending">${frappe.utils.icon(
        "es-line-success",
        "md",
        "",
        "",
        "step-icon"
      )}</div>
					<div class="step-index step-skipped">${frappe.utils.icon(
        "es-line-close-circle",
        "md",
        "",
        "--icon-stroke: var(--gray-600);",
        "step-icon"
      )}</div>
					<div class="step-index step-complete">${frappe.utils.icon(
        "es-solid-success",
        "md",
        "",
        "",
        "step-icon"
      )}</div>
					<div class="step-text">${__(step.title)}</div>
				</div>
			</a>`);
      step.$step = $step;
      if (!step.is_complete && !step.is_skipped) {
        let skip_html = $(`<div class="step-skip">${__("Skip")}</div>`);
        skip_html.appendTo($step);
        skip_html.on("click", () => {
          this.skip_step(step);
          event.stopPropagation();
        });
      }
      $step.on("click", () => this.show_step(step));
      $step.appendTo(this.steps_wrapper);
      return $step;
    }
    show_step(step) {
      this.active_step && this.active_step.$step.removeClass("active");
      step.$step.addClass("active");
      this.active_step = step;
      let actions = {
        "Watch Video": (step2) => this.show_video(step2),
        "Create Entry": (step2) => {
          if (step2.is_complete) {
            frappe.set_route(`/app/List/${step2.reference_document}`);
          } else {
            if (step2.show_full_form) {
              this.create_entry(step2);
            } else {
              this.show_quick_entry(step2);
            }
          }
        },
        "Show Form Tour": (step2) => this.show_form_tour(step2),
        "Update Settings": (step2) => this.update_settings(step2),
        "View Report": (step2) => this.open_report(step2),
        "Go to Page": (step2) => this.go_to_page(step2)
      };
      const toggle_content = () => {
        this.step_body.empty();
        this.step_footer.empty();
        set_description();
        if (step.intro_video_url) {
          $(`<button class="btn btn-default btn-sm">${__("Watch Tutorial")}</button>`).appendTo(this.step_footer).on("click", toggle_video);
        } else {
          $(
            `<button class="btn btn-default btn-sm">${__(
              step.action_label || step.action
            )}</button>`
          ).appendTo(this.step_footer).on("click", () => actions[step.action](step));
        }
      };
      const set_description = () => {
        let content = step.description ? frappe.markdown(step.description) : `<h1>${__(step.title)}</h1>`;
        if (step.action === "Create Entry") {
          content += `<p>
					<a href='/app/${frappe.router.slug(step.reference_document)}'>
						${__("Show {0} List", [__(step.reference_document)])}</a>
				</p>`;
        }
        this.step_body.html(content);
      };
      const toggle_video = () => {
        this.step_body.empty();
        this.step_footer.empty();
        const video = $(
          `<div class="video-player" data-plyr-provider="youtube" data-plyr-embed-id="${step.intro_video_url}"></div>`
        );
        video.appendTo(this.step_body);
        let plyr = new frappe.Plyr(video[0], {
          hideControls: true,
          resetOnEnd: true
        });
        $(
          `<button class="btn btn-primary btn-sm">${__(
            step.action_label || step.action
          )}</button>`
        ).appendTo(this.step_footer).on("click", () => {
          plyr.pause();
          actions[step.action](step);
        });
        $(window).one("hashchange", () => {
          plyr.pause();
        });
        $(`<button class="btn btn-secondary ml-2 btn-sm">${__("Back")}</button>`).appendTo(this.step_footer).on("click", toggle_content);
      };
      toggle_content();
    }
    go_to_page(step) {
      this.mark_complete(step);
      frappe.set_route(step.path).then(() => {
        let message = step.callback_message || __("You can continue with the onboarding after exploring this page");
        let title = step.callback_title || __("Awesome Work");
        let msg_dialog = frappe.msgprint({
          message,
          title,
          primary_action: {
            action: () => {
              msg_dialog.hide();
            },
            label: () => __("Continue")
          },
          wide: true
        });
      });
    }
    open_report(step) {
      let route = frappe.utils.generate_route({
        name: step.reference_report,
        type: "report",
        is_query_report: step.report_type !== "Report Builder",
        doctype: step.report_reference_doctype
      });
      let current_route = frappe.get_route();
      frappe.set_route(route).then(() => {
        let msg_dialog = frappe.msgprint({
          message: __(step.report_description),
          title: __(step.reference_report),
          primary_action: {
            action: () => {
              frappe.set_route(current_route).then(() => {
                this.mark_complete(step);
              });
              msg_dialog.hide();
            },
            label: () => __("Continue")
          },
          secondary_action: {
            action: () => {
              msg_dialog.hide();
              frappe.set_route(current_route).then(() => {
                this.mark_complete(step);
              });
            },
            label: __("Go Back")
          }
        });
        frappe.msg_dialog.custom_onhide = () => this.mark_complete(step);
      });
    }
    show_form_tour(step) {
      let route;
      if (step.is_single) {
        route = frappe.router.slug(step.reference_document);
      } else {
        route = `${frappe.router.slug(step.reference_document)}/new`;
      }
      let current_route = frappe.get_route();
      frappe.route_hooks = {};
      frappe.route_hooks.after_load = (frm) => {
        const on_finish = () => {
          let msg_dialog = frappe.msgprint({
            message: __("Let's take you back to onboarding"),
            title: __("Onboarding complete"),
            primary_action: {
              action: () => {
                frappe.set_route(current_route).then(() => {
                  this.mark_complete(step);
                });
                msg_dialog.hide();
              },
              label: () => __("Continue")
            }
          });
        };
        const tour_name = step.form_tour;
        frm.tour.init({ tour_name, on_finish }).then(() => frm.tour.start());
      };
      frappe.set_route(route);
    }
    update_settings(step) {
      let current_route = frappe.get_route();
      frappe.route_hooks = {};
      frappe.route_hooks.after_load = (frm) => {
        frm.scroll_to_field(step.field);
        frm.doc.__unsaved = true;
      };
      frappe.route_hooks.after_save = (frm) => {
        let success = false;
        let args = {};
        let value2 = frm.doc[step.field];
        let custom_onhide = null;
        if (value2 && step.value_to_validate == "%")
          success = true;
        if (value2 == step.value_to_validate)
          success = true;
        if (cstr(value2) == cstr(step.value_to_validate))
          success = true;
        if (success) {
          args.message = __("Let's take you back to onboarding");
          args.title = __("Action Complete");
          args.primary_action = {
            action: () => {
              frappe.set_route(current_route).then(() => {
                this.mark_complete(step);
              });
            },
            label: __("Continue")
          };
          custom_onhide = () => args.primary_action.action();
        } else {
          args.message = __("Looks like you didn't change the value");
          args.title = __("Try Again");
          args.secondary_action = {
            action: () => frappe.set_route(current_route),
            label: __("Go Back")
          };
          args.primary_action = {
            action: () => {
              frappe.set_route(current_route).then(() => {
                setTimeout(() => {
                  this.skip_step(step);
                }, 300);
              });
            },
            label: __("Skip Step")
          };
          custom_onhide = () => args.secondary_action.action();
        }
        frappe.msgprint(args);
        frappe.msg_dialog.custom_onhide = () => custom_onhide();
      };
      frappe.set_route("Form", step.reference_document);
    }
    async create_entry(step) {
      let current_route = frappe.get_route();
      let docname = await this.get_first_document(step.reference_document);
      frappe.route_hooks = {};
      frappe.route_hooks.after_load = (frm) => {
        const on_finish = () => {
          frappe.msgprint({
            message: __("Awesome, now try making an entry yourself"),
            title: __("Document Saved"),
            primary_action: {
              action: () => {
                frappe.set_route(current_route).then(() => {
                  this.mark_complete(step);
                });
              },
              label: __("Continue")
            }
          });
          frappe.msg_dialog.custom_onhide = () => {
            this.mark_complete(step);
          };
        };
        const tour_name = step.form_tour;
        frm.tour.init({ tour_name, on_finish }).then(() => frm.tour.start());
      };
      let callback = () => {
        frappe.msgprint({
          message: __("Let's take you back to onboarding"),
          title: __("Action Complete"),
          primary_action: {
            action: () => {
              frappe.set_route(current_route).then(() => {
                this.mark_complete(step);
              });
            },
            label: __("Continue")
          }
        });
        frappe.msg_dialog.custom_onhide = () => {
          this.mark_complete(step);
        };
      };
      if (step.is_submittable) {
        frappe.route_hooks.after_save = () => {
          frappe.msgprint({
            message: __("Submit this document to complete this step."),
            title: __("Document Saved")
          });
        };
        frappe.route_hooks.after_submit = callback;
      } else {
        frappe.route_hooks.after_save = callback;
      }
      frappe.set_route("Form", step.reference_document, docname);
    }
    show_quick_entry(step) {
      let current_route = frappe.get_route_str();
      frappe.ui.form.make_quick_entry(
        step.reference_document,
        () => {
          if (frappe.get_route_str() != current_route) {
            let success_dialog = frappe.msgprint({
              message: __("Let's take you back to onboarding"),
              title: __("Document Saved"),
              primary_action: {
                action: () => {
                  success_dialog.hide();
                  frappe.set_route(current_route).then(() => {
                    this.mark_complete(step);
                  });
                },
                label: __("Continue")
              }
            });
            frappe.msg_dialog.custom_onhide = () => {
              frappe.set_route(current_route).then(() => {
                this.mark_complete(step);
              });
            };
          } else {
            frappe.show_alert(
              __("Document Saved") + "<br>" + __("Let us continue with the onboarding")
            );
            this.mark_complete(step);
          }
        },
        null,
        null,
        true
      );
    }
    show_video(step) {
      frappe.help.show_video(step.video_url, step.title);
      this.mark_complete(step);
    }
    mark_complete(step) {
      let $step = step.$step;
      let callback = () => {
        step.is_complete = true;
        $step.removeClass("skipped");
        $step.addClass("complete");
      };
      this.update_step_status(step, "is_complete", 1, callback);
      this.activate_next_step(step);
    }
    skip_step(step) {
      let $step = step.$step;
      let callback = () => {
        step.is_skipped = true;
        $step.removeClass("complete");
        $step.removeClass("pending");
        $step.addClass("skipped");
      };
      this.update_step_status(step, "is_skipped", 1, callback);
      this.activate_next_step(step);
    }
    activate_next_step(step) {
      let current_step_index = this.steps.findIndex((s2) => s2 == step);
      let next_step = this.steps[current_step_index + 1];
      if (!next_step)
        return;
      this.show_step(next_step);
    }
    update_step_status(step, status, value2, callback) {
      let icon_class = {
        is_complete: "complete",
        is_skipped: "skipped"
      };
      frappe.route_hooks = {};
      frappe.call("frappe.desk.desktop.update_onboarding_step", {
        name: step.name,
        field: status,
        value: value2
      }).then(() => {
        callback();
        step.$step.removeClass("pending").removeClass("complete").removeClass("skipped").addClass(icon_class[status]);
        let pending = this.steps.filter((step2) => {
          return !(step2.is_complete || step2.is_skipped);
        });
        if (pending.length == 0) {
          this.show_success();
        }
      });
    }
    show_success() {
      let success_message = this.success || __("You seem good to go!");
      let success_state_image = this.success_state_image || "/assets/frappe/images/ui-states/success-color.png";
      let documentation = "";
      if (this.docs_url) {
        documentation = __(
          'Congratulations on completing the module setup. If you want to learn more you can refer to the documentation <a target="_blank" href="{0}">here</a>.',
          [this.docs_url]
        );
      }
      let success = $(`<div class="text-center onboarding-success">
					<img src="${success_state_image}" alt="Success State" class="zoom-in success-state">
					<h3>${success_message}</h3>
					<div class="text-muted">${documentation}</div>
					<button class="btn btn-primary btn-sm">${__("Continue")}</button>
			</div>
		`);
      success.find(".btn").on("click", () => this.delete());
      this.step_preview.empty();
      success.appendTo(this.step_preview);
    }
    set_body() {
      this.widget.addClass("onboarding-widget-box");
      if (this.is_dismissed()) {
        this.widget.hide();
      } else {
        this.make_body();
      }
    }
    is_dismissed() {
      if (this.in_customize_mode)
        return false;
      let dismissed = JSON.parse(localStorage.getItem("dismissed-onboarding") || "{}");
      if (Object.keys(dismissed).includes(this.title)) {
        let last_hidden = new Date(dismissed[this.title]);
        let today = new Date();
        let diff = frappe.datetime.get_hour_diff(today, last_hidden);
        return diff < 24;
      }
      return false;
    }
    set_actions() {
      if (this.in_customize_mode)
        return;
      this.action_area.empty();
      const dismiss = $(
        `<div class="btn btn-sm btn-secondary small" style="cursor:pointer;">${__(
          "Dismiss",
          null,
          "Stop showing the onboarding widget."
        )}</div>`
      );
      dismiss.on("click", () => {
        let dismissed = JSON.parse(localStorage.getItem("dismissed-onboarding") || "{}");
        dismissed[this.title] = frappe.datetime.now_datetime();
        localStorage.setItem("dismissed-onboarding", JSON.stringify(dismissed));
        this.delete(true, true);
        this.widget.closest(".ce-block").hide();
        frappe.telemetry.capture("dismissed_" + frappe.scrub(this.title), "frappe_onboarding");
      });
      dismiss.appendTo(this.action_area);
    }
    get_onboarding_data() {
      return frappe.model.with_doc("Module Onboarding", this.onboarding_name).then((onboarding_doc) => {
        if (onboarding_doc) {
          this.onboarding_doc = onboarding_doc;
          this.label = onboarding_doc.label;
          this.title = onboarding_doc.title || __("Let's Get Started");
          this.subtitle = onboarding_doc.subtitle;
          this.success = onboarding_doc.success;
          this.docs_url = onboarding_doc.docs_url;
          this.user_can_dismiss = onboarding_doc.user_can_dismiss;
          const method = "frappe.desk.doctype.onboarding_step.onboarding_step.get_onboarding_steps";
          return frappe.xcall(method, { ob_steps: onboarding_doc.steps }).then((steps) => {
            this.steps = steps;
          });
        }
      });
    }
    async get_first_document(doctype) {
      const { message } = await frappe.db.get_value(
        "Form Tour",
        { reference_doctype: doctype },
        ["first_document"]
      );
      let docname;
      if (message.first_document) {
        await frappe.db.get_list(doctype, { order_by: "creation" }).then((res) => {
          if (Array.isArray(res) && res.length)
            docname = res[0].name;
        });
      }
      return docname || "new";
    }
  };

  // frappe/public/js/frappe/widgets/new_widget.js
  var NewWidget = class {
    constructor(opts) {
      Object.assign(this, opts);
      this.make();
    }
    customize() {
      return;
    }
    make() {
      this.make_widget();
      this.widget.appendTo(this.container);
      this.setup_events();
    }
    get_title() {
      let title = `New ${frappe.model.unscrub(this.type)}`;
      return __(title);
    }
    make_widget() {
      const new_widget_class = `new-${frappe.scrub(
        frappe.model.unscrub(this.type),
        "-"
      )}-widget`;
      this.widget = $(`<div class="widget new-widget ${new_widget_class}">
				+ ${this.get_title()}
			</div>`);
      this.body = this.widget;
    }
    setup_events() {
      this.widget.on("click", () => {
        if (!this.custom_dialog) {
          this.open_dialog();
        } else {
          this.custom_dialog();
        }
      });
    }
    open_dialog() {
      const dialog_class = get_dialog_constructor(this.type);
      this.dialog = new dialog_class({
        label: this.label,
        type: this.type,
        values: false,
        default_values: this.default_values,
        primary_action: this.on_create
      });
      this.dialog.make();
    }
    delete() {
      this.widget.remove();
    }
  };

  // frappe/public/js/frappe/widgets/number_card_widget.js
  frappe.provide("frappe.utils");
  var NumberCardWidget = class extends Widget {
    constructor(opts) {
      opts.shadow = true;
      super(opts);
    }
    get_config() {
      return {
        name: this.name,
        number_card_name: this.number_card_name,
        label: this.label,
        color: this.color,
        hidden: this.hidden
      };
    }
    refresh() {
      this.set_body();
    }
    set_body() {
      this.widget.addClass("number-widget-box");
      this.make_card();
    }
    make_card() {
      frappe.model.with_doc("Number Card", this.number_card_name || this.name).then((card) => {
        if (!card) {
          if (this.document_type) {
            frappe.run_serially([
              () => this.create_number_card(),
              () => this.render_card()
            ]);
          } else {
            this.delete(false);
            return;
          }
        } else {
          this.card_doc = card;
          this.render_card();
        }
        this.set_events();
      });
    }
    create_number_card() {
      this.set_doc_args();
      return frappe.xcall("frappe.desk.doctype.number_card.number_card.create_number_card", {
        args: this.card_doc
      }).then((doc2) => {
        this.name = doc2.name;
        this.card_doc = doc2;
        this.widget.attr("data-widget-name", this.name);
      });
    }
    set_events() {
      $(this.body).click(() => {
        if (this.in_customize_mode)
          return;
        this.set_route();
      });
    }
    set_route() {
      if (this.card_doc.type === "Custom") {
        this.set_route_for_custom_card();
        return;
      }
      const is_document_type = this.card_doc.type !== "Report";
      const name2 = is_document_type ? this.card_doc.document_type : this.card_doc.report_name;
      const route = frappe.utils.generate_route({
        name: name2,
        type: is_document_type ? "doctype" : "report",
        is_query_report: !is_document_type
      });
      if (is_document_type) {
        const filters2 = JSON.parse(this.card_doc.filters_json);
        frappe.route_options = filters2.reduce((acc, filter) => {
          return Object.assign(acc, {
            [`${filter[0]}.${filter[1]}`]: [filter[2], filter[3]]
          });
        }, {});
      }
      frappe.set_route(route);
    }
    set_route_for_custom_card() {
      var _a;
      if (!((_a = this.data) == null ? void 0 : _a.route))
        return;
      if (this.data.route_options) {
        frappe.route_options = this.data.route_options;
      }
      frappe.set_route(this.data.route);
    }
    set_doc_args() {
      this.card_doc = Object.assign(
        {},
        {
          document_type: this.document_type,
          label: this.label,
          function: this.function,
          aggregate_function_based_on: this.aggregate_function_based_on,
          color: this.color,
          filters_json: this.stats_filter
        }
      );
    }
    get_settings(type) {
      this.filters = this.get_filters();
      const settings_map = {
        Custom: {
          method: this.card_doc.method,
          args: {
            filters: this.filters
          },
          get_number: (res) => this.get_number_for_custom_card(res)
        },
        Report: {
          method: "frappe.desk.query_report.run",
          args: {
            report_name: this.card_doc.report_name,
            filters: this.filters,
            ignore_prepared_report: 1
          },
          get_number: (res) => this.get_number_for_report_card(res)
        },
        "Document Type": {
          method: "frappe.desk.doctype.number_card.number_card.get_result",
          args: {
            doc: this.card_doc,
            filters: this.filters
          },
          get_number: (res) => this.get_number_for_doctype_card(res)
        }
      };
      return settings_map[type];
    }
    get_filters() {
      return frappe.dashboard_utils.get_all_filters(this.card_doc);
    }
    async render_card() {
      this.prepare_actions();
      this.set_title();
      this.set_loading_state();
      if (!this.card_doc.type) {
        this.card_doc.type = "Document Type";
      }
      this.settings = this.get_settings(this.card_doc.type);
      await this.get_data();
      this.render_number();
      this.render_stats();
    }
    set_loading_state() {
      $(this.body).html(`<div class="number-card-loading text-muted">
			${__("Loading...")}
		</div>`);
    }
    async get_data() {
      this.data = await frappe.xcall(this.settings.method, this.settings.args);
      return this.settings.get_number(this.data);
    }
    get_number_for_custom_card(res) {
      if (typeof res === "object") {
        this.number = res.value;
        this.set_formatted_number(res);
      } else {
        this.formatted_number = res;
      }
    }
    get_number_for_doctype_card(res) {
      this.number = res;
      if (this.card_doc.function !== "Count") {
        return frappe.model.with_doctype(this.card_doc.document_type, () => {
          const based_on_df = frappe.meta.get_docfield(
            this.card_doc.document_type,
            this.card_doc.aggregate_function_based_on
          );
          this.set_formatted_number(based_on_df);
        });
      } else {
        this.formatted_number = res;
      }
    }
    get_number_for_report_card(res) {
      const field = this.card_doc.report_field;
      const vals = res.result.reduce((acc, col2) => {
        col2[field] && acc.push(col2[field]);
        return acc;
      }, []);
      const col = res.columns.find((col2) => col2.fieldname == field);
      this.number = frappe.report_utils.get_result_of_fn(this.card_doc.report_function, vals);
      this.set_formatted_number(col);
    }
    set_formatted_number(df) {
      const default_country = frappe.sys_defaults.country;
      const shortened_number = frappe.utils.shorten_number(this.number, default_country, 5);
      let number_parts = shortened_number.split(" ");
      const symbol = number_parts[1] || "";
      number_parts[0] = window.convert_old_to_new_number_format(number_parts[0]);
      const formatted_number = $(frappe.format(number_parts[0], df)).text();
      this.formatted_number = formatted_number + " " + __(symbol);
    }
    render_number() {
      const style_attr = this.card_doc.color ? `style="color: ${this.card_doc.color};"` : "";
      $(this.body).html(`<div class="widget-content">
			<div class="number" ${style_attr}>${this.formatted_number}</div>
			</div>`);
    }
    render_stats() {
      if (this.card_doc.type !== "Document Type" || !this.card_doc.show_percentage_stats) {
        return;
      }
      let caret_html = "";
      let color_class = "";
      return this.get_percentage_stats().then(() => {
        if (this.percentage_stat == 0 || this.percentage_stat == void 0) {
          color_class = "grey-stat";
        } else if (this.percentage_stat > 0) {
          caret_html = `<span class="indicator-pill-round green">
						${frappe.utils.icon("es-line-arrow-up-right", "xs")}
					</span>`;
          color_class = "green-stat";
        } else {
          caret_html = `<span class="indicator-pill-round red">
						${frappe.utils.icon("arrow-down-right", "xs")}
					</span>`;
          color_class = "red-stat";
        }
        const stats_qualifier_map = {
          Daily: __("since yesterday"),
          Weekly: __("since last week"),
          Monthly: __("since last month"),
          Yearly: __("since last year")
        };
        const stats_qualifier = stats_qualifier_map[this.card_doc.stats_time_interval];
        let stat = (() => {
          if (this.percentage_stat == void 0)
            return NaN;
          const parts2 = this.percentage_stat.split(" ");
          const symbol = parts2[1] || "";
          return Math.abs(parts2[0]) + " " + symbol;
        })();
        if (isNaN(stat))
          return;
        $(this.body).find(".widget-content").append(`<div class="card-stats ${color_class}">
				<span class="percentage-stat-area">
					${caret_html} ${stat} % ${stats_qualifier}
				</span>
			</div>`);
      });
    }
    get_percentage_stats() {
      return frappe.xcall("frappe.desk.doctype.number_card.number_card.get_percentage_difference", {
        doc: this.card_doc,
        filters: this.filters,
        result: this.number
      }).then((res) => {
        if (res !== void 0) {
          this.percentage_stat = frappe.utils.shorten_number(res);
        }
      });
    }
    prepare_actions() {
      if (this.in_customize_mode)
        return;
      let actions = [
        {
          label: __("Refresh"),
          action: "action-refresh",
          handler: () => {
            this.render_card();
          }
        },
        {
          label: __("Edit"),
          action: "action-edit",
          handler: () => {
            let number_card = this.number_card_name || this.name;
            frappe.set_route("Form", "Number Card", number_card);
          }
        }
      ];
      this.set_card_actions(actions);
    }
    set_card_actions(actions) {
      this.card_actions = $(`<div class="card-actions dropdown pull-right">
				<a data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				...
				</a>
				<ul class="dropdown-menu" style="max-height: 300px; overflow-y: auto;">
					${actions.map(
        (action) => `<li class="dropdown-item">
									<a data-action="${action.action}">${action.label}</a>
								</li>`
      ).join("")}
				</ul>
			</div>`);
      this.card_actions.find("a[data-action]").each((i3, o2) => {
        const action = o2.dataset.action;
        $(o2).click(actions.find((a2) => a2.action === action));
      });
      this.action_area.html(this.card_actions);
    }
  };

  // frappe/public/js/frappe/widgets/quick_list_widget.js
  frappe.provide("frappe.utils");
  var QuickListWidget = class extends Widget {
    constructor(opts) {
      opts.shadow = true;
      super(opts);
    }
    get_config() {
      return {
        document_type: this.document_type,
        label: this.label,
        quick_list_filter: this.quick_list_filter
      };
    }
    set_actions() {
      if (this.in_customize_mode)
        return;
      this.setup_add_new_button();
      this.setup_refresh_list_button();
      this.setup_filter_list_button();
    }
    setup_add_new_button() {
      this.add_new_button = $(
        `<div class="add-new btn btn-xs pull-right"
			title="${__("Add New")}  ${__(this.document_type)}
			">
				${frappe.utils.icon("add", "sm")}
			</div>`
      );
      this.add_new_button.appendTo(this.action_area);
      this.add_new_button.on("click", () => {
        frappe.set_route(
          frappe.utils.generate_route({
            type: "doctype",
            name: this.document_type,
            doc_view: "New"
          })
        );
      });
    }
    setup_refresh_list_button() {
      this.refresh_list = $(
        `<div class="refresh-list btn btn-xs pull-right" title="${__("Refresh List")}">
				${frappe.utils.icon("es-line-reload", "sm")}
			</div>`
      );
      this.refresh_list.appendTo(this.action_area);
      this.refresh_list.on("click", () => {
        this.body.empty();
        this.set_body();
      });
    }
    setup_filter_list_button() {
      this.filter_list = $(
        `<div class="filter-list btn btn-xs pull-right" title="${__("Add/Update Filter")}">
				${frappe.utils.icon("filter", "sm")}
			</div>`
      );
      this.filter_list.appendTo(this.action_area);
      this.filter_list.on("click", () => this.setup_filter_dialog());
    }
    setup_filter(doctype) {
      if (this.filter_group) {
        this.filter_group.wrapper.empty();
        delete this.filter_group;
      }
      this.filters = frappe.utils.process_filter_expression(this.quick_list_filter);
      this.filter_group = new frappe.ui.FilterGroup({
        parent: this.dialog.get_field("filter_area").$wrapper,
        doctype,
        on_change: () => {
        }
      });
      frappe.model.with_doctype(doctype, () => {
        this.filter_group.add_filters_to_filter_group(this.filters);
        this.dialog.set_df_property("filter_area", "hidden", false);
      });
    }
    setup_filter_dialog() {
      let fields = [
        {
          fieldtype: "HTML",
          fieldname: "filter_area"
        }
      ];
      let me2 = this;
      this.dialog = new frappe.ui.Dialog({
        title: __("Set Filters for {0}", [__(this.document_type)]),
        fields,
        primary_action: function() {
          let old_filter = me2.quick_list_filter;
          let filters2 = me2.filter_group.get_filters();
          me2.quick_list_filter = JSON.parse(filters2);
          this.hide();
          if (old_filter != me2.quick_list_filter) {
            me2.body.empty();
            me2.set_footer();
            me2.set_body();
          }
        },
        primary_action_label: __("Set")
      });
      this.dialog.show();
      this.setup_filter(this.document_type);
    }
    render_loading_state() {
      this.body.empty();
      this.loading = $(`<div class="list-loading-state text-muted">${__("Loading...")}</div>`);
      this.loading.appendTo(this.body);
    }
    render_no_data_state() {
      this.loading = $(`<div class="list-no-data-state text-muted">${__("No Data...")}</div>`);
      this.loading.appendTo(this.body);
    }
    setup_quick_list_item(doc2) {
      let $quick_list_item = $(`
			<div class="quick-list-item">
				<div class="ellipsis left">
					<div class="ellipsis title"
						title="${strip_html(doc2[this.title_field_name])}">
						${strip_html(doc2[this.title_field_name])}
					</div>
					<div class="timestamp text-muted">
						${frappe.datetime.prettyDate(doc2.modified)}
					</div>
				</div>
			</div>
		`);
      $(`<div class="right-arrow">${frappe.utils.icon("right", "xs")}</div>`).appendTo(
        $quick_list_item
      );
      $quick_list_item.click((e2) => {
        if (e2.ctrlKey || e2.metaKey) {
          frappe.open_in_new_tab = true;
        }
        frappe.set_route(`${frappe.utils.get_form_link(this.document_type, doc2.name)}`);
      });
      return $quick_list_item;
    }
    set_body() {
      this.widget.addClass("quick-list-widget-box");
      this.render_loading_state();
      frappe.model.with_doctype(this.document_type, () => {
        let fields = ["name"];
        if (!this.title_field_name) {
          let meta = frappe.get_meta(this.document_type);
          this.title_field_name = meta && meta.title_field || "name";
        }
        if (this.title_field_name && this.title_field_name != "name") {
          fields.push(this.title_field_name);
        }
        this.has_status_field = frappe.meta.has_field(this.document_type, "status");
        if (this.has_status_field) {
          fields.push("status");
          fields.push("docstatus");
          let workflow_fieldname = frappe.workflow.get_state_fieldname(this.document_type);
          workflow_fieldname && fields.push(workflow_fieldname);
        }
        fields.push("modified");
        let quick_list_filter = frappe.utils.process_filter_expression(this.quick_list_filter);
        let args = {
          method: "frappe.desk.reportview.get",
          args: {
            doctype: this.document_type,
            fields,
            filters: quick_list_filter,
            order_by: "modified desc",
            start: 0,
            page_length: 4
          }
        };
        frappe.call(args).then((r2) => {
          if (!r2.message)
            return;
          let data = r2.message;
          this.body.empty();
          data = !Array.isArray(data) ? frappe.utils.dict(data.keys, data.values) : data;
          if (!data.length) {
            this.render_no_data_state();
            return;
          }
          this.quick_list = data.map((doc2) => this.setup_quick_list_item(doc2));
          this.quick_list.forEach(
            ($quick_list_item) => $quick_list_item.appendTo(this.body)
          );
        });
      });
    }
    set_footer() {
      this.footer.empty();
      let filters2 = frappe.utils.get_filter_from_json(this.quick_list_filter);
      let route = frappe.utils.generate_route({ type: "doctype", name: this.document_type });
      this.see_all_button = $(`
			<div class="see-all btn btn-xs">${__("View List")}</div>
		`).appendTo(this.footer);
      this.see_all_button.click((e2) => {
        if (e2.ctrlKey || e2.metaKey) {
          frappe.open_in_new_tab = true;
        }
        if (filters2) {
          frappe.route_options = filters2;
        }
        frappe.set_route(route);
      });
    }
  };

  // frappe/public/js/frappe/widgets/custom_block_widget.js
  var CustomBlockWidget = class extends Widget {
    constructor(opts) {
      opts.shadow = true;
      super(opts);
    }
    get_config() {
      return {
        custom_block_name: this.custom_block_name,
        label: this.custom_block_name
      };
    }
    refresh() {
      this.set_body();
      this.make_custom_block();
    }
    set_body() {
      this.widget.addClass("custom-block-widget-box");
      this.widget.addClass("full-width");
    }
    async make_custom_block() {
      await this.get_custom_block_data();
      this.body.empty();
      frappe.create_shadow_element(
        this.body[0],
        this.custom_block_doc.html,
        this.custom_block_doc.style,
        this.custom_block_doc.script
      );
    }
    async get_custom_block_data() {
      this.label = this.custom_block_name;
      let custom_block_doc = await frappe.model.with_doc(
        "Custom HTML Block",
        this.custom_block_name
      );
      this.custom_block_doc = custom_block_doc ? custom_block_doc : "";
    }
  };

  // frappe/public/js/frappe/widgets/widget_group.js
  frappe.provide("frappe.widget");
  frappe.widget.widget_factory = {
    chart: ChartWidget,
    base: Widget,
    shortcut: ShortcutWidget,
    links: LinksWidget,
    onboarding: OnboardingWidget,
    number_card: NumberCardWidget,
    quick_list: QuickListWidget,
    custom_block: CustomBlockWidget
  };
  frappe.widget.make_widget = (opts) => {
    const widget_class = frappe.widget.widget_factory[opts.widget_type];
    if (widget_class) {
      return new widget_class(opts);
    } else {
      console.warn("Invalid Widget Name: " + opts.widget_type);
    }
  };
  var WidgetGroup = class {
    constructor(opts) {
      Object.assign(this, opts);
      this.widgets_list = [];
      this.widgets_dict = {};
      this.widget_order = [];
      this.make();
    }
    make() {
      this.make_container();
      if (this.title) {
        this.set_title();
      } else {
        this.title_area.remove();
      }
      this.widgets && this.make_widgets();
    }
    make_container() {
      const widget_area = $(`<div class="widget-group ${this.class_name || ""}">
				<div class="widget-group-head">
					<div class="widget-group-title"></div>
					<div class="widget-group-control"></div>
				</div>
				<div class="widget-group-body grid-col-${this.columns}">
				</div>
			</div>`);
      this.widget_area = widget_area;
      if (this.hidden)
        this.widget_area.hide();
      this.title_area = widget_area.find(".widget-group-title");
      this.control_area = widget_area.find(".widget-group-control");
      this.body = widget_area.find(".widget-group-body");
      !this.widgets.length && this.widget_area.hide();
      widget_area.appendTo(this.container);
    }
    set_title() {
      this.title_area[0].innerText = this.title;
    }
    make_widgets() {
      this.body.empty();
      this.widgets.forEach((widget) => {
        this.add_widget(widget);
      });
    }
    add_widget(widget) {
      let widget_object = frappe.widget.make_widget(__spreadProps(__spreadValues({}, widget), {
        widget_type: this.type,
        container: this.body,
        height: this.height || null,
        options: __spreadProps(__spreadValues({}, this.options), {
          on_delete: (name2) => this.on_delete(name2)
        })
      }));
      this.widgets_list.push(widget_object);
      this.widgets_dict[widget.name] = widget_object;
      return widget_object;
    }
    remove_widget(widget_obj) {
      widget_obj.widget.remove();
      this.widgets_list.filter((widget) => {
        if (widget.name == widget_obj.name)
          return false;
      });
      delete this.widgets_dict[widget_obj.name];
    }
    customize() {
      if (!this.hidden)
        this.widget_area.show();
      this.widgets_list.forEach((wid) => {
        wid.customize(this.options);
      });
      this.options.allow_create && this.setup_new_widget();
      this.options.allow_sorting && this.setup_sortable();
    }
    setup_new_widget() {
      const max = this.options ? this.options.max_widget_count || Number.POSITIVE_INFINITY : Number.POSITIVE_INFINITY;
      if (this.widgets_list.length < max) {
        this.new_widget = new NewWidget({
          container: this.body,
          type: this.type,
          custom_dialog: this.custom_dialog,
          default_values: this.default_values,
          on_create: (config) => {
            this.new_widget.delete();
            delete this.new_widget;
            config.in_customize_mode = 1;
            let wid = this.add_widget(config);
            wid.customize(this.options);
            if (this.widgets_list.length < max) {
              this.setup_new_widget();
            }
          }
        });
      }
    }
    on_delete(name2, setup_new) {
      this.widgets_list = this.widgets_list.filter((wid) => name2 != wid.name);
      delete this.widgets_dict[name2];
      this.update_widget_order();
      if (!this.new_widget && setup_new)
        this.setup_new_widget();
    }
    update_widget_order() {
      this.widget_order = [];
      this.body.children().each((index, element) => {
        let name2 = element.dataset.widgetName;
        if (name2) {
          this.widget_order.push(name2);
        }
      });
    }
    setup_sortable() {
      const container = this.body[0];
      this.sortable = new Sortable(container, {
        animation: 150,
        handle: ".drag-handle",
        onEnd: () => this.update_widget_order()
      });
    }
    get_widget_config() {
      this.update_widget_order();
      let prepared_dict = {};
      this.widgets_list.forEach((wid) => {
        let config = wid.get_config();
        let name2 = config.docname ? config.docname : config.name;
        prepared_dict[name2] = config;
      });
      return {
        order: this.widget_order,
        widgets: prepared_dict
      };
    }
  };
  var SingleWidgetGroup = class {
    constructor(opts) {
      Object.assign(this, opts);
      this.widgets_list = [];
      this.widgets_dict = {};
      this.make();
    }
    make() {
      this.add_widget(this.widgets);
    }
    add_widget(widget) {
      let widget_object = frappe.widget.make_widget(__spreadProps(__spreadValues({}, widget), {
        widget_type: this.type,
        container: this.container,
        height: this.height || null,
        options: __spreadProps(__spreadValues({}, this.options), {
          on_delete: () => this.on_delete(),
          on_edit: () => this.on_edit(widget_object)
        })
      }));
      this.widgets_list.push(widget_object);
      this.widgets_dict[widget.name] = widget_object;
      return widget_object;
    }
    on_delete() {
      this.api.blocks.delete();
    }
    on_edit(widget_object) {
      this.block.call("on_edit", widget_object);
    }
    customize() {
      this.widgets_list.forEach((wid) => {
        wid.customize(this.options);
      });
    }
  };
  frappe.widget.WidgetGroup = WidgetGroup;
  frappe.widget.SingleWidgetGroup = SingleWidgetGroup;

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/sort_selector.html
  frappe.templates["sort_selector"] = `<div class="sort-selector">
	<div class="btn-group">
		<button class="btn btn-default btn-sm btn-order"
			data-value="{{ sort_order }}"
			title="{{ sort_order==="desc" ? __("descending") : __("ascending") }}">
			<span class="sort-order">
				<svg class="icon icon-sm">
					<use href="#icon-{{ sort_order==="desc" ? "sort-descending" : "sort-ascending" }}"></use>
				</svg>
			</span>
		</button>
		<button type="button" class="btn btn-default btn-sm sort-selector-button" data-toggle="dropdown">
			<span class="dropdown-text">{{ __(sort_by_label) }}</span>
			<ul class="dropdown-menu dropdown-menu-right">
				{% for value in options %}
				<li>
					<a class="dropdown-item option" data-value="{{ value.fieldname }}">
						{{ __(value.label) }}
					</a>
				</li>
				{% endfor %}
			</ul>
		</button>
	</div>
</div>
`;

  // frappe/public/js/frappe/ui/sort_selector.js
  frappe.ui.SortSelector = class SortSelector {
    constructor(opts) {
      $.extend(this, opts);
      this.labels = {};
      this.make();
    }
    make() {
      this.prepare_args();
      this.parent.find(".sort-selector").remove();
      this.wrapper = $(frappe.render_template("sort_selector", this.args)).appendTo(this.parent);
      this.bind_events();
    }
    bind_events() {
      var me2 = this;
      this.wrapper.find(".btn-order").on("click", function() {
        const order = $(this).attr("data-value") === "desc" ? "asc" : "desc";
        me2.set_value(me2.sort_by, order);
        (me2.onchange || me2.change)(me2.sort_by, me2.sort_order);
      });
      this.wrapper.find(".dropdown-menu a.option").on("click", function() {
        me2.set_value($(this).attr("data-value"), me2.sort_order);
        (me2.onchange || me2.change)(me2.sort_by, me2.sort_order);
      });
    }
    set_value(sort_by, sort_order) {
      const $btn = this.wrapper.find(".btn-order");
      const $icon = $btn.find(".sort-order");
      const $text = this.wrapper.find(".dropdown-text");
      if (this.sort_by !== sort_by) {
        this.sort_by = sort_by;
        $text.html(__(this.get_label(sort_by)));
      }
      if (this.sort_order !== sort_order) {
        this.sort_order = sort_order;
        const title = sort_order === "desc" ? __("ascending") : __("descending");
        const icon_name = sort_order === "asc" ? "sort-ascending" : "sort-descending";
        $btn.attr("data-value", sort_order);
        $btn.attr("title", title);
        $icon.html(frappe.utils.icon(icon_name, "sm"));
      }
    }
    prepare_args() {
      var me2 = this;
      if (!this.args) {
        this.args = {};
      }
      if (this.args && typeof this.args === "string") {
        var order_by = this.args;
        this.args = {};
        if (order_by.includes("`.`")) {
          order_by = order_by.split(".")[1];
        }
        var parts2 = order_by.split(" ");
        if (parts2.length === 2) {
          var fieldname = strip(parts2[0], "`");
          this.args.sort_by = fieldname;
          this.args.sort_order = parts2[1];
        }
      }
      if (this.args.options) {
        this.args.options.forEach(function(o2) {
          me2.labels[o2.fieldname] = o2.label;
        });
      }
      this.setup_from_doctype();
      if (this.args.sort_by && !this.args.sort_by_label) {
        this.args.options.every(function(o2) {
          if (o2.fieldname === me2.args.sort_by) {
            me2.args.sort_by_label = o2.label;
            return false;
          }
          return true;
        });
      }
    }
    setup_from_doctype() {
      var me2 = this;
      var meta = frappe.get_meta(this.doctype);
      if (!meta)
        return;
      var { meta_sort_field, meta_sort_order } = this.get_meta_sort_field();
      if (!this.args.sort_by) {
        if (meta_sort_field) {
          this.args.sort_by = meta_sort_field;
          this.args.sort_order = meta_sort_order;
        } else {
          this.args.sort_by = "modified";
          this.args.sort_order = "desc";
        }
      }
      if (!this.args.sort_by_label) {
        this.args.sort_by_label = this.get_label(this.args.sort_by);
      }
      if (!this.args.options) {
        var _options = [
          { fieldname: "modified" },
          { fieldname: "name" },
          { fieldname: "creation" },
          { fieldname: "idx" }
        ];
        if (meta.title_field) {
          _options.splice(1, 0, { fieldname: meta.title_field });
        }
        if (meta_sort_field) {
          _options.splice(1, 0, { fieldname: meta_sort_field });
        }
        meta.fields.forEach(function(df) {
          if ((df.mandatory || df.bold || df.in_list_view || df.reqd) && frappe.model.is_value_type(df.fieldtype) && frappe.perm.has_perm(me2.doctype, df.permlevel, "read")) {
            _options.push({ fieldname: df.fieldname, label: df.label });
          }
        });
        _options.forEach((option) => {
          if (!option.label) {
            option.label = me2.get_label(option.fieldname);
          }
        });
        this.args.options = _options.uniqBy((obj) => {
          return obj.fieldname;
        });
      }
      this.sort_by = this.args.sort_by;
      this.sort_order = this.args.sort_order;
    }
    get_meta_sort_field() {
      var meta = frappe.get_meta(this.doctype);
      if (!meta) {
        return {
          meta_sort_field: null,
          meta_sort_order: null
        };
      }
      if (meta.sort_field && meta.sort_field.includes(",")) {
        var parts2 = meta.sort_field.split(",")[0].split(" ");
        return {
          meta_sort_field: parts2[0],
          meta_sort_order: parts2[1]
        };
      } else {
        return {
          meta_sort_field: meta.sort_field || "modified",
          meta_sort_order: meta.sort_order ? meta.sort_order.toLowerCase() : ""
        };
      }
    }
    get_label(fieldname) {
      if (fieldname === "idx") {
        return __("Most Used");
      } else {
        return this.labels[fieldname] || frappe.meta.get_label(this.doctype, fieldname);
      }
    }
    get_sql_string() {
      return "`tab" + this.doctype + "`.`" + this.sort_by + "` " + this.sort_order;
    }
  };

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/change_log.html
  frappe.templates["change_log"] = `{% for (var i=0, l=change_log.length; i < l; i++) {
    var app_info = change_log[i]; %}
	{% if (i > 0) { %} <hr> {% } %}
	<div class="text-left app-change-log">
		<h2 style="margin-top: 10px;">
            {{ app_info.title }}
			<small>{{ __("updated to {0}", [app_info.version]) }}</small>
		</h2>
		<div class="app-change-log-body">
		{% for (var x=0, y=app_info.change_log.length; x < y; x++) {
            var version_info = app_info.change_log[x];
            if(version_info) { %}
    			<p>{{ frappe.markdown(version_info[1]) }}</p>
		    {% }
        } %}
    	</div>
	</div>
{% } %}
`;

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/workspace_loading_skeleton.html
  frappe.templates["workspace_loading_skeleton"] = `<div class="workspace-skeleton">
	<div class="widget-group">
		<div class="widget-group-head skeleton-header">
			<div class="widget-group-title skeleton-card"></div>
		</div>
		<div class="widget-group-body grid-col-3">
			<div class="widget shortcut-widget-box skeleton-card"></div>
			<div class="widget shortcut-widget-box skeleton-card"></div>
			<div class="widget shortcut-widget-box skeleton-card"></div>
		</div>
	</div>
	<div class="widget-group skeleton-body">
		<div class="widget-group-head skeleton-header">
			<div class="widget-group-title skeleton-card"></div>
		</div>
		<div class="widget-group-body grid-col-3">
			<div class="widget links-widget-box skeleton-card"></div>
			<div class="widget links-widget-box skeleton-card"></div>
			<div class="widget links-widget-box skeleton-card"></div>
			<div class="widget links-widget-box skeleton-card"></div>
			<div class="widget links-widget-box skeleton-card"></div>
		</div>
	</div>
</div>
`;

  // frappe-html:/Users/ravikumar/frappe-bench/frappe-bench/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/workspace_sidebar_loading_skeleton.html
  frappe.templates["workspace_sidebar_loading_skeleton"] = `<div class="workspace-sidebar-skeleton">
	<div class="widget-group-body">
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
	</div>
	<div class="widget-group-body">
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box child skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
		<div class="widget sidebar-box skeleton-card"></div>
	</div>
</div>`;

  // frappe/public/js/frappe/desk.js
  frappe.start_app = function() {
    if (!frappe.Application)
      return;
    frappe.assets.check();
    frappe.provide("frappe.app");
    frappe.provide("frappe.desk");
    frappe.app = new frappe.Application();
  };
  $(document).ready(function() {
    if (!frappe.utils.supportsES6) {
      frappe.msgprint({
        indicator: "red",
        title: __("Browser not supported"),
        message: __(
          "Some of the features might not work in your browser. Please update your browser to the latest version."
        )
      });
    }
    frappe.start_app();
  });
  frappe.Application = class Application {
    constructor() {
      this.startup();
    }
    startup() {
      frappe.realtime.init();
      frappe.model.init();
      this.load_bootinfo();
      this.load_user_permissions();
      this.make_nav_bar();
      this.set_favicon();
      this.set_fullwidth_if_enabled();
      this.add_browser_class();
      this.setup_energy_point_listeners();
      this.setup_copy_doc_listener();
      frappe.ui.keys.setup();
      frappe.ui.keys.add_shortcut({
        shortcut: "shift+ctrl+g",
        description: __("Switch Theme"),
        action: () => {
          if (frappe.theme_switcher && frappe.theme_switcher.dialog.is_visible) {
            frappe.theme_switcher.hide();
          } else {
            frappe.theme_switcher = new frappe.ui.ThemeSwitcher();
            frappe.theme_switcher.show();
          }
        }
      });
      frappe.ui.add_system_theme_switch_listener();
      const root = document.documentElement;
      const observer = new MutationObserver(() => {
        frappe.ui.set_theme();
      });
      observer.observe(root, {
        attributes: true,
        attributeFilter: ["data-theme-mode"]
      });
      frappe.ui.set_theme();
      this.make_page_container();
      if (!window.Cypress && frappe.boot.onboarding_tours && frappe.boot.user.onboarding_status != null) {
        let pending_tours = !frappe.boot.onboarding_tours.every(
          (tour) => {
            var _a;
            return (_a = frappe.boot.user.onboarding_status[tour[0]]) == null ? void 0 : _a.is_complete;
          }
        );
        if (pending_tours && frappe.boot.onboarding_tours.length > 0) {
          frappe.require("onboarding_tours.bundle.js", () => {
            frappe.utils.sleep(1e3).then(() => {
              frappe.ui.init_onboarding_tour();
            });
          });
        }
      }
      this.set_route();
      $(document).trigger("startup");
      $(document).trigger("app_ready");
      if (frappe.boot.messages) {
        frappe.msgprint(frappe.boot.messages);
      }
      if (frappe.user_roles.includes("System Manager")) {
        setTimeout(() => {
          this.show_change_log();
          this.show_update_available();
        }, 1e3);
      }
      if (!frappe.boot.developer_mode) {
        let console_security_message = __(
          "Using this console may allow attackers to impersonate you and steal your information. Do not enter or paste code that you do not understand."
        );
        console.log(`%c${console_security_message}`, "font-size: large");
      }
      this.show_notes();
      if (frappe.ui.startup_setup_dialog && !frappe.boot.setup_complete) {
        frappe.ui.startup_setup_dialog.pre_show();
        frappe.ui.startup_setup_dialog.show();
      }
      frappe.realtime.on("version-update", function() {
        var dialog = frappe.msgprint({
          message: __(
            "The application has been updated to a new version, please refresh this page"
          ),
          indicator: "green",
          title: __("Version Updated")
        });
        dialog.set_primary_action(__("Refresh"), function() {
          location.reload(true);
        });
        dialog.get_close_btn().toggle(false);
      });
      this.setup_build_events();
      if (frappe.sys_defaults.email_user_password) {
        var email_list = frappe.sys_defaults.email_user_password.split(",");
        for (var u2 in email_list) {
          if (email_list[u2] === frappe.user.name) {
            this.set_password(email_list[u2]);
          }
        }
      }
      this.link_preview = new frappe.ui.LinkPreview();
    }
    set_route() {
      if (frappe.boot && localStorage.getItem("session_last_route")) {
        frappe.set_route(localStorage.getItem("session_last_route"));
        localStorage.removeItem("session_last_route");
      } else {
        frappe.router.route();
      }
      frappe.router.on("change", () => {
        $(".tooltip").hide();
      });
    }
    set_password(user) {
      var me2 = this;
      frappe.call({
        method: "frappe.core.doctype.user.user.get_email_awaiting",
        args: {
          user
        },
        callback: function(email_account) {
          email_account = email_account["message"];
          if (email_account) {
            var i3 = 0;
            if (i3 < email_account.length) {
              me2.email_password_prompt(email_account, user, i3);
            }
          }
        }
      });
    }
    email_password_prompt(email_account, user, i3) {
      var me2 = this;
      const email_id = email_account[i3]["email_id"];
      let d3 = new frappe.ui.Dialog({
        title: __("Password missing in Email Account"),
        fields: [
          {
            fieldname: "password",
            fieldtype: "Password",
            label: __(
              "Please enter the password for: <b>{0}</b>",
              [email_id],
              "Email Account"
            ),
            reqd: 1
          },
          {
            fieldname: "submit",
            fieldtype: "Button",
            label: __("Submit", null, "Submit password for Email Account")
          }
        ]
      });
      d3.get_input("submit").on("click", function() {
        d3.hide();
        var s2 = new frappe.ui.Dialog({
          title: __("Checking one moment"),
          fields: [
            {
              fieldtype: "HTML",
              fieldname: "checking"
            }
          ]
        });
        s2.fields_dict.checking.$wrapper.html('<i class="fa fa-spinner fa-spin fa-4x"></i>');
        s2.show();
        frappe.call({
          method: "frappe.email.doctype.email_account.email_account.set_email_password",
          args: {
            email_account: email_account[i3]["email_account"],
            password: d3.get_value("password")
          },
          callback: function(passed) {
            s2.hide();
            d3.hide();
            if (!passed["message"]) {
              frappe.show_alert(
                { message: __("Login Failed please try again"), indicator: "error" },
                5
              );
              me2.email_password_prompt(email_account, user, i3);
            } else {
              if (i3 + 1 < email_account.length) {
                i3 = i3 + 1;
                me2.email_password_prompt(email_account, user, i3);
              }
            }
          }
        });
      });
      d3.show();
    }
    load_bootinfo() {
      if (frappe.boot) {
        this.setup_workspaces();
        frappe.model.sync(frappe.boot.docs);
        this.check_metadata_cache_status();
        this.set_globals();
        this.sync_pages();
        frappe.router.setup();
        this.setup_moment();
        if (frappe.boot.print_css) {
          frappe.dom.set_style(frappe.boot.print_css, "print-style");
        }
        frappe.user.name = frappe.boot.user.name;
        frappe.router.setup();
      } else {
        this.set_as_guest();
      }
    }
    setup_workspaces() {
      frappe.modules = {};
      frappe.workspaces = {};
      for (let page of frappe.boot.allowed_workspaces || []) {
        frappe.modules[page.module] = page;
        frappe.workspaces[frappe.router.slug(page.name)] = page;
      }
    }
    load_user_permissions() {
      frappe.defaults.load_user_permission_from_boot();
      frappe.realtime.on(
        "update_user_permissions",
        frappe.utils.debounce(() => {
          frappe.defaults.update_user_permissions();
        }, 500)
      );
    }
    check_metadata_cache_status() {
      if (frappe.boot.metadata_version != localStorage.metadata_version) {
        frappe.assets.clear_local_storage();
        frappe.assets.init_local_storage();
      }
    }
    set_globals() {
      frappe.session.user = frappe.boot.user.name;
      frappe.session.logged_in_user = frappe.boot.user.name;
      frappe.session.user_email = frappe.boot.user.email;
      frappe.session.user_fullname = frappe.user_info().fullname;
      frappe.user_defaults = frappe.boot.user.defaults;
      frappe.user_roles = frappe.boot.user.roles;
      frappe.sys_defaults = frappe.boot.sysdefaults;
      frappe.ui.py_date_format = frappe.boot.sysdefaults.date_format.replace("dd", "%d").replace("mm", "%m").replace("yyyy", "%Y");
      frappe.boot.user.last_selected_values = {};
    }
    sync_pages() {
      if (localStorage["page_info"]) {
        frappe.boot.allowed_pages = [];
        var page_info = JSON.parse(localStorage["page_info"]);
        $.each(frappe.boot.page_info, function(name2, p2) {
          if (!page_info[name2] || page_info[name2].modified != p2.modified) {
            delete localStorage["_page:" + name2];
          }
          frappe.boot.allowed_pages.push(name2);
        });
      } else {
        frappe.boot.allowed_pages = Object.keys(frappe.boot.page_info);
      }
      localStorage["page_info"] = JSON.stringify(frappe.boot.page_info);
    }
    set_as_guest() {
      frappe.session.user = "Guest";
      frappe.session.user_email = "";
      frappe.session.user_fullname = "Guest";
      frappe.user_defaults = {};
      frappe.user_roles = ["Guest"];
      frappe.sys_defaults = {};
    }
    make_page_container() {
      if ($("#body").length) {
        $(".splash").remove();
        frappe.temp_container = $("<div id='temp-container' style='display: none;'>").appendTo(
          "body"
        );
        frappe.container = new frappe.views.Container();
      }
    }
    make_nav_bar() {
      if (frappe.boot && frappe.boot.home_page !== "setup-wizard") {
        frappe.frappe_toolbar = new frappe.ui.toolbar.Toolbar();
      }
    }
    logout() {
      var me2 = this;
      me2.logged_out = true;
      return frappe.call({
        method: "logout",
        callback: function(r2) {
          if (r2.exc) {
            return;
          }
          me2.redirect_to_login();
        }
      });
    }
    handle_session_expired() {
      frappe.app.redirect_to_login();
    }
    redirect_to_login() {
      window.location.href = `/login?redirect-to=${encodeURIComponent(
        window.location.pathname + window.location.search
      )}`;
    }
    set_favicon() {
      var link = $('link[type="image/x-icon"]').remove().attr("href");
      $('<link rel="shortcut icon" href="' + link + '" type="image/x-icon">').appendTo("head");
      $('<link rel="icon" href="' + link + '" type="image/x-icon">').appendTo("head");
    }
    trigger_primary_action() {
      $(document.activeElement).blur();
      setTimeout(() => {
        if (window.cur_dialog && cur_dialog.display) {
          cur_dialog.get_primary_btn().trigger("click");
        } else if (cur_frm && cur_frm.page.btn_primary.is(":visible")) {
          cur_frm.page.btn_primary.trigger("click");
        } else if (frappe.container.page.save_action) {
          frappe.container.page.save_action();
        }
      }, 100);
    }
    show_change_log() {
      var me2 = this;
      let change_log = frappe.boot.change_log;
      if (!Array.isArray(change_log) || !change_log.length || window.Cypress || cint(frappe.boot.sysdefaults.disable_change_log_notification)) {
        return;
      }
      var change_log_dialog = frappe.msgprint({
        message: frappe.render_template("change_log", { change_log }),
        title: __("Updated To A New Version \u{1F389}"),
        wide: true
      });
      change_log_dialog.keep_open = true;
      change_log_dialog.custom_onhide = function() {
        frappe.call({
          method: "frappe.utils.change_log.update_last_known_versions"
        });
        me2.show_notes();
      };
    }
    show_update_available() {
      if (frappe.boot.sysdefaults.disable_system_update_notification)
        return;
      frappe.call({
        method: "frappe.utils.change_log.show_update_popup"
      });
    }
    add_browser_class() {
      $("html").addClass(frappe.utils.get_browser().name.toLowerCase());
    }
    set_fullwidth_if_enabled() {
      frappe.ui.toolbar.set_fullwidth_if_enabled();
    }
    show_notes() {
      var me2 = this;
      if (frappe.boot.notes.length) {
        frappe.boot.notes.forEach(function(note) {
          if (!note.seen || note.notify_on_every_login) {
            var d3 = frappe.msgprint({ message: note.content, title: note.title });
            d3.keep_open = true;
            d3.custom_onhide = function() {
              note.seen = true;
              if (!note.notify_on_every_login) {
                frappe.call({
                  method: "frappe.desk.doctype.note.note.mark_as_seen",
                  args: {
                    note: note.name
                  }
                });
              }
              me2.show_notes();
            };
          }
        });
      }
    }
    setup_build_events() {
      if (frappe.boot.developer_mode) {
        frappe.require("build_events.bundle.js");
      }
    }
    setup_energy_point_listeners() {
      frappe.realtime.on("energy_point_alert", (message) => {
        frappe.show_alert(message);
      });
    }
    setup_copy_doc_listener() {
      $("body").on("paste", (e2) => {
        try {
          let pasted_data = frappe.utils.get_clipboard_data(e2);
          let doc2 = JSON.parse(pasted_data);
          if (doc2.doctype) {
            e2.preventDefault();
            const sleep = frappe.utils.sleep;
            frappe.dom.freeze(__("Creating {0}", [doc2.doctype]) + "...");
            sleep(500).then(() => {
              let res = frappe.model.with_doctype(doc2.doctype, () => {
                let newdoc = frappe.model.copy_doc(doc2);
                newdoc.__newname = doc2.name;
                delete doc2.name;
                newdoc.idx = null;
                newdoc.__run_link_triggers = false;
                frappe.set_route("Form", newdoc.doctype, newdoc.name);
                frappe.dom.unfreeze();
              });
              res && res.fail(frappe.dom.unfreeze);
            });
          }
        } catch (e3) {
        }
      });
    }
    setup_moment() {
      moment.updateLocale("en", {
        week: {
          dow: frappe.datetime.get_first_day_of_the_week_index()
        }
      });
      moment.locale("en");
      moment.user_utc_offset = moment().utcOffset();
      if (frappe.boot.timezone_info) {
        moment.tz.add(frappe.boot.timezone_info);
      }
    }
  };
  frappe.get_module = function(m3, default_module) {
    var module2 = frappe.modules[m3] || default_module;
    if (!module2) {
      return;
    }
    if (module2._setup) {
      return module2;
    }
    if (!module2.label) {
      module2.label = m3;
    }
    if (!module2._label) {
      module2._label = __(module2.label);
    }
    module2._setup = true;
    return module2;
  };

  // frappe/public/js/frappe/query_string.js
  frappe.provide("frappe.utils");
  function get_url_arg(name2) {
    return get_query_params()[name2] || "";
  }
  function get_query_string(url2) {
    if (url2.includes("?")) {
      return url2.slice(url2.indexOf("?") + 1);
    } else {
      return "";
    }
  }
  function get_query_params(query_string) {
    var query_params = {};
    if (!query_string) {
      query_string = location.search.substring(1);
    }
    var query_list = query_string.split("&");
    for (var i3 = 0, l2 = query_list.length; i3 < l2; i3++) {
      var pair = query_list[i3].split(/=(.+)/);
      var key2 = pair[0];
      if (!key2) {
        continue;
      }
      var value2 = pair[1];
      if (typeof value2 === "string") {
        value2 = value2.replace(/\+/g, "%20");
        try {
          value2 = decodeURIComponent(value2);
        } catch (e2) {
        }
      }
      if (key2 in query_params) {
        if (typeof query_params[key2] === "undefined") {
          query_params[key2] = [];
        } else if (typeof query_params[key2] === "string") {
          query_params[key2] = [query_params[key2]];
        }
        query_params[key2].push(value2);
      } else {
        query_params[key2] = value2;
      }
    }
    return query_params;
  }
  function make_query_string(obj, encode3 = true) {
    let query_params = [];
    for (let key2 in obj) {
      let value2 = obj[key2];
      if (value2 === void 0 || value2 === "" || value2 === null) {
        continue;
      }
      if (typeof value2 === "object") {
        value2 = JSON.stringify(value2);
      }
      if (encode3) {
        key2 = encodeURIComponent(key2);
        value2 = encodeURIComponent(value2);
      }
      query_params.push(`${key2}=${value2}`);
    }
    return "?" + query_params.join("&");
  }
  Object.assign(frappe.utils, {
    get_url_arg,
    get_query_string,
    get_query_params,
    make_query_string
  });

  // frappe/public/js/frappe/utils/energy_point_utils.js
  frappe.provide("frappe.energy_points");
  Object.assign(frappe.energy_points, {
    get_points(points) {
      return `<span class="bold" style="color: ${points >= 0 ? "#45A163" : "#e42121"}">
			${points > 0 ? "+" : ""}${points}
		</span>`;
    },
    format_form_log(log) {
      const separator = `<span>&nbsp;-&nbsp;</span>`;
      return `<span>
  			<!--${this.get_points(log.points)}&nbsp;-->
  			<a href="/app/energy-point-log/${log.name}">${this.get_form_log_message(log)}</a>
  			${log.reason ? separator + log.reason : ""}
  		</span>`;
    },
    format_history_log(log) {
      const separator = `<span>&nbsp;-&nbsp;</span>`;
      const route = frappe.utils.get_form_link(log.reference_doctype, log.reference_name);
      return `<div class="flex">
  			<span class="${log.points >= 0 ? "green" : "red"} mr-2">
  				${this.get_points(log.points)}
  			</span>
  			<a href="${route}" class="text-muted">${this.get_history_log_message(log)}</a>
  			${log.reason ? separator + log.reason : ""}
  			${separator + frappe.datetime.comment_when(log.creation)}
  		</div>`;
    },
    get_history_log_message(log) {
      const owner_name = frappe.user.full_name(log.owner).bold();
      const ref_doc = log.reference_name;
      if (log.type === "Appreciation") {
        return __("{0} appreciated on {1}", [owner_name, ref_doc]);
      }
      if (log.type === "Criticism") {
        return __("{0} criticized on {1}", [owner_name, ref_doc]);
      }
      if (log.type === "Revert") {
        return __("{0} reverted {1}", [owner_name, log.revert_of]);
      }
      return __("via automatic rule {0} on {1}", [log.rule.bold(), ref_doc]);
    },
    get_form_log_message(log) {
      const owner_name = frappe.user.full_name(log.owner).bold();
      const user = frappe.user.full_name(log.user).bold();
      if (log.type === "Appreciation") {
        return __("{0} appreciated {1}", [owner_name, user]);
      }
      if (log.type === "Criticism") {
        return __("{0} criticized {1}", [owner_name, user]);
      }
      if (log.type === "Revert") {
        return __("{0} reverted {1}", [owner_name, log.revert_of]);
      }
      return __("gained by {0} via automatic rule {1}", [user, log.rule.bold()]);
    }
  });

  // frappe/public/js/desk.bundle.js
  var import_dashboard_utils = __toESM(require_dashboard_utils());

  // node_modules/frappe-charts/dist/frappe-charts.esm.js
  function t(e2) {
    return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(e2);
  }
  function e(t3, e2) {
    if (!(t3 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function n(t3, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i3 = e2[n2];
      i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, i3.key, i3);
    }
  }
  function i2(t3, e2, i3) {
    return e2 && n(t3.prototype, e2), i3 && n(t3, i3), t3;
  }
  function a(t3, e2) {
    if ("function" != typeof e2 && null !== e2)
      throw new TypeError("Super expression must either be null or a function");
    t3.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t3, writable: true, configurable: true } }), e2 && r(t3, e2);
  }
  function s(t3) {
    return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
      return t4.__proto__ || Object.getPrototypeOf(t4);
    })(t3);
  }
  function r(t3, e2) {
    return (r = Object.setPrototypeOf || function(t4, e3) {
      return t4.__proto__ = e3, t4;
    })(t3, e2);
  }
  function o(t3, e2) {
    return !e2 || "object" != typeof e2 && "function" != typeof e2 ? function(t4) {
      if (void 0 === t4)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t4;
    }(t3) : e2;
  }
  function l(t3) {
    var e2 = function() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        })), true;
      } catch (t4) {
        return false;
      }
    }();
    return function() {
      var n2, i3 = s(t3);
      if (e2) {
        var a2 = s(this).constructor;
        n2 = Reflect.construct(i3, arguments, a2);
      } else
        n2 = i3.apply(this, arguments);
      return o(this, n2);
    };
  }
  function c(t3, e2, n2) {
    return (c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t4, e3, n3) {
      var i3 = function(t5, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t5, e4) && null !== (t5 = s(t5)); )
          ;
        return t5;
      }(t4, e3);
      if (i3) {
        var a2 = Object.getOwnPropertyDescriptor(i3, e3);
        return a2.get ? a2.get.call(n3) : a2.value;
      }
    })(t3, e2, n2 || t3);
  }
  function h(t3, e2) {
    return function(t4) {
      if (Array.isArray(t4))
        return t4;
    }(t3) || function(t4, e3) {
      if ("undefined" == typeof Symbol || !(Symbol.iterator in Object(t4)))
        return;
      var n2 = [], i3 = true, a2 = false, s2 = void 0;
      try {
        for (var r2, o2 = t4[Symbol.iterator](); !(i3 = (r2 = o2.next()).done) && (n2.push(r2.value), !e3 || n2.length !== e3); i3 = true)
          ;
      } catch (t5) {
        a2 = true, s2 = t5;
      } finally {
        try {
          i3 || null == o2.return || o2.return();
        } finally {
          if (a2)
            throw s2;
        }
      }
      return n2;
    }(t3, e2) || d2(t3, e2) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function u(t3) {
    return function(t4) {
      if (Array.isArray(t4))
        return p(t4);
    }(t3) || function(t4) {
      if ("undefined" != typeof Symbol && Symbol.iterator in Object(t4))
        return Array.from(t4);
    }(t3) || d2(t3) || function() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function d2(t3, e2) {
    if (t3) {
      if ("string" == typeof t3)
        return p(t3, e2);
      var n2 = Object.prototype.toString.call(t3).slice(8, -1);
      return "Object" === n2 && t3.constructor && (n2 = t3.constructor.name), "Map" === n2 || "Set" === n2 ? Array.from(t3) : "Arguments" === n2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? p(t3, e2) : void 0;
    }
  }
  function p(t3, e2) {
    (null == e2 || e2 > t3.length) && (e2 = t3.length);
    for (var n2 = 0, i3 = new Array(e2); n2 < e2; n2++)
      i3[n2] = t3[n2];
    return i3;
  }
  function f2(t3, e2) {
    return "string" == typeof t3 ? (e2 || document).querySelector(t3) : t3 || null;
  }
  function v(t3) {
    var e2 = t3.getBoundingClientRect();
    return { top: e2.top + (document.documentElement.scrollTop || document.body.scrollTop), left: e2.left + (document.documentElement.scrollLeft || document.body.scrollLeft) };
  }
  function g(t3) {
    return null === t3.offsetParent;
  }
  function m2(t3) {
    var e2 = t3.getBoundingClientRect();
    return e2.top >= 0 && e2.left >= 0 && e2.bottom <= (window.innerHeight || document.documentElement.clientHeight) && e2.right <= (window.innerWidth || document.documentElement.clientWidth);
  }
  !function(t3, e2) {
    void 0 === e2 && (e2 = {});
    var n2 = e2.insertAt;
    if (t3 && "undefined" != typeof document) {
      var i3 = document.head || document.getElementsByTagName("head")[0], a2 = document.createElement("style");
      a2.type = "text/css", "top" === n2 && i3.firstChild ? i3.insertBefore(a2, i3.firstChild) : i3.appendChild(a2), a2.styleSheet ? a2.styleSheet.cssText = t3 : a2.appendChild(document.createTextNode(t3));
    }
  }(':root {\n  --charts-label-color: #313b44;\n  --charts-axis-line-color: #f4f5f6;\n  --charts-tooltip-title: var(--charts-label-color);\n  --charts-tooltip-label: var(--charts-label-color);\n  --charts-tooltip-value: #192734;\n  --charts-tooltip-bg: #ffffff;\n  --charts-stroke-width: 2px;\n  --charts-dataset-circle-stroke: #ffffff;\n  --charts-dataset-circle-stroke-width: var(--charts-stroke-width);\n  --charts-legend-label: var(--charts-label-color);\n  --charts-legend-value: var(--charts-label-color); }\n\n.chart-container {\n  position: relative;\n  /* for absolutely positioned tooltip */\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif; }\n  .chart-container .axis,\n  .chart-container .chart-label {\n    fill: var(--charts-label-color); }\n    .chart-container .axis line,\n    .chart-container .chart-label line {\n      stroke: var(--charts-axis-line-color); }\n  .chart-container .dataset-units circle {\n    stroke: var(--charts-dataset-circle-stroke);\n    stroke-width: var(--charts-dataset-circle-stroke-width); }\n  .chart-container .dataset-units path {\n    fill: none;\n    stroke-opacity: 1;\n    stroke-width: var(--charts-stroke-width); }\n  .chart-container .dataset-path {\n    stroke-width: var(--charts-stroke-width); }\n  .chart-container .path-group path {\n    fill: none;\n    stroke-opacity: 1;\n    stroke-width: var(--charts-stroke-width); }\n  .chart-container line.dashed {\n    stroke-dasharray: 5, 3; }\n  .chart-container .axis-line .specific-value {\n    text-anchor: start; }\n  .chart-container .axis-line .y-line {\n    text-anchor: end; }\n  .chart-container .axis-line .x-line {\n    text-anchor: middle; }\n  .chart-container .legend-dataset-label {\n    fill: var(--charts-legend-label);\n    font-weight: 600; }\n  .chart-container .legend-dataset-value {\n    fill: var(--charts-legend-value); }\n\n.graph-svg-tip {\n  position: absolute;\n  z-index: 99999;\n  padding: 10px;\n  font-size: 12px;\n  text-align: center;\n  background: var(--charts-tooltip-bg);\n  box-shadow: 0px 1px 4px rgba(17, 43, 66, 0.1), 0px 2px 6px rgba(17, 43, 66, 0.08), 0px 40px 30px -30px rgba(17, 43, 66, 0.1);\n  border-radius: 6px; }\n  .graph-svg-tip ul {\n    padding-left: 0;\n    display: flex; }\n  .graph-svg-tip ol {\n    padding-left: 0;\n    display: flex; }\n  .graph-svg-tip ul.data-point-list li {\n    min-width: 90px;\n    font-weight: 600; }\n  .graph-svg-tip .svg-pointer {\n    position: absolute;\n    height: 12px;\n    width: 12px;\n    border-radius: 2px;\n    background: var(--charts-tooltip-bg);\n    transform: rotate(45deg);\n    margin-top: -7px;\n    margin-left: -6px; }\n  .graph-svg-tip.comparison {\n    text-align: left;\n    padding: 0px;\n    pointer-events: none; }\n    .graph-svg-tip.comparison .title {\n      display: block;\n      padding: 16px;\n      margin: 0;\n      color: var(--charts-tooltip-title);\n      font-weight: 600;\n      line-height: 1;\n      pointer-events: none;\n      text-transform: uppercase; }\n      .graph-svg-tip.comparison .title strong {\n        color: var(--charts-tooltip-value); }\n    .graph-svg-tip.comparison ul {\n      margin: 0;\n      white-space: nowrap;\n      list-style: none; }\n      .graph-svg-tip.comparison ul.tooltip-grid {\n        display: grid;\n        grid-template-columns: repeat(4, minmax(0, 1fr));\n        gap: 5px; }\n    .graph-svg-tip.comparison li {\n      display: inline-block;\n      display: flex;\n      flex-direction: row;\n      font-weight: 600;\n      line-height: 1;\n      padding: 5px 15px 15px 15px; }\n      .graph-svg-tip.comparison li .tooltip-legend {\n        height: 12px;\n        width: 12px;\n        margin-right: 8px;\n        border-radius: 2px; }\n      .graph-svg-tip.comparison li .tooltip-label {\n        margin-top: 4px;\n        font-size: 11px;\n        line-height: 1.25;\n        max-width: 150px;\n        white-space: normal;\n        color: var(--charts-tooltip-label); }\n      .graph-svg-tip.comparison li .tooltip-value {\n        color: var(--charts-tooltip-value); }\n'), f2.create = function(e2, n2) {
    var i3 = document.createElement(e2);
    for (var a2 in n2) {
      var s2 = n2[a2];
      if ("inside" === a2)
        f2(s2).appendChild(i3);
      else if ("around" === a2) {
        var r2 = f2(s2);
        r2.parentNode.insertBefore(i3, r2), i3.appendChild(r2);
      } else
        "styles" === a2 ? "object" === t(s2) && Object.keys(s2).map(function(t3) {
          i3.style[t3] = s2[t3];
        }) : a2 in i3 ? i3[a2] = s2 : i3.setAttribute(a2, s2);
    }
    return i3;
  };
  var y = { margins: { top: 10, bottom: 10, left: 20, right: 20 }, paddings: { top: 20, bottom: 40, left: 30, right: 10 }, baseHeight: 240, titleHeight: 20, legendHeight: 30, titleFontSize: 12 };
  function b(t3) {
    return t3.titleHeight + t3.margins.top + t3.paddings.top;
  }
  function x(t3) {
    return t3.margins.left + t3.paddings.left;
  }
  function k(t3) {
    return t3.margins.top + t3.margins.bottom + t3.paddings.top + t3.paddings.bottom + t3.titleHeight + t3.legendHeight;
  }
  function w(t3) {
    return t3.margins.left + t3.margins.right + t3.paddings.left + t3.paddings.right;
  }
  var A = ["pink", "blue", "green", "grey", "red", "yellow", "purple", "teal", "cyan", "orange"];
  var D2 = { bar: A, line: A, pie: A, percentage: A, heatmap: ["#ebedf0", "#c6e48b", "#7bc96f", "#239a3b", "#196127"], donut: A };
  var L = Math.PI / 180;
  var M = function() {
    function t3(n2) {
      var i3 = n2.parent, a2 = void 0 === i3 ? null : i3, s2 = n2.colors, r2 = void 0 === s2 ? [] : s2;
      e(this, t3), this.parent = a2, this.colors = r2, this.titleName = "", this.titleValue = "", this.listValues = [], this.titleValueFirst = 0, this.x = 0, this.y = 0, this.top = 0, this.left = 0, this.setup();
    }
    return i2(t3, [{ key: "setup", value: function() {
      this.makeTooltip();
    } }, { key: "refresh", value: function() {
      this.fill(), this.calcPosition();
    } }, { key: "makeTooltip", value: function() {
      var t4 = this;
      this.container = f2.create("div", { inside: this.parent, className: "graph-svg-tip comparison", innerHTML: '<span class="title"></span>\n				<ul class="data-point-list"></ul>\n				<div class="svg-pointer"></div>' }), this.hideTip(), this.title = this.container.querySelector(".title"), this.list = this.container.querySelector(".data-point-list"), this.dataPointList = this.container.querySelector(".data-point-list"), this.parent.addEventListener("mouseleave", function() {
        t4.hideTip();
      });
    } }, { key: "fill", value: function() {
      var t4, e2 = this;
      this.index && this.container.setAttribute("data-point-index", this.index), t4 = this.titleValueFirst ? "<strong>".concat(this.titleValue, "</strong>").concat(this.titleName) : "".concat(this.titleName, "<strong>").concat(this.titleValue, "</strong>"), this.listValues.length > 4 ? this.list.classList.add("tooltip-grid") : this.list.classList.remove("tooltip-grid"), this.title.innerHTML = t4, this.dataPointList.innerHTML = "", this.listValues.map(function(t5, n2) {
        var i3 = e2.colors[n2] || "black", a2 = 0 === t5.formatted || t5.formatted ? t5.formatted : t5.value, s2 = f2.create("li", { innerHTML: '<div class="tooltip-legend" style="background: '.concat(i3, ';"></div>\n					<div>\n						<div class="tooltip-value">').concat(0 === a2 || a2 ? a2 : "", '</div>\n						<div class="tooltip-label">').concat(t5.title ? t5.title : "", "</div>\n					</div>") });
        e2.dataPointList.appendChild(s2);
      });
    } }, { key: "calcPosition", value: function() {
      var t4 = this.container.offsetWidth;
      this.top = this.y - this.container.offsetHeight - 7.48, this.left = this.x - t4 / 2;
      var e2 = this.parent.offsetWidth - t4, n2 = this.container.querySelector(".svg-pointer");
      if (this.left < 0)
        n2.style.left = "calc(50% - ".concat(-1 * this.left, "px)"), this.left = 0;
      else if (this.left > e2) {
        var i3 = this.left - e2, a2 = "calc(50% + ".concat(i3, "px)");
        n2.style.left = a2, this.left = e2;
      } else
        n2.style.left = "50%";
    } }, { key: "setValues", value: function(t4, e2) {
      var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [], a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : -1;
      this.titleName = n2.name, this.titleValue = n2.value, this.listValues = i3, this.x = t4, this.y = e2, this.titleValueFirst = n2.valueFirst || 0, this.index = a2, this.refresh();
    } }, { key: "hideTip", value: function() {
      this.container.style.top = "0px", this.container.style.left = "0px", this.container.style.opacity = "0";
    } }, { key: "showTip", value: function() {
      this.container.style.top = this.top + "px", this.container.style.left = this.left + "px", this.container.style.opacity = "1";
    } }]), t3;
  }();
  function T2(t3) {
    return parseFloat(t3.toFixed(2));
  }
  function P2(t3, e2, n2) {
    var i3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
    n2 || (n2 = i3 ? t3[0] : t3[t3.length - 1]);
    var a2 = new Array(Math.abs(e2)).fill(n2);
    return t3 = i3 ? a2.concat(t3) : t3.concat(a2);
  }
  function C(t3, e2) {
    return (t3 + "").length * e2;
  }
  function N(t3, e2) {
    return { x: Math.sin(t3 * L) * e2, y: Math.cos(t3 * L) * e2 };
  }
  function O(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
    return !Number.isNaN(t3) && (void 0 !== t3 && (!!Number.isFinite(t3) && !(e2 && t3 < 0)));
  }
  function E(t3) {
    return Number(Math.round(t3 + "e4") + "e-4");
  }
  function S2(e2) {
    var n2, i3, a2;
    if (e2 instanceof Date)
      return new Date(e2.getTime());
    if ("object" !== t(e2) || null === e2)
      return e2;
    for (a2 in n2 = Array.isArray(e2) ? [] : {}, e2)
      i3 = e2[a2], n2[a2] = S2(i3);
    return n2;
  }
  function F2(t3, e2) {
    var n2, i3;
    return t3 <= e2 ? (n2 = e2 - t3, i3 = t3) : (n2 = t3 - e2, i3 = e2), [n2, i3];
  }
  function z2(t3, e2) {
    var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e2.length - t3.length;
    return n2 > 0 ? t3 = P2(t3, n2) : e2 = P2(e2, n2), [t3, e2];
  }
  function H(t3, e2) {
    if (t3)
      return t3.length > e2 ? t3.slice(0, e2 - 3) + "..." : t3;
  }
  function R(t3) {
    var e2;
    if ("number" == typeof t3)
      e2 = t3;
    else if ("string" == typeof t3 && (e2 = Number(t3), Number.isNaN(e2)))
      return t3;
    var n2 = Math.floor(Math.log10(Math.abs(e2)));
    if (n2 <= 2)
      return e2;
    var i3 = Math.floor(n2 / 3), a2 = Math.pow(10, n2 - 3 * i3) * +(e2 / Math.pow(10, n2)).toFixed(1);
    return Math.round(100 * a2) / 100 + ["", "K", "M", "B", "T"][i3];
  }
  function W(t3, e2) {
    for (var n2 = [], i3 = (Math.min(t3.length, e2.length), 0); i3 < t3.length; i3++)
      n2.push([t3[i3], e2[i3]]);
    var a2 = function(t4, e3, n3, i4) {
      var a3, s2, r2, o2, l2 = (a3 = e3 || t4, r2 = (s2 = n3 || t4)[0] - a3[0], o2 = s2[1] - a3[1], { length: Math.sqrt(Math.pow(r2, 2) + Math.pow(o2, 2)), angle: Math.atan2(o2, r2) }), c2 = l2.angle + (i4 ? Math.PI : 0), h2 = 0.2 * l2.length;
      return [t4[0] + Math.cos(c2) * h2, t4[1] + Math.sin(c2) * h2];
    };
    return function(t4, e3) {
      return t4.reduce(function(t5, n3, i4, a3) {
        return 0 === i4 ? "".concat(n3[0], ",").concat(n3[1]) : "".concat(t5, " ").concat(e3(n3, i4, a3));
      }, "");
    }(n2, function(t4, e3, n3) {
      var i4 = a2(n3[e3 - 1], n3[e3 - 2], t4), s2 = a2(t4, n3[e3 - 1], n3[e3 + 1], true);
      return "C ".concat(i4[0], ",").concat(i4[1], " ").concat(s2[0], ",").concat(s2[1], " ").concat(t4[0], ",").concat(t4[1]);
    });
  }
  function B2(t3, e2) {
    return "string" == typeof t3 ? (e2 || document).querySelector(t3) : t3 || null;
  }
  function j2(e2, n2) {
    var i3 = document.createElementNS("http://www.w3.org/2000/svg", e2);
    for (var a2 in n2) {
      var s2 = n2[a2];
      if ("inside" === a2)
        B2(s2).appendChild(i3);
      else if ("around" === a2) {
        var r2 = B2(s2);
        r2.parentNode.insertBefore(i3, r2), i3.appendChild(r2);
      } else
        "styles" === a2 ? "object" === t(s2) && Object.keys(s2).map(function(t3) {
          i3.style[t3] = s2[t3];
        }) : ("className" === a2 && (a2 = "class"), "innerHTML" === a2 ? i3.textContent = s2 : i3.setAttribute(a2, s2));
    }
    return i3;
  }
  function I(t3, e2) {
    return j2("linearGradient", { inside: t3, id: e2, x1: 0, x2: 0, y1: 0, y2: 1 });
  }
  function Y2(t3, e2, n2, i3) {
    return j2("stop", { inside: t3, style: "stop-color: ".concat(n2), offset: e2, "stop-opacity": i3 });
  }
  function V2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, i3 = { className: t3, transform: e2 };
    return n2 && (i3.inside = n2), j2("g", i3);
  }
  function U2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "none", i3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none", a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2;
    return j2("path", { className: e2, d: t3, styles: { stroke: n2, fill: i3, "stroke-width": a2 } });
  }
  function q2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = n2.x + t3.x, o2 = n2.y + t3.y, l2 = n2.x + e2.x, c2 = n2.y + e2.y;
    return "M".concat(n2.x, " ").concat(n2.y, "\n		L").concat(r2, " ").concat(o2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(c2, " z");
  }
  function G2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = n2.x + t3.x, o2 = n2.y + t3.y, l2 = n2.x + e2.x, c2 = 2 * n2.y, h2 = n2.y + e2.y;
    return "M".concat(n2.x, " ").concat(n2.y, "\n		L").concat(r2, " ").concat(o2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(c2, " z\n		L").concat(r2, " ").concat(c2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(h2, " z");
  }
  function _(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = n2.x + t3.x, o2 = n2.y + t3.y, l2 = n2.x + e2.x, c2 = n2.y + e2.y;
    return "M".concat(r2, " ").concat(o2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(c2);
  }
  function X2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1, s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = n2.x + t3.x, o2 = n2.y + t3.y, l2 = n2.x + e2.x, c2 = 2 * i3 + o2, h2 = n2.y + t3.y;
    return "M".concat(r2, " ").concat(o2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(c2, "\n		M").concat(r2, " ").concat(c2, "\n		A ").concat(i3, " ").concat(i3, " 0 ").concat(s2, " ").concat(a2 ? 1 : 0, "\n		").concat(l2, " ").concat(h2);
  }
  function J2(t3, e2) {
    var n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], i3 = "path-fill-gradient-" + e2 + "-" + (n2 ? "lighter" : "default"), a2 = I(t3, i3), s2 = [1, 0.6, 0.2];
    return n2 && (s2 = [0.15, 0.05, 0]), Y2(a2, "0%", e2, s2[0]), Y2(a2, "50%", e2, s2[1]), Y2(a2, "100%", e2, s2[2]), i3;
  }
  function K2(t3, e2, n2) {
    var i3 = n2 / 2, a2 = e2 - i3;
    return "M".concat(t3, ",0 h").concat(a2, " q").concat(i3, ",0 ").concat(i3, ",").concat(i3, " q0,").concat(i3, " -").concat(i3, ",").concat(i3, " h-").concat(a2, " v").concat(n2, "z");
  }
  function $3(t3, e2, n2) {
    var i3 = n2 / 2, a2 = e2 - i3;
    return "M".concat(t3 + i3, ",0 h").concat(a2, " v").concat(n2, " h-").concat(a2, " q-").concat(i3, ", 0 -").concat(i3, ",-").concat(i3, " q0,-").concat(i3, " ").concat(i3, ",-").concat(i3, "z");
  }
  function Q(t3, e2, n2, i3, a2) {
    var s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "none", r2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, o2 = { className: t3, x: e2, y: n2, width: i3, height: i3, rx: a2, fill: s2 };
    return Object.keys(r2).map(function(t4) {
      o2[t4] = r2[t4];
    }), j2("rect", o2);
  }
  function Z2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "none", s2 = arguments.length > 5 ? arguments[5] : void 0, r2 = arguments.length > 6 ? arguments[6] : void 0, o2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l2 = arguments.length > 8 && void 0 !== arguments[8] && arguments[8];
    o2 || (o2 = 10);
    var c2 = { className: "legend-dot", x: 0, y: 4 - n2, height: n2, width: n2, rx: i3, fill: a2 }, h2 = j2("text", { className: "legend-dataset-label", x: n2, y: 0, dx: o2 + "px", dy: o2 / 3 + "px", "font-size": 1.6 * o2 + "px", "text-anchor": "start", innerHTML: s2 = l2 ? H(s2, 18) : s2 }), u2 = null;
    r2 && (u2 = j2("text", { className: "legend-dataset-value", x: n2, y: 20, dx: "10px", dy: 10 / 3 + "px", "font-size": "12px", "text-anchor": "start", innerHTML: r2 }));
    var d3 = j2("g", { transform: "translate(".concat(t3, ", ").concat(e2, ")") });
    return d3.appendChild(j2("rect", c2)), d3.appendChild(h2), r2 && u2 && d3.appendChild(u2), d3;
  }
  function tt2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, s2 = a2.fontSize || 10, r2 = void 0 !== a2.dy ? a2.dy : s2 / 2, o2 = a2.fill || "var(--charts-label-color)", l2 = a2.textAnchor || "start";
    return j2("text", { className: t3, x: e2, y: n2, dy: r2 + "px", "font-size": s2 + "px", fill: o2, "text-anchor": l2, innerHTML: i3 });
  }
  function et2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, s2 = j2("line", { className: "line-vertical " + a2.className, x1: 0, x2: 0, y1: n2, y2: i3, styles: { stroke: a2.stroke } }), r2 = j2("text", { x: 0, y: n2 > i3 ? n2 + 4 : n2 - 4 - 10, dy: "10px", "font-size": "10px", "text-anchor": "middle", innerHTML: e2 + "" }), o2 = j2("g", { transform: "translate(".concat(t3, ", 0)") });
    return o2.appendChild(s2), o2.appendChild(r2), o2;
  }
  function nt2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {};
    a2.lineType || (a2.lineType = ""), a2.shortenNumbers && (e2 = a2.numberFormatter ? a2.numberFormatter(e2) : R(e2));
    var s2 = "line-horizontal " + a2.className + ("dashed" === a2.lineType ? "dashed" : ""), r2 = j2("line", { className: s2, x1: n2, x2: i3, y1: 0, y2: 0, styles: { stroke: a2.stroke } }), o2 = j2("text", { x: n2 < i3 ? n2 - 4 : n2 + 4, y: 0, dy: "3px", "font-size": "10px", "text-anchor": n2 < i3 ? "end" : "start", innerHTML: e2 + "" }), l2 = j2("g", { transform: "translate(0, ".concat(t3, ")"), "stroke-opacity": 1 });
    return 0 !== o2 && "0" !== o2 || (l2.style.stroke = "rgba(27, 31, 35, 0.6)"), l2.appendChild(r2), l2.appendChild(o2), l2;
  }
  function it2(t3, e2, n2, i3) {
    var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "", s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6], o2 = j2("circle", { style: "fill: ".concat(i3, "; ").concat(r2 ? "stroke: ".concat(i3) : ""), "data-point-index": s2, cx: t3, cy: e2, r: n2 });
    if ((a2 += "") || a2.length) {
      o2.setAttribute("cy", 0), o2.setAttribute("cx", 0);
      var l2 = j2("text", { className: "data-point-value", x: 0, y: 0, dy: -5 - n2 + "px", "font-size": "10px", "text-anchor": "middle", innerHTML: a2 }), c2 = j2("g", { "data-point-index": s2, transform: "translate(".concat(t3, ", ").concat(e2, ")") });
      return c2.appendChild(o2), c2.appendChild(l2), c2;
    }
    return o2;
  }
  var at2 = { bar: function(t3) {
    var e2;
    "rect" !== t3.nodeName && (e2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var n2 = t3.cloneNode();
    return n2.style.fill = "#000000", n2.style.opacity = "0.4", e2 && n2.setAttribute("transform", e2), n2;
  }, dot: function(t3) {
    var e2;
    "circle" !== t3.nodeName && (e2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var n2 = t3.cloneNode(), i3 = t3.getAttribute("r"), a2 = t3.getAttribute("fill");
    return n2.setAttribute("r", parseInt(i3) + 4), n2.setAttribute("fill", a2), n2.style.opacity = "0.6", e2 && n2.setAttribute("transform", e2), n2;
  }, heat_square: function(t3) {
    var e2;
    "circle" !== t3.nodeName && (e2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var n2 = t3.cloneNode(), i3 = t3.getAttribute("r"), a2 = t3.getAttribute("fill");
    return n2.setAttribute("r", parseInt(i3) + 4), n2.setAttribute("fill", a2), n2.style.opacity = "0.6", e2 && n2.setAttribute("transform", e2), n2;
  } };
  var st2 = { bar: function(t3, e2) {
    var n2;
    "rect" !== t3.nodeName && (n2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var i3 = ["x", "y", "width", "height"];
    Object.values(t3.attributes).filter(function(t4) {
      return i3.includes(t4.name) && t4.specified;
    }).map(function(t4) {
      e2.setAttribute(t4.name, t4.nodeValue);
    }), n2 && e2.setAttribute("transform", n2);
  }, dot: function(t3, e2) {
    var n2;
    "circle" !== t3.nodeName && (n2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var i3 = ["cx", "cy"];
    Object.values(t3.attributes).filter(function(t4) {
      return i3.includes(t4.name) && t4.specified;
    }).map(function(t4) {
      e2.setAttribute(t4.name, t4.nodeValue);
    }), n2 && e2.setAttribute("transform", n2);
  }, heat_square: function(t3, e2) {
    var n2;
    "circle" !== t3.nodeName && (n2 = t3.getAttribute("transform"), t3 = t3.childNodes[0]);
    var i3 = ["cx", "cy"];
    Object.values(t3.attributes).filter(function(t4) {
      return i3.includes(t4.name) && t4.specified;
    }).map(function(t4) {
      e2.setAttribute(t4.name, t4.nodeValue);
    }), n2 && e2.setAttribute("transform", n2);
  } };
  var rt2 = { pink: "#F683AE", blue: "#318AD8", green: "#48BB74", grey: "#A6B1B9", red: "#F56B6B", yellow: "#FACF7A", purple: "#44427B", teal: "#5FD8C4", cyan: "#15CCEF", orange: "#F8814F", "light-pink": "#FED7E5", "light-blue": "#BFDDF7", "light-green": "#48BB74", "light-grey": "#F4F5F6", "light-red": "#F6DFDF", "light-yellow": "#FEE9BF", "light-purple": "#E8E8F7", "light-teal": "#D3FDF6", "light-cyan": "#DDF8FD", "light-orange": "#FECDB8" };
  function ot2(t3, e2, n2, i3) {
    var a2 = "string" == typeof e2 ? e2 : e2.join(", ");
    return [t3, { transform: n2.join(", ") }, i3, "easein", "translate", { transform: a2 }];
  }
  function lt2(t3, e2, n2) {
    return ot2(t3, [0, n2], [0, e2], 350);
  }
  function ct2(t3, e2) {
    return [t3, { d: e2 }, 350, "easein"];
  }
  var ht2 = { ease: "0.25 0.1 0.25 1", linear: "0 0 1 1", easein: "0.1 0.8 0.2 1", easeout: "0 0 0.58 1", easeinout: "0.42 0 0.58 1" };
  function ut2(t3, e2, n2) {
    var i3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "linear", a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {}, r2 = t3.cloneNode(true), o2 = t3.cloneNode(true);
    for (var l2 in e2) {
      var c2 = void 0;
      c2 = "transform" === l2 ? document.createElementNS("http://www.w3.org/2000/svg", "animateTransform") : document.createElementNS("http://www.w3.org/2000/svg", "animate");
      var h2 = s2[l2] || t3.getAttribute(l2), u2 = e2[l2], d3 = { attributeName: l2, from: h2, to: u2, begin: "0s", dur: n2 / 1e3 + "s", values: h2 + ";" + u2, keySplines: ht2[i3], keyTimes: "0;1", calcMode: "spline", fill: "freeze" };
      for (var p2 in a2 && (d3.type = a2), d3)
        c2.setAttribute(p2, d3[p2]);
      r2.appendChild(c2), a2 ? o2.setAttribute(l2, "translate(".concat(u2, ")")) : o2.setAttribute(l2, u2);
    }
    return [r2, o2];
  }
  function dt2(t3, e2) {
    t3.style.transform = e2, t3.style.webkitTransform = e2, t3.style.msTransform = e2, t3.style.mozTransform = e2, t3.style.oTransform = e2;
  }
  function pt2(t3, e2) {
    var n2 = [], i3 = [];
    e2.map(function(t4) {
      var e3, a3, s2 = t4[0], r2 = s2.parentNode;
      t4[0] = s2;
      var o2 = h(ut2.apply(void 0, u(t4)), 2);
      e3 = o2[0], a3 = o2[1], n2.push(a3), i3.push([e3, r2]), r2.replaceChild(e3, s2);
    });
    var a2 = t3.cloneNode(true);
    return i3.map(function(t4, i4) {
      t4[1].replaceChild(n2[i4], t4[0]), e2[i4][0] = n2[i4];
    }), a2;
  }
  function ft2(t3, e2, n2) {
    if (0 !== n2.length) {
      var i3 = pt2(e2, n2);
      e2.parentNode == t3 && (t3.removeChild(e2), t3.appendChild(i3)), setTimeout(function() {
        i3.parentNode == t3 && (t3.removeChild(i3), t3.appendChild(e2));
      }, 250);
    }
  }
  var vt2 = function() {
    function t3(n2, i3) {
      if (e(this, t3), i3 = S2(i3), this.parent = "string" == typeof n2 ? document.querySelector(n2) : n2, !(this.parent instanceof HTMLElement))
        throw new Error("No `parent` element to render on was provided.");
      this.rawChartArgs = i3, this.title = i3.title || "", this.type = i3.type || "", this.realData = this.prepareData(i3.data), this.data = this.prepareFirstData(this.realData), this.colors = this.validateColors(i3.colors, this.type), this.config = { showTooltip: 1, showLegend: void 0 !== i3.showLegend ? i3.showLegend : 1, isNavigable: i3.isNavigable || 0, animate: void 0 !== i3.animate ? i3.animate : 1, disableEntryAnimation: i3.disableEntryAnimation || 0, truncateLegends: i3.truncateLegends || 1 }, this.measures = JSON.parse(JSON.stringify(y));
      var a2 = this.measures;
      this.setMeasures(i3), this.title.length || (a2.titleHeight = 0), this.config.showLegend || (a2.legendHeight = 0), this.argHeight = i3.height || a2.baseHeight, this.state = {}, this.options = {}, this.initTimeout = 700, this.config.isNavigable && (this.overlays = []), this.configure(i3);
    }
    return i2(t3, [{ key: "prepareData", value: function(t4) {
      return t4;
    } }, { key: "prepareFirstData", value: function(t4) {
      return t4;
    } }, { key: "validateColors", value: function(t4, e2) {
      var n2 = [];
      return (t4 = (t4 || []).concat(D2[e2])).forEach(function(t5) {
        var e3 = function(t6) {
          return /rgb[a]{0,1}\([\d, ]+\)/gim.test(t6) ? /\D+(\d*)\D+(\d*)\D+(\d*)/gim.exec(t6).map(function(t7, e4) {
            return 0 !== e4 ? Number(t7).toString(16) : "#";
          }).reduce(function(t7, e4) {
            return "".concat(t7).concat(e4);
          }) : rt2[t6] || t6;
        }(t5);
        !function(t6) {
          return /(^\s*)(#)((?:[A-Fa-f0-9]{3}){1,2})$/i.test(t6) || /(^\s*)(rgb|hsl)(a?)[(]\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*,\s*([\d.]+\s*%?)\s*(?:,\s*([\d.]+)\s*)?[)]$/i.test(t6);
        }(e3) ? console.warn('"' + t5 + '" is not a valid color.') : n2.push(e3);
      }), n2;
    } }, { key: "setMeasures", value: function() {
    } }, { key: "configure", value: function() {
      var t4 = this, e2 = this.argHeight;
      this.baseHeight = e2, this.height = e2 - k(this.measures), this.boundDrawFn = function() {
        return t4.draw(true);
      }, ResizeObserver && (this.resizeObserver = new ResizeObserver(this.boundDrawFn), this.resizeObserver.observe(this.parent)), window.addEventListener("resize", this.boundDrawFn), window.addEventListener("orientationchange", this.boundDrawFn);
    } }, { key: "destroy", value: function() {
      this.resizeObserver && this.resizeObserver.disconnect(), window.removeEventListener("resize", this.boundDrawFn), window.removeEventListener("orientationchange", this.boundDrawFn);
    } }, { key: "setup", value: function() {
      this.makeContainer(), this.updateWidth(), this.makeTooltip(), this.draw(false, true);
    } }, { key: "makeContainer", value: function() {
      this.parent.innerHTML = "";
      var t4 = { inside: this.parent, className: "chart-container" };
      this.independentWidth && (t4.styles = { width: this.independentWidth + "px" }), this.container = f2.create("div", t4);
    } }, { key: "makeTooltip", value: function() {
      this.tip = new M({ parent: this.container, colors: this.colors }), this.bindTooltip();
    } }, { key: "bindTooltip", value: function() {
    } }, { key: "draw", value: function() {
      var t4 = this, e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], n2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      e2 && g(this.parent) || (this.updateWidth(), this.calc(e2), this.makeChartArea(), this.setupComponents(), this.components.forEach(function(e3) {
        return e3.setup(t4.drawArea);
      }), this.render(this.components, false), n2 && (this.data = this.realData, setTimeout(function() {
        t4.update(t4.data, true);
      }, this.initTimeout)), this.config.showLegend && this.renderLegend(), this.setupNavigation(n2));
    } }, { key: "calc", value: function() {
    } }, { key: "updateWidth", value: function() {
      var t4, e2, n2;
      this.baseWidth = (t4 = this.parent, e2 = window.getComputedStyle(t4), n2 = parseFloat(e2.paddingLeft) + parseFloat(e2.paddingRight), t4.clientWidth - n2), this.width = this.baseWidth - w(this.measures);
    } }, { key: "makeChartArea", value: function() {
      this.svg && this.container.removeChild(this.svg);
      var t4, e2, n2, i3, a2 = this.measures;
      this.svg = (t4 = this.container, e2 = "frappe-chart chart", n2 = this.baseWidth, i3 = this.baseHeight, j2("svg", { className: e2, inside: t4, width: n2, height: i3 })), this.svgDefs = j2("defs", { inside: this.svg }), this.title.length && (this.titleEL = tt2("title", a2.margins.left, a2.margins.top, this.title, { fontSize: a2.titleFontSize, fill: "#666666", dy: a2.titleFontSize }));
      var s2 = b(a2);
      this.drawArea = V2(this.type + "-chart chart-draw-area", "translate(".concat(x(a2), ", ").concat(s2, ")")), this.config.showLegend && (s2 += this.height + a2.paddings.bottom, this.legendArea = V2("chart-legend", "translate(".concat(x(a2), ", ").concat(s2, ")"))), this.title.length && this.svg.appendChild(this.titleEL), this.svg.appendChild(this.drawArea), this.config.showLegend && this.svg.appendChild(this.legendArea), this.updateTipOffset(x(a2), b(a2));
    } }, { key: "updateTipOffset", value: function(t4, e2) {
      this.tip.offset = { x: t4, y: e2 };
    } }, { key: "setupComponents", value: function() {
      this.components = /* @__PURE__ */ new Map();
    } }, { key: "update", value: function(t4) {
      var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      t4 || console.error("No data to update."), e2 || (t4 = S2(t4));
      var n2 = e2 ? !this.config.disableEntryAnimation : this.config.animate;
      this.data = this.prepareData(t4), this.calc(), this.render(this.components, n2);
    } }, { key: "render", value: function() {
      var t4 = this, e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.components, n2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      this.config.isNavigable && this.overlays.map(function(t5) {
        return t5.parentNode.removeChild(t5);
      });
      var i3 = [];
      e2.forEach(function(t5) {
        i3 = i3.concat(t5.update(n2));
      }), i3.length > 0 ? (ft2(this.container, this.svg, i3), setTimeout(function() {
        e2.forEach(function(t5) {
          return t5.make();
        }), t4.updateNav();
      }, 400)) : (e2.forEach(function(t5) {
        return t5.make();
      }), this.updateNav());
    } }, { key: "updateNav", value: function() {
      this.config.isNavigable && (this.makeOverlay(), this.bindUnits());
    } }, { key: "renderLegend", value: function(t4) {
      var e2 = this;
      this.legendArea.textContent = "";
      var n2 = 0, i3 = 0;
      t4.map(function(t5, a2) {
        var s2 = Math.floor(e2.width / 150);
        n2 > s2 && (n2 = 0, i3 += e2.config.legendRowHeight);
        var r2 = 150 * n2, o2 = e2.makeLegend(t5, a2, r2, i3);
        e2.legendArea.appendChild(o2), n2++;
      });
    } }, { key: "makeLegend", value: function() {
    } }, { key: "setupNavigation", value: function() {
      var t4 = this, e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      this.config.isNavigable && e2 && (this.bindOverlay(), this.keyActions = { 13: this.onEnterKey.bind(this), 37: this.onLeftArrow.bind(this), 38: this.onUpArrow.bind(this), 39: this.onRightArrow.bind(this), 40: this.onDownArrow.bind(this) }, document.addEventListener("keydown", function(e3) {
        m2(t4.container) && (e3 = e3 || window.event, t4.keyActions[e3.keyCode] && t4.keyActions[e3.keyCode]());
      }));
    } }, { key: "makeOverlay", value: function() {
    } }, { key: "updateOverlay", value: function() {
    } }, { key: "bindOverlay", value: function() {
    } }, { key: "bindUnits", value: function() {
    } }, { key: "onLeftArrow", value: function() {
    } }, { key: "onRightArrow", value: function() {
    } }, { key: "onUpArrow", value: function() {
    } }, { key: "onDownArrow", value: function() {
    } }, { key: "onEnterKey", value: function() {
    } }, { key: "addDataPoint", value: function() {
    } }, { key: "removeDataPoint", value: function() {
    } }, { key: "getDataPoint", value: function() {
    } }, { key: "setCurrentDataPoint", value: function() {
    } }, { key: "updateDataset", value: function() {
    } }, { key: "export", value: function() {
      var t4 = function(t5) {
        var e2 = t5.cloneNode(true);
        e2.classList.add("chart-container"), e2.setAttribute("xmlns", "http://www.w3.org/2000/svg"), e2.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
        var n2 = f2.create("style", { innerHTML: ".chart-container{position:relative;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',sans-serif}.chart-container .axis,.chart-container .chart-label{fill:#555b51}.chart-container .axis line,.chart-container .chart-label line{stroke:#dadada}.chart-container .dataset-units circle{stroke:#fff;stroke-width:2}.chart-container .dataset-units path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container .dataset-path{stroke-width:2px}.chart-container .path-group path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container line.dashed{stroke-dasharray:5,3}.chart-container .axis-line .specific-value{text-anchor:start}.chart-container .axis-line .y-line{text-anchor:end}.chart-container .axis-line .x-line{text-anchor:middle}.chart-container .legend-dataset-text{fill:#6c7680;font-weight:600}.graph-svg-tip{position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.8);border-radius:3px}.graph-svg-tip ul{padding-left:0;display:flex}.graph-svg-tip ol{padding-left:0;display:flex}.graph-svg-tip ul.data-point-list li{min-width:90px;flex:1;font-weight:600}.graph-svg-tip strong{color:#dfe2e5;font-weight:600}.graph-svg-tip .svg-pointer{position:absolute;height:5px;margin:0 0 0 -5px;content:' ';border:5px solid transparent;}.graph-svg-tip.comparison{padding:0;text-align:left;pointer-events:none}.graph-svg-tip.comparison .title{display:block;padding:10px;margin:0;font-weight:600;line-height:1;pointer-events:none}.graph-svg-tip.comparison ul{margin:0;white-space:nowrap;list-style:none}.graph-svg-tip.comparison li{display:inline-block;padding:5px 10px}" });
        e2.insertBefore(n2, e2.firstChild);
        var i3 = f2.create("div");
        return i3.appendChild(e2), i3.innerHTML;
      }(this.svg);
      !function(t5, e2) {
        var n2 = document.createElement("a");
        n2.style = "display: none";
        var i3 = new Blob(e2, { type: "image/svg+xml; charset=utf-8" }), a2 = window.URL.createObjectURL(i3);
        n2.href = a2, n2.download = t5, document.body.appendChild(n2), n2.click(), setTimeout(function() {
          document.body.removeChild(n2), window.URL.revokeObjectURL(a2);
        }, 300);
      }(this.title || "Chart", [t4]);
    } }]), t3;
  }();
  var gt2 = function(t3) {
    a(r2, vt2);
    var n2 = l(r2);
    function r2(t4, i3) {
      return e(this, r2), n2.call(this, t4, i3);
    }
    return i2(r2, [{ key: "configure", value: function(t4) {
      c(s(r2.prototype), "configure", this).call(this, t4), this.config.formatTooltipY = (t4.tooltipOptions || {}).formatTooltipY, this.config.maxSlices = t4.maxSlices || 20, this.config.maxLegendPoints = t4.maxLegendPoints || 20, this.config.legendRowHeight = 60;
    } }, { key: "calc", value: function() {
      var t4 = this, e2 = this.state, n3 = this.config.maxSlices;
      e2.sliceTotals = [];
      var i3 = this.data.labels.map(function(e3, n4) {
        var i4 = 0;
        return t4.data.datasets.map(function(t5) {
          i4 += t5.values[n4];
        }), [i4, e3];
      }).filter(function(t5) {
        return t5[0] >= 0;
      }), a2 = i3;
      if (i3.length > n3) {
        i3.sort(function(t5, e3) {
          return e3[0] - t5[0];
        }), a2 = i3.slice(0, n3 - 1);
        var s2 = i3.slice(n3 - 1), r3 = 0;
        s2.map(function(t5) {
          r3 += t5[0];
        }), a2.push([r3, "Rest"]), this.colors[n3 - 1] = "grey";
      }
      e2.labels = [], a2.map(function(t5) {
        e2.sliceTotals.push(E(t5[0])), e2.labels.push(t5[1]);
      }), e2.grandTotal = e2.sliceTotals.reduce(function(t5, e3) {
        return t5 + e3;
      }, 0), this.center = { x: this.width / 2, y: this.height / 2 };
    } }, { key: "renderLegend", value: function() {
      var t4 = this.state;
      this.legendArea.textContent = "", this.legendTotals = t4.sliceTotals.slice(0, this.config.maxLegendPoints), c(s(r2.prototype), "renderLegend", this).call(this, this.legendTotals);
    } }, { key: "makeLegend", value: function(t4, e2, n3, i3) {
      var a2 = this.config.formatTooltipY ? this.config.formatTooltipY(t4) : t4;
      return Z2(n3, i3, 12, 3, this.colors[e2], this.state.labels[e2], a2, null, this.config.truncateLegends);
    } }]), r2;
  }();
  var mt2 = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  var yt2 = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  function bt2(t3) {
    var e2 = new Date(t3);
    return e2.setMinutes(e2.getMinutes() - e2.getTimezoneOffset()), e2;
  }
  function xt2(t3) {
    var e2 = t3.getDate(), n2 = t3.getMonth() + 1;
    return [t3.getFullYear(), (n2 > 9 ? "" : "0") + n2, (e2 > 9 ? "" : "0") + e2].join("-");
  }
  function kt2(t3) {
    return new Date(t3.getTime());
  }
  function wt2(t3, e2) {
    var n2 = Mt(t3);
    return Math.ceil(function(t4, e3) {
      return (bt2(e3) - bt2(t4)) / 864e5;
    }(n2, e2) / 7);
  }
  function At2(t3, e2) {
    return t3.getMonth() === e2.getMonth() && t3.getFullYear() === e2.getFullYear();
  }
  function Dt2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n2 = mt2[t3];
    return e2 ? n2.slice(0, 3) : n2;
  }
  function Lt2(t3, e2) {
    return new Date(e2, t3 + 1, 0);
  }
  function Mt(t3) {
    var e2 = kt2(t3), n2 = e2.getDay();
    return 0 !== n2 && Tt2(e2, -1 * n2), e2;
  }
  function Tt2(t3, e2) {
    t3.setDate(t3.getDate() + e2);
  }
  var Pt2 = function() {
    function t3(n2) {
      var i3 = n2.layerClass, a2 = void 0 === i3 ? "" : i3, s2 = n2.layerTransform, r2 = void 0 === s2 ? "" : s2, o2 = n2.constants, l2 = n2.getData, c2 = n2.makeElements, h2 = n2.animateElements;
      e(this, t3), this.layerTransform = r2, this.constants = o2, this.makeElements = c2, this.getData = l2, this.animateElements = h2, this.store = [], this.labels = [], this.layerClass = a2, this.layerClass = "function" == typeof this.layerClass ? this.layerClass() : this.layerClass, this.refresh();
    }
    return i2(t3, [{ key: "refresh", value: function(t4) {
      this.data = t4 || this.getData();
    } }, { key: "setup", value: function(t4) {
      this.layer = V2(this.layerClass, this.layerTransform, t4);
    } }, { key: "make", value: function() {
      this.render(this.data), this.oldData = this.data;
    } }, { key: "render", value: function(t4) {
      var e2 = this;
      this.store = this.makeElements(t4), this.layer.textContent = "", this.store.forEach(function(t5) {
        e2.layer.appendChild(t5);
      }), this.labels.forEach(function(t5) {
        e2.layer.appendChild(t5);
      });
    } }, { key: "update", value: function() {
      var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
      this.refresh();
      var e2 = [];
      return t4 && (e2 = this.animateElements(this.data) || []), e2;
    } }]), t3;
  }();
  var Ct2 = { donutSlices: { layerClass: "donut-slices", makeElements: function(t3) {
    return t3.sliceStrings.map(function(e2, n2) {
      var i3 = U2(e2, "donut-path", t3.colors[n2], "none", t3.strokeWidth);
      return i3.style.transition = "transform .3s;", i3;
    });
  }, animateElements: function(t3) {
    return this.store.map(function(e2, n2) {
      return ct2(e2, t3.sliceStrings[n2]);
    });
  } }, pieSlices: { layerClass: "pie-slices", makeElements: function(t3) {
    return t3.sliceStrings.map(function(e2, n2) {
      var i3 = U2(e2, "pie-path", "none", t3.colors[n2]);
      return i3.style.transition = "transform .3s;", i3;
    });
  }, animateElements: function(t3) {
    return this.store.map(function(e2, n2) {
      return ct2(e2, t3.sliceStrings[n2]);
    });
  } }, percentageBars: { layerClass: "percentage-bars", makeElements: function(t3) {
    var e2 = this, n2 = t3.xPositions.length;
    return t3.xPositions.map(function(i3, a2) {
      var s2 = a2 == n2 - 1, r2 = 0 == a2;
      return function(t4, e3, n3, i4, a3, s3) {
        var r3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : "none";
        if (s3) {
          var o2 = K2(t4, n3, i4);
          return U2(o2, "percentage-bar", null, r3);
        }
        if (a3) {
          var l2 = $3(t4, n3, i4);
          return U2(l2, "percentage-bar", null, r3);
        }
        var c2 = { className: "percentage-bar", x: t4, y: e3, width: n3, height: i4, fill: r3 };
        return j2("rect", c2);
      }(i3, 0, t3.widths[a2], e2.constants.barHeight, r2, s2, t3.colors[a2]);
    });
  }, animateElements: function(t3) {
    if (t3)
      return [];
  } }, yAxis: { layerClass: "y axis", makeElements: function(t3) {
    var e2 = this;
    return t3.positions.map(function(n2, i3) {
      return function(t4, e3, n3) {
        var i4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        O(t4) || (t4 = 0), i4.pos || (i4.pos = "left"), i4.offset || (i4.offset = 0), i4.mode || (i4.mode = "span"), i4.stroke || (i4.stroke = "#E2E6E9"), i4.className || (i4.className = "");
        var a2 = -6, s2 = "span" === i4.mode ? n3 + 6 : 0;
        return "tick" === i4.mode && "right" === i4.pos && (a2 = n3 + 6, s2 = n3), a2 += i4.offset, s2 += i4.offset, "number" == typeof e3 && (e3 = E(e3)), nt2(t4, e3, a2, s2, { className: i4.className, lineType: i4.lineType, shortenNumbers: i4.shortenNumbers, numberFormatter: i4.numberFormatter });
      }(n2, t3.labels[i3], e2.constants.width, { mode: e2.constants.mode, pos: e2.constants.pos, shortenNumbers: e2.constants.shortenNumbers, numberFormatter: e2.constants.numberFormatter });
    });
  }, animateElements: function(t3) {
    var e2 = t3.positions, n2 = t3.labels, i3 = this.oldData.positions, a2 = this.oldData.labels, s2 = h(z2(i3, e2), 2);
    i3 = s2[0], e2 = s2[1];
    var r2 = h(z2(a2, n2), 2);
    return a2 = r2[0], n2 = r2[1], this.render({ positions: i3, labels: n2 }), this.store.map(function(t4, n3) {
      return lt2(t4, e2[n3], i3[n3]);
    });
  } }, xAxis: { layerClass: "x axis", makeElements: function(t3) {
    var e2 = this;
    return t3.positions.map(function(n2, i3) {
      return function(t4, e3, n3) {
        var i4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        O(t4) || (t4 = 0), i4.pos || (i4.pos = "bottom"), i4.offset || (i4.offset = 0), i4.mode || (i4.mode = "span"), i4.className || (i4.className = "");
        var a2 = n3 + 6, s2 = "span" === i4.mode ? -6 : n3;
        return "tick" === i4.mode && "top" === i4.pos && (a2 = -6, s2 = 0), et2(t4, e3, a2, s2, { className: i4.className, lineType: i4.lineType });
      }(n2, t3.calcLabels[i3], e2.constants.height, { mode: e2.constants.mode, pos: e2.constants.pos });
    });
  }, animateElements: function(t3) {
    var e2 = t3.positions, n2 = t3.calcLabels, i3 = this.oldData.positions, a2 = this.oldData.calcLabels, s2 = h(z2(i3, e2), 2);
    i3 = s2[0], e2 = s2[1];
    var r2 = h(z2(a2, n2), 2);
    return a2 = r2[0], n2 = r2[1], this.render({ positions: i3, calcLabels: n2 }), this.store.map(function(t4, n3) {
      return function(t5, e3, n4) {
        return ot2(t5, [n4, 0], [e3, 0], 350);
      }(t4, e2[n3], i3[n3]);
    });
  } }, yMarkers: { layerClass: "y-markers", makeElements: function(t3) {
    var e2 = this;
    return t3.map(function(t4) {
      return function(t5, e3, n2) {
        var i3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        O(t5) || (t5 = 0), i3.labelPos || (i3.labelPos = "right"), i3.lineType || (i3.lineType = "dashed");
        var a2 = "left" === i3.labelPos ? 4 : n2 - C(e3, 5) - 4, s2 = j2("text", { className: "chart-label", x: a2, y: 0, dy: "-5px", "font-size": "10px", "text-anchor": "start", innerHTML: e3 + "" }), r2 = nt2(t5, "", 0, n2, { stroke: i3.stroke || "#E2E6E9", className: i3.className || "", lineType: i3.lineType });
        return r2.appendChild(s2), r2;
      }(t4.position, t4.label, e2.constants.width, { labelPos: t4.options.labelPos, stroke: t4.options.stroke, mode: "span", lineType: t4.options.lineType });
    });
  }, animateElements: function(t3) {
    var e2 = h(z2(this.oldData, t3), 2);
    this.oldData = e2[0];
    var n2 = (t3 = e2[1]).map(function(t4) {
      return t4.position;
    }), i3 = t3.map(function(t4) {
      return t4.label;
    }), a2 = t3.map(function(t4) {
      return t4.options;
    }), s2 = this.oldData.map(function(t4) {
      return t4.position;
    });
    return this.render(s2.map(function(t4, e3) {
      return { position: s2[e3], label: i3[e3], options: a2[e3] };
    })), this.store.map(function(t4, e3) {
      return lt2(t4, n2[e3], s2[e3]);
    });
  } }, yRegions: { layerClass: "y-regions", makeElements: function(t3) {
    var e2 = this;
    return t3.map(function(t4) {
      return function(t5, e3, n2, i3) {
        var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, s2 = t5 - e3, r2 = j2("rect", { className: "bar mini", styles: { fill: a2.fill || "rgba(228, 234, 239, 0.49)", stroke: a2.stroke || "#E2E6E9", "stroke-dasharray": "".concat(n2, ", ").concat(s2) }, x: 0, y: 0, width: n2, height: s2 });
        a2.labelPos || (a2.labelPos = "right");
        var o2 = "left" === a2.labelPos ? 4 : n2 - C(i3 + "", 4.5) - 4, l2 = j2("text", { className: "chart-label", x: o2, y: 0, dy: "-5px", "font-size": "10px", "text-anchor": "start", innerHTML: i3 + "" }), c2 = j2("g", { transform: "translate(0, ".concat(e3, ")") });
        return c2.appendChild(r2), c2.appendChild(l2), c2;
      }(t4.startPos, t4.endPos, e2.constants.width, t4.label, { labelPos: t4.options.labelPos, stroke: t4.options.stroke, fill: t4.options.fill });
    });
  }, animateElements: function(t3) {
    var e2 = h(z2(this.oldData, t3), 2);
    this.oldData = e2[0];
    var n2 = (t3 = e2[1]).map(function(t4) {
      return t4.endPos;
    }), i3 = t3.map(function(t4) {
      return t4.label;
    }), a2 = t3.map(function(t4) {
      return t4.startPos;
    }), s2 = t3.map(function(t4) {
      return t4.options;
    }), r2 = this.oldData.map(function(t4) {
      return t4.endPos;
    }), o2 = this.oldData.map(function(t4) {
      return t4.startPos;
    });
    this.render(r2.map(function(t4, e3) {
      return { startPos: o2[e3], endPos: r2[e3], label: i3[e3], options: s2[e3] };
    }));
    var l2 = [];
    return this.store.map(function(t4, e3) {
      l2 = l2.concat(function(t5, e4, n3, i4) {
        var a3 = e4 - n3, s3 = t5.childNodes[0], r3 = s3.getAttribute("width");
        return [[s3, { height: a3, "stroke-dasharray": "".concat(r3, ", ").concat(a3) }, 350, "easein"], ot2(t5, [0, i4], [0, n3], 350)];
      }(t4, a2[e3], n2[e3], r2[e3]));
    }), l2;
  } }, heatDomain: { layerClass: function() {
    return "heat-domain domain-" + this.constants.index;
  }, makeElements: function(t3) {
    var e2 = this, n2 = this.constants, i3 = n2.index, a2 = n2.colWidth, s2 = n2.rowHeight, r2 = n2.squareSize, o2 = n2.radius, l2 = n2.xTranslate, c2 = l2, h2 = 0;
    return this.serializedSubDomains = [], t3.cols.map(function(t4, n3) {
      1 === n3 && e2.labels.push(tt2("domain-name", c2, -12, Dt2(i3, true).toUpperCase(), { fontSize: 9 })), t4.map(function(t5, n4) {
        if (t5.fill) {
          var i4 = { "data-date": t5.yyyyMmDd, "data-value": t5.dataValue, "data-day": n4 }, a3 = Q("day", c2, h2, r2, o2, t5.fill, i4);
          e2.serializedSubDomains.push(a3);
        }
        h2 += s2;
      }), h2 = 0, c2 += a2;
    }), this.serializedSubDomains;
  }, animateElements: function(t3) {
    if (t3)
      return [];
  } }, barGraph: { layerClass: function() {
    return "dataset-units dataset-bars dataset-" + this.constants.index;
  }, makeElements: function(t3) {
    var e2 = this.constants;
    return this.unitType = "bar", this.units = t3.yPositions.map(function(n2, i3) {
      return function(t4, e3, n3, i4) {
        var a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "", s2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0, o2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {}, l2 = F2(e3, o2.zeroLine), c2 = h(l2, 2), u2 = c2[0], d3 = c2[1];
        d3 -= r2, 0 === u2 && (u2 = o2.minHeight, d3 -= o2.minHeight), O(t4) || (t4 = 0), O(d3) || (d3 = 0), O(u2, true) || (u2 = 0), O(n3, true) || (n3 = 0);
        var p2 = j2("rect", { className: "bar mini", style: "fill: ".concat(i4), "data-point-index": s2, x: t4, y: d3, width: n3, height: u2 });
        if ((a2 += "") || a2.length) {
          p2.setAttribute("y", 0), p2.setAttribute("x", 0);
          var f3 = j2("text", { className: "data-point-value", x: n3 / 2, y: 0, dy: "-5px", "font-size": "10px", "text-anchor": "middle", innerHTML: a2 }), v2 = j2("g", { "data-point-index": s2, transform: "translate(".concat(t4, ", ").concat(d3, ")") });
          return v2.appendChild(p2), v2.appendChild(f3), v2;
        }
        return p2;
      }(t3.xPositions[i3], n2, t3.barWidth, e2.color, t3.labels[i3], i3, t3.offsets[i3], { zeroLine: t3.zeroLine, barsWidth: t3.barsWidth, minHeight: e2.minHeight });
    }), this.units;
  }, animateElements: function(t3) {
    var e2 = t3.xPositions, n2 = t3.yPositions, i3 = t3.offsets, a2 = t3.labels, s2 = this.oldData.xPositions, r2 = this.oldData.yPositions, o2 = this.oldData.offsets, l2 = this.oldData.labels, c2 = h(z2(s2, e2), 2);
    s2 = c2[0], e2 = c2[1];
    var u2 = h(z2(r2, n2), 2);
    r2 = u2[0], n2 = u2[1];
    var d3 = h(z2(o2, i3), 2);
    o2 = d3[0], i3 = d3[1];
    var p2 = h(z2(l2, a2), 2);
    l2 = p2[0], a2 = p2[1], this.render({ xPositions: s2, yPositions: r2, offsets: o2, labels: a2, zeroLine: this.oldData.zeroLine, barsWidth: this.oldData.barsWidth, barWidth: this.oldData.barWidth });
    var f3 = [];
    return this.store.map(function(a3, s3) {
      f3 = f3.concat(function(t4, e3, n3, i4) {
        var a4 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, s4 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {}, r3 = F2(n3, s4.zeroLine), o3 = h(r3, 2), l3 = o3[0], c3 = o3[1];
        if (c3 -= a4, "rect" !== t4.nodeName) {
          var u3 = t4.childNodes[0], d4 = [u3, { width: i4, height: l3 }, 350, "easein"], p3 = t4.getAttribute("transform").split("(")[1].slice(0, -1), f4 = ot2(t4, p3, [e3, c3], 350);
          return [d4, f4];
        }
        return [[t4, { width: i4, height: l3, x: e3, y: c3 }, 350, "easein"]];
      }(a3, e2[s3], n2[s3], t3.barWidth, i3[s3], { zeroLine: t3.zeroLine }));
    }), f3;
  } }, lineGraph: { layerClass: function() {
    return "dataset-units dataset-line dataset-" + this.constants.index;
  }, makeElements: function(t3) {
    var e2 = this.constants;
    if (this.unitType = "dot", this.paths = {}, e2.hideLine || (this.paths = function(t4, e3, n3) {
      var i4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, s2 = e3.map(function(e4, n4) {
        return t4[n4] + "," + e4;
      }), r2 = s2.join("L");
      i4.spline && (r2 = W(t4, e3));
      var o2 = U2("M" + r2, "line-graph-path", n3);
      if (i4.heatline) {
        var l2 = J2(a2.svgDefs, n3);
        o2.style.stroke = "url(#".concat(l2, ")");
      }
      var c2 = { path: o2 };
      if (i4.regionFill) {
        var h2 = J2(a2.svgDefs, n3, true), u2 = "M" + "".concat(t4[0], ",").concat(a2.zeroLine, "L") + r2 + "L".concat(t4.slice(-1)[0], ",").concat(a2.zeroLine);
        c2.region = U2(u2, "region-fill", "none", "url(#".concat(h2, ")"));
      }
      return c2;
    }(t3.xPositions, t3.yPositions, e2.color, { heatline: e2.heatline, regionFill: e2.regionFill, spline: e2.spline }, { svgDefs: e2.svgDefs, zeroLine: t3.zeroLine })), this.units = [], e2.showDots && (this.units = t3.yPositions.map(function(n3, i4) {
      return it2(t3.xPositions[i4], n3, t3.radius, e2.color, e2.valuesOverPoints ? t3.values[i4] : "", i4, e2.hideDotBorder);
    })), e2.trailingDot && !e2.showDots) {
      var n2 = t3.yPositions.length - 1, i3 = it2(t3.xPositions[n2], t3.yPositions[n2], t3.radius, e2.color, e2.valuesOverPoints ? t3.values[n2] : "", n2, e2.hideDotBorder);
      this.units.push(i3);
    }
    return Object.values(this.paths).concat(this.units);
  }, animateElements: function(t3) {
    var e2 = t3.xPositions, n2 = t3.yPositions, i3 = t3.values, a2 = this.oldData.xPositions, s2 = this.oldData.yPositions, r2 = this.oldData.values, o2 = h(z2(a2, e2), 2);
    a2 = o2[0], e2 = o2[1];
    var l2 = h(z2(s2, n2), 2);
    s2 = l2[0], n2 = l2[1];
    var c2 = h(z2(r2, i3), 2);
    r2 = c2[0], i3 = c2[1], this.render({ xPositions: a2, yPositions: s2, values: i3, zeroLine: this.oldData.zeroLine, radius: this.oldData.radius });
    var u2 = [];
    return Object.keys(this.paths).length && (u2 = u2.concat(function(t4, e3, n3, i4, a3) {
      var s3 = [], r3 = n3.map(function(t5, n4) {
        return e3[n4] + "," + t5;
      }).join("L");
      a3 && (r3 = W(e3, n3));
      var o3 = [t4.path, { d: "M" + r3 }, 350, "easein"];
      if (s3.push(o3), t4.region) {
        var l3 = "".concat(e3[0], ",").concat(i4, "L"), c3 = "L".concat(e3.slice(-1)[0], ", ").concat(i4), h2 = [t4.region, { d: "M" + l3 + r3 + c3 }, 350, "easein"];
        s3.push(h2);
      }
      return s3;
    }(this.paths, e2, n2, t3.zeroLine, this.constants.spline))), this.units.length && this.units.map(function(t4, i4) {
      u2 = u2.concat(function(t5, e3, n3) {
        if ("circle" !== t5.nodeName) {
          var i5 = t5.getAttribute("transform").split("(")[1].slice(0, -1);
          return [ot2(t5, i5, [e3, n3], 350)];
        }
        return [[t5, { cx: e3, cy: n3 }, 350, "easein"]];
      }(t4, e2[i4], n2[i4]));
    }), u2;
  } } };
  function Nt2(t3, e2, n2) {
    var i3 = Object.keys(Ct2).filter(function(e3) {
      return t3.includes(e3);
    }), a2 = Ct2[i3[0]];
    return Object.assign(a2, { constants: e2, getData: n2 }), new Pt2(a2);
  }
  var Ot2 = function(t3) {
    a(r2, gt2);
    var n2 = l(r2);
    function r2(t4, i3) {
      var a2;
      return e(this, r2), (a2 = n2.call(this, t4, i3)).type = "percentage", a2.setup(), a2;
    }
    return i2(r2, [{ key: "setMeasures", value: function(t4) {
      var e2 = this.measures;
      this.barOptions = t4.barOptions || {};
      var n3 = this.barOptions;
      n3.height = n3.height || 16, e2.paddings.right = 30, e2.paddings.top = 60, e2.paddings.bottom = 0, e2.legendHeight = 80, e2.baseHeight = 8 * n3.height + k(e2);
    } }, { key: "setupComponents", value: function() {
      var t4 = this.state, e2 = [["percentageBars", { barHeight: this.barOptions.height }, function() {
        return { xPositions: t4.xPositions, widths: t4.widths, colors: this.colors };
      }.bind(this)]];
      this.components = new Map(e2.map(function(t5) {
        var e3 = Nt2.apply(void 0, u(t5));
        return [t5[0], e3];
      }));
    } }, { key: "calc", value: function() {
      var t4 = this;
      c(s(r2.prototype), "calc", this).call(this);
      var e2 = this.state;
      e2.xPositions = [], e2.widths = [];
      var n3 = 0;
      e2.sliceTotals.map(function(i3) {
        var a2 = t4.width * i3 / e2.grandTotal;
        e2.widths.push(a2), e2.xPositions.push(n3), n3 += a2;
      });
    } }, { key: "makeDataByIndex", value: function() {
    } }, { key: "bindTooltip", value: function() {
      var t4 = this, e2 = this.state;
      this.container.addEventListener("mousemove", function(n3) {
        var i3 = t4.components.get("percentageBars").store, a2 = n3.target;
        if (i3.includes(a2)) {
          var s2 = i3.indexOf(a2), r3 = v(t4.container), o2 = v(a2), l2 = a2.getAttribute("width") || a2.getBoundingClientRect().width, c2 = o2.left - r3.left + parseInt(l2) / 2, h2 = o2.top - r3.top, u2 = (t4.formattedLabels && t4.formattedLabels.length > 0 ? t4.formattedLabels[s2] : t4.state.labels[s2]) + ": ", d3 = e2.sliceTotals[s2] / e2.grandTotal;
          t4.tip.setValues(c2, h2, { name: u2, value: (100 * d3).toFixed(1) + "%" }), t4.tip.showTip();
        }
      });
    } }]), r2;
  }();
  var Et2 = function(t3) {
    a(r2, gt2);
    var n2 = l(r2);
    function r2(t4, i3) {
      var a2;
      return e(this, r2), (a2 = n2.call(this, t4, i3)).initTimeout = 0, a2.init = 1, a2.setup(), a2;
    }
    return i2(r2, [{ key: "configure", value: function(t4) {
      c(s(r2.prototype), "configure", this).call(this, t4), this.mouseMove = this.mouseMove.bind(this), this.mouseLeave = this.mouseLeave.bind(this), this.hoverRadio = t4.hoverRadio || 0.1, this.config.startAngle = t4.startAngle || 0, this.type = "pie", this.sliceName = "pieSlices", this.arcFunc = q2, this.shapeFunc = G2, this.clockWise = t4.clockWise || false;
    } }, { key: "getRadius", value: function() {
      return this.height > this.width ? this.center.x : this.center.y;
    } }, { key: "calc", value: function() {
      var t4 = this;
      c(s(r2.prototype), "calc", this).call(this);
      var e2 = this.state;
      this.radius = this.getRadius();
      var n3 = this.radius, i3 = this.clockWise, a2 = e2.slicesProperties || [];
      e2.sliceStrings = [], e2.slicesProperties = [];
      var o2 = 180 - this.config.startAngle;
      e2.sliceTotals.map(function(s2, r3) {
        var l2, c2, h2 = o2, u2 = s2 / e2.grandTotal * 360, d3 = u2 > 180 ? 1 : 0, p2 = i3 ? -u2 : u2, f3 = o2 += p2, v2 = N(h2, n3), g2 = N(f3, n3), m3 = t4.init && a2[r3];
        t4.init ? (l2 = m3 ? m3.startPosition : v2, c2 = m3 ? m3.endPosition : v2) : (l2 = v2, c2 = g2);
        var y2 = 360 === u2 ? t4.shapeFunc(l2, c2, t4.center, t4.radius, i3, d3) : t4.arcFunc(l2, c2, t4.center, t4.radius, i3, d3);
        e2.sliceStrings.push(y2), e2.slicesProperties.push({ startPosition: v2, endPosition: g2, value: s2, total: e2.grandTotal, startAngle: h2, endAngle: f3, angle: p2 });
      }), this.init = 0;
    } }, { key: "setupComponents", value: function() {
      var t4 = this.state, e2 = [["pieSlices", {}, function() {
        return { sliceStrings: t4.sliceStrings, colors: this.colors };
      }.bind(this)]];
      this.components = new Map(e2.map(function(t5) {
        var e3 = Nt2.apply(void 0, u(t5));
        return [t5[0], e3];
      }));
    } }, { key: "calTranslateByAngle", value: function(t4) {
      var e2 = this.radius, n3 = this.hoverRadio, i3 = N(t4.startAngle + t4.angle / 2, e2);
      return "translate3d(".concat(i3.x * n3, "px,").concat(i3.y * n3, "px,0)");
    } }, { key: "hoverSlice", value: function(t4, e2, n3, i3) {
      if (t4) {
        var a2 = this.colors[e2];
        if (n3) {
          dt2(t4, this.calTranslateByAngle(this.state.slicesProperties[e2]));
          var s2 = v(this.svg), r3 = i3.pageX - s2.left + 10, o2 = i3.pageY - s2.top - 10, l2 = (this.formatted_labels && this.formatted_labels.length > 0 ? this.formatted_labels[e2] : this.state.labels[e2]) + ": ", c2 = (100 * this.state.sliceTotals[e2] / this.state.grandTotal).toFixed(1);
          this.tip.setValues(r3, o2, { name: l2, value: c2 + "%" }), this.tip.showTip();
        } else
          this.resetHover(t4, a2);
      }
    } }, { key: "resetHover", value: function(t4, e2) {
      dt2(t4, "translate3d(0,0,0)"), this.tip.hideTip(), t4.style.fill = e2;
    } }, { key: "bindTooltip", value: function() {
      this.container.addEventListener("mousemove", this.mouseMove), this.container.addEventListener("mouseleave", this.mouseLeave);
    } }, { key: "mouseMove", value: function(t4) {
      var e2 = t4.target, n3 = this.components.get(this.sliceName).store, i3 = this.curActiveSliceIndex, a2 = this.curActiveSlice;
      if (n3.includes(e2)) {
        var s2 = n3.indexOf(e2);
        this.hoverSlice(a2, i3, false), this.curActiveSlice = e2, this.curActiveSliceIndex = s2, this.hoverSlice(e2, s2, true, t4);
      } else
        this.mouseLeave();
    } }, { key: "mouseLeave", value: function() {
      this.hoverSlice(this.curActiveSlice, this.curActiveSliceIndex, false);
    } }]), r2;
  }();
  function St2(t3) {
    if (0 === t3)
      return [0, 0];
    if (isNaN(t3))
      return { mantissa: -6755399441055744, exponent: 972 };
    var e2 = t3 > 0 ? 1 : -1;
    if (!isFinite(t3))
      return { mantissa: 4503599627370496 * e2, exponent: 972 };
    t3 = Math.abs(t3);
    var n2 = Math.floor(Math.log10(t3));
    return [e2 * (t3 / Math.pow(10, n2)), n2];
  }
  function Ft2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n2 = Math.ceil(t3), i3 = Math.floor(e2), a2 = n2 - i3, s2 = a2, r2 = 1;
    a2 > 5 && (a2 % 2 != 0 && (a2 = ++n2 - i3), s2 = a2 / 2, r2 = 2), a2 <= 2 && (r2 = a2 / (s2 = 4)), 0 === a2 && (s2 = 5, r2 = 1);
    for (var o2 = [], l2 = 0; l2 <= s2; l2++)
      o2.push(i3 + r2 * l2);
    return o2;
  }
  function zt2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n2 = St2(t3), i3 = h(n2, 2), a2 = i3[0], s2 = i3[1], r2 = e2 ? e2 / Math.pow(10, s2) : 0, o2 = Ft2(a2 = a2.toFixed(6), r2);
    return o2 = o2.map(function(t4) {
      return t4 * Math.pow(10, s2);
    });
  }
  function Ht2(t3) {
    var e2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i3 = Math.max.apply(Math, u(t3)), a2 = Math.min.apply(Math, u(t3));
    void 0 !== n2.max && (i3 = i3 > n2.max ? i3 : n2.max), void 0 !== n2.min && (a2 = a2 < n2.min ? a2 : n2.min);
    var s2 = [];
    function r2(t4, e3) {
      for (var n3 = zt2(t4), i4 = n3[1] - n3[0], a3 = 0, s3 = 1; a3 < e3; s3++)
        a3 += i4, n3.unshift(-1 * a3);
      return n3;
    }
    if (i3 >= 0 && a2 >= 0)
      St2(i3)[1], s2 = e2 ? zt2(i3, a2) : zt2(i3);
    else if (i3 > 0 && a2 < 0) {
      var o2 = Math.abs(a2);
      if (i3 >= o2)
        St2(i3)[1], s2 = r2(i3, o2);
      else {
        St2(o2)[1];
        var l2 = r2(o2, i3);
        s2 = l2.reverse().map(function(t4) {
          return -1 * t4;
        });
      }
    } else if (i3 <= 0 && a2 <= 0) {
      var c2 = Math.abs(a2), h2 = Math.abs(i3);
      St2(c2)[1], s2 = (s2 = e2 ? zt2(c2, h2) : zt2(c2)).reverse().map(function(t4) {
        return -1 * t4;
      });
    }
    return s2;
  }
  function Rt2(t3) {
    var e2, n2 = Wt2(t3);
    if (t3.indexOf(0) >= 0)
      e2 = t3.indexOf(0);
    else if (t3[0] > 0) {
      e2 = -1 * t3[0] / n2;
    } else {
      e2 = -1 * t3[t3.length - 1] / n2 + (t3.length - 1);
    }
    return e2;
  }
  function Wt2(t3) {
    return t3[1] - t3[0];
  }
  function Bt2(t3) {
    return t3[t3.length - 1] - t3[0];
  }
  function jt2(t3, e2) {
    return T2(e2.zeroLine - t3 * e2.scaleMultiplier);
  }
  var It = function(t3) {
    a(s2, vt2);
    var n2 = l(s2);
    function s2(t4, i3) {
      var a2;
      e(this, s2), (a2 = n2.call(this, t4, i3)).type = "heatmap", a2.countLabel = i3.countLabel || "";
      var r2 = ["Sunday", "Monday"], o2 = r2.includes(i3.startSubDomain) ? i3.startSubDomain : "Sunday";
      return a2.startSubDomainIndex = r2.indexOf(o2), a2.setup(), a2;
    }
    return i2(s2, [{ key: "setMeasures", value: function(t4) {
      var e2 = this.measures;
      this.discreteDomains = 0 === t4.discreteDomains ? 0 : 1, e2.paddings.top = 36, e2.paddings.bottom = 0, e2.legendHeight = 24, e2.baseHeight = 84 + k(e2);
      var n3 = this.data, i3 = this.discreteDomains ? 12 : 0;
      this.independentWidth = 12 * (wt2(n3.start, n3.end) + i3) + w(e2);
    } }, { key: "updateWidth", value: function() {
      var t4 = this.discreteDomains ? 12 : 0, e2 = this.state.noOfWeeks ? this.state.noOfWeeks : 52;
      this.baseWidth = 12 * (e2 + t4) + w(this.measures);
    } }, { key: "prepareData", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.data;
      if (t4.start && t4.end && t4.start > t4.end)
        throw new Error("Start date cannot be greater than end date.");
      if (t4.start || (t4.start = new Date(), t4.start.setFullYear(t4.start.getFullYear() - 1)), t4.end || (t4.end = new Date()), t4.dataPoints = t4.dataPoints || {}, parseInt(Object.keys(t4.dataPoints)[0]) > 1e5) {
        var e2 = {};
        Object.keys(t4.dataPoints).forEach(function(n3) {
          var i3 = new Date(1e3 * n3);
          e2[xt2(i3)] = t4.dataPoints[n3];
        }), t4.dataPoints = e2;
      }
      return t4;
    } }, { key: "calc", value: function() {
      var t4 = this.state;
      t4.start = kt2(this.data.start), t4.end = kt2(this.data.end), t4.firstWeekStart = kt2(t4.start), t4.noOfWeeks = wt2(t4.start, t4.end), t4.distribution = function(t5, e2) {
        for (var n3 = Math.max.apply(Math, u(t5)), i3 = 1 / (e2 - 1), a2 = [], s3 = 0; s3 < e2; s3++) {
          var r2 = n3 * (i3 * s3);
          a2.push(r2);
        }
        return a2;
      }(Object.values(this.data.dataPoints), 5), t4.domainConfigs = this.getDomains();
    } }, { key: "setupComponents", value: function() {
      var t4 = this, e2 = this.state, n3 = this.discreteDomains ? 0 : 1, i3 = e2.domainConfigs.map(function(i4, a3) {
        return ["heatDomain", { index: i4.index, colWidth: 12, rowHeight: 12, squareSize: 10, radius: t4.rawChartArgs.radius || 0, xTranslate: 12 * e2.domainConfigs.filter(function(t5, e3) {
          return e3 < a3;
        }).map(function(t5) {
          return t5.cols.length - n3;
        }).reduce(function(t5, e3) {
          return t5 + e3;
        }, 0) }, function() {
          return e2.domainConfigs[a3];
        }.bind(t4)];
      });
      this.components = new Map(i3.map(function(t5, e3) {
        var n4 = Nt2.apply(void 0, u(t5));
        return [t5[0] + "-" + e3, n4];
      }));
      var a2 = 0;
      yt2.forEach(function(e3, n4) {
        if ([1, 3, 5].includes(n4)) {
          var i4 = tt2("subdomain-name", -6, a2, e3, { fontSize: 10, dy: 8, textAnchor: "end" });
          t4.drawArea.appendChild(i4);
        }
        a2 += 12;
      });
    } }, { key: "update", value: function(t4) {
      t4 || console.error("No data to update."), this.data = this.prepareData(t4), this.draw(), this.bindTooltip();
    } }, { key: "bindTooltip", value: function() {
      var t4 = this;
      this.container.addEventListener("mousemove", function(e2) {
        t4.components.forEach(function(n3) {
          var i3 = n3.store, a2 = e2.target;
          if (i3.includes(a2)) {
            var s3 = a2.getAttribute("data-value"), r2 = a2.getAttribute("data-date").split("-"), o2 = Dt2(parseInt(r2[1]) - 1, true), l2 = t4.container.getBoundingClientRect(), c2 = a2.getBoundingClientRect(), h2 = parseInt(e2.target.getAttribute("width")), u2 = c2.left - l2.left + h2 / 2, d3 = c2.top - l2.top, p2 = s3 + " " + t4.countLabel, f3 = " on " + o2 + " " + r2[0] + ", " + r2[2];
            t4.tip.setValues(u2, d3, { name: f3, value: p2, valueFirst: 1 }, []), t4.tip.showTip();
          }
        });
      });
    } }, { key: "renderLegend", value: function() {
      var t4 = this;
      this.legendArea.textContent = "";
      var e2 = 0, n3 = this.rawChartArgs.radius || 0, i3 = tt2("subdomain-name", e2, 12, "Less", { fontSize: 11, dy: 9 });
      e2 = 30, this.legendArea.appendChild(i3), this.colors.slice(0, 5).map(function(i4, a3) {
        var s3 = Q("heatmap-legend-unit", e2 + 15 * a3, 12, 10, n3, i4);
        t4.legendArea.appendChild(s3);
      });
      var a2 = tt2("subdomain-name", e2 + 75 + 3, 12, "More", { fontSize: 11, dy: 9 });
      this.legendArea.appendChild(a2);
    } }, { key: "getDomains", value: function() {
      for (var t4 = this.state, e2 = [t4.start.getMonth(), t4.start.getFullYear()], n3 = e2[0], i3 = e2[1], a2 = [t4.end.getMonth(), t4.end.getFullYear()], s3 = a2[0] - n3 + 1 + 12 * (a2[1] - i3), r2 = [], o2 = kt2(t4.start), l2 = 0; l2 < s3; l2++) {
        var c2 = t4.end;
        if (!At2(o2, t4.end)) {
          var h2 = [o2.getMonth(), o2.getFullYear()];
          c2 = Lt2(h2[0], h2[1]);
        }
        r2.push(this.getDomainConfig(o2, c2)), Tt2(c2, 1), o2 = c2;
      }
      return r2;
    } }, { key: "getDomainConfig", value: function(t4) {
      var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n3 = [t4.getMonth(), t4.getFullYear()], i3 = n3[0], a2 = n3[1], s3 = Mt(t4), r2 = { index: i3, cols: [] };
      Tt2(e2 = kt2(e2) || Lt2(i3, a2), 1);
      for (var o2, l2 = wt2(s3, e2), c2 = [], h2 = 0; h2 < l2; h2++)
        o2 = this.getCol(s3, i3), c2.push(o2), Tt2(s3 = new Date(o2[6].yyyyMmDd), 1);
      return void 0 !== o2[6].dataValue && (Tt2(s3, 1), c2.push(this.getCol(s3, i3, true))), r2.cols = c2, r2;
    } }, { key: "getCol", value: function(t4, e2) {
      for (var n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], i3 = this.state, a2 = kt2(t4), s3 = [], r2 = 0; r2 < 7; r2++, Tt2(a2, 1)) {
        var o2 = {}, l2 = a2 >= i3.start && a2 <= i3.end;
        n3 || a2.getMonth() !== e2 || !l2 ? o2.yyyyMmDd = xt2(a2) : o2 = this.getSubDomainConfig(a2), s3.push(o2);
      }
      return s3;
    } }, { key: "getSubDomainConfig", value: function(t4) {
      var e2, n3, i3 = xt2(t4), a2 = this.data.dataPoints[i3];
      return { yyyyMmDd: i3, dataValue: a2 || 0, fill: this.colors[e2 = a2, n3 = this.state.distribution, n3.filter(function(t5) {
        return t5 < e2;
      }).length] };
    } }]), s2;
  }();
  function Yt2(t3, e2) {
    t3.labels = t3.labels || [];
    var n2 = t3.labels.length, i3 = t3.datasets, a2 = new Array(n2).fill(0);
    return i3 || (i3 = [{ values: a2 }]), i3.map(function(t4) {
      if (t4.values) {
        var i4 = t4.values;
        i4 = (i4 = i4.map(function(t5) {
          return isNaN(t5) ? 0 : t5;
        })).length > n2 ? i4.slice(0, n2) : P2(i4, n2 - i4.length, 0), t4.values = i4;
      } else
        t4.values = a2;
      t4.chartType || (t4.chartType = e2);
    }), t3.yRegions && t3.yRegions.map(function(t4) {
      if (t4.end < t4.start) {
        var e3 = [t4.end, t4.start];
        t4.start = e3[0], t4.end = e3[1];
      }
    }), t3;
  }
  function Vt2(t3) {
    var e2 = t3.labels.length, n2 = new Array(e2).fill(0), i3 = { labels: t3.labels.slice(0, -1), datasets: t3.datasets.map(function(t4) {
      return { name: "", values: n2.slice(0, -1), chartType: t4.chartType };
    }) };
    return t3.yMarkers && (i3.yMarkers = [{ value: 0, label: "" }]), t3.yRegions && (i3.yRegions = [{ start: 0, end: 0, label: "" }]), i3;
  }
  var Ut2 = function(t3) {
    a(r2, vt2);
    var n2 = l(r2);
    function r2(t4, i3) {
      var a2;
      return e(this, r2), (a2 = n2.call(this, t4, i3)).barOptions = i3.barOptions || {}, a2.lineOptions = i3.lineOptions || {}, a2.type = i3.type || "line", a2.init = 1, a2.setup(), a2;
    }
    return i2(r2, [{ key: "setMeasures", value: function() {
      this.data.datasets.length <= 1 && (this.config.showLegend = 0, this.measures.paddings.bottom = 30);
    } }, { key: "configure", value: function(t4) {
      c(s(r2.prototype), "configure", this).call(this, t4), t4.axisOptions = t4.axisOptions || {}, t4.tooltipOptions = t4.tooltipOptions || {}, this.config.xAxisMode = t4.axisOptions.xAxisMode || "span", this.config.yAxisMode = t4.axisOptions.yAxisMode || "span", this.config.xIsSeries = t4.axisOptions.xIsSeries || 0, this.config.shortenYAxisNumbers = t4.axisOptions.shortenYAxisNumbers || 0, this.config.numberFormatter = t4.axisOptions.numberFormatter, this.config.yAxisRange = t4.axisOptions.yAxisRange || {}, this.config.formatTooltipX = t4.tooltipOptions.formatTooltipX, this.config.formatTooltipY = t4.tooltipOptions.formatTooltipY, this.config.valuesOverPoints = t4.valuesOverPoints, this.config.legendRowHeight = 30;
    } }, { key: "prepareData", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.data;
      return Yt2(t4, this.type);
    } }, { key: "prepareFirstData", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.data;
      return Vt2(t4);
    } }, { key: "calc", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      this.calcXPositions(), t4 || this.calcYAxisParameters(this.getAllYValues(), "line" === this.type), this.makeDataByIndex();
    } }, { key: "calcXPositions", value: function() {
      var t4 = this.state, e2 = this.data.labels;
      t4.datasetLength = e2.length, t4.unitWidth = this.width / t4.datasetLength, t4.xOffset = t4.unitWidth / 2, t4.xAxis = { labels: e2, positions: e2.map(function(e3, n3) {
        return T2(t4.xOffset + n3 * t4.unitWidth);
      }) };
    } }, { key: "calcYAxisParameters", value: function(t4) {
      var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "false", n3 = Ht2(t4, e2, this.config.yAxisRange), i3 = this.height / Bt2(n3), a2 = Wt2(n3) * i3, s2 = this.height - Rt2(n3) * a2;
      this.state.yAxis = { labels: n3, positions: n3.map(function(t5) {
        return s2 - t5 * i3;
      }), scaleMultiplier: i3, zeroLine: s2 }, this.calcDatasetPoints(), this.calcYExtremes(), this.calcYRegions();
    } }, { key: "calcDatasetPoints", value: function() {
      var t4 = this.state, e2 = function(e3) {
        return e3.map(function(e4) {
          return jt2(e4, t4.yAxis);
        });
      };
      t4.datasets = this.data.datasets.map(function(t5, n3) {
        var i3 = t5.values, a2 = t5.cumulativeYs || [];
        return { name: t5.name && t5.name.replace(/<|>|&/g, function(t6) {
          return "&" == t6 ? "&amp;" : "<" == t6 ? "&lt;" : "&gt;";
        }), index: n3, chartType: t5.chartType, values: i3, yPositions: e2(i3), cumulativeYs: a2, cumulativeYPos: e2(a2) };
      });
    } }, { key: "calcYExtremes", value: function() {
      var t4 = this.state;
      this.barOptions.stacked ? t4.yExtremes = t4.datasets[t4.datasets.length - 1].cumulativeYPos : (t4.yExtremes = new Array(t4.datasetLength).fill(9999), t4.datasets.map(function(e2) {
        e2.yPositions.map(function(e3, n3) {
          e3 < t4.yExtremes[n3] && (t4.yExtremes[n3] = e3);
        });
      }));
    } }, { key: "calcYRegions", value: function() {
      var t4 = this.state;
      this.data.yMarkers && (this.state.yMarkers = this.data.yMarkers.map(function(e2) {
        return e2.position = jt2(e2.value, t4.yAxis), e2.options || (e2.options = {}), e2;
      })), this.data.yRegions && (this.state.yRegions = this.data.yRegions.map(function(e2) {
        return e2.startPos = jt2(e2.start, t4.yAxis), e2.endPos = jt2(e2.end, t4.yAxis), e2.options || (e2.options = {}), e2;
      }));
    } }, { key: "getAllYValues", value: function() {
      var t4, e2 = this, n3 = "values";
      if (this.barOptions.stacked) {
        n3 = "cumulativeYs";
        var i3 = new Array(this.state.datasetLength).fill(0);
        this.data.datasets.map(function(t5, a3) {
          var s2 = e2.data.datasets[a3].values;
          t5[n3] = i3 = i3.map(function(t6, e3) {
            return t6 + s2[e3];
          });
        });
      }
      var a2 = this.data.datasets.map(function(t5) {
        return t5[n3];
      });
      return this.data.yMarkers && a2.push(this.data.yMarkers.map(function(t5) {
        return t5.value;
      })), this.data.yRegions && this.data.yRegions.map(function(t5) {
        a2.push([t5.end, t5.start]);
      }), (t4 = []).concat.apply(t4, u(a2));
    } }, { key: "setupComponents", value: function() {
      var t4 = this, e2 = [["yAxis", { mode: this.config.yAxisMode, width: this.width, shortenNumbers: this.config.shortenYAxisNumbers, numberFormatter: this.config.numberFormatter }, function() {
        return this.state.yAxis;
      }.bind(this)], ["xAxis", { mode: this.config.xAxisMode, height: this.height }, function() {
        var t5 = this.state;
        return t5.xAxis.calcLabels = function(t6) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n4 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], i4 = t6 / e3.length * 0.6;
          i4 <= 0 && (i4 = 1);
          var a3, s3 = i4 / 7;
          if (n4) {
            var r4 = Math.max.apply(Math, u(e3.map(function(t7) {
              return t7.length;
            })));
            a3 = Math.ceil(r4 / s3);
          }
          var o3 = e3.map(function(t7, i5) {
            return (t7 += "").length > s3 && (n4 ? i5 % a3 != 0 ? i5 !== e3.length - 1 && (t7 = "") : i5 > e3.length - a3 / 2 && (t7 = "") : t7 = s3 - 3 > 0 ? t7.slice(0, s3 - 3) + " ..." : t7.slice(0, s3) + ".."), t7;
          });
          return o3;
        }(this.width, t5.xAxis.labels, this.config.xIsSeries), t5.xAxis;
      }.bind(this)], ["yRegions", { width: this.width, pos: "right" }, function() {
        return this.state.yRegions;
      }.bind(this)]], n3 = this.state.datasets.filter(function(t5) {
        return "bar" === t5.chartType;
      }), i3 = this.state.datasets.filter(function(t5) {
        return "line" === t5.chartType;
      }), a2 = n3.map(function(e3) {
        var i4 = e3.index;
        return ["barGraph-" + e3.index, { index: i4, color: t4.colors[i4], stacked: t4.barOptions.stacked, valuesOverPoints: t4.config.valuesOverPoints, minHeight: 0 * t4.height }, function() {
          var t5 = this.state, e4 = t5.datasets[i4], a3 = this.barOptions.stacked, s3 = this.barOptions.spaceRatio || 0.5, r4 = t5.unitWidth * (1 - s3), o3 = r4 / (a3 ? 1 : n3.length), l2 = t5.xAxis.positions.map(function(t6) {
            return t6 - r4 / 2;
          });
          a3 || (l2 = l2.map(function(t6) {
            return t6 + o3 * i4;
          }));
          var c2 = new Array(t5.datasetLength).fill("");
          this.config.valuesOverPoints && (c2 = a3 && e4.index === t5.datasets.length - 1 ? e4.cumulativeYs : e4.values);
          var h2 = new Array(t5.datasetLength).fill(0);
          return a3 && (h2 = e4.yPositions.map(function(t6, n4) {
            return t6 - e4.cumulativeYPos[n4];
          })), { xPositions: l2, yPositions: e4.yPositions, offsets: h2, labels: c2, zeroLine: t5.yAxis.zeroLine, barsWidth: r4, barWidth: o3 };
        }.bind(t4)];
      }), s2 = i3.map(function(e3) {
        var n4 = e3.index;
        return ["lineGraph-" + e3.index, { index: n4, color: t4.colors[n4], svgDefs: t4.svgDefs, heatline: t4.lineOptions.heatline, regionFill: t4.lineOptions.regionFill, spline: t4.lineOptions.spline, showDots: t4.lineOptions.showDots, trailingDot: t4.lineOptions.trailingDot, hideDotBorder: t4.lineOptions.hideDotBorder, hideLine: t4.lineOptions.hideLine, valuesOverPoints: t4.config.valuesOverPoints }, function() {
          var t5 = this.state, e4 = t5.datasets[n4], i4 = t5.yAxis.positions[0] < t5.yAxis.zeroLine ? t5.yAxis.positions[0] : t5.yAxis.zeroLine;
          return { xPositions: t5.xAxis.positions, yPositions: e4.yPositions, values: e4.values, zeroLine: i4, radius: this.lineOptions.dotSize || 4 };
        }.bind(t4)];
      }), r3 = [["yMarkers", { width: this.width, pos: "right" }, function() {
        return this.state.yMarkers;
      }.bind(this)]];
      e2 = e2.concat(a2, s2, r3);
      var o2 = ["yMarkers", "yRegions"];
      this.dataUnitComponents = [], this.components = new Map(e2.filter(function(e3) {
        return !o2.includes(e3[0]) || t4.state[e3[0]];
      }).map(function(e3) {
        var n4 = Nt2.apply(void 0, u(e3));
        return (e3[0].includes("lineGraph") || e3[0].includes("barGraph")) && t4.dataUnitComponents.push(n4), [e3[0], n4];
      }));
    } }, { key: "makeDataByIndex", value: function() {
      var t4 = this;
      this.dataByIndex = {};
      var e2 = this.state, n3 = this.config.formatTooltipX, i3 = this.config.formatTooltipY;
      e2.xAxis.labels.map(function(a2, s2) {
        var r3 = t4.state.datasets.map(function(e3, n4) {
          var a3 = e3.values[s2];
          return { title: e3.name, value: a3, yPos: e3.yPositions[s2], color: t4.colors[n4], formatted: i3 ? i3(a3) : a3 };
        });
        t4.dataByIndex[s2] = { label: a2, formattedLabel: n3 ? n3(a2) : a2, xPos: e2.xAxis.positions[s2], values: r3, yExtreme: e2.yExtremes[s2] };
      });
    } }, { key: "bindTooltip", value: function() {
      var t4 = this;
      this.container.addEventListener("mousemove", function(e2) {
        var n3 = t4.measures, i3 = v(t4.container), a2 = e2.pageX - i3.left - x(n3), s2 = e2.pageY - i3.top;
        s2 < t4.height + b(n3) && s2 > b(n3) ? t4.mapTooltipXPosition(a2) : t4.tip.hideTip();
      });
    } }, { key: "mapTooltipXPosition", value: function(t4) {
      var e2 = this.state;
      if (e2.yExtremes) {
        var n3 = function(t5, e3) {
          var n4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], i4 = e3.reduce(function(e4, n5) {
            return Math.abs(n5 - t5) < Math.abs(e4 - t5) ? n5 : e4;
          }, []);
          return n4 ? e3.indexOf(i4) : i4;
        }(t4, e2.xAxis.positions, true);
        if (n3 >= 0) {
          var i3 = this.dataByIndex[n3];
          this.tip.setValues(i3.xPos + this.tip.offset.x, i3.yExtreme + this.tip.offset.y, { name: i3.formattedLabel, value: "" }, i3.values, n3), this.tip.showTip();
        }
      }
    } }, { key: "renderLegend", value: function() {
      var t4 = this.data;
      t4.datasets.length > 1 && c(s(r2.prototype), "renderLegend", this).call(this, t4.datasets);
    } }, { key: "makeLegend", value: function(t4, e2, n3, i3) {
      return Z2(n3, i3 + 5, 12, 3, this.colors[e2], t4.name, null, 8.75, this.config.truncateLegends);
    } }, { key: "makeOverlay", value: function() {
      var t4 = this;
      this.init ? this.init = 0 : (this.overlayGuides && this.overlayGuides.forEach(function(t5) {
        var e2 = t5.overlay;
        e2.parentNode.removeChild(e2);
      }), this.overlayGuides = this.dataUnitComponents.map(function(t5) {
        return { type: t5.unitType, overlay: void 0, units: t5.units };
      }), void 0 === this.state.currentIndex && (this.state.currentIndex = this.state.datasetLength - 1), this.overlayGuides.map(function(e2) {
        var n3 = e2.units[t4.state.currentIndex];
        e2.overlay = at2[e2.type](n3), t4.drawArea.appendChild(e2.overlay);
      }));
    } }, { key: "updateOverlayGuides", value: function() {
      this.overlayGuides && this.overlayGuides.forEach(function(t4) {
        var e2 = t4.overlay;
        e2.parentNode.removeChild(e2);
      });
    } }, { key: "bindOverlay", value: function() {
      var t4 = this;
      this.parent.addEventListener("data-select", function() {
        t4.updateOverlay();
      });
    } }, { key: "bindUnits", value: function() {
      var t4 = this;
      this.dataUnitComponents.map(function(e2) {
        e2.units.map(function(e3) {
          e3.addEventListener("click", function() {
            var n3 = e3.getAttribute("data-point-index");
            t4.setCurrentDataPoint(n3);
          });
        });
      }), this.tip.container.addEventListener("click", function() {
        var e2 = t4.tip.container.getAttribute("data-point-index");
        t4.setCurrentDataPoint(e2);
      });
    } }, { key: "updateOverlay", value: function() {
      var t4 = this;
      this.overlayGuides.map(function(e2) {
        var n3 = e2.units[t4.state.currentIndex];
        st2[e2.type](n3, e2.overlay);
      });
    } }, { key: "onLeftArrow", value: function() {
      this.setCurrentDataPoint(this.state.currentIndex - 1);
    } }, { key: "onRightArrow", value: function() {
      this.setCurrentDataPoint(this.state.currentIndex + 1);
    } }, { key: "getDataPoint", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.state.currentIndex, e2 = this.state, n3 = { index: t4, label: e2.xAxis.labels[t4], values: e2.datasets.map(function(e3) {
        return e3.values[t4];
      }) };
      return n3;
    } }, { key: "setCurrentDataPoint", value: function(t4) {
      var e2 = this.state;
      (t4 = parseInt(t4)) < 0 && (t4 = 0), t4 >= e2.xAxis.labels.length && (t4 = e2.xAxis.labels.length - 1), t4 !== e2.currentIndex && (e2.currentIndex = t4, function(t5, e3, n3) {
        var i3 = document.createEvent("HTMLEvents");
        for (var a2 in i3.initEvent(e3, true, true), n3)
          i3[a2] = n3[a2];
        t5.dispatchEvent(i3);
      }(this.parent, "data-select", this.getDataPoint()));
    } }, { key: "addDataPoint", value: function(t4, e2) {
      var n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.state.datasetLength;
      c(s(r2.prototype), "addDataPoint", this).call(this, t4, e2, n3), this.data.labels.splice(n3, 0, t4), this.data.datasets.map(function(t5, i3) {
        t5.values.splice(n3, 0, e2[i3]);
      }), this.update(this.data);
    } }, { key: "removeDataPoint", value: function() {
      var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.state.datasetLength - 1;
      this.data.labels.length <= 1 || (c(s(r2.prototype), "removeDataPoint", this).call(this, t4), this.data.labels.splice(t4, 1), this.data.datasets.map(function(e2) {
        e2.values.splice(t4, 1);
      }), this.update(this.data));
    } }, { key: "updateDataset", value: function(t4) {
      var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
      this.data.datasets[e2].values = t4, this.update(this.data);
    } }, { key: "updateDatasets", value: function(t4) {
      this.data.datasets.map(function(e2, n3) {
        t4[n3] && (e2.values = t4[n3]);
      }), this.update(this.data);
    } }]), r2;
  }();
  var qt2 = { bar: Ut2, line: Ut2, percentage: Ot2, heatmap: It, pie: Et2, donut: function(t3) {
    a(r2, Et2);
    var n2 = l(r2);
    function r2(t4, i3) {
      return e(this, r2), n2.call(this, t4, i3);
    }
    return i2(r2, [{ key: "configure", value: function(t4) {
      c(s(r2.prototype), "configure", this).call(this, t4), this.type = "donut", this.sliceName = "donutSlices", this.arcFunc = _, this.shapeFunc = X2, this.strokeWidth = t4.strokeWidth || 30;
    } }, { key: "getRadius", value: function() {
      return this.height > this.width ? this.center.x - this.strokeWidth / 2 : this.center.y - this.strokeWidth / 2;
    } }, { key: "resetHover", value: function(t4, e2) {
      dt2(t4, "translate3d(0,0,0)"), this.tip.hideTip(), t4.style.stroke = e2;
    } }, { key: "setupComponents", value: function() {
      var t4 = this.state, e2 = [[this.sliceName, {}, function() {
        return { sliceStrings: t4.sliceStrings, colors: this.colors, strokeWidth: this.strokeWidth };
      }.bind(this)]];
      this.components = new Map(e2.map(function(t5) {
        var e3 = Nt2.apply(void 0, u(t5));
        return [t5[0], e3];
      }));
    } }]), r2;
  }() };
  var Gt2 = function t2(n2, i3) {
    return e(this, t2), function() {
      var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "line", e2 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 ? arguments[2] : void 0;
      return "axis-mixed" === t3 ? (n3.type = "line", new Ut2(e2, n3)) : qt2[t3] ? new qt2[t3](e2, n3) : void console.error("Undefined chart type: " + t3);
    }(i3.type, n2, i3);
  };

  // frappe/public/js/frappe/ui/chart.js
  frappe.provide("frappe.ui");
  frappe.Chart = Gt2;
  frappe.ui.RealtimeChart = class RealtimeChart extends frappe.Chart {
    constructor(element, socketEvent, maxLabelPoints = 8, data) {
      super(element, data);
      if (data.data.datasets[0].values.length > maxLabelPoints) {
        frappe.throw(
          __(
            "Length of passed data array is greater than value of maximum allowed label points!"
          )
        );
      }
      this.currentSize = data.data.datasets[0].values.length;
      this.socketEvent = socketEvent;
      this.maxLabelPoints = maxLabelPoints;
      this.start_updating = function() {
        frappe.realtime.on(this.socketEvent, (data2) => {
          this.update_chart(data2.label, data2.points);
        });
      };
      this.stop_updating = function() {
        frappe.realtime.off(this.socketEvent);
      };
      this.update_chart = function(label, data2) {
        if (this.currentSize >= this.maxLabelPoints) {
          this.removeDataPoint(0);
        } else {
          this.currentSize++;
        }
        this.addDataPoint(label, data2);
      };
    }
  };

  // frappe/public/js/frappe/ui/datatable.js
  var import_frappe_datatable = __toESM(require_frappe_datatable_cjs());
  frappe.DataTable = import_frappe_datatable.default;

  // frappe/public/js/frappe/ui/driver.js
  var import_driver = __toESM(require_driver_min());
  frappe.Driver = import_driver.default;

  // frappe/public/js/frappe/scanner/index.js
  frappe.provide("frappe.ui");
  frappe.ui.Scanner = class Scanner {
    constructor(options) {
      this.dialog = null;
      this.handler = null;
      this.options = options;
      this.is_alive = false;
      if (!("multiple" in this.options)) {
        this.options.multiple = false;
      }
      if (options.container) {
        this.$scan_area = $(options.container);
        this.scan_area_id = frappe.dom.set_unique_id(this.$scan_area);
      }
      if (options.dialog) {
        this.dialog = this.make_dialog();
        this.dialog.show();
      }
    }
    scan() {
      this.load_lib().then(() => this.start_scan());
    }
    start_scan() {
      if (!this.handler) {
        this.handler = new Html5Qrcode(this.scan_area_id);
      }
      this.handler.start(
        { facingMode: "environment" },
        { fps: 10, qrbox: 250 },
        (decodedText, decodedResult) => {
          if (this.options.on_scan) {
            try {
              this.options.on_scan(decodedResult);
            } catch (error) {
              console.error(error);
            }
          }
          if (!this.options.multiple) {
            this.stop_scan();
            this.hide_dialog();
          }
        },
        (errorMessage) => {
        }
      ).catch((err) => {
        this.is_alive = false;
        this.hide_dialog();
        console.error(err);
      });
      this.is_alive = true;
    }
    stop_scan() {
      if (this.handler && this.is_alive) {
        this.handler.stop().then(() => {
          this.is_alive = false;
          this.$scan_area.empty();
          this.hide_dialog();
        });
      }
    }
    make_dialog() {
      let dialog = new frappe.ui.Dialog({
        title: __("Scan QRCode"),
        fields: [
          {
            fieldtype: "HTML",
            fieldname: "scan_area"
          }
        ],
        on_page_show: () => {
          this.$scan_area = dialog.get_field("scan_area").$wrapper;
          this.$scan_area.addClass("barcode-scanner");
          this.scan_area_id = frappe.dom.set_unique_id(this.$scan_area);
          this.scan();
        },
        on_hide: () => {
          this.stop_scan();
        }
      });
      return dialog;
    }
    hide_dialog() {
      this.dialog && this.dialog.hide();
    }
    load_lib() {
      return frappe.require("/assets/frappe/node_modules/html5-qrcode/html5-qrcode.min.js");
    }
  };
})();
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
/*!
 * CodeX.Tooltips
 * 
 * @version 1.0.5
 * 
 * @licence MIT
 * @author CodeX <https://codex.so>
 * 
 * 
 */
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*!
 * Library for handling keyboard shortcuts
 * @copyright CodeX (https://codex.so)
 * @license MIT
 * @author CodeX (https://codex.so)
 * @version 1.2.0
 */
/*! Sortable 1.15.0 - MIT | git://github.com/SortableJS/Sortable.git */
/*! showdown v 2.1.0 - 21-04-2022 */
/**
 * Base Paragraph Block for the Editor.js.
 * Represents simple paragraph
 *
 * @author CodeX (team@codex.so)
 * @copyright CodeX 2018
 * @license The MIT License (MIT)
 */
/**
 * Editor.js
 *
 * @license Apache-2.0
 * @see Editor.js <https://editorjs.io>
 * @author CodeX Team <https://codex.so>
 */
//# sourceMappingURL=desk.bundle.RX5SGPY6.js.map
