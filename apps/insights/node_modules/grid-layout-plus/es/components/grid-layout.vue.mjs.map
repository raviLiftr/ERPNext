{"version":3,"file":"grid-layout.vue.mjs","sources":["../../src/components/grid-layout.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n  ref,\n  reactive,\n  toRefs,\n  watch,\n  provide,\n  onBeforeMount,\n  onMounted,\n  onBeforeUnmount,\n  nextTick\n} from 'vue'\nimport GridItem from './grid-item.vue'\nimport { useResize } from '@vexip-ui/hooks'\nimport { createEventEmitter, isNull, debounce } from '@vexip-ui/utils'\nimport {\n  LAYOUT_KEY,\n  EMITTER_KEY,\n  bottom,\n  compact,\n  getLayoutItem,\n  moveElement,\n  validateLayout,\n  cloneLayout,\n  getAllCollisions\n} from '../helpers/common'\nimport {\n  getBreakpointFromWidth,\n  getColsFromBreakpoint,\n  findOrGenerateResponsiveLayout\n} from '../helpers/responsive'\n\nimport type { PropType } from 'vue'\nimport type {\n  Layout,\n  Breakpoint,\n  Breakpoints,\n  ResponsiveLayout,\n  LayoutInstance\n} from '../helpers/types'\n\nconst props = defineProps({\n  autoSize: {\n    type: Boolean,\n    default: true\n  },\n  colNum: {\n    type: Number,\n    default: 12\n  },\n  rowHeight: {\n    type: Number,\n    default: 150\n  },\n  maxRows: {\n    type: Number,\n    default: Infinity\n  },\n  margin: {\n    type: Array as PropType<number[]>,\n    default: () => [10, 10]\n  },\n  isDraggable: {\n    type: Boolean,\n    default: true\n  },\n  isResizable: {\n    type: Boolean,\n    default: true\n  },\n  isMirrored: {\n    type: Boolean,\n    default: false\n  },\n  isBounded: {\n    type: Boolean,\n    default: false\n  },\n  useCssTransforms: {\n    type: Boolean,\n    default: true\n  },\n  verticalCompact: {\n    type: Boolean,\n    default: true\n  },\n  restoreOnDrag: {\n    type: Boolean,\n    default: false\n  },\n  layout: {\n    type: Array as PropType<Layout>,\n    required: true\n  },\n  responsive: {\n    type: Boolean,\n    default: false\n  },\n  responsiveLayouts: {\n    type: Object as PropType<Partial<ResponsiveLayout>>,\n    default: () => ({})\n  },\n  transformScale: {\n    type: Number,\n    default: 1\n  },\n  breakpoints: {\n    type: Object as PropType<Breakpoints>,\n    default: () => ({ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 })\n  },\n  cols: {\n    type: Object as PropType<Breakpoints>,\n    default: () => ({ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 })\n  },\n  preventCollision: {\n    type: Boolean,\n    default: false\n  },\n  useStyleCursor: {\n    type: Boolean,\n    default: true\n  }\n})\n\nconst emit = defineEmits([\n  'layout-before-mount',\n  'layout-mounted',\n  'layout-updated',\n  'breakpoint-changed',\n  'update:layout',\n  'layout-ready'\n])\n\nconst state = reactive({\n  width: -1,\n  mergedStyle: {},\n  lastLayoutLength: 0,\n  isDragging: false,\n  placeholder: {\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0,\n    i: '' as number | string\n  },\n  layouts: {} as Record<Breakpoint, Layout>, // array to store all layouts from different breakpoints\n  lastBreakpoint: null as Breakpoint | null, // store last active breakpoint\n  originalLayout: null! as Layout // store original Layout\n})\n\nconst itemInstances = new Map<number | string, any>()\n\nconst currentLayout = ref(props.layout)\nconst wrapper = ref<HTMLElement>()\n\nconst { observeResize, unobserveResize } = useResize()\nconst emitter = createEventEmitter()\n\nemitter.on('resizeEvent', resizeEventHandler)\nemitter.on('dragEvent', dragEventHandler)\n\nonBeforeMount(() => {\n  emit('layout-before-mount', currentLayout.value)\n})\n\nonMounted(() => {\n  emit('layout-mounted', currentLayout.value)\n\n  nextTick(() => {\n    validateLayout(currentLayout.value)\n\n    state.originalLayout = currentLayout.value\n\n    nextTick(() => {\n      initResponsiveFeatures()\n      wrapper.value && observeResize(wrapper.value, debounce(onWindowResize, 16))\n      compact(currentLayout.value, props.verticalCompact)\n      emit('layout-updated', currentLayout.value)\n      updateHeight()\n      onWindowResize()\n    })\n  })\n})\n\nonBeforeUnmount(() => {\n  emitter.clearAll()\n  wrapper.value && unobserveResize(wrapper.value)\n})\n\nfunction resizeEventHandler(\n  eventType: string,\n  i: number | string,\n  x: number,\n  y: number,\n  h: number,\n  w: number\n) {\n  resizeEvent(eventType, i, x, y, h, w)\n}\n\nfunction dragEventHandler(\n  eventType: string,\n  i: number | string,\n  x: number,\n  y: number,\n  h: number,\n  w: number\n) {\n  dragEvent(eventType, i, x, y, h, w)\n}\n\nwatch(\n  () => state.width,\n  (newval, oldval) => {\n    nextTick(() => {\n      emitter.emit('updateWidth', newval)\n      if (oldval === null) {\n        /*\n        If oldval == null is when the width has never been\n        set before. That only occurs when mouting is\n        finished, and onWindowResize has been called and\n        this.width has been changed the first time after it\n        got set to null in the constructor. It is now time\n        to issue layout-ready events as the GridItems have\n        their sizes configured properly.\n\n        The reason for emitting the layout-ready events on\n        the next tick is to allow for the newly-emitted\n        updateWidth event (above) to have reached the\n        children GridItem-s and had their effect, so we're\n        sure that they have the final size before we emit\n        layout-ready (for this GridLayout) and\n        item-layout-ready (for the GridItem-s).\n\n        This way any client event handlers can reliably\n        invistigate stable sizes of GridItem-s.\n      */\n        nextTick(() => {\n          emit('layout-ready', currentLayout.value)\n        })\n      }\n      updateHeight()\n    })\n  }\n)\nwatch(\n  () => [props.layout, props.layout.length],\n  () => {\n    currentLayout.value = props.layout\n    layoutUpdate()\n  }\n)\nwatch(\n  () => props.colNum,\n  val => {\n    emitter.emit('setColNum', val)\n  }\n)\nwatch(\n  () => props.rowHeight,\n  value => {\n    emitter.emit('setRowHeight', value)\n  }\n)\nwatch(\n  () => props.isDraggable,\n  value => {\n    emitter.emit('setDraggable', value)\n  }\n)\nwatch(\n  () => props.isResizable,\n  value => {\n    emitter.emit('setResizable', value)\n  }\n)\nwatch(\n  () => props.isBounded,\n  value => {\n    emitter.emit('setBounded', value)\n  }\n)\nwatch(\n  () => props.transformScale,\n  value => {\n    emitter.emit('setTransformScale', value)\n  }\n)\nwatch(\n  () => props.responsive,\n  value => {\n    if (!value) {\n      emit('update:layout', state.originalLayout)\n      emitter.emit('setColNum', props.colNum)\n    }\n    onWindowResize()\n  }\n)\nwatch(\n  () => props.maxRows,\n  value => {\n    emitter.emit('setMaxRows', value)\n  }\n)\nwatch(() => props.margin, updateHeight)\n\nprovide(\n  LAYOUT_KEY,\n  reactive({\n    ...toRefs(props),\n    ...toRefs(state),\n    increaseItem,\n    decreaseItem\n  }) as LayoutInstance\n)\nprovide(EMITTER_KEY, emitter)\n\ndefineExpose({ state, getItem, resizeEvent, dragEvent })\n\nfunction increaseItem(item: any) {\n  itemInstances.set(item.i, item)\n}\n\nfunction decreaseItem(item: any) {\n  itemInstances.delete(item.i)\n}\n\nfunction getItem(id: number | string) {\n  return itemInstances.get(id)\n}\n\nfunction layoutUpdate() {\n  if (!isNull(currentLayout.value) && !isNull(state.originalLayout)) {\n    if (currentLayout.value.length !== state.originalLayout.length) {\n      const diff = findDifference(currentLayout.value, state.originalLayout)\n\n      if (diff.length > 0) {\n        if (currentLayout.value.length > state.originalLayout.length) {\n          state.originalLayout = state.originalLayout.concat(diff)\n        } else {\n          const ids = new Set(diff.map(item => item.i))\n          state.originalLayout = state.originalLayout.filter(item => !ids.has(item.i))\n        }\n      }\n\n      state.lastLayoutLength = currentLayout.value.length\n      initResponsiveFeatures()\n    }\n\n    compact(currentLayout.value, props.verticalCompact)\n    emitter.emit('updateWidth', state.width)\n    updateHeight()\n\n    emit('layout-updated', currentLayout.value)\n  }\n}\n\nfunction updateHeight() {\n  state.mergedStyle = {\n    height: containerHeight()\n  }\n}\n\nfunction onWindowResize() {\n  if (wrapper.value) {\n    state.width = wrapper.value.offsetWidth\n  }\n\n  emitter.emit('resizeEvent')\n}\n\nfunction containerHeight() {\n  if (!props.autoSize) return\n\n  const containerHeight =\n    bottom(currentLayout.value) * (props.rowHeight + props.margin[1]) + props.margin[1] + 'px'\n  return containerHeight\n}\n\nlet positionsBeforeDrag: Record<string, { x: number, y: number }> | undefined\n\nfunction dragEvent(\n  eventName: string,\n  id: number | string,\n  x: number,\n  y: number,\n  h: number,\n  w: number\n) {\n  let l = getLayoutItem(currentLayout.value, id)!\n\n  // GetLayoutItem sometimes returns null object\n  if (isNull(l)) {\n    l = { h: 0, w: 0, x: 0, y: 0, i: '' }\n  }\n\n  if (eventName === 'dragstart' && !props.verticalCompact) {\n    positionsBeforeDrag = currentLayout.value.reduce(\n      (result, { i, x, y }) => ({\n        ...result,\n        [i]: { x, y }\n      }),\n      {}\n    )\n  }\n\n  if (eventName === 'dragmove' || eventName === 'dragstart') {\n    state.placeholder.i = id\n    state.placeholder.x = l.x\n    state.placeholder.y = l.y\n    state.placeholder.w = w\n    state.placeholder.h = h\n\n    nextTick(() => {\n      state.isDragging = true\n    })\n\n    emitter.emit('updateWidth', state.width)\n  } else {\n    nextTick(() => {\n      state.isDragging = false\n    })\n  }\n\n  // Move the element to the dragged location.\n  currentLayout.value = moveElement(currentLayout.value, l, x, y, true, props.preventCollision)\n\n  if (props.restoreOnDrag) {\n    // Do not compact items more than in layout before drag\n    // Set moved item as static to avoid to compact it\n    l.static = true\n    compact(currentLayout.value, props.verticalCompact, positionsBeforeDrag)\n    l.static = false\n  } else {\n    compact(currentLayout.value, props.verticalCompact)\n  }\n\n  // needed because vue can't detect changes on array element properties\n  emitter.emit('compact')\n  updateHeight()\n  if (eventName === 'dragend') {\n    positionsBeforeDrag = undefined\n    emit('layout-updated', currentLayout.value)\n  }\n}\n\nfunction resizeEvent(\n  eventName: string,\n  id: number | string,\n  x: number,\n  y: number,\n  h: number,\n  w: number\n) {\n  let l = getLayoutItem(currentLayout.value, id)!\n  // GetLayoutItem sometimes return null object\n  if (isNull(l)) {\n    l = { h: 0, w: 0, x: 0, y: 0, i: '' }\n  }\n\n  let hasCollisions\n  if (props.preventCollision) {\n    const collisions = getAllCollisions(currentLayout.value, { ...l, w, h }).filter(\n      layoutItem => layoutItem.i !== l.i\n    )\n    hasCollisions = collisions.length > 0\n\n    // If we're colliding, we need adjust the placeholder.\n    if (hasCollisions) {\n      // adjust w && h to maximum allowed space\n      let leastX = Infinity\n      let leastY = Infinity\n      collisions.forEach(layoutItem => {\n        if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x)\n        if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y)\n      })\n\n      if (Number.isFinite(leastX)) l.w = leastX - l.x\n      if (Number.isFinite(leastY)) l.h = leastY - l.y\n    }\n  }\n\n  if (!hasCollisions) {\n    // Set new width and height.\n    l.w = w\n    l.h = h\n  }\n\n  if (eventName === 'resizestart' || eventName === 'resizemove') {\n    state.placeholder.i = id\n    state.placeholder.x = x\n    state.placeholder.y = y\n    state.placeholder.w = l.w\n    state.placeholder.h = l.h\n    nextTick(() => {\n      state.isDragging = true\n    })\n    // this.$broadcast(\"updateWidth\", this.width);\n    emitter.emit('updateWidth', state.width)\n  } else {\n    nextTick(() => {\n      state.isDragging = false\n    })\n  }\n\n  if (props.responsive) responsiveGridLayout()\n\n  compact(currentLayout.value, props.verticalCompact)\n  emitter.emit('compact')\n  updateHeight()\n\n  if (eventName === 'resizeend') emit('layout-updated', currentLayout.value)\n}\n\nfunction responsiveGridLayout() {\n  const newBreakpoint = getBreakpointFromWidth(props.breakpoints, state.width)\n  const newCols = getColsFromBreakpoint(newBreakpoint, props.cols)\n\n  // save actual layout in layouts\n  if (!isNull(state.lastBreakpoint) && !state.layouts[state.lastBreakpoint]) {\n    state.layouts[state.lastBreakpoint] = cloneLayout(currentLayout.value)\n  }\n\n  // Find or generate a new layout.\n  const layout = findOrGenerateResponsiveLayout(\n    state.originalLayout,\n    state.layouts,\n    props.breakpoints,\n    newBreakpoint,\n    state.lastBreakpoint!,\n    newCols,\n    props.verticalCompact\n  )\n\n  // Store the new layout.\n  state.layouts[newBreakpoint] = layout\n\n  if (state.lastBreakpoint !== newBreakpoint) {\n    emit('breakpoint-changed', newBreakpoint, layout)\n  }\n\n  // new prop sync\n  emit('update:layout', layout)\n\n  state.lastBreakpoint = newBreakpoint\n  emitter.emit('setColNum', getColsFromBreakpoint(newBreakpoint, props.cols))\n}\n\nfunction initResponsiveFeatures() {\n  // clear layouts\n  state.layouts = Object.assign({} as Record<Breakpoint, Layout>, props.responsiveLayouts)\n}\n\nfunction findDifference(layout: Layout, originalLayout: Layout) {\n  const originalIds = new Set(originalLayout.map(item => item.i))\n  const ids = new Set(layout.map(item => item.i))\n\n  // Find values that are in result1 but not in result2\n  const uniqueResultOne = layout.filter(item => !originalIds.has(item.i))\n\n  // Find values that are in result2 but not in result1\n  const uniqueResultTwo = originalLayout.filter(item => !ids.has(item.i))\n\n  // Combine the two arrays of unique entries#\n  return uniqueResultOne.concat(uniqueResultTwo)\n}\n</script>\n\n<template>\n  <div ref=\"wrapper\" class=\"vgl-layout\" :style=\"state.mergedStyle\">\n    <slot v-if=\"$slots.default\"></slot>\n    <template v-else>\n      <GridItem v-for=\"item in currentLayout\" :key=\"item.i\" v-bind=\"item\">\n        <slot name=\"item\" :item=\"item\"></slot>\n      </GridItem>\n    </template>\n    <GridItem\n      v-show=\"state.isDragging\"\n      class=\"vgl-item--placeholder\"\n      :x=\"state.placeholder.x\"\n      :y=\"state.placeholder.y\"\n      :w=\"state.placeholder.w\"\n      :h=\"state.placeholder.h\"\n      :i=\"state.placeholder.i\"\n    ></GridItem>\n  </div>\n</template>\n"],"names":["state","reactive","itemInstances","currentLayout","ref","props","wrapper","observeResize","unobserveResize","useResize","emitter","createEventEmitter","resizeEventHandler","dragEventHandler","onBeforeMount","emit","onMounted","nextTick","validateLayout","initResponsiveFeatures","debounce","onWindowResize","compact","updateHeight","onBeforeUnmount","eventType","i","x","y","h","w","resizeEvent","dragEvent","watch","newval","oldval","layoutUpdate","val","value","provide","LAYOUT_KEY","toRefs","increaseItem","decreaseItem","EMITTER_KEY","expose","getItem","item","id","isNull","diff","findDifference","ids","containerHeight","bottom","positionsBeforeDrag","eventName","l","getLayoutItem","result","moveElement","hasCollisions","collisions","getAllCollisions","layoutItem","leastX","leastY","responsiveGridLayout","newBreakpoint","getBreakpointFromWidth","newCols","getColsFromBreakpoint","cloneLayout","layout","findOrGenerateResponsiveLayout","originalLayout","originalIds","uniqueResultOne","uniqueResultTwo"],"mappings":"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"}